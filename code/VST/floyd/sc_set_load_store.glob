DIGEST de76adeccd0608747f1dd56e70e81c44
FVST.floyd.sc_set_load_store
R15:29 VST.floyd.base2 <> <> lib
R47:69 VST.floyd.client_lemmas <> <> lib
R87:115 VST.floyd.nested_field_lemmas <> <> lib
R133:155 VST.floyd.efield_lemmas <> <> lib
R173:196 VST.floyd.reptype_lemmas <> <> lib
R214:242 VST.floyd.proj_reptype_lemmas <> <> lib
R260:298 VST.floyd.replace_refill_reptype_lemmas <> <> lib
R316:344 VST.floyd.mapsto_memory_block <> <> lib
R362:389 VST.floyd.data_at_rec_lemmas <> <> lib
R407:424 VST.floyd.field_at <> <> lib
R442:459 VST.floyd.stronger <> <> lib
R477:494 VST.floyd.entailer <> <> lib
R512:534 VST.floyd.closed_lemmas <> <> lib
R552:577 VST.floyd.loadstore_mapsto <> <> lib
R595:622 VST.floyd.loadstore_field_at <> <> lib
R640:665 VST.floyd.nested_loadstore <> <> lib
R683:710 VST.floyd.local2ptree_denote <> <> lib
R728:753 VST.floyd.local2ptree_eval <> <> lib
R771:793 VST.floyd.simpl_reptype <> <> lib
sec 851:858 <> SEMAX_SC
R875:883 VST.veric.mpred <> compspecs class
binder 871:872 <> cs:1
prf 894:905 <> semax_SC_set
R925:934 VST.veric.juicy_extspec <> OracleKind class
binder 918:922 <> Espec:2
binder 949:953 <> Delta:3
binder 955:956 <> id:4
binder 958:958 <> P:5
binder 960:960 <> Q:6
binder 962:962 <> R:7
R969:972 compcert.cfrontend.Clight <> expr ind
binder 965:966 <> e2:8
binder 975:975 <> t:9
binder 977:977 <> v:10
R1015:1024 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1078:1087 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1164:1173 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1247:1256 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1257:1261 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R1333:1349 VST.veric.SeparationLogic <> normal_ret_assert def
R1364:1368 VST.floyd.canon <> PROPx def
R1387:1392 VST.floyd.canon <> LOCALx def
R1452:1455 VST.floyd.canon <> SEPx def
R1457:1457 VST.floyd.sc_set_load_store <> R:7 var
R1404:1407 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R1395:1398 VST.floyd.canon <> temp constr
R1403:1403 VST.floyd.sc_set_load_store <> v:10 var
R1400:1401 VST.floyd.sc_set_load_store <> id:4 var
R1408:1427 VST.floyd.client_lemmas <> remove_localdef_temp def
R1432:1432 VST.floyd.sc_set_load_store <> Q:6 var
R1429:1430 VST.floyd.sc_set_load_store <> id:4 var
R1370:1370 VST.floyd.sc_set_load_store <> P:5 var
R1310:1313 compcert.cfrontend.Clight <> Sset constr
R1318:1319 VST.floyd.sc_set_load_store <> e2:8 var
R1315:1316 VST.floyd.sc_set_load_store <> id:4 var
R1270:1271 VST.msl.seplog <> ::logic:'|>'_x not
R1272:1276 VST.floyd.canon <> PROPx def
R1281:1286 VST.floyd.canon <> LOCALx def
R1291:1294 VST.floyd.canon <> SEPx def
R1296:1296 VST.floyd.sc_set_load_store <> R:7 var
R1288:1288 VST.floyd.sc_set_load_store <> Q:6 var
R1278:1278 VST.floyd.sc_set_load_store <> P:5 var
R1263:1267 VST.floyd.sc_set_load_store <> Delta:3 var
R1174:1180 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1186:1187 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1215:1229 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1246:1246 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1181:1185 VST.floyd.sc_set_load_store <> Delta:3 var
R1188:1192 VST.floyd.canon <> PROPx def
R1197:1202 VST.floyd.canon <> LOCALx def
R1207:1210 VST.floyd.canon <> SEPx def
R1212:1212 VST.floyd.sc_set_load_store <> R:7 var
R1204:1204 VST.floyd.sc_set_load_store <> Q:6 var
R1194:1194 VST.floyd.sc_set_load_store <> P:5 var
R1230:1236 VST.veric.SeparationLogic <> tc_expr def
R1244:1245 VST.floyd.sc_set_load_store <> e2:8 var
R1238:1242 VST.floyd.sc_set_load_store <> Delta:3 var
R1088:1094 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1100:1101 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1129:1133 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1095:1099 VST.floyd.sc_set_load_store <> Delta:3 var
R1102:1106 VST.floyd.canon <> PROPx def
R1111:1116 VST.floyd.canon <> LOCALx def
R1121:1124 VST.floyd.canon <> SEPx def
R1126:1126 VST.floyd.sc_set_load_store <> R:7 var
R1118:1118 VST.floyd.sc_set_load_store <> Q:6 var
R1108:1108 VST.floyd.sc_set_load_store <> P:5 var
R1134:1138 VST.veric.SeparationLogic <> local def
R1141:1142 VST.veric.lift LiftNotation :::'`('_x_')' not
R1147:1162 VST.veric.lift LiftNotation :::'`('_x_')' not
R1143:1144 Coq.Init.Logic <> eq ind
R1146:1146 VST.floyd.sc_set_load_store <> v:10 var
R1150:1158 VST.veric.expr <> eval_expr def
R1160:1161 VST.floyd.sc_set_load_store <> e2:8 var
R1071:1073 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1025:1039 VST.veric.expr <> is_neutral_cast def
R1070:1070 VST.floyd.sc_set_load_store <> t:9 var
R1042:1055 VST.veric.expr <> implicit_deref def
R1058:1063 compcert.cfrontend.Clight <> typeof def
R1065:1066 VST.floyd.sc_set_load_store <> e2:8 var
R1074:1077 Coq.Init.Datatypes <> true constr
R1006:1008 Coq.Init.Logic <> ::type_scope:x_'='_x not
R986:996 VST.veric.SeparationLogic <> typeof_temp def
R1004:1005 VST.floyd.sc_set_load_store <> id:4 var
R998:1002 VST.floyd.sc_set_load_store <> Delta:3 var
R1009:1012 Coq.Init.Datatypes <> Some constr
R1014:1014 VST.floyd.sc_set_load_store <> t:9 var
R1496:1501 VST.veric.Cop2 <> tc_val def
R1504:1509 compcert.cfrontend.Clight <> typeof def
R1496:1501 VST.veric.Cop2 <> tc_val def
R1504:1509 compcert.cfrontend.Clight <> typeof def
R1536:1543 VST.msl.log_normalize <> add_andp thm
R1555:1562 VST.msl.log_normalize <> add_andp thm
R1536:1543 VST.msl.log_normalize <> add_andp thm
R1536:1543 VST.msl.log_normalize <> add_andp thm
R1555:1562 VST.msl.log_normalize <> add_andp thm
R1555:1562 VST.msl.log_normalize <> add_andp thm
R1612:1616 VST.veric.SeparationLogic <> local def
R1619:1623 VST.veric.mpred <> lift1 def
R1658:1667 VST.msl.seplog <> andp_left2 meth
R1658:1667 VST.msl.seplog <> andp_left2 meth
R1680:1699 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R1680:1699 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R1723:1726 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R1727:1732 compcert.common.Values <> Vundef constr
R1768:1780 VST.veric.Cop2 <> tc_val_Vundef thm
R1723:1726 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R1727:1732 compcert.common.Values <> Vundef constr
R1768:1780 VST.veric.Cop2 <> tc_val_Vundef thm
R1818:1824 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1830:1831 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1859:1868 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1832:1836 VST.floyd.canon <> PROPx def
R1841:1846 VST.floyd.canon <> LOCALx def
R1851:1854 VST.floyd.canon <> SEPx def
R1869:1869 VST.msl.seplog <> ::logic:x_'&&'_x not
R1886:1892 VST.msl.seplog <> ::logic:x_'&&'_x not
R1927:1927 VST.msl.seplog <> ::logic:x_'&&'_x not
R1870:1876 VST.veric.SeparationLogic <> tc_expr def
R1893:1902 VST.veric.SeparationLogic <> tc_temp_id def
R1908:1913 compcert.cfrontend.Clight <> typeof def
R1818:1824 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1830:1831 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1859:1868 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R1832:1836 VST.floyd.canon <> PROPx def
R1841:1846 VST.floyd.canon <> LOCALx def
R1851:1854 VST.floyd.canon <> SEPx def
R1869:1869 VST.msl.seplog <> ::logic:x_'&&'_x not
R1886:1892 VST.msl.seplog <> ::logic:x_'&&'_x not
R1927:1927 VST.msl.seplog <> ::logic:x_'&&'_x not
R1870:1876 VST.veric.SeparationLogic <> tc_expr def
R1893:1902 VST.veric.SeparationLogic <> tc_temp_id def
R1908:1913 compcert.cfrontend.Clight <> typeof def
R1945:1954 VST.msl.seplog <> andp_right meth
R1945:1954 VST.msl.seplog <> andp_right meth
R1982:1991 VST.veric.SeparationLogic <> tc_temp_id def
R2007:2023 VST.veric.expr <> typecheck_temp_id def
R2039:2049 VST.veric.SeparationLogic <> typeof_temp def
R2073:2073 compcert.lib.Maps <> :::x_'!'_x not
R2090:2093 compcert.lib.Maps <> :::x_'!'_x not
R2074:2083 VST.veric.seplog <> temp_types def
R2073:2073 compcert.lib.Maps <> :::x_'!'_x not
R2090:2093 compcert.lib.Maps <> :::x_'!'_x not
R2074:2083 VST.veric.seplog <> temp_types def
R2235:2239 VST.veric.SeparationLogic <> local def
R2242:2246 VST.veric.mpred <> lift1 def
R2261:2284 VST.floyd.typecheck_lemmas <> neutral_isCastResultType thm
R2261:2284 VST.floyd.typecheck_lemmas <> neutral_isCastResultType thm
R2304:2319 VST.floyd.canon <> semax_pre_simple thm
R2304:2319 VST.floyd.canon <> semax_pre_simple thm
R2361:2368 VST.msl.log_normalize <> add_andp thm
R2361:2368 VST.msl.log_normalize <> add_andp thm
R2361:2368 VST.msl.log_normalize <> add_andp thm
R2391:2399 VST.msl.log_normalize <> andp_comm thm
R2391:2399 VST.msl.log_normalize <> andp_comm thm
R2391:2399 VST.msl.log_normalize <> andp_comm thm
R2415:2422 VST.msl.log_normalize <> add_andp thm
R2415:2422 VST.msl.log_normalize <> add_andp thm
R2415:2422 VST.msl.log_normalize <> add_andp thm
R2443:2455 VST.msl.log_normalize <> later_derives thm
R2443:2455 VST.msl.log_normalize <> later_derives thm
R2468:2479 VST.msl.log_normalize <> andp_derives thm
R2489:2500 VST.msl.seplog <> derives_refl meth
R2468:2479 VST.msl.log_normalize <> andp_derives thm
R2489:2500 VST.msl.seplog <> derives_refl meth
R2516:2527 VST.msl.log_normalize <> andp_derives thm
R2539:2550 VST.msl.seplog <> derives_refl meth
R2516:2527 VST.msl.log_normalize <> andp_derives thm
R2539:2550 VST.msl.seplog <> derives_refl meth
R2564:2573 VST.msl.seplog <> andp_left2 meth
R2564:2573 VST.msl.seplog <> andp_left2 meth
R2586:2597 VST.msl.seplog <> derives_refl meth
R2586:2597 VST.msl.seplog <> derives_refl meth
R2613:2623 VST.floyd.canon <> semax_post' thm
R2635:2651 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_set_forward prfax
R2613:2623 VST.floyd.canon <> semax_post' thm
R2635:2651 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_set_forward prfax
R2663:2672 VST.msl.seplog <> andp_left2 meth
R2689:2700 VST.floyd.canon <> insert_local thm
R2663:2672 VST.msl.seplog <> andp_left2 meth
R2689:2700 VST.floyd.canon <> insert_local thm
R2689:2700 VST.floyd.canon <> insert_local thm
R2712:2724 VST.msl.seplog <> derives_trans meth
R2736:2747 VST.msl.log_normalize <> andp_derives thm
R2757:2768 VST.msl.seplog <> derives_refl meth
R2778:2802 VST.floyd.client_lemmas <> remove_localdef_temp_PROP thm
R2712:2724 VST.msl.seplog <> derives_trans meth
R2736:2747 VST.msl.log_normalize <> andp_derives thm
R2757:2768 VST.msl.seplog <> derives_refl meth
R2778:2802 VST.floyd.client_lemmas <> remove_localdef_temp_PROP thm
R2829:2837 VST.msl.seplog <> exp_right meth
R2829:2837 VST.msl.seplog <> exp_right meth
R2881:2889 VST.msl.log_normalize <> andp_comm thm
R2892:2901 VST.msl.log_normalize <> andp_assoc thm
R2904:2912 VST.msl.log_normalize <> andp_comm thm
R2881:2889 VST.msl.log_normalize <> andp_comm thm
R2881:2889 VST.msl.log_normalize <> andp_comm thm
R2892:2901 VST.msl.log_normalize <> andp_assoc thm
R2892:2901 VST.msl.log_normalize <> andp_assoc thm
R2904:2912 VST.msl.log_normalize <> andp_comm thm
R2904:2912 VST.msl.log_normalize <> andp_comm thm
R2923:2934 VST.msl.log_normalize <> andp_derives thm
R2923:2934 VST.msl.log_normalize <> andp_derives thm
R2959:2963 VST.veric.SeparationLogic <> local def
R2966:2970 VST.veric.mpred <> lift1 def
prf 3029:3047 <> semax_SC_field_load
R3067:3076 VST.veric.juicy_extspec <> OracleKind class
binder 3060:3064 <> Espec:11
binder 3079:3079 <> n:12
R3089:3097 VST.veric.seplog <> tycontext ind
binder 3082:3086 <> Delta:13
binder 3100:3101 <> sh:14
binder 3103:3104 <> id:15
binder 3106:3106 <> P:16
binder 3108:3108 <> Q:17
binder 3110:3110 <> R:18
binder 3112:3113 <> e1:19
binder 3119:3122 <> t_id:20
binder 3124:3129 <> t_root:21
binder 3131:3134 <> gfs0:22
binder 3136:3139 <> gfs1:23
binder 3141:3143 <> gfs:24
R3155:3157 compcert.common.Values <> val ind
binder 3146:3146 <> p:25
binder 3148:3152 <> v_val:26
R3172:3178 VST.floyd.reptype_lemmas <> reptype def
R3181:3197 VST.floyd.nested_field_lemmas <> nested_field_type def
R3206:3209 VST.floyd.sc_set_load_store <> gfs0:22 var
R3199:3204 VST.floyd.sc_set_load_store <> t_root:21 var
binder 3161:3169 <> v_reptype:27
R3258:3265 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3298:3305 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3364:3371 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3427:3434 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3547:3554 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3613:3620 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3639:3646 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3664:3671 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3744:3751 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3882:3889 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3891:3895 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R3971:3987 VST.veric.SeparationLogic <> normal_ret_assert def
R3999:4003 VST.floyd.canon <> PROPx def
R4019:4024 VST.floyd.canon <> LOCALx def
R4085:4088 VST.floyd.canon <> SEPx def
R4090:4090 VST.floyd.sc_set_load_store <> R:18 var
R4040:4043 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R4027:4030 VST.floyd.canon <> temp constr
R4035:4039 VST.floyd.sc_set_load_store <> v_val:26 var
R4032:4033 VST.floyd.sc_set_load_store <> id:15 var
R4044:4063 VST.floyd.client_lemmas <> remove_localdef_temp def
R4068:4068 VST.floyd.sc_set_load_store <> Q:17 var
R4065:4066 VST.floyd.sc_set_load_store <> id:15 var
R4005:4005 VST.floyd.sc_set_load_store <> P:16 var
R3952:3955 compcert.cfrontend.Clight <> Sset constr
R3960:3961 VST.floyd.sc_set_load_store <> e1:19 var
R3957:3958 VST.floyd.sc_set_load_store <> id:15 var
R3913:3915 VST.msl.seplog <> ::logic:'|>'_x not
R3916:3920 VST.floyd.canon <> PROPx def
R3925:3930 VST.floyd.canon <> LOCALx def
R3935:3938 VST.floyd.canon <> SEPx def
R3940:3940 VST.floyd.sc_set_load_store <> R:18 var
R3932:3932 VST.floyd.sc_set_load_store <> Q:17 var
R3922:3922 VST.floyd.sc_set_load_store <> P:16 var
R3906:3910 VST.floyd.sc_set_load_store <> Delta:13 var
R3900:3904 VST.floyd.sc_set_load_store <> Espec:11 var
R3897:3898 VST.floyd.sc_set_load_store <> SEMAX_SC.cs var
R3752:3758 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R3764:3765 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R3793:3803 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R3759:3763 VST.floyd.sc_set_load_store <> Delta:13 var
R3766:3770 VST.floyd.canon <> PROPx def
R3775:3780 VST.floyd.canon <> LOCALx def
R3785:3788 VST.floyd.canon <> SEPx def
R3790:3790 VST.floyd.sc_set_load_store <> R:18 var
R3782:3782 VST.floyd.sc_set_load_store <> Q:17 var
R3772:3772 VST.floyd.sc_set_load_store <> P:16 var
R3804:3804 VST.msl.seplog <> ::logic:x_'&&'_x not
R3823:3827 VST.msl.seplog <> ::logic:x_'&&'_x not
R3805:3813 VST.veric.SeparationLogic <> tc_lvalue def
R3821:3822 VST.floyd.sc_set_load_store <> e1:19 var
R3815:3819 VST.floyd.sc_set_load_store <> Delta:13 var
R3828:3832 VST.veric.SeparationLogic <> local def
R3835:3836 VST.veric.lift LiftNotation :::'`('_x_')' not
R3880:3880 VST.veric.lift LiftNotation :::'`('_x_')' not
R3837:3842 VST.veric.Cop2 <> tc_val def
R3875:3879 VST.floyd.sc_set_load_store <> v_val:26 var
R3845:3861 VST.floyd.nested_field_lemmas <> nested_field_type def
R3870:3872 VST.floyd.sc_set_load_store <> gfs:24 var
R3863:3868 VST.floyd.sc_set_load_store <> t_root:21 var
R3672:3675 VST.floyd.jmeq_lemmas <> JMeq def
R3739:3743 VST.floyd.sc_set_load_store <> v_val:26 var
R3678:3689 VST.floyd.proj_reptype_lemmas <> proj_reptype def
R3728:3736 VST.floyd.sc_set_load_store <> v_reptype:27 var
R3723:3726 VST.floyd.sc_set_load_store <> gfs1:23 var
R3692:3708 VST.floyd.nested_field_lemmas <> nested_field_type def
R3717:3720 VST.floyd.sc_set_load_store <> gfs0:22 var
R3710:3715 VST.floyd.sc_set_load_store <> t_root:21 var
R3647:3660 VST.veric.shares <> readable_share def
R3662:3663 VST.floyd.sc_set_load_store <> sh:14 var
R3624:3626 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3621:3623 VST.floyd.sc_set_load_store <> gfs:24 var
R3631:3634 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R3627:3630 VST.floyd.sc_set_load_store <> gfs1:23 var
R3635:3638 VST.floyd.sc_set_load_store <> gfs0:22 var
R3568:3570 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3555:3563 Coq.Lists.List <> nth_error def
R3567:3567 VST.floyd.sc_set_load_store <> n:12 var
R3565:3565 VST.floyd.sc_set_load_store <> R:18 var
R3571:3574 Coq.Init.Datatypes <> Some constr
R3577:3584 VST.floyd.field_at <> field_at def
R3611:3611 VST.floyd.sc_set_load_store <> p:25 var
R3601:3609 VST.floyd.sc_set_load_store <> v_reptype:27 var
R3596:3599 VST.floyd.sc_set_load_store <> gfs0:22 var
R3589:3594 VST.floyd.sc_set_load_store <> t_root:21 var
R3586:3587 VST.floyd.sc_set_load_store <> sh:14 var
R3435:3441 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R3447:3448 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R3476:3487 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R3442:3446 VST.floyd.sc_set_load_store <> Delta:13 var
R3449:3453 VST.floyd.canon <> PROPx def
R3458:3463 VST.floyd.canon <> LOCALx def
R3468:3471 VST.floyd.canon <> SEPx def
R3473:3473 VST.floyd.sc_set_load_store <> R:18 var
R3465:3465 VST.floyd.sc_set_load_store <> Q:17 var
R3455:3455 VST.floyd.sc_set_load_store <> P:16 var
R3488:3492 VST.veric.SeparationLogic <> local def
R3495:3496 VST.veric.lift LiftNotation :::'`('_x_')' not
R3528:3545 VST.veric.lift LiftNotation :::'`('_x_')' not
R3497:3498 Coq.Init.Logic <> eq ind
R3501:3513 VST.floyd.nested_field_lemmas <> field_address def
R3526:3526 VST.floyd.sc_set_load_store <> p:25 var
R3522:3524 VST.floyd.sc_set_load_store <> gfs:24 var
R3515:3520 VST.floyd.sc_set_load_store <> t_root:21 var
R3531:3541 VST.veric.expr <> eval_lvalue def
R3543:3544 VST.floyd.sc_set_load_store <> e1:19 var
R3419:3421 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3372:3387 compcert.cfrontend.Ctypes <> type_is_volatile def
R3390:3406 VST.floyd.nested_field_lemmas <> nested_field_type def
R3415:3417 VST.floyd.sc_set_load_store <> gfs:24 var
R3408:3413 VST.floyd.sc_set_load_store <> t_root:21 var
R3422:3426 Coq.Init.Datatypes <> false constr
R3357:3359 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3306:3320 VST.veric.expr <> is_neutral_cast def
R3353:3356 VST.floyd.sc_set_load_store <> t_id:20 var
R3323:3339 VST.floyd.nested_field_lemmas <> nested_field_type def
R3348:3350 VST.floyd.sc_set_load_store <> gfs:24 var
R3341:3346 VST.floyd.sc_set_load_store <> t_root:21 var
R3360:3363 Coq.Init.Datatypes <> true constr
R3286:3288 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3266:3276 VST.veric.SeparationLogic <> typeof_temp def
R3284:3285 VST.floyd.sc_set_load_store <> id:15 var
R3278:3282 VST.floyd.sc_set_load_store <> Delta:13 var
R3289:3292 Coq.Init.Datatypes <> Some constr
R3294:3297 VST.floyd.sc_set_load_store <> t_id:20 var
R3227:3229 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3218:3223 compcert.cfrontend.Clight <> typeof def
R3225:3226 VST.floyd.sc_set_load_store <> e1:19 var
R3230:3246 VST.floyd.nested_field_lemmas <> nested_field_type def
R3255:3257 VST.floyd.sc_set_load_store <> gfs:24 var
R3248:3253 VST.floyd.sc_set_load_store <> t_root:21 var
R4129:4144 VST.floyd.nested_field_lemmas <> field_compatible def
R4129:4144 VST.floyd.nested_field_lemmas <> field_compatible def
R4178:4185 VST.msl.log_normalize <> add_andp thm
R4197:4204 VST.msl.log_normalize <> add_andp thm
R4178:4185 VST.msl.log_normalize <> add_andp thm
R4178:4185 VST.msl.log_normalize <> add_andp thm
R4197:4204 VST.msl.log_normalize <> add_andp thm
R4197:4204 VST.msl.log_normalize <> add_andp thm
R4333:4337 VST.msl.seplog <> ::logic:x_'&&'_x not
R4356:4356 VST.msl.seplog <> ::logic:x_'&&'_x not
R4269:4272 VST.msl.seplog <> ::logic:x_'&&'_x not
R4245:4249 VST.veric.SeparationLogic <> local def
R4252:4261 VST.veric.SeparationLogic <> tc_environ def
R4273:4277 VST.veric.SeparationLogic <> local def
R4280:4282 VST.veric.lift LiftNotation :::'`'_x not
R4314:4331 VST.veric.lift LiftNotation :::'`'_x not
R4283:4284 Coq.Init.Logic <> eq ind
R4287:4299 VST.floyd.nested_field_lemmas <> field_address def
R4317:4327 VST.veric.expr <> eval_lvalue def
R4338:4346 VST.veric.SeparationLogic <> tc_lvalue def
R4225:4237 VST.msl.seplog <> derives_trans meth
R4333:4337 VST.msl.seplog <> ::logic:x_'&&'_x not
R4356:4356 VST.msl.seplog <> ::logic:x_'&&'_x not
R4269:4272 VST.msl.seplog <> ::logic:x_'&&'_x not
R4245:4249 VST.veric.SeparationLogic <> local def
R4252:4261 VST.veric.SeparationLogic <> tc_environ def
R4273:4277 VST.veric.SeparationLogic <> local def
R4280:4282 VST.veric.lift LiftNotation :::'`'_x not
R4314:4331 VST.veric.lift LiftNotation :::'`'_x not
R4283:4284 Coq.Init.Logic <> eq ind
R4287:4299 VST.floyd.nested_field_lemmas <> field_address def
R4317:4327 VST.veric.expr <> eval_lvalue def
R4338:4346 VST.veric.SeparationLogic <> tc_lvalue def
R4225:4237 VST.msl.seplog <> derives_trans meth
R4387:4391 VST.veric.SeparationLogic <> local def
R4394:4398 VST.veric.mpred <> lift1 def
R4459:4471 VST.msl.seplog <> derives_trans meth
R4481:4502 VST.veric.SeparationLogic <> typecheck_lvalue_sound thm
R4459:4471 VST.msl.seplog <> derives_trans meth
R4481:4502 VST.veric.SeparationLogic <> typecheck_lvalue_sound thm
R4575:4597 VST.floyd.nested_loadstore <> nested_field_ramif_load thm
R4575:4597 VST.floyd.nested_loadstore <> nested_field_ramif_load thm
R4652:4678 VST.floyd.loadstore_field_at <> semax_load_nth_ram_field_at thm
R4652:4678 VST.floyd.loadstore_field_at <> semax_load_nth_ram_field_at thm
prf 4873:4896 <> nth_error_SEP_sepcon_TT'
binder 4906:4906 <> D:28
binder 4908:4908 <> P:29
binder 4910:4910 <> Q:30
binder 4912:4912 <> R:31
binder 4914:4914 <> n:32
binder 4916:4917 <> Rn:33
binder 4919:4919 <> S:34
R4977:4982 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5006:5011 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5012:5018 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R5020:5022 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R5050:5055 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R5019:5019 VST.floyd.sc_set_load_store <> D:28 var
R5023:5027 VST.floyd.canon <> PROPx def
R5032:5037 VST.floyd.canon <> LOCALx def
R5042:5045 VST.floyd.canon <> SEPx def
R5047:5047 VST.floyd.sc_set_load_store <> R:31 var
R5039:5039 VST.floyd.sc_set_load_store <> Q:30 var
R5029:5029 VST.floyd.sc_set_load_store <> P:29 var
R5057:5059 VST.msl.seplog <> ::logic:x_'*'_x not
R5056:5056 VST.floyd.sc_set_load_store <> S:34 var
R5060:5061 VST.msl.seplog <> TT meth
R4996:4998 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4983:4991 Coq.Lists.List <> nth_error def
R4995:4995 VST.floyd.sc_set_load_store <> n:32 var
R4993:4993 VST.floyd.sc_set_load_store <> R:31 var
R4999:5002 Coq.Init.Datatypes <> Some constr
R5004:5005 VST.floyd.sc_set_load_store <> Rn:33 var
R4924:4930 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R4932:4933 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R4971:4975 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R4931:4931 VST.floyd.sc_set_load_store <> D:28 var
R4934:4938 VST.floyd.canon <> PROPx def
R4943:4948 VST.floyd.canon <> LOCALx def
R4953:4956 VST.floyd.canon <> SEPx def
R4961:4964 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R4959:4960 VST.floyd.sc_set_load_store <> Rn:33 var
R4965:4967 Coq.Init.Datatypes <> nil constr
R4950:4950 VST.floyd.sc_set_load_store <> Q:30 var
R4940:4940 VST.floyd.sc_set_load_store <> P:29 var
R4976:4976 VST.floyd.sc_set_load_store <> S:34 var
R5092:5106 VST.floyd.canon <> SEP_nth_isolate thm
R5092:5106 VST.floyd.canon <> SEP_nth_isolate thm
R5092:5106 VST.floyd.canon <> SEP_nth_isolate thm
R5127:5131 VST.floyd.canon <> PROPx def
R5134:5139 VST.floyd.canon <> LOCALx def
R5142:5145 VST.floyd.canon <> SEPx def
R5162:5166 VST.veric.SeparationLogic <> local def
R5169:5173 VST.veric.mpred <> lift1 def
R5290:5299 VST.msl.log_normalize <> andp_assoc thm
R5290:5299 VST.msl.log_normalize <> andp_assoc thm
R5290:5299 VST.msl.log_normalize <> andp_assoc thm
R5290:5299 VST.msl.log_normalize <> andp_assoc thm
R5290:5299 VST.msl.log_normalize <> andp_assoc thm
R5326:5333 VST.msl.log_normalize <> prop_and thm
R5326:5333 VST.msl.log_normalize <> prop_and thm
R5326:5333 VST.msl.log_normalize <> prop_and thm
R5326:5333 VST.msl.log_normalize <> prop_and thm
R5326:5333 VST.msl.log_normalize <> prop_and thm
R5356:5365 VST.msl.seplog <> sepcon_emp meth
R5356:5365 VST.msl.seplog <> sepcon_emp meth
R5356:5365 VST.msl.seplog <> sepcon_emp meth
R5386:5402 VST.msl.log_normalize <> sepcon_andp_prop' thm
R5386:5402 VST.msl.log_normalize <> sepcon_andp_prop' thm
R5386:5402 VST.msl.log_normalize <> sepcon_andp_prop' thm
R5413:5426 VST.msl.seplog <> sepcon_derives meth
R5413:5426 VST.msl.seplog <> sepcon_derives meth
R5448:5457 VST.msl.seplog <> prop_right meth
R5448:5457 VST.msl.seplog <> prop_right meth
prf 5480:5503 <> semax_SC_field_cast_load
R5523:5532 VST.veric.juicy_extspec <> OracleKind class
binder 5516:5520 <> Espec:35
binder 5535:5535 <> n:36
R5545:5553 VST.veric.seplog <> tycontext ind
binder 5538:5542 <> Delta:37
binder 5556:5557 <> sh:38
binder 5559:5560 <> id:39
binder 5562:5562 <> P:40
binder 5564:5564 <> Q:41
binder 5566:5566 <> R:42
binder 5568:5569 <> e1:43
binder 5571:5571 <> t:44
binder 5577:5582 <> t_root:45
binder 5584:5587 <> gfs0:46
binder 5589:5592 <> gfs1:47
binder 5594:5596 <> gfs:48
R5608:5610 compcert.common.Values <> val ind
binder 5599:5599 <> p:49
binder 5601:5605 <> v_val:50
R5625:5631 VST.floyd.reptype_lemmas <> reptype def
R5634:5650 VST.floyd.nested_field_lemmas <> nested_field_type def
R5659:5662 VST.floyd.sc_set_load_store <> gfs0:46 var
R5652:5657 VST.floyd.sc_set_load_store <> t_root:45 var
binder 5614:5622 <> v_reptype:51
R5711:5718 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5748:5755 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5810:5817 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5879:5886 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5942:5949 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6062:6069 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6128:6135 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6154:6161 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6179:6186 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6259:6266 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6413:6420 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6422:6426 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R6512:6528 VST.veric.SeparationLogic <> normal_ret_assert def
R6540:6544 VST.floyd.canon <> PROPx def
R6560:6565 VST.floyd.canon <> LOCALx def
R6671:6674 VST.floyd.canon <> SEPx def
R6676:6676 VST.floyd.sc_set_load_store <> R:42 var
R6626:6629 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R6568:6571 VST.floyd.canon <> temp constr
R6577:6585 VST.veric.expr <> eval_cast def
R6620:6624 VST.floyd.sc_set_load_store <> v_val:50 var
R6618:6618 VST.floyd.sc_set_load_store <> t:44 var
R6588:6604 VST.floyd.nested_field_lemmas <> nested_field_type def
R6613:6615 VST.floyd.sc_set_load_store <> gfs:48 var
R6606:6611 VST.floyd.sc_set_load_store <> t_root:45 var
R6573:6574 VST.floyd.sc_set_load_store <> id:39 var
R6630:6649 VST.floyd.client_lemmas <> remove_localdef_temp def
R6654:6654 VST.floyd.sc_set_load_store <> Q:41 var
R6651:6652 VST.floyd.sc_set_load_store <> id:39 var
R6546:6546 VST.floyd.sc_set_load_store <> P:40 var
R6483:6486 compcert.cfrontend.Clight <> Sset constr
R6492:6496 compcert.cfrontend.Clight <> Ecast constr
R6501:6501 VST.floyd.sc_set_load_store <> t:44 var
R6498:6499 VST.floyd.sc_set_load_store <> e1:43 var
R6488:6489 VST.floyd.sc_set_load_store <> id:39 var
R6444:6446 VST.msl.seplog <> ::logic:'|>'_x not
R6447:6451 VST.floyd.canon <> PROPx def
R6456:6461 VST.floyd.canon <> LOCALx def
R6466:6469 VST.floyd.canon <> SEPx def
R6471:6471 VST.floyd.sc_set_load_store <> R:42 var
R6463:6463 VST.floyd.sc_set_load_store <> Q:41 var
R6453:6453 VST.floyd.sc_set_load_store <> P:40 var
R6437:6441 VST.floyd.sc_set_load_store <> Delta:37 var
R6431:6435 VST.floyd.sc_set_load_store <> Espec:35 var
R6428:6429 VST.floyd.sc_set_load_store <> SEMAX_SC.cs var
R6267:6273 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R6279:6280 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R6308:6318 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R6274:6278 VST.floyd.sc_set_load_store <> Delta:37 var
R6281:6285 VST.floyd.canon <> PROPx def
R6290:6295 VST.floyd.canon <> LOCALx def
R6300:6303 VST.floyd.canon <> SEPx def
R6305:6305 VST.floyd.sc_set_load_store <> R:42 var
R6297:6297 VST.floyd.sc_set_load_store <> Q:41 var
R6287:6287 VST.floyd.sc_set_load_store <> P:40 var
R6319:6319 VST.msl.seplog <> ::logic:x_'&&'_x not
R6338:6342 VST.msl.seplog <> ::logic:x_'&&'_x not
R6320:6328 VST.veric.SeparationLogic <> tc_lvalue def
R6336:6337 VST.floyd.sc_set_load_store <> e1:43 var
R6330:6334 VST.floyd.sc_set_load_store <> Delta:37 var
R6343:6347 VST.veric.SeparationLogic <> local def
R6350:6351 VST.veric.lift LiftNotation :::'`('_x_')' not
R6411:6411 VST.veric.lift LiftNotation :::'`('_x_')' not
R6352:6357 VST.veric.Cop2 <> tc_val def
R6362:6370 VST.veric.expr <> eval_cast def
R6405:6409 VST.floyd.sc_set_load_store <> v_val:50 var
R6403:6403 VST.floyd.sc_set_load_store <> t:44 var
R6373:6389 VST.floyd.nested_field_lemmas <> nested_field_type def
R6398:6400 VST.floyd.sc_set_load_store <> gfs:48 var
R6391:6396 VST.floyd.sc_set_load_store <> t_root:45 var
R6359:6359 VST.floyd.sc_set_load_store <> t:44 var
R6187:6190 VST.floyd.jmeq_lemmas <> JMeq def
R6254:6258 VST.floyd.sc_set_load_store <> v_val:50 var
R6193:6204 VST.floyd.proj_reptype_lemmas <> proj_reptype def
R6243:6251 VST.floyd.sc_set_load_store <> v_reptype:51 var
R6238:6241 VST.floyd.sc_set_load_store <> gfs1:47 var
R6207:6223 VST.floyd.nested_field_lemmas <> nested_field_type def
R6232:6235 VST.floyd.sc_set_load_store <> gfs0:46 var
R6225:6230 VST.floyd.sc_set_load_store <> t_root:45 var
R6162:6175 VST.veric.shares <> readable_share def
R6177:6178 VST.floyd.sc_set_load_store <> sh:38 var
R6139:6141 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6136:6138 VST.floyd.sc_set_load_store <> gfs:48 var
R6146:6149 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R6142:6145 VST.floyd.sc_set_load_store <> gfs1:47 var
R6150:6153 VST.floyd.sc_set_load_store <> gfs0:46 var
R6083:6085 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6070:6078 Coq.Lists.List <> nth_error def
R6082:6082 VST.floyd.sc_set_load_store <> n:36 var
R6080:6080 VST.floyd.sc_set_load_store <> R:42 var
R6086:6089 Coq.Init.Datatypes <> Some constr
R6092:6099 VST.floyd.field_at <> field_at def
R6126:6126 VST.floyd.sc_set_load_store <> p:49 var
R6116:6124 VST.floyd.sc_set_load_store <> v_reptype:51 var
R6111:6114 VST.floyd.sc_set_load_store <> gfs0:46 var
R6104:6109 VST.floyd.sc_set_load_store <> t_root:45 var
R6101:6102 VST.floyd.sc_set_load_store <> sh:38 var
R5950:5956 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R5962:5963 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R5991:6002 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R5957:5961 VST.floyd.sc_set_load_store <> Delta:37 var
R5964:5968 VST.floyd.canon <> PROPx def
R5973:5978 VST.floyd.canon <> LOCALx def
R5983:5986 VST.floyd.canon <> SEPx def
R5988:5988 VST.floyd.sc_set_load_store <> R:42 var
R5980:5980 VST.floyd.sc_set_load_store <> Q:41 var
R5970:5970 VST.floyd.sc_set_load_store <> P:40 var
R6003:6007 VST.veric.SeparationLogic <> local def
R6010:6011 VST.veric.lift LiftNotation :::'`('_x_')' not
R6043:6060 VST.veric.lift LiftNotation :::'`('_x_')' not
R6012:6013 Coq.Init.Logic <> eq ind
R6016:6028 VST.floyd.nested_field_lemmas <> field_address def
R6041:6041 VST.floyd.sc_set_load_store <> p:49 var
R6037:6039 VST.floyd.sc_set_load_store <> gfs:48 var
R6030:6035 VST.floyd.sc_set_load_store <> t_root:45 var
R6046:6056 VST.veric.expr <> eval_lvalue def
R6058:6059 VST.floyd.sc_set_load_store <> e1:43 var
R5934:5936 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5887:5902 compcert.cfrontend.Ctypes <> type_is_volatile def
R5905:5921 VST.floyd.nested_field_lemmas <> nested_field_type def
R5930:5932 VST.floyd.sc_set_load_store <> gfs:48 var
R5923:5928 VST.floyd.sc_set_load_store <> t_root:45 var
R5937:5941 Coq.Init.Datatypes <> false constr
R5871:5873 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5818:5837 VST.veric.SeparationLogic <> cast_pointer_to_bool def
R5870:5870 VST.floyd.sc_set_load_store <> t:44 var
R5840:5856 VST.floyd.nested_field_lemmas <> nested_field_type def
R5865:5867 VST.floyd.sc_set_load_store <> gfs:48 var
R5858:5863 VST.floyd.sc_set_load_store <> t_root:45 var
R5874:5878 Coq.Init.Datatypes <> false constr
R5803:5805 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5756:5771 VST.veric.mpred <> type_is_by_value def
R5774:5790 VST.floyd.nested_field_lemmas <> nested_field_type def
R5799:5801 VST.floyd.sc_set_load_store <> gfs:48 var
R5792:5797 VST.floyd.sc_set_load_store <> t_root:45 var
R5806:5809 Coq.Init.Datatypes <> true constr
R5739:5741 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5719:5729 VST.veric.SeparationLogic <> typeof_temp def
R5737:5738 VST.floyd.sc_set_load_store <> id:39 var
R5731:5735 VST.floyd.sc_set_load_store <> Delta:37 var
R5742:5745 Coq.Init.Datatypes <> Some constr
R5747:5747 VST.floyd.sc_set_load_store <> t:44 var
R5680:5682 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5671:5676 compcert.cfrontend.Clight <> typeof def
R5678:5679 VST.floyd.sc_set_load_store <> e1:43 var
R5683:5699 VST.floyd.nested_field_lemmas <> nested_field_type def
R5708:5710 VST.floyd.sc_set_load_store <> gfs:48 var
R5701:5706 VST.floyd.sc_set_load_store <> t_root:45 var
R6715:6730 VST.floyd.nested_field_lemmas <> field_compatible def
R6715:6730 VST.floyd.nested_field_lemmas <> field_compatible def
R6764:6771 VST.msl.log_normalize <> add_andp thm
R6783:6790 VST.msl.log_normalize <> add_andp thm
R6764:6771 VST.msl.log_normalize <> add_andp thm
R6764:6771 VST.msl.log_normalize <> add_andp thm
R6783:6790 VST.msl.log_normalize <> add_andp thm
R6783:6790 VST.msl.log_normalize <> add_andp thm
R6919:6923 VST.msl.seplog <> ::logic:x_'&&'_x not
R6942:6942 VST.msl.seplog <> ::logic:x_'&&'_x not
R6855:6858 VST.msl.seplog <> ::logic:x_'&&'_x not
R6831:6835 VST.veric.SeparationLogic <> local def
R6838:6847 VST.veric.SeparationLogic <> tc_environ def
R6859:6863 VST.veric.SeparationLogic <> local def
R6866:6868 VST.veric.lift LiftNotation :::'`'_x not
R6900:6917 VST.veric.lift LiftNotation :::'`'_x not
R6869:6870 Coq.Init.Logic <> eq ind
R6873:6885 VST.floyd.nested_field_lemmas <> field_address def
R6903:6913 VST.veric.expr <> eval_lvalue def
R6924:6932 VST.veric.SeparationLogic <> tc_lvalue def
R6811:6823 VST.msl.seplog <> derives_trans meth
R6919:6923 VST.msl.seplog <> ::logic:x_'&&'_x not
R6942:6942 VST.msl.seplog <> ::logic:x_'&&'_x not
R6855:6858 VST.msl.seplog <> ::logic:x_'&&'_x not
R6831:6835 VST.veric.SeparationLogic <> local def
R6838:6847 VST.veric.SeparationLogic <> tc_environ def
R6859:6863 VST.veric.SeparationLogic <> local def
R6866:6868 VST.veric.lift LiftNotation :::'`'_x not
R6900:6917 VST.veric.lift LiftNotation :::'`'_x not
R6869:6870 Coq.Init.Logic <> eq ind
R6873:6885 VST.floyd.nested_field_lemmas <> field_address def
R6903:6913 VST.veric.expr <> eval_lvalue def
R6924:6932 VST.veric.SeparationLogic <> tc_lvalue def
R6811:6823 VST.msl.seplog <> derives_trans meth
R6973:6977 VST.veric.SeparationLogic <> local def
R6980:6984 VST.veric.mpred <> lift1 def
R7045:7057 VST.msl.seplog <> derives_trans meth
R7067:7088 VST.veric.SeparationLogic <> typecheck_lvalue_sound thm
R7045:7057 VST.msl.seplog <> derives_trans meth
R7067:7088 VST.veric.SeparationLogic <> typecheck_lvalue_sound thm
R7161:7183 VST.floyd.nested_loadstore <> nested_field_ramif_load thm
R7161:7183 VST.floyd.nested_loadstore <> nested_field_ramif_load thm
R7239:7270 VST.floyd.loadstore_field_at <> semax_cast_load_nth_ram_field_at thm
R7239:7270 VST.floyd.loadstore_field_at <> semax_cast_load_nth_ram_field_at thm
prf 7483:7502 <> semax_SC_field_store
R7522:7531 VST.veric.juicy_extspec <> OracleKind class
binder 7515:7519 <> Espec:52
binder 7546:7550 <> Delta:53
binder 7552:7553 <> sh:54
binder 7555:7555 <> n:55
R7561:7563 compcert.common.Values <> val ind
binder 7558:7558 <> p:56
binder 7566:7566 <> P:57
binder 7568:7568 <> Q:58
binder 7570:7570 <> R:59
R7581:7584 compcert.cfrontend.Clight <> expr ind
binder 7573:7574 <> e1:60
binder 7576:7577 <> e2:61
R7602:7605 compcert.cfrontend.Ctypes <> type ind
binder 7594:7599 <> t_root:62
R7624:7627 Coq.Init.Datatypes <> list ind
R7629:7634 VST.floyd.nested_field_lemmas <> gfield ind
binder 7609:7612 <> gfs0:63
binder 7614:7617 <> gfs1:64
binder 7619:7621 <> gfs:65
R7648:7654 VST.floyd.reptype_lemmas <> reptype def
R7657:7673 VST.floyd.nested_field_lemmas <> nested_field_type def
R7707:7710 VST.floyd.sc_set_load_store <> gfs1:64 var
R7676:7692 VST.floyd.nested_field_lemmas <> nested_field_type def
R7701:7704 VST.floyd.sc_set_load_store <> gfs0:63 var
R7694:7699 VST.floyd.sc_set_load_store <> t_root:62 var
binder 7644:7645 <> v0:66
R7729:7731 compcert.common.Values <> val ind
binder 7721:7726 <> v0_val:67
R7744:7750 VST.floyd.reptype_lemmas <> reptype def
R7753:7769 VST.floyd.nested_field_lemmas <> nested_field_type def
R7778:7781 VST.floyd.sc_set_load_store <> gfs0:63 var
R7771:7776 VST.floyd.sc_set_load_store <> t_root:62 var
binder 7735:7735 <> v:68
binder 7737:7741 <> v_new:69
R7832:7841 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7896:7905 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7961:7970 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7989:7998 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8049:8058 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8172:8181 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8310:8319 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8337:8346 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8361:8370 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8443:8452 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8599:8608 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8609:8613 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R8688:8704 VST.veric.SeparationLogic <> normal_ret_assert def
R8719:8723 VST.floyd.canon <> PROPx def
R8742:8747 VST.floyd.canon <> LOCALx def
R8768:8771 VST.floyd.canon <> SEPx def
R8792:8802 VST.floyd.canon <> replace_nth def
R8829:8836 VST.floyd.field_at <> field_at def
R8859:8859 VST.floyd.sc_set_load_store <> p:56 var
R8853:8857 VST.floyd.sc_set_load_store <> v_new:69 var
R8848:8851 VST.floyd.sc_set_load_store <> gfs0:63 var
R8841:8846 VST.floyd.sc_set_load_store <> t_root:62 var
R8838:8839 VST.floyd.sc_set_load_store <> sh:54 var
R8806:8806 VST.floyd.sc_set_load_store <> R:59 var
R8804:8804 VST.floyd.sc_set_load_store <> n:55 var
R8749:8749 VST.floyd.sc_set_load_store <> Q:58 var
R8725:8725 VST.floyd.sc_set_load_store <> P:57 var
R8662:8668 compcert.cfrontend.Clight <> Sassign constr
R8673:8674 VST.floyd.sc_set_load_store <> e2:61 var
R8670:8671 VST.floyd.sc_set_load_store <> e1:60 var
R8622:8623 VST.msl.seplog <> ::logic:'|>'_x not
R8624:8628 VST.floyd.canon <> PROPx def
R8633:8638 VST.floyd.canon <> LOCALx def
R8643:8646 VST.floyd.canon <> SEPx def
R8648:8648 VST.floyd.sc_set_load_store <> R:59 var
R8640:8640 VST.floyd.sc_set_load_store <> Q:58 var
R8630:8630 VST.floyd.sc_set_load_store <> P:57 var
R8615:8619 VST.floyd.sc_set_load_store <> Delta:53 var
R8453:8459 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8465:8466 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8494:8507 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8460:8464 VST.floyd.sc_set_load_store <> Delta:53 var
R8467:8471 VST.floyd.canon <> PROPx def
R8476:8481 VST.floyd.canon <> LOCALx def
R8486:8489 VST.floyd.canon <> SEPx def
R8491:8491 VST.floyd.sc_set_load_store <> R:59 var
R8483:8483 VST.floyd.sc_set_load_store <> Q:58 var
R8473:8473 VST.floyd.sc_set_load_store <> P:57 var
R8508:8508 VST.msl.seplog <> ::logic:x_'&&'_x not
R8527:8542 VST.msl.seplog <> ::logic:x_'&&'_x not
R8598:8598 VST.msl.seplog <> ::logic:x_'&&'_x not
R8509:8517 VST.veric.SeparationLogic <> tc_lvalue def
R8525:8526 VST.floyd.sc_set_load_store <> e1:60 var
R8519:8523 VST.floyd.sc_set_load_store <> Delta:53 var
R8543:8549 VST.veric.SeparationLogic <> tc_expr def
R8558:8562 compcert.cfrontend.Clight <> Ecast constr
R8568:8584 VST.floyd.nested_field_lemmas <> nested_field_type def
R8593:8595 VST.floyd.sc_set_load_store <> gfs:65 var
R8586:8591 VST.floyd.sc_set_load_store <> t_root:62 var
R8564:8565 VST.floyd.sc_set_load_store <> e2:61 var
R8551:8555 VST.floyd.sc_set_load_store <> Delta:53 var
R8371:8380 VST.floyd.stronger <> data_equal def
R8438:8442 VST.floyd.sc_set_load_store <> v_new:69 var
R8383:8393 VST.floyd.replace_refill_reptype_lemmas <> upd_reptype def
R8434:8435 VST.floyd.sc_set_load_store <> v0:66 var
R8432:8432 VST.floyd.sc_set_load_store <> v:68 var
R8427:8430 VST.floyd.sc_set_load_store <> gfs1:64 var
R8396:8412 VST.floyd.nested_field_lemmas <> nested_field_type def
R8421:8424 VST.floyd.sc_set_load_store <> gfs0:63 var
R8414:8419 VST.floyd.sc_set_load_store <> t_root:62 var
R8347:8350 VST.floyd.jmeq_lemmas <> JMeq def
R8355:8360 VST.floyd.sc_set_load_store <> v0_val:67 var
R8352:8353 VST.floyd.sc_set_load_store <> v0:66 var
R8320:8333 VST.veric.shares <> writable_share def
R8335:8336 VST.floyd.sc_set_load_store <> sh:54 var
R8182:8188 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8194:8195 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8223:8235 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8189:8193 VST.floyd.sc_set_load_store <> Delta:53 var
R8196:8200 VST.floyd.canon <> PROPx def
R8205:8210 VST.floyd.canon <> LOCALx def
R8215:8218 VST.floyd.canon <> SEPx def
R8220:8220 VST.floyd.sc_set_load_store <> R:59 var
R8212:8212 VST.floyd.sc_set_load_store <> Q:58 var
R8202:8202 VST.floyd.sc_set_load_store <> P:57 var
R8236:8240 VST.veric.SeparationLogic <> local def
R8243:8244 VST.veric.lift LiftNotation :::'`('_x_')' not
R8254:8308 VST.veric.lift LiftNotation :::'`('_x_')' not
R8245:8246 Coq.Init.Logic <> eq ind
R8248:8253 VST.floyd.sc_set_load_store <> v0_val:67 var
R8257:8265 VST.veric.expr <> eval_expr def
R8268:8272 compcert.cfrontend.Clight <> Ecast constr
R8278:8294 VST.floyd.nested_field_lemmas <> nested_field_type def
R8303:8305 VST.floyd.sc_set_load_store <> gfs:65 var
R8296:8301 VST.floyd.sc_set_load_store <> t_root:62 var
R8274:8275 VST.floyd.sc_set_load_store <> e2:61 var
R8059:8065 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8071:8072 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8100:8112 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8066:8070 VST.floyd.sc_set_load_store <> Delta:53 var
R8073:8077 VST.floyd.canon <> PROPx def
R8082:8087 VST.floyd.canon <> LOCALx def
R8092:8095 VST.floyd.canon <> SEPx def
R8097:8097 VST.floyd.sc_set_load_store <> R:59 var
R8089:8089 VST.floyd.sc_set_load_store <> Q:58 var
R8079:8079 VST.floyd.sc_set_load_store <> P:57 var
R8113:8117 VST.veric.SeparationLogic <> local def
R8120:8121 VST.veric.lift LiftNotation :::'`('_x_')' not
R8153:8170 VST.veric.lift LiftNotation :::'`('_x_')' not
R8122:8123 Coq.Init.Logic <> eq ind
R8126:8138 VST.floyd.nested_field_lemmas <> field_address def
R8151:8151 VST.floyd.sc_set_load_store <> p:56 var
R8147:8149 VST.floyd.sc_set_load_store <> gfs:65 var
R8140:8145 VST.floyd.sc_set_load_store <> t_root:62 var
R8156:8166 VST.veric.expr <> eval_lvalue def
R8168:8169 VST.floyd.sc_set_load_store <> e1:60 var
R8012:8014 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7999:8007 Coq.Lists.List <> nth_error def
R8011:8011 VST.floyd.sc_set_load_store <> n:55 var
R8009:8009 VST.floyd.sc_set_load_store <> R:59 var
R8015:8018 Coq.Init.Datatypes <> Some constr
R8021:8028 VST.floyd.field_at <> field_at def
R8047:8047 VST.floyd.sc_set_load_store <> p:56 var
R8045:8045 VST.floyd.sc_set_load_store <> v:68 var
R8040:8043 VST.floyd.sc_set_load_store <> gfs0:63 var
R8033:8038 VST.floyd.sc_set_load_store <> t_root:62 var
R8030:8031 VST.floyd.sc_set_load_store <> sh:54 var
R7974:7976 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7971:7973 VST.floyd.sc_set_load_store <> gfs:65 var
R7981:7984 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R7977:7980 VST.floyd.sc_set_load_store <> gfs1:64 var
R7985:7988 VST.floyd.sc_set_load_store <> gfs0:63 var
R7953:7955 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7906:7921 compcert.cfrontend.Ctypes <> type_is_volatile def
R7924:7940 VST.floyd.nested_field_lemmas <> nested_field_type def
R7949:7951 VST.floyd.sc_set_load_store <> gfs:65 var
R7942:7947 VST.floyd.sc_set_load_store <> t_root:62 var
R7956:7960 Coq.Init.Datatypes <> false constr
R7889:7891 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7842:7857 VST.veric.mpred <> type_is_by_value def
R7860:7876 VST.floyd.nested_field_lemmas <> nested_field_type def
R7885:7887 VST.floyd.sc_set_load_store <> gfs:65 var
R7878:7883 VST.floyd.sc_set_load_store <> t_root:62 var
R7892:7895 Coq.Init.Datatypes <> true constr
R7801:7803 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7792:7797 compcert.cfrontend.Clight <> typeof def
R7799:7800 VST.floyd.sc_set_load_store <> e1:60 var
R7804:7820 VST.floyd.nested_field_lemmas <> nested_field_type def
R7829:7831 VST.floyd.sc_set_load_store <> gfs:65 var
R7822:7827 VST.floyd.sc_set_load_store <> t_root:62 var
R8896:8914 VST.floyd.stronger <> field_at_data_equal thm
R8896:8914 VST.floyd.stronger <> field_at_data_equal thm
R8896:8914 VST.floyd.stronger <> field_at_data_equal thm
R8974:8989 VST.floyd.nested_field_lemmas <> field_compatible def
R8974:8989 VST.floyd.nested_field_lemmas <> field_compatible def
R9023:9030 VST.msl.log_normalize <> add_andp thm
R9042:9049 VST.msl.log_normalize <> add_andp thm
R9023:9030 VST.msl.log_normalize <> add_andp thm
R9023:9030 VST.msl.log_normalize <> add_andp thm
R9042:9049 VST.msl.log_normalize <> add_andp thm
R9042:9049 VST.msl.log_normalize <> add_andp thm
R9178:9182 VST.msl.seplog <> ::logic:x_'&&'_x not
R9201:9201 VST.msl.seplog <> ::logic:x_'&&'_x not
R9114:9117 VST.msl.seplog <> ::logic:x_'&&'_x not
R9090:9094 VST.veric.SeparationLogic <> local def
R9097:9106 VST.veric.SeparationLogic <> tc_environ def
R9118:9122 VST.veric.SeparationLogic <> local def
R9125:9127 VST.veric.lift LiftNotation :::'`'_x not
R9159:9176 VST.veric.lift LiftNotation :::'`'_x not
R9128:9129 Coq.Init.Logic <> eq ind
R9132:9144 VST.floyd.nested_field_lemmas <> field_address def
R9162:9172 VST.veric.expr <> eval_lvalue def
R9183:9191 VST.veric.SeparationLogic <> tc_lvalue def
R9070:9082 VST.msl.seplog <> derives_trans meth
R9178:9182 VST.msl.seplog <> ::logic:x_'&&'_x not
R9201:9201 VST.msl.seplog <> ::logic:x_'&&'_x not
R9114:9117 VST.msl.seplog <> ::logic:x_'&&'_x not
R9090:9094 VST.veric.SeparationLogic <> local def
R9097:9106 VST.veric.SeparationLogic <> tc_environ def
R9118:9122 VST.veric.SeparationLogic <> local def
R9125:9127 VST.veric.lift LiftNotation :::'`'_x not
R9159:9176 VST.veric.lift LiftNotation :::'`'_x not
R9128:9129 Coq.Init.Logic <> eq ind
R9132:9144 VST.floyd.nested_field_lemmas <> field_address def
R9162:9172 VST.veric.expr <> eval_lvalue def
R9183:9191 VST.veric.SeparationLogic <> tc_lvalue def
R9070:9082 VST.msl.seplog <> derives_trans meth
R9232:9236 VST.veric.SeparationLogic <> local def
R9239:9243 VST.veric.mpred <> lift1 def
R9304:9316 VST.msl.seplog <> derives_trans meth
R9326:9347 VST.veric.SeparationLogic <> typecheck_lvalue_sound thm
R9304:9316 VST.msl.seplog <> derives_trans meth
R9326:9347 VST.veric.SeparationLogic <> typecheck_lvalue_sound thm
R9420:9443 VST.floyd.nested_loadstore <> nested_field_ramif_store thm
R9420:9443 VST.floyd.nested_loadstore <> nested_field_ramif_store thm
R9500:9527 VST.floyd.loadstore_field_at <> semax_store_nth_ram_field_at thm
R9500:9527 VST.floyd.loadstore_field_at <> semax_store_nth_ram_field_at thm
R9632:9639 VST.floyd.jmeq_lemmas <> JMeq_sym thm
R9632:9639 VST.floyd.jmeq_lemmas <> JMeq_sym thm
R9720:9727 VST.msl.log_normalize <> add_andp thm
R9739:9746 VST.msl.log_normalize <> add_andp thm
R9720:9727 VST.msl.log_normalize <> add_andp thm
R9720:9727 VST.msl.log_normalize <> add_andp thm
R9739:9746 VST.msl.log_normalize <> add_andp thm
R9739:9746 VST.msl.log_normalize <> add_andp thm
prf 9782:9812 <> semax_SC_field_store_union_hack
R9822:9825 Coq.Init.Datatypes <> list ind
R9827:9832 VST.floyd.nested_field_lemmas <> gfield ind
binder 9815:9819 <> gfs1':70
R9853:9862 VST.veric.juicy_extspec <> OracleKind class
binder 9846:9850 <> Espec:71
binder 9877:9881 <> Delta:72
binder 9883:9884 <> sh:73
binder 9886:9886 <> n:74
R9892:9894 compcert.common.Values <> val ind
binder 9889:9889 <> p:75
binder 9897:9897 <> P:76
binder 9899:9899 <> Q:77
binder 9901:9901 <> R:78
R9912:9915 compcert.cfrontend.Clight <> expr ind
binder 9904:9905 <> e1:79
binder 9907:9908 <> e2:80
binder 9918:9919 <> ch:81
binder 9921:9923 <> ch':82
R9940:9943 compcert.cfrontend.Ctypes <> type ind
binder 9932:9937 <> t_root:83
R9967:9970 Coq.Init.Datatypes <> list ind
R9972:9977 VST.floyd.nested_field_lemmas <> gfield ind
binder 9947:9950 <> gfs0:84
binder 9952:9955 <> gfs1:85
binder 9957:9959 <> gfs:86
binder 9961:9964 <> gfs':87
R9991:9997 VST.floyd.reptype_lemmas <> reptype def
R10000:10016 VST.floyd.nested_field_lemmas <> nested_field_type def
R10050:10054 VST.floyd.sc_set_load_store <> gfs1':70 var
R10019:10035 VST.floyd.nested_field_lemmas <> nested_field_type def
R10044:10047 VST.floyd.sc_set_load_store <> gfs0:84 var
R10037:10042 VST.floyd.sc_set_load_store <> t_root:83 var
binder 9987:9988 <> v0:88
R10081:10083 compcert.common.Values <> val ind
binder 10065:10070 <> v0_val:89
binder 10072:10078 <> v0_val':90
R10096:10102 VST.floyd.reptype_lemmas <> reptype def
R10105:10121 VST.floyd.nested_field_lemmas <> nested_field_type def
R10130:10133 VST.floyd.sc_set_load_store <> gfs0:84 var
R10123:10128 VST.floyd.sc_set_load_store <> t_root:83 var
binder 10087:10087 <> v:91
binder 10089:10093 <> v_new:92
R10184:10193 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10250:10259 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10318:10327 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10433:10442 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10470:10479 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10535:10544 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10601:10610 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10675:10684 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10703:10712 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10733:10742 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10793:10802 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10916:10925 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11054:11063 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11081:11090 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11130:11139 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11155:11164 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11238:11247 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11440:11449 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11450:11454 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R11529:11545 VST.veric.SeparationLogic <> normal_ret_assert def
R11560:11564 VST.floyd.canon <> PROPx def
R11583:11588 VST.floyd.canon <> LOCALx def
R11609:11612 VST.floyd.canon <> SEPx def
R11633:11643 VST.floyd.canon <> replace_nth def
R11670:11677 VST.floyd.field_at <> field_at def
R11700:11700 VST.floyd.sc_set_load_store <> p:75 var
R11694:11698 VST.floyd.sc_set_load_store <> v_new:92 var
R11689:11692 VST.floyd.sc_set_load_store <> gfs0:84 var
R11682:11687 VST.floyd.sc_set_load_store <> t_root:83 var
R11679:11680 VST.floyd.sc_set_load_store <> sh:73 var
R11647:11647 VST.floyd.sc_set_load_store <> R:78 var
R11645:11645 VST.floyd.sc_set_load_store <> n:74 var
R11590:11590 VST.floyd.sc_set_load_store <> Q:77 var
R11566:11566 VST.floyd.sc_set_load_store <> P:76 var
R11503:11509 compcert.cfrontend.Clight <> Sassign constr
R11514:11515 VST.floyd.sc_set_load_store <> e2:80 var
R11511:11512 VST.floyd.sc_set_load_store <> e1:79 var
R11463:11464 VST.msl.seplog <> ::logic:'|>'_x not
R11465:11469 VST.floyd.canon <> PROPx def
R11474:11479 VST.floyd.canon <> LOCALx def
R11484:11487 VST.floyd.canon <> SEPx def
R11489:11489 VST.floyd.sc_set_load_store <> R:78 var
R11481:11481 VST.floyd.sc_set_load_store <> Q:77 var
R11471:11471 VST.floyd.sc_set_load_store <> P:76 var
R11456:11460 VST.floyd.sc_set_load_store <> Delta:72 var
R11248:11254 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R11260:11261 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R11289:11302 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R11255:11259 VST.floyd.sc_set_load_store <> Delta:72 var
R11262:11266 VST.floyd.canon <> PROPx def
R11271:11276 VST.floyd.canon <> LOCALx def
R11281:11284 VST.floyd.canon <> SEPx def
R11286:11286 VST.floyd.sc_set_load_store <> R:78 var
R11278:11278 VST.floyd.sc_set_load_store <> Q:77 var
R11268:11268 VST.floyd.sc_set_load_store <> P:76 var
R11394:11406 VST.msl.seplog <> ::logic:x_'&&'_x not
R11303:11303 VST.msl.seplog <> ::logic:x_'&&'_x not
R11322:11337 VST.msl.seplog <> ::logic:x_'&&'_x not
R11393:11393 VST.msl.seplog <> ::logic:x_'&&'_x not
R11304:11312 VST.veric.SeparationLogic <> tc_lvalue def
R11320:11321 VST.floyd.sc_set_load_store <> e1:79 var
R11314:11318 VST.floyd.sc_set_load_store <> Delta:72 var
R11338:11344 VST.veric.SeparationLogic <> tc_expr def
R11353:11357 compcert.cfrontend.Clight <> Ecast constr
R11363:11379 VST.floyd.nested_field_lemmas <> nested_field_type def
R11388:11390 VST.floyd.sc_set_load_store <> gfs:86 var
R11381:11386 VST.floyd.sc_set_load_store <> t_root:83 var
R11359:11360 VST.floyd.sc_set_load_store <> e2:80 var
R11346:11350 VST.floyd.sc_set_load_store <> Delta:72 var
R11407:11409 VST.msl.seplog <> ::logic:'!!'_x not
R11410:11425 VST.floyd.nested_field_lemmas <> field_compatible def
R11439:11439 VST.floyd.sc_set_load_store <> p:75 var
R11434:11437 VST.floyd.sc_set_load_store <> gfs':87 var
R11427:11432 VST.floyd.sc_set_load_store <> t_root:83 var
R11165:11174 VST.floyd.stronger <> data_equal def
R11233:11237 VST.floyd.sc_set_load_store <> v_new:92 var
R11177:11187 VST.floyd.replace_refill_reptype_lemmas <> upd_reptype def
R11229:11230 VST.floyd.sc_set_load_store <> v0:88 var
R11227:11227 VST.floyd.sc_set_load_store <> v:91 var
R11221:11225 VST.floyd.sc_set_load_store <> gfs1':70 var
R11190:11206 VST.floyd.nested_field_lemmas <> nested_field_type def
R11215:11218 VST.floyd.sc_set_load_store <> gfs0:84 var
R11208:11213 VST.floyd.sc_set_load_store <> t_root:83 var
R11140:11143 VST.floyd.jmeq_lemmas <> JMeq def
R11148:11154 VST.floyd.sc_set_load_store <> v0_val':90 var
R11145:11146 VST.floyd.sc_set_load_store <> v0:88 var
R11091:11107 compcert.common.Memdata <> decode_encode_val def
R11123:11129 VST.floyd.sc_set_load_store <> v0_val':90 var
R11119:11121 VST.floyd.sc_set_load_store <> ch':82 var
R11116:11117 VST.floyd.sc_set_load_store <> ch:81 var
R11109:11114 VST.floyd.sc_set_load_store <> v0_val:89 var
R11064:11077 VST.veric.shares <> writable_share def
R11079:11080 VST.floyd.sc_set_load_store <> sh:73 var
R10926:10932 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R10938:10939 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R10967:10979 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R10933:10937 VST.floyd.sc_set_load_store <> Delta:72 var
R10940:10944 VST.floyd.canon <> PROPx def
R10949:10954 VST.floyd.canon <> LOCALx def
R10959:10962 VST.floyd.canon <> SEPx def
R10964:10964 VST.floyd.sc_set_load_store <> R:78 var
R10956:10956 VST.floyd.sc_set_load_store <> Q:77 var
R10946:10946 VST.floyd.sc_set_load_store <> P:76 var
R10980:10984 VST.veric.SeparationLogic <> local def
R10987:10988 VST.veric.lift LiftNotation :::'`('_x_')' not
R10998:11052 VST.veric.lift LiftNotation :::'`('_x_')' not
R10989:10990 Coq.Init.Logic <> eq ind
R10992:10997 VST.floyd.sc_set_load_store <> v0_val:89 var
R11001:11009 VST.veric.expr <> eval_expr def
R11012:11016 compcert.cfrontend.Clight <> Ecast constr
R11022:11038 VST.floyd.nested_field_lemmas <> nested_field_type def
R11047:11049 VST.floyd.sc_set_load_store <> gfs:86 var
R11040:11045 VST.floyd.sc_set_load_store <> t_root:83 var
R11018:11019 VST.floyd.sc_set_load_store <> e2:80 var
R10803:10809 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R10815:10816 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R10844:10856 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R10810:10814 VST.floyd.sc_set_load_store <> Delta:72 var
R10817:10821 VST.floyd.canon <> PROPx def
R10826:10831 VST.floyd.canon <> LOCALx def
R10836:10839 VST.floyd.canon <> SEPx def
R10841:10841 VST.floyd.sc_set_load_store <> R:78 var
R10833:10833 VST.floyd.sc_set_load_store <> Q:77 var
R10823:10823 VST.floyd.sc_set_load_store <> P:76 var
R10857:10861 VST.veric.SeparationLogic <> local def
R10864:10865 VST.veric.lift LiftNotation :::'`('_x_')' not
R10897:10914 VST.veric.lift LiftNotation :::'`('_x_')' not
R10866:10867 Coq.Init.Logic <> eq ind
R10870:10882 VST.floyd.nested_field_lemmas <> field_address def
R10895:10895 VST.floyd.sc_set_load_store <> p:75 var
R10891:10893 VST.floyd.sc_set_load_store <> gfs:86 var
R10884:10889 VST.floyd.sc_set_load_store <> t_root:83 var
R10900:10910 VST.veric.expr <> eval_lvalue def
R10912:10913 VST.floyd.sc_set_load_store <> e1:79 var
R10756:10758 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10743:10751 Coq.Lists.List <> nth_error def
R10755:10755 VST.floyd.sc_set_load_store <> n:74 var
R10753:10753 VST.floyd.sc_set_load_store <> R:78 var
R10759:10762 Coq.Init.Datatypes <> Some constr
R10765:10772 VST.floyd.field_at <> field_at def
R10791:10791 VST.floyd.sc_set_load_store <> p:75 var
R10789:10789 VST.floyd.sc_set_load_store <> v:91 var
R10784:10787 VST.floyd.sc_set_load_store <> gfs0:84 var
R10777:10782 VST.floyd.sc_set_load_store <> t_root:83 var
R10774:10775 VST.floyd.sc_set_load_store <> sh:73 var
R10717:10719 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10713:10716 VST.floyd.sc_set_load_store <> gfs':87 var
R10725:10728 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R10720:10724 VST.floyd.sc_set_load_store <> gfs1':70 var
R10729:10732 VST.floyd.sc_set_load_store <> gfs0:84 var
R10688:10690 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10685:10687 VST.floyd.sc_set_load_store <> gfs:86 var
R10695:10698 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R10691:10694 VST.floyd.sc_set_load_store <> gfs1:85 var
R10699:10702 VST.floyd.sc_set_load_store <> gfs0:84 var
R10641:10643 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10611:10629 VST.floyd.nested_field_lemmas <> nested_field_offset def
R10638:10640 VST.floyd.sc_set_load_store <> gfs:86 var
R10631:10636 VST.floyd.sc_set_load_store <> t_root:83 var
R10644:10662 VST.floyd.nested_field_lemmas <> nested_field_offset def
R10671:10674 VST.floyd.sc_set_load_store <> gfs':87 var
R10664:10669 VST.floyd.sc_set_load_store <> t_root:83 var
R10593:10595 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10545:10560 compcert.cfrontend.Ctypes <> type_is_volatile def
R10563:10579 VST.floyd.nested_field_lemmas <> nested_field_type def
R10588:10591 VST.floyd.sc_set_load_store <> gfs':87 var
R10581:10586 VST.floyd.sc_set_load_store <> t_root:83 var
R10596:10600 Coq.Init.Datatypes <> false constr
R10527:10529 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10480:10495 compcert.cfrontend.Ctypes <> type_is_volatile def
R10498:10514 VST.floyd.nested_field_lemmas <> nested_field_type def
R10523:10525 VST.floyd.sc_set_load_store <> gfs:86 var
R10516:10521 VST.floyd.sc_set_load_store <> t_root:83 var
R10530:10534 Coq.Init.Datatypes <> false constr
R10443:10462 VST.veric.SeparationLogic <> decode_encode_val_ok def
R10467:10469 VST.floyd.sc_set_load_store <> ch':82 var
R10464:10465 VST.floyd.sc_set_load_store <> ch:81 var
R10426:10428 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10372:10375 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R10329:10340 VST.veric.SeparationLogic <> numeric_type def
R10343:10359 VST.floyd.nested_field_lemmas <> nested_field_type def
R10368:10370 VST.floyd.sc_set_load_store <> gfs:86 var
R10361:10366 VST.floyd.sc_set_load_store <> t_root:83 var
R10376:10387 VST.veric.SeparationLogic <> numeric_type def
R10390:10406 VST.floyd.nested_field_lemmas <> nested_field_type def
R10415:10418 VST.floyd.sc_set_load_store <> gfs':87 var
R10408:10413 VST.floyd.sc_set_load_store <> t_root:83 var
R10429:10432 Coq.Init.Datatypes <> true constr
R10303:10305 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10260:10270 compcert.cfrontend.Ctypes <> access_mode def
R10273:10289 VST.floyd.nested_field_lemmas <> nested_field_type def
R10298:10301 VST.floyd.sc_set_load_store <> gfs':87 var
R10291:10296 VST.floyd.sc_set_load_store <> t_root:83 var
R10306:10313 compcert.cfrontend.Ctypes <> By_value constr
R10315:10317 VST.floyd.sc_set_load_store <> ch':82 var
R10236:10238 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10194:10204 compcert.cfrontend.Ctypes <> access_mode def
R10207:10223 VST.floyd.nested_field_lemmas <> nested_field_type def
R10232:10234 VST.floyd.sc_set_load_store <> gfs:86 var
R10225:10230 VST.floyd.sc_set_load_store <> t_root:83 var
R10239:10246 compcert.cfrontend.Ctypes <> By_value constr
R10248:10249 VST.floyd.sc_set_load_store <> ch:81 var
R10153:10155 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10144:10149 compcert.cfrontend.Clight <> typeof def
R10151:10152 VST.floyd.sc_set_load_store <> e1:79 var
R10156:10172 VST.floyd.nested_field_lemmas <> nested_field_type def
R10181:10183 VST.floyd.sc_set_load_store <> gfs:86 var
R10174:10179 VST.floyd.sc_set_load_store <> t_root:83 var
R11806:11824 VST.floyd.stronger <> field_at_data_equal thm
R11806:11824 VST.floyd.stronger <> field_at_data_equal thm
R11806:11824 VST.floyd.stronger <> field_at_data_equal thm
R11913:11916 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R11884:11899 VST.floyd.nested_field_lemmas <> field_compatible def
R11917:11932 VST.floyd.nested_field_lemmas <> field_compatible def
R11913:11916 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R11884:11899 VST.floyd.nested_field_lemmas <> field_compatible def
R11917:11932 VST.floyd.nested_field_lemmas <> field_compatible def
R11973:11980 VST.msl.log_normalize <> add_andp thm
R11992:11999 VST.msl.log_normalize <> add_andp thm
R11973:11980 VST.msl.log_normalize <> add_andp thm
R11973:11980 VST.msl.log_normalize <> add_andp thm
R11992:11999 VST.msl.log_normalize <> add_andp thm
R11992:11999 VST.msl.log_normalize <> add_andp thm
R12178:12181 VST.msl.seplog <> ::logic:x_'&&'_x not
R12137:12158 VST.msl.seplog <> ::logic:x_'&&'_x not
R12177:12177 VST.msl.seplog <> ::logic:x_'&&'_x not
R12073:12076 VST.msl.seplog <> ::logic:x_'&&'_x not
R12049:12053 VST.veric.SeparationLogic <> local def
R12056:12065 VST.veric.SeparationLogic <> tc_environ def
R12077:12081 VST.veric.SeparationLogic <> local def
R12084:12086 VST.veric.lift LiftNotation :::'`'_x not
R12118:12135 VST.veric.lift LiftNotation :::'`'_x not
R12087:12088 Coq.Init.Logic <> eq ind
R12091:12103 VST.floyd.nested_field_lemmas <> field_address def
R12121:12131 VST.veric.expr <> eval_lvalue def
R12159:12167 VST.veric.SeparationLogic <> tc_lvalue def
R12182:12185 VST.msl.seplog <> ::logic:'!!'_x not
R12216:12216 VST.msl.seplog <> ::logic:'!!'_x not
R12186:12201 VST.floyd.nested_field_lemmas <> field_compatible def
R12020:12032 VST.msl.seplog <> derives_trans meth
R12178:12181 VST.msl.seplog <> ::logic:x_'&&'_x not
R12137:12158 VST.msl.seplog <> ::logic:x_'&&'_x not
R12177:12177 VST.msl.seplog <> ::logic:x_'&&'_x not
R12073:12076 VST.msl.seplog <> ::logic:x_'&&'_x not
R12049:12053 VST.veric.SeparationLogic <> local def
R12056:12065 VST.veric.SeparationLogic <> tc_environ def
R12077:12081 VST.veric.SeparationLogic <> local def
R12084:12086 VST.veric.lift LiftNotation :::'`'_x not
R12118:12135 VST.veric.lift LiftNotation :::'`'_x not
R12087:12088 Coq.Init.Logic <> eq ind
R12091:12103 VST.floyd.nested_field_lemmas <> field_address def
R12121:12131 VST.veric.expr <> eval_lvalue def
R12159:12167 VST.veric.SeparationLogic <> tc_lvalue def
R12182:12185 VST.msl.seplog <> ::logic:'!!'_x not
R12216:12216 VST.msl.seplog <> ::logic:'!!'_x not
R12186:12201 VST.floyd.nested_field_lemmas <> field_compatible def
R12020:12032 VST.msl.seplog <> derives_trans meth
R12248:12255 VST.msl.log_normalize <> prop_and thm
R12248:12255 VST.msl.log_normalize <> prop_and thm
R12248:12255 VST.msl.log_normalize <> prop_and thm
R12269:12273 VST.veric.SeparationLogic <> local def
R12276:12280 VST.veric.mpred <> lift1 def
R12325:12336 VST.msl.log_normalize <> andp_derives thm
R12325:12336 VST.msl.log_normalize <> andp_derives thm
R12371:12383 VST.msl.seplog <> derives_trans meth
R12393:12414 VST.veric.SeparationLogic <> typecheck_lvalue_sound thm
R12371:12383 VST.msl.seplog <> derives_trans meth
R12393:12414 VST.veric.SeparationLogic <> typecheck_lvalue_sound thm
R12528:12551 VST.floyd.nested_loadstore <> nested_field_ramif_store thm
R12528:12551 VST.floyd.nested_loadstore <> nested_field_ramif_store thm
R12609:12647 VST.floyd.loadstore_field_at <> semax_store_nth_ram_field_at_union_hack thm
R12609:12647 VST.floyd.loadstore_field_at <> semax_store_nth_ram_field_at_union_hack thm
R12686:12698 VST.floyd.nested_field_lemmas <> field_address def
R12710:12716 VST.msl.Coqlib2 <> if_true thm
R12710:12716 VST.msl.Coqlib2 <> if_true thm
R12710:12716 VST.msl.Coqlib2 <> if_true thm
R12710:12716 VST.msl.Coqlib2 <> if_true thm
R12710:12716 VST.msl.Coqlib2 <> if_true thm
R12760:12767 VST.floyd.jmeq_lemmas <> JMeq_sym thm
R12760:12767 VST.floyd.jmeq_lemmas <> JMeq_sym thm
R12797:12805 VST.floyd.field_at <> field_at_ def
R12822:12825 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12841:12849 VST.floyd.field_at <> field_at_ def
R12867:12870 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12797:12805 VST.floyd.field_at <> field_at_ def
R12822:12825 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12841:12849 VST.floyd.field_at <> field_at_ def
R12867:12870 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12899:12920 VST.floyd.field_at <> field_at__memory_block thm
R12899:12920 VST.floyd.field_at <> field_at__memory_block thm
R12899:12920 VST.floyd.field_at <> field_at__memory_block thm
R12899:12920 VST.floyd.field_at <> field_at__memory_block thm
R12899:12920 VST.floyd.field_at <> field_at__memory_block thm
R12934:12946 VST.floyd.nested_field_lemmas <> field_address def
R12958:12964 VST.msl.Coqlib2 <> if_true thm
R12958:12964 VST.msl.Coqlib2 <> if_true thm
R12958:12964 VST.msl.Coqlib2 <> if_true thm
R12958:12964 VST.msl.Coqlib2 <> if_true thm
R12958:12964 VST.msl.Coqlib2 <> if_true thm
R13023:13028 VST.veric.expr <> sizeof def
R13041:13057 VST.veric.mpred <> size_chunk_sizeof thm
R13041:13057 VST.veric.mpred <> size_chunk_sizeof thm
R13041:13057 VST.veric.mpred <> size_chunk_sizeof thm
R13041:13057 VST.veric.mpred <> size_chunk_sizeof thm
R13041:13057 VST.veric.mpred <> size_chunk_sizeof thm
R13078:13114 VST.veric.semax_straight <> decode_encode_val_size thm
R13078:13114 VST.veric.semax_straight <> decode_encode_val_size thm
R13137:13144 VST.msl.log_normalize <> add_andp thm
R13156:13163 VST.msl.log_normalize <> add_andp thm
R13137:13144 VST.msl.log_normalize <> add_andp thm
R13137:13144 VST.msl.log_normalize <> add_andp thm
R13156:13163 VST.msl.log_normalize <> add_andp thm
R13156:13163 VST.msl.log_normalize <> add_andp thm
R13196:13203 VST.floyd.sc_set_load_store SEMAX_SC <> sec
ind 13389:13407 <> Ptrofs_eqm_unsigned
constr 13435:13458 <> Ptrofs_eqm_unsigned_repr
R13416:13419 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13421:13424 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13420:13420 Coq.Numbers.BinNums <> Z ind
R13410:13415 compcert.lib.Integers <> ptrofs syndef
binder 13468:13468 <> z:95
R13471:13489 VST.floyd.sc_set_load_store <> Ptrofs_eqm_unsigned:93 ind
R13507:13507 VST.floyd.sc_set_load_store <> z:95 var
R13492:13502 compcert.lib.Integers Ptrofs repr def
R13504:13504 VST.floyd.sc_set_load_store <> z:95 var
prf 13517:13540 <> Ptrofs_eqm_unsigned_spec
binder 13550:13550 <> i:96
binder 13552:13552 <> z:97
R13580:13583 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13584:13593 compcert.lib.Integers Ptrofs eqm def
R13615:13615 VST.floyd.sc_set_load_store <> z:97 var
R13596:13610 compcert.lib.Integers Ptrofs unsigned def
R13612:13612 VST.floyd.sc_set_load_store <> i:96 var
R13557:13575 VST.floyd.sc_set_load_store <> Ptrofs_eqm_unsigned ind
R13579:13579 VST.floyd.sc_set_load_store <> z:97 var
R13577:13577 VST.floyd.sc_set_load_store <> i:96 var
R13652:13665 compcert.lib.Integers Ptrofs eqm_sym thm
R13668:13691 compcert.lib.Integers Ptrofs eqm_unsigned_repr thm
R13652:13665 compcert.lib.Integers Ptrofs eqm_sym thm
R13668:13691 compcert.lib.Integers Ptrofs eqm_unsigned_repr thm
prf 13706:13733 <> ptrofs_unsigned_ofint64_repr
R13756:13762 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 13770:13770 <> x:98
R13835:13853 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13773:13783 compcert.lib.Integers Ptrofs repr def
R13786:13800 compcert.lib.Integers Ptrofs unsigned def
R13803:13817 compcert.lib.Integers Ptrofs of_int64 def
R13820:13829 compcert.lib.Integers Int64 repr def
R13831:13831 VST.floyd.sc_set_load_store <> x:98 var
R13854:13864 compcert.lib.Integers Ptrofs repr def
R13866:13866 VST.floyd.sc_set_load_store <> x:98 var
R13749:13751 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13738:13748 compcert.x86_32.Archi <> ptr64 def
R13752:13755 Coq.Init.Datatypes <> true constr
R13891:13905 compcert.lib.Integers Ptrofs of_int64 def
R13916:13949 VST.floyd.efield_lemmas <> Ptrofs_repr_Int64_unsigned_special thm
R13916:13949 VST.floyd.efield_lemmas <> Ptrofs_repr_Int64_unsigned_special thm
R13916:13949 VST.floyd.efield_lemmas <> Ptrofs_repr_Int64_unsigned_special thm
R13968:13987 compcert.lib.Integers Ptrofs repr_unsigned thm
R13968:13987 compcert.lib.Integers Ptrofs repr_unsigned thm
R13968:13987 compcert.lib.Integers Ptrofs repr_unsigned thm
R14085:14116 VST.floyd.efield_lemmas <> Ptrofs_repr_Int_unsigned_special thm
R14147:14180 VST.floyd.efield_lemmas <> Ptrofs_repr_Int64_unsigned_special thm
R14227:14245 VST.floyd.sc_set_load_store <> Ptrofs_eqm_unsigned ind
R14227:14245 VST.floyd.sc_set_load_store <> Ptrofs_eqm_unsigned ind
R14282:14292 compcert.lib.Integers Ptrofs repr def
R14282:14292 compcert.lib.Integers Ptrofs repr def
R14313:14322 compcert.lib.Integers Ptrofs sub def
R14313:14322 compcert.lib.Integers Ptrofs sub def
R14362:14371 compcert.lib.Integers Ptrofs add def
R14362:14371 compcert.lib.Integers Ptrofs add def
R14411:14420 compcert.lib.Integers Ptrofs mul def
R14411:14420 compcert.lib.Integers Ptrofs mul def
R14460:14469 compcert.lib.Integers Ptrofs and def
R14460:14469 compcert.lib.Integers Ptrofs and def
R14509:14517 compcert.lib.Integers Ptrofs or def
R14509:14517 compcert.lib.Integers Ptrofs or def
R14663:14682 compcert.lib.Integers Ptrofs repr_unsigned thm
R14533:14541 compcert.lib.Integers Ptrofs or def
R14485:14494 compcert.lib.Integers Ptrofs and def
R14436:14445 compcert.lib.Integers Ptrofs mul def
R14387:14396 compcert.lib.Integers Ptrofs add def
R14338:14347 compcert.lib.Integers Ptrofs sub def
R14724:14751 VST.floyd.sc_set_load_store <> ptrofs_unsigned_ofint64_repr thm
R14779:14802 VST.floyd.sc_set_load_store <> Ptrofs_eqm_unsigned_repr constr
ind 14820:14839 <> msubst_efield_denote
constr 14983:15006 <> msubst_efield_denote_nil
constr 15055:15085 <> msubst_efield_denote_cons_array
constr 15398:15435 <> msubst_efield_denote_cons_array_ptrofs
constr 15737:15768 <> msubst_efield_denote_cons_struct
constr 15929:15959 <> msubst_efield_denote_cons_union
R14846:14854 VST.veric.mpred <> compspecs class
binder 14842:14843 <> cs:99
R14865:14873 VST.veric.seplog <> tycontext ind
binder 14858:14862 <> Delta:100
R14881:14887 compcert.lib.Maps PTree t def
R14889:14891 compcert.common.Values <> val ind
binder 14877:14878 <> T1:101
R14899:14905 compcert.lib.Maps PTree t def
R14912:14914 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R14908:14911 compcert.cfrontend.Ctypes <> type ind
R14915:14917 compcert.common.Values <> val ind
binder 14895:14896 <> T2:102
R14926:14931 Coq.Init.Datatypes <> option ind
R14933:14939 VST.veric.SeparationLogic <> globals def
binder 14922:14923 <> GV:103
R14954:14957 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14969:14972 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14958:14961 Coq.Init.Datatypes <> list ind
R14963:14968 VST.floyd.nested_field_lemmas <> gfield ind
R14943:14946 Coq.Init.Datatypes <> list ind
R14948:14953 VST.floyd.efield_lemmas <> efield ind
R15009:15028 VST.floyd.sc_set_load_store <> msubst_efield_denote:104 ind
R15049:15051 Coq.Init.Datatypes <> nil constr
R15045:15047 Coq.Init.Datatypes <> nil constr
R15042:15043 VST.floyd.sc_set_load_store <> GV:103 var
R15039:15040 VST.floyd.sc_set_load_store <> T2:102 var
R15036:15037 VST.floyd.sc_set_load_store <> T1:101 var
R15030:15034 VST.floyd.sc_set_load_store <> Delta:100 var
binder 15095:15096 <> ei:106
binder 15098:15098 <> i:107
binder 15100:15101 <> i':108
binder 15103:15105 <> efs:109
binder 15107:15109 <> gfs:110
R15146:15153 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15205:15212 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15254:15261 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15305:15312 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15313:15332 VST.floyd.sc_set_load_store <> msubst_efield_denote:104 ind
R15387:15390 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15374:15383 VST.floyd.nested_field_lemmas <> ArraySubsc constr
R15385:15386 VST.floyd.sc_set_load_store <> i':108 var
R15391:15393 VST.floyd.sc_set_load_store <> gfs:110 var
R15364:15367 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15350:15360 VST.floyd.efield_lemmas <> eArraySubsc constr
R15362:15363 VST.floyd.sc_set_load_store <> ei:106 var
R15368:15370 VST.floyd.sc_set_load_store <> efs:109 var
R15346:15347 VST.floyd.sc_set_load_store <> GV:103 var
R15343:15344 VST.floyd.sc_set_load_store <> T2:102 var
R15340:15341 VST.floyd.sc_set_load_store <> T1:101 var
R15334:15338 VST.floyd.sc_set_load_store <> Delta:100 var
R15262:15281 VST.floyd.sc_set_load_store <> msubst_efield_denote:104 ind
R15302:15304 VST.floyd.sc_set_load_store <> gfs:110 var
R15298:15300 VST.floyd.sc_set_load_store <> efs:109 var
R15295:15296 VST.floyd.sc_set_load_store <> GV:103 var
R15292:15293 VST.floyd.sc_set_load_store <> T2:102 var
R15289:15290 VST.floyd.sc_set_load_store <> T1:101 var
R15283:15287 VST.floyd.sc_set_load_store <> Delta:100 var
R15249:15251 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15213:15234 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R15248:15248 VST.floyd.sc_set_load_store <> i:107 var
R15237:15242 compcert.cfrontend.Clight <> typeof def
R15244:15245 VST.floyd.sc_set_load_store <> ei:106 var
R15252:15253 VST.floyd.sc_set_load_store <> i':108 var
R15189:15191 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15154:15169 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R15187:15188 VST.floyd.sc_set_load_store <> ei:106 var
R15183:15184 VST.floyd.sc_set_load_store <> GV:103 var
R15180:15181 VST.floyd.sc_set_load_store <> T2:102 var
R15177:15178 VST.floyd.sc_set_load_store <> T1:101 var
R15171:15175 VST.floyd.sc_set_load_store <> Delta:100 var
R15192:15195 Coq.Init.Datatypes <> Some constr
R15198:15201 compcert.common.Values <> Vint constr
R15203:15203 VST.floyd.sc_set_load_store <> i:107 var
R15139:15141 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15116:15126 VST.veric.expr <> is_int_type def
R15129:15134 compcert.cfrontend.Clight <> typeof def
R15136:15137 VST.floyd.sc_set_load_store <> ei:106 var
R15142:15145 Coq.Init.Datatypes <> true constr
binder 15445:15446 <> ei:111
binder 15448:15448 <> i:112
binder 15450:15451 <> i':113
binder 15453:15455 <> efs:114
binder 15457:15459 <> gfs:115
R15499:15506 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15561:15568 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15593:15600 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15644:15651 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15652:15671 VST.floyd.sc_set_load_store <> msubst_efield_denote:104 ind
R15726:15729 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15713:15722 VST.floyd.nested_field_lemmas <> ArraySubsc constr
R15724:15725 VST.floyd.sc_set_load_store <> i':113 var
R15730:15732 VST.floyd.sc_set_load_store <> gfs:115 var
R15703:15706 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15689:15699 VST.floyd.efield_lemmas <> eArraySubsc constr
R15701:15702 VST.floyd.sc_set_load_store <> ei:111 var
R15707:15709 VST.floyd.sc_set_load_store <> efs:114 var
R15685:15686 VST.floyd.sc_set_load_store <> GV:103 var
R15682:15683 VST.floyd.sc_set_load_store <> T2:102 var
R15679:15680 VST.floyd.sc_set_load_store <> T1:101 var
R15673:15677 VST.floyd.sc_set_load_store <> Delta:100 var
R15601:15620 VST.floyd.sc_set_load_store <> msubst_efield_denote:104 ind
R15641:15643 VST.floyd.sc_set_load_store <> gfs:115 var
R15637:15639 VST.floyd.sc_set_load_store <> efs:114 var
R15634:15635 VST.floyd.sc_set_load_store <> GV:103 var
R15631:15632 VST.floyd.sc_set_load_store <> T2:102 var
R15628:15629 VST.floyd.sc_set_load_store <> T1:101 var
R15622:15626 VST.floyd.sc_set_load_store <> Delta:100 var
R15569:15587 VST.floyd.sc_set_load_store <> Ptrofs_eqm_unsigned ind
R15591:15592 VST.floyd.sc_set_load_store <> i':113 var
R15589:15589 VST.floyd.sc_set_load_store <> i:112 var
R15542:15544 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15507:15522 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R15540:15541 VST.floyd.sc_set_load_store <> ei:111 var
R15536:15537 VST.floyd.sc_set_load_store <> GV:103 var
R15533:15534 VST.floyd.sc_set_load_store <> T2:102 var
R15530:15531 VST.floyd.sc_set_load_store <> T1:101 var
R15524:15528 VST.floyd.sc_set_load_store <> Delta:100 var
R15545:15548 Coq.Init.Datatypes <> Some constr
R15551:15557 compcert.common.Values <> Vptrofs def
R15559:15559 VST.floyd.sc_set_load_store <> i:112 var
R15492:15494 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15466:15479 VST.veric.expr <> is_ptrofs_type def
R15482:15487 compcert.cfrontend.Clight <> typeof def
R15489:15490 VST.floyd.sc_set_load_store <> ei:111 var
R15495:15498 Coq.Init.Datatypes <> true constr
binder 15778:15778 <> i:116
binder 15780:15782 <> efs:117
binder 15784:15786 <> gfs:118
R15836:15843 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15844:15863 VST.floyd.sc_set_load_store <> msubst_efield_denote:104 ind
R15918:15921 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15905:15915 VST.floyd.nested_field_lemmas <> StructField constr
R15917:15917 VST.floyd.sc_set_load_store <> i:116 var
R15922:15924 VST.floyd.sc_set_load_store <> gfs:118 var
R15895:15898 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15881:15892 VST.floyd.efield_lemmas <> eStructField constr
R15894:15894 VST.floyd.sc_set_load_store <> i:116 var
R15899:15901 VST.floyd.sc_set_load_store <> efs:117 var
R15877:15878 VST.floyd.sc_set_load_store <> GV:103 var
R15874:15875 VST.floyd.sc_set_load_store <> T2:102 var
R15871:15872 VST.floyd.sc_set_load_store <> T1:101 var
R15865:15869 VST.floyd.sc_set_load_store <> Delta:100 var
R15793:15812 VST.floyd.sc_set_load_store <> msubst_efield_denote:104 ind
R15833:15835 VST.floyd.sc_set_load_store <> gfs:118 var
R15829:15831 VST.floyd.sc_set_load_store <> efs:117 var
R15826:15827 VST.floyd.sc_set_load_store <> GV:103 var
R15823:15824 VST.floyd.sc_set_load_store <> T2:102 var
R15820:15821 VST.floyd.sc_set_load_store <> T1:101 var
R15814:15818 VST.floyd.sc_set_load_store <> Delta:100 var
binder 15969:15969 <> i:119
binder 15971:15973 <> efs:120
binder 15975:15977 <> gfs:121
R16027:16034 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16035:16054 VST.floyd.sc_set_load_store <> msubst_efield_denote:104 ind
R16107:16110 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16095:16104 VST.floyd.nested_field_lemmas <> UnionField constr
R16106:16106 VST.floyd.sc_set_load_store <> i:119 var
R16111:16113 VST.floyd.sc_set_load_store <> gfs:121 var
R16085:16088 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16072:16082 VST.floyd.efield_lemmas <> eUnionField constr
R16084:16084 VST.floyd.sc_set_load_store <> i:119 var
R16089:16091 VST.floyd.sc_set_load_store <> efs:120 var
R16068:16069 VST.floyd.sc_set_load_store <> GV:103 var
R16065:16066 VST.floyd.sc_set_load_store <> T2:102 var
R16062:16063 VST.floyd.sc_set_load_store <> T1:101 var
R16056:16060 VST.floyd.sc_set_load_store <> Delta:100 var
R15984:16003 VST.floyd.sc_set_load_store <> msubst_efield_denote:104 ind
R16024:16026 VST.floyd.sc_set_load_store <> gfs:121 var
R16020:16022 VST.floyd.sc_set_load_store <> efs:120 var
R16017:16018 VST.floyd.sc_set_load_store <> GV:103 var
R16014:16015 VST.floyd.sc_set_load_store <> T2:102 var
R16011:16012 VST.floyd.sc_set_load_store <> T1:101 var
R16005:16009 VST.floyd.sc_set_load_store <> Delta:100 var
prf 16124:16146 <> msubst_efield_denote_eq
R16161:16169 VST.veric.mpred <> compspecs class
binder 16157:16158 <> cs:122
binder 16172:16176 <> Delta:123
binder 16178:16178 <> P:124
binder 16180:16181 <> T1:125
binder 16183:16184 <> T2:126
binder 16186:16187 <> GV:127
binder 16189:16189 <> R:128
binder 16191:16193 <> efs:129
binder 16195:16197 <> gfs:130
R16245:16250 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16251:16257 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R16263:16264 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R16308:16312 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R16258:16262 VST.floyd.sc_set_load_store <> Delta:123 var
R16265:16269 VST.floyd.canon <> PROPx def
R16274:16279 VST.floyd.canon <> LOCALx def
R16300:16303 VST.floyd.canon <> SEPx def
R16305:16305 VST.floyd.sc_set_load_store <> R:128 var
R16282:16287 VST.floyd.local2ptree_denote <> LocalD def
R16295:16296 VST.floyd.sc_set_load_store <> GV:127 var
R16292:16293 VST.floyd.sc_set_load_store <> T2:126 var
R16289:16290 VST.floyd.sc_set_load_store <> T1:125 var
R16271:16271 VST.floyd.sc_set_load_store <> P:124 var
R16313:16317 VST.veric.SeparationLogic <> local def
R16320:16332 VST.floyd.efield_lemmas <> efield_denote ind
R16338:16340 VST.floyd.sc_set_load_store <> gfs:130 var
R16334:16336 VST.floyd.sc_set_load_store <> efs:129 var
R16202:16221 VST.floyd.sc_set_load_store <> msubst_efield_denote ind
R16242:16244 VST.floyd.sc_set_load_store <> gfs:130 var
R16238:16240 VST.floyd.sc_set_load_store <> efs:129 var
R16235:16236 VST.floyd.sc_set_load_store <> GV:127 var
R16232:16233 VST.floyd.sc_set_load_store <> T2:126 var
R16229:16230 VST.floyd.sc_set_load_store <> T1:125 var
R16223:16227 VST.floyd.sc_set_load_store <> Delta:123 var
R16455:16464 VST.msl.seplog <> prop_right meth
R16455:16464 VST.msl.seplog <> prop_right meth
R16506:16524 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R16506:16524 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R16560:16567 VST.msl.log_normalize <> add_andp thm
R16579:16586 VST.msl.log_normalize <> add_andp thm
R16560:16567 VST.msl.log_normalize <> add_andp thm
R16560:16567 VST.msl.log_normalize <> add_andp thm
R16579:16586 VST.msl.log_normalize <> add_andp thm
R16579:16586 VST.msl.log_normalize <> add_andp thm
R16667:16676 VST.msl.log_normalize <> andp_assoc thm
R16685:16694 VST.msl.seplog <> andp_left2 meth
R16697:16706 VST.msl.seplog <> andp_left2 meth
R16667:16676 VST.msl.log_normalize <> andp_assoc thm
R16667:16676 VST.msl.log_normalize <> andp_assoc thm
R16667:16676 VST.msl.log_normalize <> andp_assoc thm
R16667:16676 VST.msl.log_normalize <> andp_assoc thm
R16685:16694 VST.msl.seplog <> andp_left2 meth
R16697:16706 VST.msl.seplog <> andp_left2 meth
R16720:16724 VST.veric.SeparationLogic <> local def
R16727:16731 VST.veric.mpred <> lift1 def
R16828:16833 compcert.cfrontend.Clight <> typeof def
R16880:16901 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R16925:16940 compcert.lib.Integers Int signed_range thm
R16828:16833 compcert.cfrontend.Clight <> typeof def
R16925:16940 compcert.lib.Integers Int signed_range thm
R16925:16940 compcert.lib.Integers Int signed_range thm
R16925:16940 compcert.lib.Integers Int signed_range thm
R16925:16940 compcert.lib.Integers Int signed_range thm
R16925:16940 compcert.lib.Integers Int signed_range thm
R16925:16940 compcert.lib.Integers Int signed_range thm
R16925:16940 compcert.lib.Integers Int signed_range thm
R16925:16940 compcert.lib.Integers Int signed_range thm
R17004:17025 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R17042:17047 compcert.cfrontend.Clight <> typeof def
R17042:17047 compcert.cfrontend.Clight <> typeof def
R17098:17112 compcert.lib.Integers Int repr_signed thm
R17121:17137 compcert.lib.Integers Int repr_unsigned thm
R17098:17112 compcert.lib.Integers Int repr_signed thm
R17098:17112 compcert.lib.Integers Int repr_signed thm
R17098:17112 compcert.lib.Integers Int repr_signed thm
R17098:17112 compcert.lib.Integers Int repr_signed thm
R17098:17112 compcert.lib.Integers Int repr_signed thm
R17098:17112 compcert.lib.Integers Int repr_signed thm
R17098:17112 compcert.lib.Integers Int repr_signed thm
R17098:17112 compcert.lib.Integers Int repr_signed thm
R17121:17137 compcert.lib.Integers Int repr_unsigned thm
R17152:17170 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R17152:17170 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R17206:17213 VST.msl.log_normalize <> add_andp thm
R17225:17232 VST.msl.log_normalize <> add_andp thm
R17206:17213 VST.msl.log_normalize <> add_andp thm
R17206:17213 VST.msl.log_normalize <> add_andp thm
R17225:17232 VST.msl.log_normalize <> add_andp thm
R17225:17232 VST.msl.log_normalize <> add_andp thm
R17313:17322 VST.msl.log_normalize <> andp_assoc thm
R17331:17340 VST.msl.seplog <> andp_left2 meth
R17343:17352 VST.msl.seplog <> andp_left2 meth
R17313:17322 VST.msl.log_normalize <> andp_assoc thm
R17313:17322 VST.msl.log_normalize <> andp_assoc thm
R17313:17322 VST.msl.log_normalize <> andp_assoc thm
R17313:17322 VST.msl.log_normalize <> andp_assoc thm
R17331:17340 VST.msl.seplog <> andp_left2 meth
R17343:17352 VST.msl.seplog <> andp_left2 meth
R17366:17370 VST.veric.SeparationLogic <> local def
R17373:17377 VST.veric.mpred <> lift1 def
R17436:17459 VST.floyd.efield_lemmas <> efield_denote_ArraySubsc constr
R17436:17459 VST.floyd.efield_lemmas <> efield_denote_ArraySubsc constr
R17479:17485 compcert.common.Values <> Vptrofs def
R17507:17517 compcert.x86_32.Archi <> ptr64 def
R17507:17517 compcert.x86_32.Archi <> ptr64 def
R17543:17571 VST.floyd.efield_lemmas <> array_subsc_denote_intro_long constr
R17543:17571 VST.floyd.efield_lemmas <> array_subsc_denote_intro_long constr
R17584:17607 VST.floyd.sc_set_load_store <> Ptrofs_eqm_unsigned_spec thm
R17584:17607 VST.floyd.sc_set_load_store <> Ptrofs_eqm_unsigned_spec thm
R17693:17704 compcert.lib.Integers Ptrofs eqm64 thm
R17693:17704 compcert.lib.Integers Ptrofs eqm64 thm
R17693:17704 compcert.lib.Integers Ptrofs eqm64 thm
R17731:17748 compcert.lib.Integers Int64 eqm_samerepr thm
R17731:17748 compcert.lib.Integers Int64 eqm_samerepr thm
R17773:17800 VST.floyd.efield_lemmas <> array_subsc_denote_intro_int constr
R17773:17800 VST.floyd.efield_lemmas <> array_subsc_denote_intro_int constr
R17813:17836 VST.floyd.sc_set_load_store <> Ptrofs_eqm_unsigned_spec thm
R17813:17836 VST.floyd.sc_set_load_store <> Ptrofs_eqm_unsigned_spec thm
R17922:17933 compcert.lib.Integers Ptrofs eqm32 thm
R17922:17933 compcert.lib.Integers Ptrofs eqm32 thm
R17922:17933 compcert.lib.Integers Ptrofs eqm32 thm
R17961:17973 compcert.lib.Integers Ptrofs to_int def
R17986:18001 compcert.lib.Integers Int eqm_samerepr thm
R17986:18001 compcert.lib.Integers Int eqm_samerepr thm
R18021:18033 VST.msl.seplog <> derives_trans meth
R18021:18033 VST.msl.seplog <> derives_trans meth
R18064:18068 VST.veric.SeparationLogic <> local def
R18071:18075 VST.veric.mpred <> lift1 def
R18158:18170 VST.msl.seplog <> derives_trans meth
R18158:18170 VST.msl.seplog <> derives_trans meth
R18201:18205 VST.veric.SeparationLogic <> local def
R18208:18212 VST.veric.mpred <> lift1 def
R18509:18546 VST.floyd.sc_set_load_store <> msubst_efield_denote_cons_array_ptrofs constr
R18638:18649 VST.msl.Coqlib2 <> f_equal_Some thm
R18700:18702 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18693:18696 compcert.common.Values <> Vint constr
R18703:18709 compcert.common.Values <> Vptrofs def
R18700:18702 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18693:18696 compcert.common.Values <> Vint constr
R18703:18709 compcert.common.Values <> Vptrofs def
R18957:18959 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18949:18953 compcert.common.Values <> Vlong constr
R18960:18966 compcert.common.Values <> Vptrofs def
R18957:18959 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18949:18953 compcert.common.Values <> Vlong constr
R18960:18966 compcert.common.Values <> Vptrofs def
R19221:19223 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19212:19218 compcert.common.Values <> Vptrofs def
R19224:19230 compcert.common.Values <> Vptrofs def
R19221:19223 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19212:19218 compcert.common.Values <> Vptrofs def
R19224:19230 compcert.common.Values <> Vptrofs def
R19268:19270 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19268:19270 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19020:19034 compcert.lib.Integers Ptrofs of_int64 def
R19060:19066 compcert.common.Values <> Vptrofs def
R19076:19086 compcert.x86_32.Archi <> ptr64 def
R19076:19086 compcert.x86_32.Archi <> ptr64 def
R19093:19096 Coq.Init.Datatypes <> true constr
R19131:19154 compcert.lib.Integers Ptrofs to_int64_of_int64 thm
R19157:19163 Coq.Init.Logic <> eq_refl constr
R18763:18775 compcert.lib.Integers Ptrofs of_int def
R18801:18807 compcert.common.Values <> Vptrofs def
R18817:18827 compcert.x86_32.Archi <> ptr64 def
R18817:18827 compcert.x86_32.Archi <> ptr64 def
R18834:18838 Coq.Init.Datatypes <> false constr
R18873:18892 compcert.lib.Integers Ptrofs to_int_of_int thm
R18895:18901 Coq.Init.Logic <> eq_refl constr
R19513:19543 VST.floyd.sc_set_load_store <> msubst_efield_denote_cons_array constr
R19614:19631 VST.floyd.coqlib3 <> ptrofs_to_int_repr thm
R19838:19840 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19800:19821 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R19826:19833 compcert.lib.Integers Int repr def
R19838:19840 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19800:19821 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R19826:19833 compcert.lib.Integers Int repr def
R20193:20195 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20166:20187 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R20193:20195 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20166:20187 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R20227:20248 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R20227:20248 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R20258:20267 compcert.lib.Integers Int signed def
R20296:20317 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R20296:20317 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R20327:20338 compcert.lib.Integers Int unsigned def
R19959:19980 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R20033:20047 compcert.lib.Integers Int signed_repr thm
R20093:20109 compcert.lib.Integers Int unsigned_repr thm
R20438:20440 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20431:20434 Coq.Init.Datatypes <> Some constr
R20438:20440 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20431:20434 Coq.Init.Datatypes <> Some constr
R20635:20666 VST.floyd.sc_set_load_store <> msubst_efield_denote_cons_struct constr
R20680:20710 VST.floyd.sc_set_load_store <> msubst_efield_denote_cons_union constr
R20724:20747 VST.floyd.sc_set_load_store <> msubst_efield_denote_nil constr
ind 20771:20787 <> field_address_gen
constr 20872:20892 <> field_address_gen_nil
constr 21062:21082 <> field_address_gen_app
constr 21270:21291 <> field_address_gen_assu
constr 21420:21441 <> field_address_gen_refl
R20794:20802 VST.veric.mpred <> compspecs class
binder 20790:20791 <> cs:131
R20830:20833 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20858:20861 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20852:20854 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R20838:20840 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R20834:20837 compcert.cfrontend.Ctypes <> type ind
R20841:20844 Coq.Init.Datatypes <> list ind
R20846:20851 VST.floyd.nested_field_lemmas <> gfield ind
R20855:20857 compcert.common.Values <> val ind
R20824:20826 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R20810:20812 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R20806:20809 compcert.cfrontend.Ctypes <> type ind
R20813:20816 Coq.Init.Datatypes <> list ind
R20818:20823 VST.floyd.nested_field_lemmas <> gfield ind
R20827:20829 compcert.common.Values <> val ind
binder 20902:20903 <> t1:134
binder 20905:20906 <> t2:135
binder 20908:20910 <> gfs:136
binder 20912:20912 <> p:137
binder 20914:20916 <> tgp:138
R20952:20959 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20994:21001 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21002:21018 VST.floyd.sc_set_load_store <> field_address_gen:132 ind
R21056:21058 VST.floyd.sc_set_load_store <> tgp:138 var
R21020:21020 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21023:21024 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21028:21030 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21053:21054 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21021:21022 VST.floyd.sc_set_load_store <> t1:134 var
R21025:21027 Coq.Init.Datatypes <> nil constr
R21031:21043 VST.floyd.nested_field_lemmas <> field_address def
R21052:21052 VST.floyd.sc_set_load_store <> p:137 var
R21048:21050 VST.floyd.sc_set_load_store <> gfs:136 var
R21045:21046 VST.floyd.sc_set_load_store <> t2:135 var
R20960:20976 VST.floyd.sc_set_load_store <> field_address_gen:132 ind
R20991:20993 VST.floyd.sc_set_load_store <> tgp:138 var
R20978:20978 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20981:20982 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20986:20987 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20989:20989 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20979:20980 VST.floyd.sc_set_load_store <> t2:135 var
R20983:20985 VST.floyd.sc_set_load_store <> gfs:136 var
R20988:20988 VST.floyd.sc_set_load_store <> p:137 var
R20947:20949 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20923:20939 VST.floyd.nested_field_lemmas <> nested_field_type def
R20944:20946 VST.floyd.sc_set_load_store <> gfs:136 var
R20941:20942 VST.floyd.sc_set_load_store <> t2:135 var
R20950:20951 VST.floyd.sc_set_load_store <> t1:134 var
binder 21092:21093 <> t1:139
binder 21095:21096 <> t2:140
binder 21098:21101 <> gfs1:141
binder 21103:21106 <> gfs2:142
binder 21108:21108 <> p:143
binder 21110:21112 <> tgp:144
R21149:21156 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21200:21207 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21208:21224 VST.floyd.sc_set_load_store <> field_address_gen:132 ind
R21264:21266 VST.floyd.sc_set_load_store <> tgp:144 var
R21226:21226 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21229:21230 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21235:21237 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21261:21262 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21227:21228 VST.floyd.sc_set_load_store <> t1:139 var
R21231:21234 VST.floyd.sc_set_load_store <> gfs1:141 var
R21238:21250 VST.floyd.nested_field_lemmas <> field_address def
R21260:21260 VST.floyd.sc_set_load_store <> p:143 var
R21255:21258 VST.floyd.sc_set_load_store <> gfs2:142 var
R21252:21253 VST.floyd.sc_set_load_store <> t2:140 var
R21157:21173 VST.floyd.sc_set_load_store <> field_address_gen:132 ind
R21197:21199 VST.floyd.sc_set_load_store <> tgp:144 var
R21175:21175 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21178:21179 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21192:21193 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21195:21195 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21176:21177 VST.floyd.sc_set_load_store <> t2:140 var
R21184:21187 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R21180:21183 VST.floyd.sc_set_load_store <> gfs1:141 var
R21188:21191 VST.floyd.sc_set_load_store <> gfs2:142 var
R21194:21194 VST.floyd.sc_set_load_store <> p:143 var
R21144:21146 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21119:21135 VST.floyd.nested_field_lemmas <> nested_field_type def
R21140:21143 VST.floyd.sc_set_load_store <> gfs2:142 var
R21137:21138 VST.floyd.sc_set_load_store <> t2:140 var
R21147:21148 VST.floyd.sc_set_load_store <> t1:139 var
binder 21301:21301 <> t:145
binder 21303:21305 <> gfs:146
binder 21307:21308 <> p1:147
binder 21310:21311 <> p2:148
binder 21313:21315 <> tgp:149
R21329:21336 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21371:21378 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21379:21395 VST.floyd.sc_set_load_store <> field_address_gen:132 ind
R21410:21412 VST.floyd.sc_set_load_store <> tgp:149 var
R21397:21397 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21399:21400 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21404:21405 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21408:21408 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21398:21398 VST.floyd.sc_set_load_store <> t:145 var
R21401:21403 VST.floyd.sc_set_load_store <> gfs:146 var
R21406:21407 VST.floyd.sc_set_load_store <> p1:147 var
R21337:21353 VST.floyd.sc_set_load_store <> field_address_gen:132 ind
R21368:21370 VST.floyd.sc_set_load_store <> tgp:149 var
R21355:21355 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21357:21358 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21362:21363 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21366:21366 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21356:21356 VST.floyd.sc_set_load_store <> t:145 var
R21359:21361 VST.floyd.sc_set_load_store <> gfs:146 var
R21364:21365 VST.floyd.sc_set_load_store <> p2:148 var
R21324:21326 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21322:21323 VST.floyd.sc_set_load_store <> p1:147 var
R21327:21328 VST.floyd.sc_set_load_store <> p2:148 var
binder 21451:21453 <> tgp:150
R21456:21472 VST.floyd.sc_set_load_store <> field_address_gen:132 ind
R21478:21480 VST.floyd.sc_set_load_store <> tgp:150 var
R21474:21476 VST.floyd.sc_set_load_store <> tgp:150 var
prf 21490:21511 <> field_address_gen_fact
R21526:21534 VST.veric.mpred <> compspecs class
binder 21522:21523 <> cs:151
binder 21537:21538 <> t1:152
binder 21540:21543 <> gfs1:153
binder 21545:21546 <> p1:154
binder 21548:21549 <> t2:155
binder 21551:21554 <> gfs2:156
binder 21556:21557 <> p2:157
R21609:21614 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21666:21671 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R21639:21641 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21615:21627 VST.floyd.nested_field_lemmas <> field_address def
R21637:21638 VST.floyd.sc_set_load_store <> p1:154 var
R21632:21635 VST.floyd.sc_set_load_store <> gfs1:153 var
R21629:21630 VST.floyd.sc_set_load_store <> t1:152 var
R21642:21654 VST.floyd.nested_field_lemmas <> field_address def
R21664:21665 VST.floyd.sc_set_load_store <> p2:157 var
R21659:21662 VST.floyd.sc_set_load_store <> gfs2:156 var
R21656:21657 VST.floyd.sc_set_load_store <> t2:155 var
R21725:21731 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R21790:21790 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R21697:21699 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21672:21688 VST.floyd.nested_field_lemmas <> nested_field_type def
R21693:21696 VST.floyd.sc_set_load_store <> gfs1:153 var
R21690:21691 VST.floyd.sc_set_load_store <> t1:152 var
R21700:21716 VST.floyd.nested_field_lemmas <> nested_field_type def
R21721:21724 VST.floyd.sc_set_load_store <> gfs2:156 var
R21718:21719 VST.floyd.sc_set_load_store <> t2:155 var
R21759:21762 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21763:21778 VST.floyd.nested_field_lemmas <> field_compatible def
R21788:21789 VST.floyd.sc_set_load_store <> p1:154 var
R21783:21786 VST.floyd.sc_set_load_store <> gfs1:153 var
R21780:21781 VST.floyd.sc_set_load_store <> t1:152 var
R21732:21747 VST.floyd.nested_field_lemmas <> field_compatible def
R21757:21758 VST.floyd.sc_set_load_store <> p2:157 var
R21752:21755 VST.floyd.sc_set_load_store <> gfs2:156 var
R21749:21750 VST.floyd.sc_set_load_store <> t2:155 var
R21562:21578 VST.floyd.sc_set_load_store <> field_address_gen ind
R21595:21595 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21598:21599 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21604:21605 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21608:21608 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21596:21597 VST.floyd.sc_set_load_store <> t2:155 var
R21600:21603 VST.floyd.sc_set_load_store <> gfs2:156 var
R21606:21607 VST.floyd.sc_set_load_store <> p2:157 var
R21580:21580 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21583:21584 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21589:21590 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21593:21593 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21581:21582 VST.floyd.sc_set_load_store <> t1:152 var
R21585:21588 VST.floyd.sc_set_load_store <> gfs1:153 var
R21591:21592 VST.floyd.sc_set_load_store <> p1:154 var
R21821:21821 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21824:21825 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21830:21831 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21834:21834 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21854:21854 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21857:21858 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21863:21864 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21867:21867 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21821:21821 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21824:21825 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21830:21831 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21834:21834 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21854:21854 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21857:21858 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21863:21864 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21867:21867 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22003:22009 Coq.Init.Logic <> eq_refl constr
R21995:22001 Coq.Init.Logic <> eq_refl constr
R22003:22009 Coq.Init.Logic <> eq_refl constr
R21995:22001 Coq.Init.Logic <> eq_refl constr
R22087:22103 VST.floyd.nested_field_lemmas <> field_address_app thm
R22087:22103 VST.floyd.nested_field_lemmas <> field_address_app thm
R22087:22103 VST.floyd.nested_field_lemmas <> field_address_app thm
R22129:22149 VST.floyd.nested_field_lemmas <> nested_field_type_ind thm
R22129:22149 VST.floyd.nested_field_lemmas <> nested_field_type_ind thm
R22129:22149 VST.floyd.nested_field_lemmas <> nested_field_type_ind thm
R22198:22217 VST.floyd.nested_field_lemmas <> field_compatible_app thm
R22198:22217 VST.floyd.nested_field_lemmas <> field_compatible_app thm
R22293:22299 Coq.Init.Logic <> eq_refl constr
R22285:22291 Coq.Init.Logic <> eq_refl constr
R22293:22299 Coq.Init.Logic <> eq_refl constr
R22285:22291 Coq.Init.Logic <> eq_refl constr
R22377:22393 VST.floyd.nested_field_lemmas <> field_address_app thm
R22377:22393 VST.floyd.nested_field_lemmas <> field_address_app thm
R22377:22393 VST.floyd.nested_field_lemmas <> field_address_app thm
R22408:22442 VST.floyd.nested_field_lemmas <> nested_field_type_nested_field_type thm
R22408:22442 VST.floyd.nested_field_lemmas <> nested_field_type_nested_field_type thm
R22408:22442 VST.floyd.nested_field_lemmas <> nested_field_type_nested_field_type thm
R22491:22510 VST.floyd.nested_field_lemmas <> field_compatible_app thm
R22491:22510 VST.floyd.nested_field_lemmas <> field_compatible_app thm
R22650:22652 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22653:22665 VST.floyd.nested_field_lemmas <> field_address def
R22650:22652 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22653:22665 VST.floyd.nested_field_lemmas <> field_address def
R22678:22680 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22678:22680 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23195:23215 VST.floyd.sc_set_load_store <> field_address_gen_nil constr
R23255:23275 VST.floyd.sc_set_load_store <> field_address_gen_app constr
R23316:23337 VST.floyd.sc_set_load_store <> field_address_gen_assu constr
R23390:23411 VST.floyd.sc_set_load_store <> field_address_gen_refl constr
ind 23437:23461 <> find_type_contradict_pred
constr 23518:23550 <> find_type_contradict_pred_data_at
constr 23648:23681 <> find_type_contradict_pred_data_at_
constr 23774:23807 <> find_type_contradict_pred_field_at
constr 23910:23944 <> find_type_contradict_pred_field_at_
R23468:23476 VST.veric.mpred <> compspecs class
binder 23464:23465 <> cs:158
R23483:23486 compcert.cfrontend.Ctypes <> type ind
binder 23480:23480 <> t:159
R23493:23495 compcert.common.Values <> val ind
binder 23490:23490 <> p:160
R23504:23507 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23499:23503 VST.veric.mpred <> mpred def
binder 23560:23561 <> sh:163
binder 23563:23564 <> t0:164
binder 23566:23567 <> v0:165
R23591:23594 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23595:23619 VST.floyd.sc_set_load_store <> find_type_contradict_pred:161 ind
R23626:23632 VST.floyd.field_at <> data_at def
R23643:23643 VST.floyd.sc_set_load_store <> p:160 var
R23640:23641 VST.floyd.sc_set_load_store <> v0:165 var
R23637:23638 VST.floyd.sc_set_load_store <> t0:164 var
R23634:23635 VST.floyd.sc_set_load_store <> sh:163 var
R23623:23623 VST.floyd.sc_set_load_store <> p:160 var
R23621:23621 VST.floyd.sc_set_load_store <> t:159 var
R23583:23585 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23570:23577 VST.veric.Cop2 <> eqb_type def
R23582:23582 VST.floyd.sc_set_load_store <> t:159 var
R23579:23580 VST.floyd.sc_set_load_store <> t0:164 var
R23586:23590 Coq.Init.Datatypes <> false constr
binder 23691:23692 <> sh:166
binder 23694:23695 <> t0:167
R23719:23722 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23723:23747 VST.floyd.sc_set_load_store <> find_type_contradict_pred:161 ind
R23754:23761 VST.floyd.field_at <> data_at_ def
R23769:23769 VST.floyd.sc_set_load_store <> p:160 var
R23766:23767 VST.floyd.sc_set_load_store <> t0:167 var
R23763:23764 VST.floyd.sc_set_load_store <> sh:166 var
R23751:23751 VST.floyd.sc_set_load_store <> p:160 var
R23749:23749 VST.floyd.sc_set_load_store <> t:159 var
R23711:23713 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23698:23705 VST.veric.Cop2 <> eqb_type def
R23710:23710 VST.floyd.sc_set_load_store <> t:159 var
R23707:23708 VST.floyd.sc_set_load_store <> t0:167 var
R23714:23718 Coq.Init.Datatypes <> false constr
binder 23817:23818 <> sh:168
binder 23820:23821 <> t0:169
binder 23823:23824 <> v0:170
R23848:23851 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23852:23876 VST.floyd.sc_set_load_store <> find_type_contradict_pred:161 ind
R23883:23890 VST.floyd.field_at <> field_at def
R23905:23905 VST.floyd.sc_set_load_store <> p:160 var
R23902:23903 VST.floyd.sc_set_load_store <> v0:170 var
R23898:23900 Coq.Init.Datatypes <> nil constr
R23895:23896 VST.floyd.sc_set_load_store <> t0:169 var
R23892:23893 VST.floyd.sc_set_load_store <> sh:168 var
R23880:23880 VST.floyd.sc_set_load_store <> p:160 var
R23878:23878 VST.floyd.sc_set_load_store <> t:159 var
R23840:23842 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23827:23834 VST.veric.Cop2 <> eqb_type def
R23839:23839 VST.floyd.sc_set_load_store <> t:159 var
R23836:23837 VST.floyd.sc_set_load_store <> t0:169 var
R23843:23847 Coq.Init.Datatypes <> false constr
binder 23954:23955 <> sh:171
binder 23957:23958 <> t0:172
R23982:23985 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23986:24010 VST.floyd.sc_set_load_store <> find_type_contradict_pred:161 ind
R24017:24025 VST.floyd.field_at <> field_at_ def
R24037:24037 VST.floyd.sc_set_load_store <> p:160 var
R24033:24035 Coq.Init.Datatypes <> nil constr
R24030:24031 VST.floyd.sc_set_load_store <> t0:172 var
R24027:24028 VST.floyd.sc_set_load_store <> sh:171 var
R24014:24014 VST.floyd.sc_set_load_store <> p:160 var
R24012:24012 VST.floyd.sc_set_load_store <> t:159 var
R23974:23976 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23961:23968 VST.veric.Cop2 <> eqb_type def
R23973:23973 VST.floyd.sc_set_load_store <> t:159 var
R23970:23971 VST.floyd.sc_set_load_store <> t0:172 var
R23977:23981 Coq.Init.Datatypes <> false constr
def 24053:24078 <> find_type_contradict_preds
R24085:24093 VST.veric.mpred <> compspecs class
binder 24081:24082 <> cs:173
R24100:24103 compcert.cfrontend.Ctypes <> type ind
binder 24097:24097 <> t:174
R24110:24112 compcert.common.Values <> val ind
binder 24107:24107 <> p:175
R24120:24133 VST.floyd.find_nth_tactic <> find_nth_preds ind
R24136:24160 VST.floyd.sc_set_load_store <> find_type_contradict_pred ind
R24164:24164 VST.floyd.sc_set_load_store <> p:175 var
R24162:24162 VST.floyd.sc_set_load_store <> t:174 var
prf 24175:24199 <> SEP_type_contradict_lemma
R24214:24222 VST.veric.mpred <> compspecs class
binder 24210:24211 <> cs:176
binder 24225:24229 <> Delta:177
binder 24231:24231 <> e:178
binder 24233:24233 <> R:179
binder 24235:24238 <> goal:180
binder 24240:24240 <> Q:181
binder 24242:24243 <> T1:182
binder 24245:24246 <> T2:183
binder 24248:24249 <> GV:184
binder 24251:24256 <> e_root:185
binder 24258:24260 <> efs:186
binder 24262:24263 <> lr:187
binder 24265:24277 <> p_full_from_e:188
binder 24279:24291 <> p_root_from_e:189
binder 24293:24302 <> gfs_from_e:190
binder 24304:24316 <> t_root_from_e:191
binder 24318:24333 <> p_root_from_hint:192
binder 24335:24347 <> gfs_from_hint:193
binder 24349:24364 <> t_root_from_hint:194
binder 24368:24370 <> mm1:195
binder 24372:24374 <> mm2:196
R24412:24417 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24461:24466 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24523:24528 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24589:24594 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24645:24650 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24701:24706 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24819:24824 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24882:24887 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24888:24888 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24992:24998 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25017:25022 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25023:25026 VST.floyd.sc_set_load_store <> goal:180 var
R25008:25011 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R25002:25004 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24999:25001 VST.floyd.sc_set_load_store <> mm1:195 var
R25005:25007 VST.floyd.sc_set_load_store <> mm2:196 var
R25012:25016 Coq.Init.Logic <> False ind
R24978:24981 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R24908:24911 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R24902:24904 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24889:24901 VST.floyd.sc_set_load_store <> gfs_from_hint:193 var
R24905:24907 Coq.Init.Datatypes <> nil constr
R24912:24937 VST.floyd.sc_set_load_store <> find_type_contradict_preds def
R24975:24977 VST.floyd.sc_set_load_store <> mm2:196 var
R24973:24973 VST.floyd.sc_set_load_store <> R:179 var
R24956:24971 VST.floyd.sc_set_load_store <> p_root_from_hint:192 var
R24939:24954 VST.floyd.sc_set_load_store <> t_root_from_hint:194 var
R24985:24987 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24982:24984 VST.floyd.sc_set_load_store <> mm2:196 var
R24988:24991 Coq.Init.Datatypes <> None constr
R24825:24850 VST.floyd.sc_set_load_store <> find_type_contradict_preds def
R24879:24881 VST.floyd.sc_set_load_store <> mm1:195 var
R24877:24877 VST.floyd.sc_set_load_store <> R:179 var
R24863:24875 VST.floyd.sc_set_load_store <> p_full_from_e:188 var
R24853:24858 compcert.cfrontend.Clight <> typeof def
R24860:24860 VST.floyd.sc_set_load_store <> e:178 var
R24707:24723 VST.floyd.sc_set_load_store <> field_address_gen ind
R24768:24768 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24785:24786 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24800:24801 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24818:24818 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24769:24784 VST.floyd.sc_set_load_store <> t_root_from_hint:194 var
R24787:24799 VST.floyd.sc_set_load_store <> gfs_from_hint:193 var
R24802:24817 VST.floyd.sc_set_load_store <> p_root_from_hint:192 var
R24725:24725 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24739:24740 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24751:24752 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24766:24766 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24726:24738 VST.floyd.sc_set_load_store <> t_root_from_e:191 var
R24741:24750 VST.floyd.sc_set_load_store <> gfs_from_e:190 var
R24753:24765 VST.floyd.sc_set_load_store <> p_root_from_e:189 var
R24651:24667 VST.floyd.efield_lemmas <> compute_root_type ind
R24688:24700 VST.floyd.sc_set_load_store <> t_root_from_e:191 var
R24685:24686 VST.floyd.sc_set_load_store <> lr:187 var
R24670:24675 compcert.cfrontend.Clight <> typeof def
R24677:24682 VST.floyd.sc_set_load_store <> e_root:185 var
R24595:24614 VST.floyd.sc_set_load_store <> msubst_efield_denote ind
R24635:24644 VST.floyd.sc_set_load_store <> gfs_from_e:190 var
R24631:24633 VST.floyd.sc_set_load_store <> efs:186 var
R24628:24629 VST.floyd.sc_set_load_store <> GV:184 var
R24625:24626 VST.floyd.sc_set_load_store <> T2:183 var
R24622:24623 VST.floyd.sc_set_load_store <> T1:182 var
R24616:24620 VST.floyd.sc_set_load_store <> Delta:177 var
R24568:24570 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24529:24542 VST.floyd.local2ptree_eval <> msubst_eval_LR def
R24566:24567 VST.floyd.sc_set_load_store <> lr:187 var
R24559:24564 VST.floyd.sc_set_load_store <> e_root:185 var
R24556:24557 VST.floyd.sc_set_load_store <> GV:184 var
R24553:24554 VST.floyd.sc_set_load_store <> T2:183 var
R24550:24551 VST.floyd.sc_set_load_store <> T1:182 var
R24544:24548 VST.floyd.sc_set_load_store <> Delta:177 var
R24571:24574 Coq.Init.Datatypes <> Some constr
R24576:24588 VST.floyd.sc_set_load_store <> p_root_from_e:189 var
R24502:24504 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24467:24484 VST.floyd.local2ptree_eval <> msubst_eval_lvalue def
R24501:24501 VST.floyd.sc_set_load_store <> e:178 var
R24498:24499 VST.floyd.sc_set_load_store <> GV:184 var
R24495:24496 VST.floyd.sc_set_load_store <> T2:183 var
R24492:24493 VST.floyd.sc_set_load_store <> T1:182 var
R24486:24490 VST.floyd.sc_set_load_store <> Delta:177 var
R24505:24508 Coq.Init.Datatypes <> Some constr
R24510:24522 VST.floyd.sc_set_load_store <> p_full_from_e:188 var
R24441:24443 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24418:24438 VST.floyd.efield_lemmas <> compute_nested_efield def
R24440:24440 VST.floyd.sc_set_load_store <> e:178 var
R24444:24444 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24451:24452 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24456:24457 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24460:24460 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24445:24450 VST.floyd.sc_set_load_store <> e_root:185 var
R24453:24455 VST.floyd.sc_set_load_store <> efs:186 var
R24458:24459 VST.floyd.sc_set_load_store <> lr:187 var
R24392:24394 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24379:24389 VST.floyd.local2ptree_denote <> local2ptree def
R24391:24391 VST.floyd.sc_set_load_store <> Q:181 var
R24395:24395 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24398:24399 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24402:24403 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24407:24408 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24411:24411 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24396:24397 VST.floyd.sc_set_load_store <> T1:182 var
R24400:24401 VST.floyd.sc_set_load_store <> T2:183 var
R24404:24406 Coq.Init.Datatypes <> nil constr
R24409:24410 VST.floyd.sc_set_load_store <> GV:184 var
R25160:25192 VST.floyd.sc_set_load_store <> find_type_contradict_pred_data_at constr
R25231:25264 VST.floyd.sc_set_load_store <> find_type_contradict_pred_data_at_ constr
R25303:25336 VST.floyd.sc_set_load_store <> find_type_contradict_pred_field_at constr
R25375:25409 VST.floyd.sc_set_load_store <> find_type_contradict_pred_field_at_ constr
def 25438:25449 <> unknown_type
R25454:25458 compcert.cfrontend.Ctypes <> Tvoid constr
R25516:25521 compcert.cfrontend.Clight <> typeof def
R25582:25588 VST.floyd.field_at <> data_at def
R25582:25588 VST.floyd.field_at <> data_at def
R25647:25654 VST.floyd.field_at <> data_at_ def
R25647:25654 VST.floyd.field_at <> data_at_ def
R25711:25718 VST.floyd.field_at <> field_at def
R25711:25718 VST.floyd.field_at <> field_at def
R25779:25787 VST.floyd.field_at <> field_at_ def
R25779:25787 VST.floyd.field_at <> field_at_ def
R25859:25870 VST.floyd.sc_set_load_store <> unknown_type def
R26083:26107 VST.floyd.sc_set_load_store <> SEP_type_contradict_lemma thm
R26471:26474 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R26467:26469 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26455:26458 Coq.Init.Datatypes <> Some constr
R26460:26460 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26462:26463 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26466:26466 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26475:26479 Coq.Init.Logic <> False ind
R26471:26474 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R26467:26469 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26455:26458 Coq.Init.Datatypes <> Some constr
R26460:26460 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26462:26463 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26466:26466 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26475:26479 Coq.Init.Logic <> False ind
R26535:26538 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R26520:26522 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26523:26526 Coq.Init.Datatypes <> Some constr
R26528:26528 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26530:26531 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26534:26534 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26539:26543 Coq.Init.Logic <> False ind
R26535:26538 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R26520:26522 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26523:26526 Coq.Init.Datatypes <> Some constr
R26528:26528 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26530:26531 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26534:26534 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26539:26543 Coq.Init.Logic <> False ind
prf 26618:26631 <> hint_msg_lemma
R26646:26654 VST.veric.mpred <> compspecs class
binder 26642:26643 <> cs:197
binder 26657:26661 <> Delta:198
binder 26663:26663 <> e:199
binder 26665:26668 <> goal:200
binder 26670:26670 <> Q:201
binder 26672:26673 <> T1:202
binder 26675:26676 <> T2:203
binder 26678:26679 <> GV:204
binder 26681:26686 <> e_root:205
binder 26688:26690 <> efs:206
binder 26692:26693 <> lr:207
binder 26695:26707 <> p_full_from_e:208
binder 26709:26721 <> p_root_from_e:209
binder 26723:26732 <> gfs_from_e:210
binder 26734:26746 <> t_root_from_e:211
binder 26748:26763 <> p_root_from_hint:212
binder 26765:26777 <> gfs_from_hint:213
binder 26779:26794 <> t_root_from_hint:214
binder 26798:26798 <> t:215
binder 26800:26802 <> gfs:216
binder 26804:26804 <> p:217
R26842:26847 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26891:26896 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26953:26958 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27019:27024 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27075:27080 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27131:27136 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27249:27254 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27349:27354 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27355:27358 VST.floyd.sc_set_load_store <> goal:200 var
R27292:27297 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R27268:27270 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27255:27267 VST.floyd.sc_set_load_store <> p_full_from_e:208 var
R27271:27283 VST.floyd.nested_field_lemmas <> field_address def
R27291:27291 VST.floyd.sc_set_load_store <> p:217 var
R27287:27289 VST.floyd.sc_set_load_store <> gfs:216 var
R27285:27285 VST.floyd.sc_set_load_store <> t:215 var
R27338:27343 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R27314:27316 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27298:27313 VST.floyd.sc_set_load_store <> p_root_from_hint:212 var
R27317:27329 VST.floyd.nested_field_lemmas <> field_address def
R27337:27337 VST.floyd.sc_set_load_store <> p:217 var
R27333:27335 VST.floyd.sc_set_load_store <> gfs:216 var
R27331:27331 VST.floyd.sc_set_load_store <> t:215 var
R27344:27348 Coq.Init.Logic <> False ind
R27137:27153 VST.floyd.sc_set_load_store <> field_address_gen ind
R27198:27198 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27215:27216 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27230:27231 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27248:27248 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27199:27214 VST.floyd.sc_set_load_store <> t_root_from_hint:214 var
R27217:27229 VST.floyd.sc_set_load_store <> gfs_from_hint:213 var
R27232:27247 VST.floyd.sc_set_load_store <> p_root_from_hint:212 var
R27155:27155 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27169:27170 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27181:27182 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27196:27196 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27156:27168 VST.floyd.sc_set_load_store <> t_root_from_e:211 var
R27171:27180 VST.floyd.sc_set_load_store <> gfs_from_e:210 var
R27183:27195 VST.floyd.sc_set_load_store <> p_root_from_e:209 var
R27081:27097 VST.floyd.efield_lemmas <> compute_root_type ind
R27118:27130 VST.floyd.sc_set_load_store <> t_root_from_e:211 var
R27115:27116 VST.floyd.sc_set_load_store <> lr:207 var
R27100:27105 compcert.cfrontend.Clight <> typeof def
R27107:27112 VST.floyd.sc_set_load_store <> e_root:205 var
R27025:27044 VST.floyd.sc_set_load_store <> msubst_efield_denote ind
R27065:27074 VST.floyd.sc_set_load_store <> gfs_from_e:210 var
R27061:27063 VST.floyd.sc_set_load_store <> efs:206 var
R27058:27059 VST.floyd.sc_set_load_store <> GV:204 var
R27055:27056 VST.floyd.sc_set_load_store <> T2:203 var
R27052:27053 VST.floyd.sc_set_load_store <> T1:202 var
R27046:27050 VST.floyd.sc_set_load_store <> Delta:198 var
R26998:27000 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26959:26972 VST.floyd.local2ptree_eval <> msubst_eval_LR def
R26996:26997 VST.floyd.sc_set_load_store <> lr:207 var
R26989:26994 VST.floyd.sc_set_load_store <> e_root:205 var
R26986:26987 VST.floyd.sc_set_load_store <> GV:204 var
R26983:26984 VST.floyd.sc_set_load_store <> T2:203 var
R26980:26981 VST.floyd.sc_set_load_store <> T1:202 var
R26974:26978 VST.floyd.sc_set_load_store <> Delta:198 var
R27001:27004 Coq.Init.Datatypes <> Some constr
R27006:27018 VST.floyd.sc_set_load_store <> p_root_from_e:209 var
R26932:26934 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26897:26914 VST.floyd.local2ptree_eval <> msubst_eval_lvalue def
R26931:26931 VST.floyd.sc_set_load_store <> e:199 var
R26928:26929 VST.floyd.sc_set_load_store <> GV:204 var
R26925:26926 VST.floyd.sc_set_load_store <> T2:203 var
R26922:26923 VST.floyd.sc_set_load_store <> T1:202 var
R26916:26920 VST.floyd.sc_set_load_store <> Delta:198 var
R26935:26938 Coq.Init.Datatypes <> Some constr
R26940:26952 VST.floyd.sc_set_load_store <> p_full_from_e:208 var
R26871:26873 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26848:26868 VST.floyd.efield_lemmas <> compute_nested_efield def
R26870:26870 VST.floyd.sc_set_load_store <> e:199 var
R26874:26874 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26881:26882 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26886:26887 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26890:26890 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26875:26880 VST.floyd.sc_set_load_store <> e_root:205 var
R26883:26885 VST.floyd.sc_set_load_store <> efs:206 var
R26888:26889 VST.floyd.sc_set_load_store <> lr:207 var
R26822:26824 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26809:26819 VST.floyd.local2ptree_denote <> local2ptree def
R26821:26821 VST.floyd.sc_set_load_store <> Q:201 var
R26825:26825 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26828:26829 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26832:26833 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26837:26838 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26841:26841 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26826:26827 VST.floyd.sc_set_load_store <> T1:202 var
R26830:26831 VST.floyd.sc_set_load_store <> T2:203 var
R26834:26836 Coq.Init.Datatypes <> nil constr
R26839:26840 VST.floyd.sc_set_load_store <> GV:204 var
R27488:27494 VST.floyd.field_at <> data_at def
R27488:27494 VST.floyd.field_at <> data_at def
R27509:27516 VST.floyd.field_at <> field_at def
R27509:27516 VST.floyd.field_at <> field_at def
R27531:27538 VST.floyd.field_at <> data_at_ def
R27531:27538 VST.floyd.field_at <> data_at_ def
R27553:27561 VST.floyd.field_at <> field_at_ def
R27553:27561 VST.floyd.field_at <> field_at_ def
R27576:27587 VST.veric.SeparationLogic <> memory_block def
R27576:27587 VST.veric.SeparationLogic <> memory_block def
R27603:27605 VST.msl.seplog <> exp meth
R27603:27605 VST.msl.seplog <> exp meth
R27919:27921 Coq.Init.Datatypes <> nil constr
R27919:27921 Coq.Init.Datatypes <> nil constr
R27939:27942 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R27939:27942 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R28744:28748 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R28753:28755 VST.msl.seplog <> ::logic:'|>'_x not
R28756:28760 VST.floyd.canon <> PROPx def
R28765:28770 VST.floyd.canon <> LOCALx def
R28775:28778 VST.floyd.canon <> SEPx def
R28744:28748 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R28753:28755 VST.msl.seplog <> ::logic:'|>'_x not
R28756:28760 VST.floyd.canon <> PROPx def
R28765:28770 VST.floyd.canon <> LOCALx def
R28775:28778 VST.floyd.canon <> SEPx def
R28803:28816 VST.floyd.sc_set_load_store <> hint_msg_lemma thm
R29031:29034 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29039:29042 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29043:29047 Coq.Init.Logic <> False ind
R29031:29034 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29039:29042 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29043:29047 Coq.Init.Logic <> False ind
R29078:29080 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29081:29093 VST.floyd.nested_field_lemmas <> field_address def
R29078:29080 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29081:29093 VST.floyd.nested_field_lemmas <> field_address def
R29133:29142 VST.veric.val_lemmas <> offset_val def
R29133:29142 VST.veric.val_lemmas <> offset_val def
sec 29849:29859 <> SEMAX_PTREE
R29876:29884 VST.veric.mpred <> compspecs class
binder 29872:29873 <> cs:218
prf 29895:29909 <> semax_PTree_set
R29929:29938 VST.veric.juicy_extspec <> OracleKind class
binder 29922:29926 <> Espec:219
binder 29953:29957 <> Delta:220
binder 29959:29960 <> id:221
binder 29962:29962 <> P:222
binder 29964:29964 <> Q:223
binder 29966:29966 <> R:224
binder 29968:29969 <> T1:225
binder 29971:29972 <> T2:226
binder 29974:29975 <> GV:227
R29982:29985 compcert.cfrontend.Clight <> expr ind
binder 29978:29979 <> e2:228
binder 29988:29988 <> t:229
binder 29990:29990 <> v:230
R30032:30041 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30071:30080 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30134:30143 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30187:30196 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30270:30279 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30280:30284 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R30356:30372 VST.veric.SeparationLogic <> normal_ret_assert def
R30387:30391 VST.floyd.canon <> PROPx def
R30410:30415 VST.floyd.canon <> LOCALx def
R30475:30478 VST.floyd.canon <> SEPx def
R30480:30480 VST.floyd.sc_set_load_store <> R:224 var
R30427:30430 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R30418:30421 VST.floyd.canon <> temp constr
R30426:30426 VST.floyd.sc_set_load_store <> v:230 var
R30423:30424 VST.floyd.sc_set_load_store <> id:221 var
R30431:30450 VST.floyd.client_lemmas <> remove_localdef_temp def
R30455:30455 VST.floyd.sc_set_load_store <> Q:223 var
R30452:30453 VST.floyd.sc_set_load_store <> id:221 var
R30393:30393 VST.floyd.sc_set_load_store <> P:222 var
R30333:30336 compcert.cfrontend.Clight <> Sset constr
R30341:30342 VST.floyd.sc_set_load_store <> e2:228 var
R30338:30339 VST.floyd.sc_set_load_store <> id:221 var
R30293:30294 VST.msl.seplog <> ::logic:'|>'_x not
R30295:30299 VST.floyd.canon <> PROPx def
R30304:30309 VST.floyd.canon <> LOCALx def
R30314:30317 VST.floyd.canon <> SEPx def
R30319:30319 VST.floyd.sc_set_load_store <> R:224 var
R30311:30311 VST.floyd.sc_set_load_store <> Q:223 var
R30301:30301 VST.floyd.sc_set_load_store <> P:222 var
R30286:30290 VST.floyd.sc_set_load_store <> Delta:220 var
R30197:30203 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30209:30210 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30238:30252 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30269:30269 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30204:30208 VST.floyd.sc_set_load_store <> Delta:220 var
R30211:30215 VST.floyd.canon <> PROPx def
R30220:30225 VST.floyd.canon <> LOCALx def
R30230:30233 VST.floyd.canon <> SEPx def
R30235:30235 VST.floyd.sc_set_load_store <> R:224 var
R30227:30227 VST.floyd.sc_set_load_store <> Q:223 var
R30217:30217 VST.floyd.sc_set_load_store <> P:222 var
R30253:30259 VST.veric.SeparationLogic <> tc_expr def
R30267:30268 VST.floyd.sc_set_load_store <> e2:228 var
R30261:30265 VST.floyd.sc_set_load_store <> Delta:220 var
R30178:30180 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30144:30159 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R30176:30177 VST.floyd.sc_set_load_store <> e2:228 var
R30173:30174 VST.floyd.sc_set_load_store <> GV:227 var
R30170:30171 VST.floyd.sc_set_load_store <> T2:226 var
R30167:30168 VST.floyd.sc_set_load_store <> T1:225 var
R30161:30165 VST.floyd.sc_set_load_store <> Delta:220 var
R30181:30184 Coq.Init.Datatypes <> Some constr
R30186:30186 VST.floyd.sc_set_load_store <> v:230 var
R30127:30129 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30081:30095 VST.veric.expr <> is_neutral_cast def
R30126:30126 VST.floyd.sc_set_load_store <> t:229 var
R30098:30111 VST.veric.expr <> implicit_deref def
R30114:30119 compcert.cfrontend.Clight <> typeof def
R30121:30122 VST.floyd.sc_set_load_store <> e2:228 var
R30130:30133 Coq.Init.Datatypes <> true constr
R30062:30064 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30042:30052 VST.veric.SeparationLogic <> typeof_temp def
R30060:30061 VST.floyd.sc_set_load_store <> id:221 var
R30054:30058 VST.floyd.sc_set_load_store <> Delta:220 var
R30065:30068 Coq.Init.Datatypes <> Some constr
R30070:30070 VST.floyd.sc_set_load_store <> t:229 var
R30012:30014 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29999:30009 VST.floyd.local2ptree_denote <> local2ptree def
R30011:30011 VST.floyd.sc_set_load_store <> Q:223 var
R30015:30015 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30018:30019 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30022:30023 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30027:30028 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30031:30031 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30016:30017 VST.floyd.sc_set_load_store <> T1:225 var
R30020:30021 VST.floyd.sc_set_load_store <> T2:226 var
R30024:30026 Coq.Init.Datatypes <> nil constr
R30029:30030 VST.floyd.sc_set_load_store <> GV:227 var
R30513:30524 VST.floyd.sc_set_load_store <> semax_SC_set thm
R30513:30524 VST.floyd.sc_set_load_store <> semax_SC_set thm
R30592:30612 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R30592:30612 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R30592:30612 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R30638:30656 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R30638:30656 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
prf 30677:30706 <> semax_PTree_field_load_no_hint
R30726:30735 VST.veric.juicy_extspec <> OracleKind class
binder 30719:30723 <> Espec:231
binder 30750:30750 <> n:232
binder 30752:30753 <> Rn:233
binder 30755:30759 <> Delta:234
binder 30761:30762 <> sh:235
binder 30764:30765 <> id:236
binder 30767:30767 <> P:237
binder 30769:30769 <> Q:238
binder 30771:30771 <> R:239
R30777:30780 compcert.cfrontend.Clight <> expr ind
binder 30774:30774 <> e:240
binder 30783:30783 <> t:241
binder 30791:30792 <> T1:242
binder 30794:30795 <> T2:243
binder 30797:30798 <> GV:244
binder 30800:30805 <> e_root:245
R30813:30816 Coq.Init.Datatypes <> list ind
R30818:30823 VST.floyd.efield_lemmas <> efield ind
binder 30808:30810 <> efs:246
binder 30826:30827 <> lr:247
binder 30835:30847 <> t_root_from_e:248
binder 30849:30858 <> gfs_from_e:249
binder 30860:30867 <> p_from_e:250
R30884:30887 compcert.cfrontend.Ctypes <> type ind
binder 30876:30881 <> t_root:251
R30906:30909 Coq.Init.Datatypes <> list ind
R30911:30916 VST.floyd.nested_field_lemmas <> gfield ind
binder 30891:30894 <> gfs0:252
binder 30896:30899 <> gfs1:253
binder 30901:30903 <> gfs:254
R30923:30925 compcert.common.Values <> val ind
binder 30920:30920 <> p:255
R30939:30941 compcert.common.Values <> val ind
binder 30935:30935 <> v:256
R30950:30956 VST.floyd.reptype_lemmas <> reptype def
R30959:30975 VST.floyd.nested_field_lemmas <> nested_field_type def
R30984:30987 VST.floyd.sc_set_load_store <> gfs0:252 var
R30977:30982 VST.floyd.sc_set_load_store <> t_root:251 var
binder 30945:30946 <> v':257
R31031:31040 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31084:31093 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31123:31132 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31168:31177 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31213:31222 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31278:31287 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31338:31347 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31398:31407 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31480:31489 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31589:31598 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31616:31625 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31687:31696 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31811:31820 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31903:31912 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32063:32072 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32073:32077 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R32148:32164 VST.veric.SeparationLogic <> normal_ret_assert def
R32179:32183 VST.floyd.canon <> PROPx def
R32202:32207 VST.floyd.canon <> LOCALx def
R32267:32270 VST.floyd.canon <> SEPx def
R32272:32272 VST.floyd.sc_set_load_store <> R:239 var
R32219:32222 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R32210:32213 VST.floyd.canon <> temp constr
R32218:32218 VST.floyd.sc_set_load_store <> v:256 var
R32215:32216 VST.floyd.sc_set_load_store <> id:236 var
R32223:32242 VST.floyd.client_lemmas <> remove_localdef_temp def
R32247:32247 VST.floyd.sc_set_load_store <> Q:238 var
R32244:32245 VST.floyd.sc_set_load_store <> id:236 var
R32185:32185 VST.floyd.sc_set_load_store <> P:237 var
R32126:32129 compcert.cfrontend.Clight <> Sset constr
R32134:32134 VST.floyd.sc_set_load_store <> e:240 var
R32131:32132 VST.floyd.sc_set_load_store <> id:236 var
R32086:32087 VST.msl.seplog <> ::logic:'|>'_x not
R32088:32092 VST.floyd.canon <> PROPx def
R32097:32102 VST.floyd.canon <> LOCALx def
R32107:32110 VST.floyd.canon <> SEPx def
R32112:32112 VST.floyd.sc_set_load_store <> R:239 var
R32104:32104 VST.floyd.sc_set_load_store <> Q:238 var
R32094:32094 VST.floyd.sc_set_load_store <> P:237 var
R32079:32083 VST.floyd.sc_set_load_store <> Delta:234 var
R31913:31919 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R31925:31926 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R31954:31966 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R31920:31924 VST.floyd.sc_set_load_store <> Delta:234 var
R31927:31931 VST.floyd.canon <> PROPx def
R31936:31941 VST.floyd.canon <> LOCALx def
R31946:31949 VST.floyd.canon <> SEPx def
R31951:31951 VST.floyd.sc_set_load_store <> R:239 var
R31943:31943 VST.floyd.sc_set_load_store <> Q:238 var
R31933:31933 VST.floyd.sc_set_load_store <> P:237 var
R31967:31982 VST.veric.SeparationLogic <> denote_tc_assert def
R31995:32001 VST.veric.expr <> tc_andp def
R32035:32050 VST.floyd.efield_lemmas <> typecheck_efield def
R32058:32060 VST.floyd.sc_set_load_store <> efs:246 var
R32052:32056 VST.floyd.sc_set_load_store <> Delta:234 var
R32004:32015 VST.floyd.typecheck_lemmas <> typecheck_LR def
R32030:32031 VST.floyd.sc_set_load_store <> lr:247 var
R32023:32028 VST.floyd.sc_set_load_store <> e_root:245 var
R32017:32021 VST.floyd.sc_set_load_store <> Delta:234 var
R31821:31827 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R31833:31834 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R31862:31874 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R31828:31832 VST.floyd.sc_set_load_store <> Delta:234 var
R31835:31839 VST.floyd.canon <> PROPx def
R31844:31849 VST.floyd.canon <> LOCALx def
R31854:31857 VST.floyd.canon <> SEPx def
R31859:31859 VST.floyd.sc_set_load_store <> R:239 var
R31851:31851 VST.floyd.sc_set_load_store <> Q:238 var
R31841:31841 VST.floyd.sc_set_load_store <> P:237 var
R31875:31879 VST.veric.SeparationLogic <> local def
R31881:31882 VST.veric.lift LiftNotation :::'`('_x_')' not
R31902:31902 VST.veric.lift LiftNotation :::'`('_x_')' not
R31883:31888 VST.veric.Cop2 <> tc_val def
R31901:31901 VST.floyd.sc_set_load_store <> v:256 var
R31891:31896 compcert.cfrontend.Clight <> typeof def
R31898:31898 VST.floyd.sc_set_load_store <> e:240 var
R31697:31703 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R31709:31710 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R31738:31750 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R31704:31708 VST.floyd.sc_set_load_store <> Delta:234 var
R31711:31715 VST.floyd.canon <> PROPx def
R31720:31725 VST.floyd.canon <> LOCALx def
R31730:31733 VST.floyd.canon <> SEPx def
R31735:31735 VST.floyd.sc_set_load_store <> R:239 var
R31727:31727 VST.floyd.sc_set_load_store <> Q:238 var
R31717:31717 VST.floyd.sc_set_load_store <> P:237 var
R31751:31754 VST.msl.seplog <> ::logic:'!!'_x not
R31810:31810 VST.msl.seplog <> ::logic:'!!'_x not
R31755:31772 VST.floyd.nested_field_lemmas <> legal_nested_field def
R31806:31809 VST.floyd.sc_set_load_store <> gfs1:253 var
R31775:31791 VST.floyd.nested_field_lemmas <> nested_field_type def
R31800:31803 VST.floyd.sc_set_load_store <> gfs0:252 var
R31793:31798 VST.floyd.sc_set_load_store <> t_root:251 var
R31626:31629 VST.floyd.jmeq_lemmas <> JMeq def
R31686:31686 VST.floyd.sc_set_load_store <> v:256 var
R31632:31643 VST.floyd.proj_reptype_lemmas <> proj_reptype def
R31682:31683 VST.floyd.sc_set_load_store <> v':257 var
R31677:31680 VST.floyd.sc_set_load_store <> gfs1:253 var
R31646:31662 VST.floyd.nested_field_lemmas <> nested_field_type def
R31671:31674 VST.floyd.sc_set_load_store <> gfs0:252 var
R31664:31669 VST.floyd.sc_set_load_store <> t_root:251 var
R31599:31612 VST.veric.shares <> readable_share def
R31614:31615 VST.floyd.sc_set_load_store <> sh:235 var
R31490:31503 VST.floyd.find_nth_tactic <> find_nth_preds ind
R31576:31579 Coq.Init.Datatypes <> Some constr
R31581:31581 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31583:31584 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31587:31587 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31582:31582 VST.floyd.sc_set_load_store <> n:232 var
R31585:31586 VST.floyd.sc_set_load_store <> Rn:233 var
R31573:31573 VST.floyd.sc_set_load_store <> R:239 var
binder 31510:31511 <> Rn:258
R31549:31552 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R31518:31520 Coq.Init.Logic <> ::type_scope:x_'='_x not
R31516:31517 VST.floyd.sc_set_load_store <> Rn:258 var
R31521:31528 VST.floyd.field_at <> field_at def
R31548:31548 VST.floyd.sc_set_load_store <> p:255 var
R31545:31546 VST.floyd.sc_set_load_store <> v':257 var
R31540:31543 VST.floyd.sc_set_load_store <> gfs0:252 var
R31533:31538 VST.floyd.sc_set_load_store <> t_root:251 var
R31530:31531 VST.floyd.sc_set_load_store <> sh:235 var
R31556:31558 Coq.Init.Logic <> ::type_scope:x_'='_x not
R31553:31555 VST.floyd.sc_set_load_store <> gfs:254 var
R31563:31566 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R31559:31562 VST.floyd.sc_set_load_store <> gfs1:253 var
R31567:31570 VST.floyd.sc_set_load_store <> gfs0:252 var
R31408:31424 VST.floyd.sc_set_load_store <> field_address_gen ind
R31464:31464 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31471:31472 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31476:31477 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31479:31479 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31465:31470 VST.floyd.sc_set_load_store <> t_root:251 var
R31473:31475 VST.floyd.sc_set_load_store <> gfs:254 var
R31478:31478 VST.floyd.sc_set_load_store <> p:255 var
R31426:31426 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31440:31441 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31452:31453 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31462:31462 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31427:31439 VST.floyd.sc_set_load_store <> t_root_from_e:248 var
R31442:31451 VST.floyd.sc_set_load_store <> gfs_from_e:249 var
R31454:31461 VST.floyd.sc_set_load_store <> p_from_e:250 var
R31348:31364 VST.floyd.efield_lemmas <> compute_root_type ind
R31385:31397 VST.floyd.sc_set_load_store <> t_root_from_e:248 var
R31382:31383 VST.floyd.sc_set_load_store <> lr:247 var
R31367:31372 compcert.cfrontend.Clight <> typeof def
R31374:31379 VST.floyd.sc_set_load_store <> e_root:245 var
R31288:31307 VST.floyd.sc_set_load_store <> msubst_efield_denote ind
R31328:31337 VST.floyd.sc_set_load_store <> gfs_from_e:249 var
R31324:31326 VST.floyd.sc_set_load_store <> efs:246 var
R31321:31322 VST.floyd.sc_set_load_store <> GV:244 var
R31318:31319 VST.floyd.sc_set_load_store <> T2:243 var
R31315:31316 VST.floyd.sc_set_load_store <> T1:242 var
R31309:31313 VST.floyd.sc_set_load_store <> Delta:234 var
R31262:31264 Coq.Init.Logic <> ::type_scope:x_'='_x not
R31223:31236 VST.floyd.local2ptree_eval <> msubst_eval_LR def
R31260:31261 VST.floyd.sc_set_load_store <> lr:247 var
R31253:31258 VST.floyd.sc_set_load_store <> e_root:245 var
R31250:31251 VST.floyd.sc_set_load_store <> GV:244 var
R31247:31248 VST.floyd.sc_set_load_store <> T2:243 var
R31244:31245 VST.floyd.sc_set_load_store <> T1:242 var
R31238:31242 VST.floyd.sc_set_load_store <> Delta:234 var
R31265:31268 Coq.Init.Datatypes <> Some constr
R31270:31277 VST.floyd.sc_set_load_store <> p_from_e:250 var
R31205:31207 Coq.Init.Logic <> ::type_scope:x_'='_x not
R31178:31193 compcert.cfrontend.Ctypes <> type_is_volatile def
R31196:31201 compcert.cfrontend.Clight <> typeof def
R31203:31203 VST.floyd.sc_set_load_store <> e:240 var
R31208:31212 Coq.Init.Datatypes <> false constr
R31161:31163 Coq.Init.Logic <> ::type_scope:x_'='_x not
R31133:31147 VST.veric.expr <> is_neutral_cast def
R31160:31160 VST.floyd.sc_set_load_store <> t:241 var
R31150:31155 compcert.cfrontend.Clight <> typeof def
R31157:31157 VST.floyd.sc_set_load_store <> e:240 var
R31164:31167 Coq.Init.Datatypes <> true constr
R31114:31116 Coq.Init.Logic <> ::type_scope:x_'='_x not
R31094:31104 VST.veric.SeparationLogic <> typeof_temp def
R31112:31113 VST.floyd.sc_set_load_store <> id:236 var
R31106:31110 VST.floyd.sc_set_load_store <> Delta:234 var
R31117:31120 Coq.Init.Datatypes <> Some constr
R31122:31122 VST.floyd.sc_set_load_store <> t:241 var
R31064:31066 Coq.Init.Logic <> ::type_scope:x_'='_x not
R31041:31061 VST.floyd.efield_lemmas <> compute_nested_efield def
R31063:31063 VST.floyd.sc_set_load_store <> e:240 var
R31067:31067 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31074:31075 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31079:31080 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31083:31083 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31068:31073 VST.floyd.sc_set_load_store <> e_root:245 var
R31076:31078 VST.floyd.sc_set_load_store <> efs:246 var
R31081:31082 VST.floyd.sc_set_load_store <> lr:247 var
R31011:31013 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30998:31008 VST.floyd.local2ptree_denote <> local2ptree def
R31010:31010 VST.floyd.sc_set_load_store <> Q:238 var
R31014:31014 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31017:31018 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31021:31022 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31026:31027 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31030:31030 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31015:31016 VST.floyd.sc_set_load_store <> T1:242 var
R31019:31020 VST.floyd.sc_set_load_store <> T2:243 var
R31023:31025 Coq.Init.Datatypes <> nil constr
R31028:31029 VST.floyd.sc_set_load_store <> GV:244 var
R32544:32567 VST.floyd.loadstore_field_at <> is_neutral_cast_by_value thm
R32544:32567 VST.floyd.loadstore_field_at <> is_neutral_cast_by_value thm
R32604:32610 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R32614:32630 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 32611:32613 <> tts:259
R32663:32681 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R32659:32661 Coq.Init.Logic <> ::type_scope:x_'='_x not
R32631:32643 VST.floyd.efield_lemmas <> nested_efield def
R32656:32658 VST.floyd.sc_set_load_store <> tts:259 var
R32711:32729 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R32706:32708 Coq.Init.Logic <> ::type_scope:x_'='_x not
R32682:32691 VST.floyd.efield_lemmas <> LR_of_type def
R32795:32813 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R32788:32790 Coq.Init.Logic <> ::type_scope:x_'='_x not
R32730:32748 VST.floyd.efield_lemmas <> legal_nested_efield def
R32782:32784 VST.floyd.sc_set_load_store <> tts:259 var
R32791:32794 Coq.Init.Datatypes <> true constr
R32856:32858 Coq.Init.Logic <> ::type_scope:x_'='_x not
R32814:32830 VST.floyd.nested_field_lemmas <> nested_field_type def
R32859:32864 compcert.cfrontend.Clight <> typeof def
R32604:32610 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R32614:32630 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 32611:32613 <> tts:260
R32663:32681 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R32659:32661 Coq.Init.Logic <> ::type_scope:x_'='_x not
R32631:32643 VST.floyd.efield_lemmas <> nested_efield def
R32656:32658 VST.floyd.sc_set_load_store <> tts:260 var
R32711:32729 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R32706:32708 Coq.Init.Logic <> ::type_scope:x_'='_x not
R32682:32691 VST.floyd.efield_lemmas <> LR_of_type def
R32795:32813 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R32788:32790 Coq.Init.Logic <> ::type_scope:x_'='_x not
R32730:32748 VST.floyd.efield_lemmas <> legal_nested_efield def
R32782:32784 VST.floyd.sc_set_load_store <> tts:260 var
R32791:32794 Coq.Init.Datatypes <> true constr
R32856:32858 Coq.Init.Logic <> ::type_scope:x_'='_x not
R32814:32830 VST.floyd.nested_field_lemmas <> nested_field_type def
R32859:32864 compcert.cfrontend.Clight <> typeof def
R32888:32908 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R32888:32908 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R32888:32908 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R32953:32975 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R32953:32975 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R33019:33031 VST.msl.seplog <> derives_trans meth
R33019:33031 VST.msl.seplog <> derives_trans meth
R33086:33090 VST.veric.SeparationLogic <> local def
R33093:33097 VST.veric.mpred <> lift1 def
R33123:33134 VST.msl.log_normalize <> prop_derives thm
R33123:33134 VST.msl.log_normalize <> prop_derives thm
R33160:33186 VST.floyd.efield_lemmas <> compute_nested_efield_lemma thm
R33160:33186 VST.floyd.efield_lemmas <> compute_nested_efield_lemma thm
R33348:33366 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R33348:33366 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R33541:33556 VST.floyd.nested_field_lemmas <> field_compatible def
R33541:33556 VST.floyd.nested_field_lemmas <> field_compatible def
R33594:33610 VST.msl.log_normalize <> corable_sepcon_TT thm
R33613:33616 VST.msl.seplog <> prop meth
R33594:33610 VST.msl.log_normalize <> corable_sepcon_TT thm
R33613:33616 VST.msl.seplog <> prop meth
R33594:33610 VST.msl.log_normalize <> corable_sepcon_TT thm
R33613:33616 VST.msl.seplog <> prop meth
R33642:33665 VST.floyd.sc_set_load_store <> nth_error_SEP_sepcon_TT' thm
R33642:33665 VST.floyd.sc_set_load_store <> nth_error_SEP_sepcon_TT' thm
R33695:33704 VST.msl.seplog <> andp_left2 meth
R33695:33704 VST.msl.seplog <> andp_left2 meth
R33717:33726 VST.msl.seplog <> andp_left2 meth
R33717:33726 VST.msl.seplog <> andp_left2 meth
R33739:33748 VST.msl.seplog <> andp_left2 meth
R33739:33748 VST.msl.seplog <> andp_left2 meth
R33763:33782 VST.floyd.field_at <> field_at_compatible' thm
R33763:33782 VST.floyd.field_at <> field_at_compatible' thm
R33763:33782 VST.floyd.field_at <> field_at_compatible' thm
R33869:33886 VST.floyd.nested_field_lemmas <> legal_nested_field def
R33889:33905 VST.floyd.nested_field_lemmas <> nested_field_type def
R33869:33886 VST.floyd.nested_field_lemmas <> legal_nested_field def
R33889:33905 VST.floyd.nested_field_lemmas <> nested_field_type def
R34005:34029 VST.floyd.nested_field_lemmas <> field_compatible_app_inv' thm
R34005:34029 VST.floyd.nested_field_lemmas <> field_compatible_app_inv' thm
R34156:34177 VST.floyd.sc_set_load_store <> field_address_gen_fact thm
R34156:34177 VST.floyd.sc_set_load_store <> field_address_gen_fact thm
R34335:34353 VST.floyd.efield_lemmas <> nested_efield_facts thm
R34335:34353 VST.floyd.efield_lemmas <> nested_efield_facts thm
R34450:34470 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R34450:34470 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R34450:34470 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R34488:34500 VST.msl.seplog <> derives_trans meth
R34527:34530 VST.msl.seplog <> ::logic:x_'&&'_x not
R34503:34507 VST.veric.SeparationLogic <> local def
R34510:34519 VST.veric.SeparationLogic <> tc_environ def
R34531:34535 VST.floyd.canon <> PROPx def
R34540:34545 VST.floyd.canon <> LOCALx def
R34550:34553 VST.floyd.canon <> SEPx def
R34488:34500 VST.msl.seplog <> derives_trans meth
R34527:34530 VST.msl.seplog <> ::logic:x_'&&'_x not
R34503:34507 VST.veric.SeparationLogic <> local def
R34510:34519 VST.veric.SeparationLogic <> tc_environ def
R34531:34535 VST.floyd.canon <> PROPx def
R34540:34545 VST.floyd.canon <> LOCALx def
R34550:34553 VST.floyd.canon <> SEPx def
R34592:34600 VST.msl.log_normalize <> andp_comm thm
R34605:34609 VST.veric.SeparationLogic <> local def
R34612:34624 VST.floyd.efield_lemmas <> efield_denote ind
R34638:34647 VST.msl.log_normalize <> andp_assoc thm
R34592:34600 VST.msl.log_normalize <> andp_comm thm
R34605:34609 VST.veric.SeparationLogic <> local def
R34612:34624 VST.floyd.efield_lemmas <> efield_denote ind
R34592:34600 VST.msl.log_normalize <> andp_comm thm
R34605:34609 VST.veric.SeparationLogic <> local def
R34612:34624 VST.floyd.efield_lemmas <> efield_denote ind
R34638:34647 VST.msl.log_normalize <> andp_assoc thm
R34638:34647 VST.msl.log_normalize <> andp_assoc thm
R34638:34647 VST.msl.log_normalize <> andp_assoc thm
R34638:34647 VST.msl.log_normalize <> andp_assoc thm
R34638:34647 VST.msl.log_normalize <> andp_assoc thm
R34663:34670 VST.msl.log_normalize <> add_andp thm
R34663:34670 VST.msl.log_normalize <> add_andp thm
R34663:34670 VST.msl.log_normalize <> add_andp thm
R34694:34701 VST.msl.log_normalize <> add_andp thm
R34694:34701 VST.msl.log_normalize <> add_andp thm
R34694:34701 VST.msl.log_normalize <> add_andp thm
R34742:34751 VST.msl.seplog <> andp_right meth
R34742:34751 VST.msl.seplog <> andp_right meth
R34780:34789 VST.msl.seplog <> andp_right meth
R34780:34789 VST.msl.seplog <> andp_right meth
R34818:34827 VST.msl.seplog <> andp_right meth
R34818:34827 VST.msl.seplog <> andp_right meth
R34856:34865 VST.msl.seplog <> andp_left1 meth
R34856:34865 VST.msl.seplog <> andp_left1 meth
R34882:34902 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R34882:34902 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R34882:34902 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R34931:34940 VST.msl.seplog <> andp_left1 meth
R34931:34940 VST.msl.seplog <> andp_left1 meth
R34968:34977 VST.msl.seplog <> andp_right meth
R34968:34977 VST.msl.seplog <> andp_right meth
R34993:35015 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R34993:35015 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R35066:35082 VST.floyd.local2ptree_eval <> msubst_eval_LR_eq thm
R35066:35082 VST.floyd.local2ptree_eval <> msubst_eval_LR_eq thm
R35131:35149 VST.floyd.sc_set_load_store <> semax_SC_field_load thm
R35131:35149 VST.floyd.sc_set_load_store <> semax_SC_field_load thm
R35435:35447 VST.msl.seplog <> derives_trans meth
R35435:35447 VST.msl.seplog <> derives_trans meth
R35490:35499 VST.msl.seplog <> andp_right meth
R35490:35499 VST.msl.seplog <> andp_right meth
R35515:35527 VST.msl.seplog <> derives_trans meth
R35515:35527 VST.msl.seplog <> derives_trans meth
R35609:35616 VST.msl.log_normalize <> add_andp thm
R35609:35616 VST.msl.log_normalize <> add_andp thm
R35609:35616 VST.msl.log_normalize <> add_andp thm
prf 35655:35686 <> semax_PTree_field_load_with_hint
R35706:35715 VST.veric.juicy_extspec <> OracleKind class
binder 35699:35703 <> Espec:261
binder 35730:35730 <> n:262
binder 35732:35733 <> Rn:263
binder 35735:35739 <> Delta:264
binder 35741:35742 <> sh:265
binder 35744:35745 <> id:266
binder 35747:35747 <> P:267
binder 35749:35749 <> Q:268
binder 35751:35751 <> R:269
R35757:35760 compcert.cfrontend.Clight <> expr ind
binder 35754:35754 <> e:270
binder 35763:35763 <> t:271
binder 35771:35772 <> T1:272
binder 35774:35775 <> T2:273
binder 35777:35778 <> GV:274
binder 35780:35787 <> p_from_e:275
R35804:35807 compcert.cfrontend.Ctypes <> type ind
binder 35796:35801 <> t_root:276
R35826:35829 Coq.Init.Datatypes <> list ind
R35831:35836 VST.floyd.nested_field_lemmas <> gfield ind
binder 35811:35814 <> gfs0:277
binder 35816:35819 <> gfs1:278
binder 35821:35823 <> gfs:279
R35843:35845 compcert.common.Values <> val ind
binder 35840:35840 <> p:280
R35863:35865 compcert.common.Values <> val ind
binder 35855:35859 <> v_val:281
R35881:35887 VST.floyd.reptype_lemmas <> reptype def
R35890:35906 VST.floyd.nested_field_lemmas <> nested_field_type def
R35915:35918 VST.floyd.sc_set_load_store <> gfs0:277 var
R35908:35913 VST.floyd.sc_set_load_store <> t_root:276 var
binder 35869:35877 <> v_reptype:282
R35962:35971 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36001:36010 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36046:36055 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36091:36100 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36152:36161 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36199:36208 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36248:36257 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36364:36373 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36391:36400 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36473:36482 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36571:36580 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36652:36661 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36663:36667 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R36746:36762 VST.veric.SeparationLogic <> normal_ret_assert def
R36775:36779 VST.floyd.canon <> PROPx def
R36796:36801 VST.floyd.canon <> LOCALx def
R36863:36866 VST.floyd.canon <> SEPx def
R36868:36868 VST.floyd.sc_set_load_store <> R:269 var
R36817:36820 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R36804:36807 VST.floyd.canon <> temp constr
R36812:36816 VST.floyd.sc_set_load_store <> v_val:281 var
R36809:36810 VST.floyd.sc_set_load_store <> id:266 var
R36821:36840 VST.floyd.client_lemmas <> remove_localdef_temp def
R36845:36845 VST.floyd.sc_set_load_store <> Q:268 var
R36842:36843 VST.floyd.sc_set_load_store <> id:266 var
R36781:36781 VST.floyd.sc_set_load_store <> P:267 var
R36726:36729 compcert.cfrontend.Clight <> Sset constr
R36734:36734 VST.floyd.sc_set_load_store <> e:270 var
R36731:36732 VST.floyd.sc_set_load_store <> id:266 var
R36685:36687 VST.msl.seplog <> ::logic:'|>'_x not
R36688:36692 VST.floyd.canon <> PROPx def
R36697:36702 VST.floyd.canon <> LOCALx def
R36707:36710 VST.floyd.canon <> SEPx def
R36712:36712 VST.floyd.sc_set_load_store <> R:269 var
R36704:36704 VST.floyd.sc_set_load_store <> Q:268 var
R36694:36694 VST.floyd.sc_set_load_store <> P:267 var
R36678:36682 VST.floyd.sc_set_load_store <> Delta:264 var
R36672:36676 VST.floyd.sc_set_load_store <> Espec:261 var
R36669:36670 VST.floyd.sc_set_load_store <> SEMAX_PTREE.cs var
R36581:36587 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R36593:36594 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R36622:36634 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R36588:36592 VST.floyd.sc_set_load_store <> Delta:264 var
R36595:36599 VST.floyd.canon <> PROPx def
R36604:36609 VST.floyd.canon <> LOCALx def
R36614:36617 VST.floyd.canon <> SEPx def
R36619:36619 VST.floyd.sc_set_load_store <> R:269 var
R36611:36611 VST.floyd.sc_set_load_store <> Q:268 var
R36601:36601 VST.floyd.sc_set_load_store <> P:267 var
R36635:36643 VST.veric.SeparationLogic <> tc_lvalue def
R36651:36651 VST.floyd.sc_set_load_store <> e:270 var
R36645:36649 VST.floyd.sc_set_load_store <> Delta:264 var
R36483:36489 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R36495:36496 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R36524:36536 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R36490:36494 VST.floyd.sc_set_load_store <> Delta:264 var
R36497:36501 VST.floyd.canon <> PROPx def
R36506:36511 VST.floyd.canon <> LOCALx def
R36516:36519 VST.floyd.canon <> SEPx def
R36521:36521 VST.floyd.sc_set_load_store <> R:269 var
R36513:36513 VST.floyd.sc_set_load_store <> Q:268 var
R36503:36503 VST.floyd.sc_set_load_store <> P:267 var
R36537:36541 VST.veric.SeparationLogic <> local def
R36544:36545 VST.veric.lift LiftNotation :::'`('_x_')' not
R36569:36569 VST.veric.lift LiftNotation :::'`('_x_')' not
R36546:36551 VST.veric.Cop2 <> tc_val def
R36564:36568 VST.floyd.sc_set_load_store <> v_val:281 var
R36554:36559 compcert.cfrontend.Clight <> typeof def
R36561:36561 VST.floyd.sc_set_load_store <> e:270 var
R36401:36404 VST.floyd.jmeq_lemmas <> JMeq def
R36468:36472 VST.floyd.sc_set_load_store <> v_val:281 var
R36407:36418 VST.floyd.proj_reptype_lemmas <> proj_reptype def
R36457:36465 VST.floyd.sc_set_load_store <> v_reptype:282 var
R36452:36455 VST.floyd.sc_set_load_store <> gfs1:278 var
R36421:36437 VST.floyd.nested_field_lemmas <> nested_field_type def
R36446:36449 VST.floyd.sc_set_load_store <> gfs0:277 var
R36439:36444 VST.floyd.sc_set_load_store <> t_root:276 var
R36374:36387 VST.veric.shares <> readable_share def
R36389:36390 VST.floyd.sc_set_load_store <> sh:265 var
R36258:36271 VST.floyd.find_nth_tactic <> find_nth_preds ind
R36351:36354 Coq.Init.Datatypes <> Some constr
R36356:36356 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R36358:36359 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R36362:36362 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R36357:36357 VST.floyd.sc_set_load_store <> n:262 var
R36360:36361 VST.floyd.sc_set_load_store <> Rn:263 var
R36348:36348 VST.floyd.sc_set_load_store <> R:269 var
binder 36278:36279 <> Rn:283
R36324:36327 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R36286:36288 Coq.Init.Logic <> ::type_scope:x_'='_x not
R36284:36285 VST.floyd.sc_set_load_store <> Rn:283 var
R36289:36296 VST.floyd.field_at <> field_at def
R36323:36323 VST.floyd.sc_set_load_store <> p:280 var
R36313:36321 VST.floyd.sc_set_load_store <> v_reptype:282 var
R36308:36311 VST.floyd.sc_set_load_store <> gfs0:277 var
R36301:36306 VST.floyd.sc_set_load_store <> t_root:276 var
R36298:36299 VST.floyd.sc_set_load_store <> sh:265 var
R36331:36333 Coq.Init.Logic <> ::type_scope:x_'='_x not
R36328:36330 VST.floyd.sc_set_load_store <> gfs:279 var
R36338:36341 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R36334:36337 VST.floyd.sc_set_load_store <> gfs1:278 var
R36342:36345 VST.floyd.sc_set_load_store <> gfs0:277 var
R36217:36219 Coq.Init.Logic <> ::type_scope:x_'='_x not
R36209:36214 compcert.cfrontend.Clight <> typeof def
R36216:36216 VST.floyd.sc_set_load_store <> e:270 var
R36220:36236 VST.floyd.nested_field_lemmas <> nested_field_type def
R36245:36247 VST.floyd.sc_set_load_store <> gfs:279 var
R36238:36243 VST.floyd.sc_set_load_store <> t_root:276 var
R36170:36172 Coq.Init.Logic <> ::type_scope:x_'='_x not
R36162:36169 VST.floyd.sc_set_load_store <> p_from_e:275 var
R36173:36185 VST.floyd.nested_field_lemmas <> field_address def
R36198:36198 VST.floyd.sc_set_load_store <> p:280 var
R36194:36196 VST.floyd.sc_set_load_store <> gfs:279 var
R36187:36192 VST.floyd.sc_set_load_store <> t_root:276 var
R36136:36138 Coq.Init.Logic <> ::type_scope:x_'='_x not
R36101:36118 VST.floyd.local2ptree_eval <> msubst_eval_lvalue def
R36135:36135 VST.floyd.sc_set_load_store <> e:270 var
R36132:36133 VST.floyd.sc_set_load_store <> GV:274 var
R36129:36130 VST.floyd.sc_set_load_store <> T2:273 var
R36126:36127 VST.floyd.sc_set_load_store <> T1:272 var
R36120:36124 VST.floyd.sc_set_load_store <> Delta:264 var
R36139:36142 Coq.Init.Datatypes <> Some constr
R36144:36151 VST.floyd.sc_set_load_store <> p_from_e:275 var
R36083:36085 Coq.Init.Logic <> ::type_scope:x_'='_x not
R36056:36071 compcert.cfrontend.Ctypes <> type_is_volatile def
R36074:36079 compcert.cfrontend.Clight <> typeof def
R36081:36081 VST.floyd.sc_set_load_store <> e:270 var
R36086:36090 Coq.Init.Datatypes <> false constr
R36039:36041 Coq.Init.Logic <> ::type_scope:x_'='_x not
R36011:36025 VST.veric.expr <> is_neutral_cast def
R36038:36038 VST.floyd.sc_set_load_store <> t:271 var
R36028:36033 compcert.cfrontend.Clight <> typeof def
R36035:36035 VST.floyd.sc_set_load_store <> e:270 var
R36042:36045 Coq.Init.Datatypes <> true constr
R35992:35994 Coq.Init.Logic <> ::type_scope:x_'='_x not
R35972:35982 VST.veric.SeparationLogic <> typeof_temp def
R35990:35991 VST.floyd.sc_set_load_store <> id:266 var
R35984:35988 VST.floyd.sc_set_load_store <> Delta:264 var
R35995:35998 Coq.Init.Datatypes <> Some constr
R36000:36000 VST.floyd.sc_set_load_store <> t:271 var
R35942:35944 Coq.Init.Logic <> ::type_scope:x_'='_x not
R35929:35939 VST.floyd.local2ptree_denote <> local2ptree def
R35941:35941 VST.floyd.sc_set_load_store <> Q:268 var
R35945:35945 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R35948:35949 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R35952:35953 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R35957:35958 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R35961:35961 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R35946:35947 VST.floyd.sc_set_load_store <> T1:272 var
R35950:35951 VST.floyd.sc_set_load_store <> T2:273 var
R35954:35956 Coq.Init.Datatypes <> nil constr
R35959:35960 VST.floyd.sc_set_load_store <> GV:274 var
R37045:37063 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R37045:37063 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R37129:37138 VST.msl.seplog <> andp_right meth
R37129:37138 VST.msl.seplog <> andp_right meth
R37166:37184 VST.floyd.sc_set_load_store <> semax_SC_field_load thm
R37166:37184 VST.floyd.sc_set_load_store <> semax_SC_field_load thm
R37445:37465 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R37445:37465 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R37445:37465 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R37511:37531 VST.floyd.local2ptree_eval <> msubst_eval_lvalue_eq thm
R37511:37531 VST.floyd.local2ptree_eval <> msubst_eval_lvalue_eq thm
prf 37552:37586 <> semax_PTree_field_cast_load_no_hint
R37606:37615 VST.veric.juicy_extspec <> OracleKind class
binder 37599:37603 <> Espec:284
binder 37630:37630 <> n:285
binder 37632:37633 <> Rn:286
binder 37635:37639 <> Delta:287
binder 37641:37642 <> sh:288
binder 37644:37645 <> id:289
binder 37647:37647 <> P:290
binder 37649:37649 <> Q:291
binder 37651:37651 <> R:292
R37657:37660 compcert.cfrontend.Clight <> expr ind
binder 37654:37654 <> e:293
binder 37663:37663 <> t:294
binder 37671:37672 <> T1:295
binder 37674:37675 <> T2:296
binder 37677:37678 <> GV:297
binder 37680:37685 <> e_root:298
R37693:37696 Coq.Init.Datatypes <> list ind
R37698:37703 VST.floyd.efield_lemmas <> efield ind
binder 37688:37690 <> efs:299
binder 37706:37707 <> lr:300
binder 37715:37727 <> t_root_from_e:301
binder 37729:37738 <> gfs_from_e:302
binder 37740:37747 <> p_from_e:303
R37764:37767 compcert.cfrontend.Ctypes <> type ind
binder 37756:37761 <> t_root:304
R37786:37789 Coq.Init.Datatypes <> list ind
R37791:37796 VST.floyd.nested_field_lemmas <> gfield ind
binder 37771:37774 <> gfs0:305
binder 37776:37779 <> gfs1:306
binder 37781:37783 <> gfs:307
R37803:37805 compcert.common.Values <> val ind
binder 37800:37800 <> p:308
R37819:37821 compcert.common.Values <> val ind
binder 37815:37815 <> v:309
R37830:37836 VST.floyd.reptype_lemmas <> reptype def
R37839:37855 VST.floyd.nested_field_lemmas <> nested_field_type def
R37864:37867 VST.floyd.sc_set_load_store <> gfs0:305 var
R37857:37862 VST.floyd.sc_set_load_store <> t_root:304 var
binder 37825:37826 <> v':310
R37911:37920 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R37964:37973 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38003:38012 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38047:38056 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38092:38101 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38143:38152 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38208:38217 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38268:38277 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38328:38337 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38410:38419 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38519:38528 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38546:38555 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38617:38626 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38741:38750 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38849:38858 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39009:39018 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39019:39023 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R39104:39120 VST.veric.SeparationLogic <> normal_ret_assert def
R39135:39139 VST.floyd.canon <> PROPx def
R39158:39163 VST.floyd.canon <> LOCALx def
R39248:39251 VST.floyd.canon <> SEPx def
R39253:39253 VST.floyd.sc_set_load_store <> R:292 var
R39200:39203 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R39166:39169 VST.floyd.canon <> temp constr
R39175:39183 VST.veric.expr <> eval_cast def
R39198:39198 VST.floyd.sc_set_load_store <> v:309 var
R39196:39196 VST.floyd.sc_set_load_store <> t:294 var
R39186:39191 compcert.cfrontend.Clight <> typeof def
R39193:39193 VST.floyd.sc_set_load_store <> e:293 var
R39171:39172 VST.floyd.sc_set_load_store <> id:289 var
R39204:39223 VST.floyd.client_lemmas <> remove_localdef_temp def
R39228:39228 VST.floyd.sc_set_load_store <> Q:291 var
R39225:39226 VST.floyd.sc_set_load_store <> id:289 var
R39141:39141 VST.floyd.sc_set_load_store <> P:290 var
R39072:39075 compcert.cfrontend.Clight <> Sset constr
R39081:39085 compcert.cfrontend.Clight <> Ecast constr
R39089:39089 VST.floyd.sc_set_load_store <> t:294 var
R39087:39087 VST.floyd.sc_set_load_store <> e:293 var
R39077:39078 VST.floyd.sc_set_load_store <> id:289 var
R39032:39033 VST.msl.seplog <> ::logic:'|>'_x not
R39034:39038 VST.floyd.canon <> PROPx def
R39043:39048 VST.floyd.canon <> LOCALx def
R39053:39056 VST.floyd.canon <> SEPx def
R39058:39058 VST.floyd.sc_set_load_store <> R:292 var
R39050:39050 VST.floyd.sc_set_load_store <> Q:291 var
R39040:39040 VST.floyd.sc_set_load_store <> P:290 var
R39025:39029 VST.floyd.sc_set_load_store <> Delta:287 var
R38859:38865 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R38871:38872 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R38900:38912 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R38866:38870 VST.floyd.sc_set_load_store <> Delta:287 var
R38873:38877 VST.floyd.canon <> PROPx def
R38882:38887 VST.floyd.canon <> LOCALx def
R38892:38895 VST.floyd.canon <> SEPx def
R38897:38897 VST.floyd.sc_set_load_store <> R:292 var
R38889:38889 VST.floyd.sc_set_load_store <> Q:291 var
R38879:38879 VST.floyd.sc_set_load_store <> P:290 var
R38913:38928 VST.veric.SeparationLogic <> denote_tc_assert def
R38941:38947 VST.veric.expr <> tc_andp def
R38981:38996 VST.floyd.efield_lemmas <> typecheck_efield def
R39004:39006 VST.floyd.sc_set_load_store <> efs:299 var
R38998:39002 VST.floyd.sc_set_load_store <> Delta:287 var
R38950:38961 VST.floyd.typecheck_lemmas <> typecheck_LR def
R38976:38977 VST.floyd.sc_set_load_store <> lr:300 var
R38969:38974 VST.floyd.sc_set_load_store <> e_root:298 var
R38963:38967 VST.floyd.sc_set_load_store <> Delta:287 var
R38751:38757 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R38763:38764 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R38792:38804 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R38758:38762 VST.floyd.sc_set_load_store <> Delta:287 var
R38765:38769 VST.floyd.canon <> PROPx def
R38774:38779 VST.floyd.canon <> LOCALx def
R38784:38787 VST.floyd.canon <> SEPx def
R38789:38789 VST.floyd.sc_set_load_store <> R:292 var
R38781:38781 VST.floyd.sc_set_load_store <> Q:291 var
R38771:38771 VST.floyd.sc_set_load_store <> P:290 var
R38805:38809 VST.veric.SeparationLogic <> local def
R38811:38812 VST.veric.lift LiftNotation :::'`('_x_')' not
R38848:38848 VST.veric.lift LiftNotation :::'`('_x_')' not
R38813:38818 VST.veric.Cop2 <> tc_val def
R38823:38831 VST.veric.expr <> eval_cast def
R38846:38846 VST.floyd.sc_set_load_store <> v:309 var
R38844:38844 VST.floyd.sc_set_load_store <> t:294 var
R38834:38839 compcert.cfrontend.Clight <> typeof def
R38841:38841 VST.floyd.sc_set_load_store <> e:293 var
R38820:38820 VST.floyd.sc_set_load_store <> t:294 var
R38627:38633 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R38639:38640 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R38668:38680 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R38634:38638 VST.floyd.sc_set_load_store <> Delta:287 var
R38641:38645 VST.floyd.canon <> PROPx def
R38650:38655 VST.floyd.canon <> LOCALx def
R38660:38663 VST.floyd.canon <> SEPx def
R38665:38665 VST.floyd.sc_set_load_store <> R:292 var
R38657:38657 VST.floyd.sc_set_load_store <> Q:291 var
R38647:38647 VST.floyd.sc_set_load_store <> P:290 var
R38681:38684 VST.msl.seplog <> ::logic:'!!'_x not
R38740:38740 VST.msl.seplog <> ::logic:'!!'_x not
R38685:38702 VST.floyd.nested_field_lemmas <> legal_nested_field def
R38736:38739 VST.floyd.sc_set_load_store <> gfs1:306 var
R38705:38721 VST.floyd.nested_field_lemmas <> nested_field_type def
R38730:38733 VST.floyd.sc_set_load_store <> gfs0:305 var
R38723:38728 VST.floyd.sc_set_load_store <> t_root:304 var
R38556:38559 VST.floyd.jmeq_lemmas <> JMeq def
R38616:38616 VST.floyd.sc_set_load_store <> v:309 var
R38562:38573 VST.floyd.proj_reptype_lemmas <> proj_reptype def
R38612:38613 VST.floyd.sc_set_load_store <> v':310 var
R38607:38610 VST.floyd.sc_set_load_store <> gfs1:306 var
R38576:38592 VST.floyd.nested_field_lemmas <> nested_field_type def
R38601:38604 VST.floyd.sc_set_load_store <> gfs0:305 var
R38594:38599 VST.floyd.sc_set_load_store <> t_root:304 var
R38529:38542 VST.veric.shares <> readable_share def
R38544:38545 VST.floyd.sc_set_load_store <> sh:288 var
R38420:38433 VST.floyd.find_nth_tactic <> find_nth_preds ind
R38506:38509 Coq.Init.Datatypes <> Some constr
R38511:38511 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38513:38514 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38517:38517 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38512:38512 VST.floyd.sc_set_load_store <> n:285 var
R38515:38516 VST.floyd.sc_set_load_store <> Rn:286 var
R38503:38503 VST.floyd.sc_set_load_store <> R:292 var
binder 38440:38441 <> Rn:311
R38479:38482 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R38448:38450 Coq.Init.Logic <> ::type_scope:x_'='_x not
R38446:38447 VST.floyd.sc_set_load_store <> Rn:311 var
R38451:38458 VST.floyd.field_at <> field_at def
R38478:38478 VST.floyd.sc_set_load_store <> p:308 var
R38475:38476 VST.floyd.sc_set_load_store <> v':310 var
R38470:38473 VST.floyd.sc_set_load_store <> gfs0:305 var
R38463:38468 VST.floyd.sc_set_load_store <> t_root:304 var
R38460:38461 VST.floyd.sc_set_load_store <> sh:288 var
R38486:38488 Coq.Init.Logic <> ::type_scope:x_'='_x not
R38483:38485 VST.floyd.sc_set_load_store <> gfs:307 var
R38493:38496 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R38489:38492 VST.floyd.sc_set_load_store <> gfs1:306 var
R38497:38500 VST.floyd.sc_set_load_store <> gfs0:305 var
R38338:38354 VST.floyd.sc_set_load_store <> field_address_gen ind
R38394:38394 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38401:38402 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38406:38407 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38409:38409 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38395:38400 VST.floyd.sc_set_load_store <> t_root:304 var
R38403:38405 VST.floyd.sc_set_load_store <> gfs:307 var
R38408:38408 VST.floyd.sc_set_load_store <> p:308 var
R38356:38356 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38370:38371 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38382:38383 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38392:38392 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38357:38369 VST.floyd.sc_set_load_store <> t_root_from_e:301 var
R38372:38381 VST.floyd.sc_set_load_store <> gfs_from_e:302 var
R38384:38391 VST.floyd.sc_set_load_store <> p_from_e:303 var
R38278:38294 VST.floyd.efield_lemmas <> compute_root_type ind
R38315:38327 VST.floyd.sc_set_load_store <> t_root_from_e:301 var
R38312:38313 VST.floyd.sc_set_load_store <> lr:300 var
R38297:38302 compcert.cfrontend.Clight <> typeof def
R38304:38309 VST.floyd.sc_set_load_store <> e_root:298 var
R38218:38237 VST.floyd.sc_set_load_store <> msubst_efield_denote ind
R38258:38267 VST.floyd.sc_set_load_store <> gfs_from_e:302 var
R38254:38256 VST.floyd.sc_set_load_store <> efs:299 var
R38251:38252 VST.floyd.sc_set_load_store <> GV:297 var
R38248:38249 VST.floyd.sc_set_load_store <> T2:296 var
R38245:38246 VST.floyd.sc_set_load_store <> T1:295 var
R38239:38243 VST.floyd.sc_set_load_store <> Delta:287 var
R38192:38194 Coq.Init.Logic <> ::type_scope:x_'='_x not
R38153:38166 VST.floyd.local2ptree_eval <> msubst_eval_LR def
R38190:38191 VST.floyd.sc_set_load_store <> lr:300 var
R38183:38188 VST.floyd.sc_set_load_store <> e_root:298 var
R38180:38181 VST.floyd.sc_set_load_store <> GV:297 var
R38177:38178 VST.floyd.sc_set_load_store <> T2:296 var
R38174:38175 VST.floyd.sc_set_load_store <> T1:295 var
R38168:38172 VST.floyd.sc_set_load_store <> Delta:287 var
R38195:38198 Coq.Init.Datatypes <> Some constr
R38200:38207 VST.floyd.sc_set_load_store <> p_from_e:303 var
R38135:38137 Coq.Init.Logic <> ::type_scope:x_'='_x not
R38102:38121 VST.veric.SeparationLogic <> cast_pointer_to_bool def
R38134:38134 VST.floyd.sc_set_load_store <> t:294 var
R38124:38129 compcert.cfrontend.Clight <> typeof def
R38131:38131 VST.floyd.sc_set_load_store <> e:293 var
R38138:38142 Coq.Init.Datatypes <> false constr
R38084:38086 Coq.Init.Logic <> ::type_scope:x_'='_x not
R38057:38072 compcert.cfrontend.Ctypes <> type_is_volatile def
R38075:38080 compcert.cfrontend.Clight <> typeof def
R38082:38082 VST.floyd.sc_set_load_store <> e:293 var
R38087:38091 Coq.Init.Datatypes <> false constr
R38040:38042 Coq.Init.Logic <> ::type_scope:x_'='_x not
R38013:38028 VST.veric.mpred <> type_is_by_value def
R38031:38036 compcert.cfrontend.Clight <> typeof def
R38038:38038 VST.floyd.sc_set_load_store <> e:293 var
R38043:38046 Coq.Init.Datatypes <> true constr
R37994:37996 Coq.Init.Logic <> ::type_scope:x_'='_x not
R37974:37984 VST.veric.SeparationLogic <> typeof_temp def
R37992:37993 VST.floyd.sc_set_load_store <> id:289 var
R37986:37990 VST.floyd.sc_set_load_store <> Delta:287 var
R37997:38000 Coq.Init.Datatypes <> Some constr
R38002:38002 VST.floyd.sc_set_load_store <> t:294 var
R37944:37946 Coq.Init.Logic <> ::type_scope:x_'='_x not
R37921:37941 VST.floyd.efield_lemmas <> compute_nested_efield def
R37943:37943 VST.floyd.sc_set_load_store <> e:293 var
R37947:37947 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R37954:37955 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R37959:37960 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R37963:37963 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R37948:37953 VST.floyd.sc_set_load_store <> e_root:298 var
R37956:37958 VST.floyd.sc_set_load_store <> efs:299 var
R37961:37962 VST.floyd.sc_set_load_store <> lr:300 var
R37891:37893 Coq.Init.Logic <> ::type_scope:x_'='_x not
R37878:37888 VST.floyd.local2ptree_denote <> local2ptree def
R37890:37890 VST.floyd.sc_set_load_store <> Q:291 var
R37894:37894 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R37897:37898 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R37901:37902 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R37906:37907 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R37910:37910 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R37895:37896 VST.floyd.sc_set_load_store <> T1:295 var
R37899:37900 VST.floyd.sc_set_load_store <> T2:296 var
R37903:37905 Coq.Init.Datatypes <> nil constr
R37908:37909 VST.floyd.sc_set_load_store <> GV:297 var
R39536:39542 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R39546:39562 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 39543:39545 <> tts:312
R39595:39613 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R39591:39593 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39563:39575 VST.floyd.efield_lemmas <> nested_efield def
R39588:39590 VST.floyd.sc_set_load_store <> tts:312 var
R39643:39661 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R39638:39640 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39614:39623 VST.floyd.efield_lemmas <> LR_of_type def
R39727:39745 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R39720:39722 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39662:39680 VST.floyd.efield_lemmas <> legal_nested_efield def
R39714:39716 VST.floyd.sc_set_load_store <> tts:312 var
R39723:39726 Coq.Init.Datatypes <> true constr
R39788:39790 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39746:39762 VST.floyd.nested_field_lemmas <> nested_field_type def
R39791:39796 compcert.cfrontend.Clight <> typeof def
R39536:39542 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R39546:39562 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 39543:39545 <> tts:313
R39595:39613 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R39591:39593 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39563:39575 VST.floyd.efield_lemmas <> nested_efield def
R39588:39590 VST.floyd.sc_set_load_store <> tts:313 var
R39643:39661 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R39638:39640 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39614:39623 VST.floyd.efield_lemmas <> LR_of_type def
R39727:39745 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R39720:39722 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39662:39680 VST.floyd.efield_lemmas <> legal_nested_efield def
R39714:39716 VST.floyd.sc_set_load_store <> tts:313 var
R39723:39726 Coq.Init.Datatypes <> true constr
R39788:39790 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39746:39762 VST.floyd.nested_field_lemmas <> nested_field_type def
R39791:39796 compcert.cfrontend.Clight <> typeof def
R39820:39840 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R39820:39840 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R39820:39840 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R39885:39907 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R39885:39907 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R39951:39963 VST.msl.seplog <> derives_trans meth
R39951:39963 VST.msl.seplog <> derives_trans meth
R40018:40022 VST.veric.SeparationLogic <> local def
R40025:40029 VST.veric.mpred <> lift1 def
R40055:40066 VST.msl.log_normalize <> prop_derives thm
R40055:40066 VST.msl.log_normalize <> prop_derives thm
R40092:40118 VST.floyd.efield_lemmas <> compute_nested_efield_lemma thm
R40092:40118 VST.floyd.efield_lemmas <> compute_nested_efield_lemma thm
R40280:40298 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R40280:40298 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R40473:40488 VST.floyd.nested_field_lemmas <> field_compatible def
R40473:40488 VST.floyd.nested_field_lemmas <> field_compatible def
R40526:40542 VST.msl.log_normalize <> corable_sepcon_TT thm
R40545:40548 VST.msl.seplog <> prop meth
R40526:40542 VST.msl.log_normalize <> corable_sepcon_TT thm
R40545:40548 VST.msl.seplog <> prop meth
R40526:40542 VST.msl.log_normalize <> corable_sepcon_TT thm
R40545:40548 VST.msl.seplog <> prop meth
R40574:40597 VST.floyd.sc_set_load_store <> nth_error_SEP_sepcon_TT' thm
R40574:40597 VST.floyd.sc_set_load_store <> nth_error_SEP_sepcon_TT' thm
R40627:40636 VST.msl.seplog <> andp_left2 meth
R40627:40636 VST.msl.seplog <> andp_left2 meth
R40649:40658 VST.msl.seplog <> andp_left2 meth
R40649:40658 VST.msl.seplog <> andp_left2 meth
R40671:40680 VST.msl.seplog <> andp_left2 meth
R40671:40680 VST.msl.seplog <> andp_left2 meth
R40695:40714 VST.floyd.field_at <> field_at_compatible' thm
R40695:40714 VST.floyd.field_at <> field_at_compatible' thm
R40695:40714 VST.floyd.field_at <> field_at_compatible' thm
R40801:40818 VST.floyd.nested_field_lemmas <> legal_nested_field def
R40821:40837 VST.floyd.nested_field_lemmas <> nested_field_type def
R40801:40818 VST.floyd.nested_field_lemmas <> legal_nested_field def
R40821:40837 VST.floyd.nested_field_lemmas <> nested_field_type def
R40937:40961 VST.floyd.nested_field_lemmas <> field_compatible_app_inv' thm
R40937:40961 VST.floyd.nested_field_lemmas <> field_compatible_app_inv' thm
R41088:41109 VST.floyd.sc_set_load_store <> field_address_gen_fact thm
R41088:41109 VST.floyd.sc_set_load_store <> field_address_gen_fact thm
R41267:41285 VST.floyd.efield_lemmas <> nested_efield_facts thm
R41267:41285 VST.floyd.efield_lemmas <> nested_efield_facts thm
R41382:41402 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R41382:41402 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R41382:41402 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R41420:41432 VST.msl.seplog <> derives_trans meth
R41459:41462 VST.msl.seplog <> ::logic:x_'&&'_x not
R41435:41439 VST.veric.SeparationLogic <> local def
R41442:41451 VST.veric.SeparationLogic <> tc_environ def
R41463:41467 VST.floyd.canon <> PROPx def
R41472:41477 VST.floyd.canon <> LOCALx def
R41482:41485 VST.floyd.canon <> SEPx def
R41420:41432 VST.msl.seplog <> derives_trans meth
R41459:41462 VST.msl.seplog <> ::logic:x_'&&'_x not
R41435:41439 VST.veric.SeparationLogic <> local def
R41442:41451 VST.veric.SeparationLogic <> tc_environ def
R41463:41467 VST.floyd.canon <> PROPx def
R41472:41477 VST.floyd.canon <> LOCALx def
R41482:41485 VST.floyd.canon <> SEPx def
R41524:41532 VST.msl.log_normalize <> andp_comm thm
R41537:41541 VST.veric.SeparationLogic <> local def
R41544:41556 VST.floyd.efield_lemmas <> efield_denote ind
R41570:41579 VST.msl.log_normalize <> andp_assoc thm
R41524:41532 VST.msl.log_normalize <> andp_comm thm
R41537:41541 VST.veric.SeparationLogic <> local def
R41544:41556 VST.floyd.efield_lemmas <> efield_denote ind
R41524:41532 VST.msl.log_normalize <> andp_comm thm
R41537:41541 VST.veric.SeparationLogic <> local def
R41544:41556 VST.floyd.efield_lemmas <> efield_denote ind
R41570:41579 VST.msl.log_normalize <> andp_assoc thm
R41570:41579 VST.msl.log_normalize <> andp_assoc thm
R41570:41579 VST.msl.log_normalize <> andp_assoc thm
R41570:41579 VST.msl.log_normalize <> andp_assoc thm
R41570:41579 VST.msl.log_normalize <> andp_assoc thm
R41595:41602 VST.msl.log_normalize <> add_andp thm
R41595:41602 VST.msl.log_normalize <> add_andp thm
R41595:41602 VST.msl.log_normalize <> add_andp thm
R41639:41648 VST.msl.seplog <> andp_right meth
R41639:41648 VST.msl.seplog <> andp_right meth
R41677:41686 VST.msl.seplog <> andp_right meth
R41677:41686 VST.msl.seplog <> andp_right meth
R41715:41724 VST.msl.seplog <> andp_right meth
R41715:41724 VST.msl.seplog <> andp_right meth
R41753:41762 VST.msl.seplog <> andp_left1 meth
R41753:41762 VST.msl.seplog <> andp_left1 meth
R41779:41799 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R41779:41799 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R41779:41799 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R41843:41852 VST.msl.seplog <> andp_right meth
R41843:41852 VST.msl.seplog <> andp_right meth
R41868:41890 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R41868:41890 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R41941:41957 VST.floyd.local2ptree_eval <> msubst_eval_LR_eq thm
R41941:41957 VST.floyd.local2ptree_eval <> msubst_eval_LR_eq thm
R42059:42082 VST.floyd.sc_set_load_store <> semax_SC_field_cast_load thm
R42059:42082 VST.floyd.sc_set_load_store <> semax_SC_field_cast_load thm
R42391:42403 VST.msl.seplog <> derives_trans meth
R42391:42403 VST.msl.seplog <> derives_trans meth
R42469:42478 VST.msl.seplog <> andp_right meth
R42469:42478 VST.msl.seplog <> andp_right meth
R42494:42506 VST.msl.seplog <> derives_trans meth
R42494:42506 VST.msl.seplog <> derives_trans meth
R42611:42618 VST.msl.log_normalize <> add_andp thm
R42611:42618 VST.msl.log_normalize <> add_andp thm
R42611:42618 VST.msl.log_normalize <> add_andp thm
prf 42657:42693 <> semax_PTree_field_cast_load_with_hint
R42713:42722 VST.veric.juicy_extspec <> OracleKind class
binder 42706:42710 <> Espec:314
binder 42737:42737 <> n:315
binder 42739:42740 <> Rn:316
binder 42742:42746 <> Delta:317
binder 42748:42749 <> sh:318
binder 42751:42752 <> id:319
binder 42754:42754 <> P:320
binder 42756:42756 <> Q:321
binder 42758:42758 <> R:322
R42764:42767 compcert.cfrontend.Clight <> expr ind
binder 42761:42761 <> e:323
binder 42770:42770 <> t:324
binder 42778:42779 <> T1:325
binder 42781:42782 <> T2:326
binder 42784:42785 <> GV:327
binder 42787:42794 <> p_from_e:328
R42811:42814 compcert.cfrontend.Ctypes <> type ind
binder 42803:42808 <> t_root:329
R42833:42836 Coq.Init.Datatypes <> list ind
R42838:42843 VST.floyd.nested_field_lemmas <> gfield ind
binder 42818:42821 <> gfs0:330
binder 42823:42826 <> gfs1:331
binder 42828:42830 <> gfs:332
R42850:42852 compcert.common.Values <> val ind
binder 42847:42847 <> p:333
R42870:42872 compcert.common.Values <> val ind
binder 42862:42866 <> v_val:334
R42888:42894 VST.floyd.reptype_lemmas <> reptype def
R42897:42913 VST.floyd.nested_field_lemmas <> nested_field_type def
R42922:42925 VST.floyd.sc_set_load_store <> gfs0:330 var
R42915:42920 VST.floyd.sc_set_load_store <> t_root:329 var
binder 42876:42884 <> v_reptype:335
R42969:42978 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43008:43017 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43052:43061 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43097:43106 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43148:43157 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43209:43218 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43256:43265 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43305:43314 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43421:43430 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43448:43457 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43530:43539 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43644:43653 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43725:43734 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43736:43740 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R43829:43845 VST.veric.SeparationLogic <> normal_ret_assert def
R43858:43862 VST.floyd.canon <> PROPx def
R43879:43884 VST.floyd.canon <> LOCALx def
R43971:43974 VST.floyd.canon <> SEPx def
R43976:43976 VST.floyd.sc_set_load_store <> R:322 var
R43925:43928 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R43887:43890 VST.floyd.canon <> temp constr
R43896:43904 VST.veric.expr <> eval_cast def
R43919:43923 VST.floyd.sc_set_load_store <> v_val:334 var
R43917:43917 VST.floyd.sc_set_load_store <> t:324 var
R43907:43912 compcert.cfrontend.Clight <> typeof def
R43914:43914 VST.floyd.sc_set_load_store <> e:323 var
R43892:43893 VST.floyd.sc_set_load_store <> id:319 var
R43929:43948 VST.floyd.client_lemmas <> remove_localdef_temp def
R43953:43953 VST.floyd.sc_set_load_store <> Q:321 var
R43950:43951 VST.floyd.sc_set_load_store <> id:319 var
R43864:43864 VST.floyd.sc_set_load_store <> P:320 var
R43799:43802 compcert.cfrontend.Clight <> Sset constr
R43808:43812 compcert.cfrontend.Clight <> Ecast constr
R43816:43816 VST.floyd.sc_set_load_store <> t:324 var
R43814:43814 VST.floyd.sc_set_load_store <> e:323 var
R43804:43805 VST.floyd.sc_set_load_store <> id:319 var
R43758:43760 VST.msl.seplog <> ::logic:'|>'_x not
R43761:43765 VST.floyd.canon <> PROPx def
R43770:43775 VST.floyd.canon <> LOCALx def
R43780:43783 VST.floyd.canon <> SEPx def
R43785:43785 VST.floyd.sc_set_load_store <> R:322 var
R43777:43777 VST.floyd.sc_set_load_store <> Q:321 var
R43767:43767 VST.floyd.sc_set_load_store <> P:320 var
R43751:43755 VST.floyd.sc_set_load_store <> Delta:317 var
R43745:43749 VST.floyd.sc_set_load_store <> Espec:314 var
R43742:43743 VST.floyd.sc_set_load_store <> SEMAX_PTREE.cs var
R43654:43660 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R43666:43667 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R43695:43707 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R43661:43665 VST.floyd.sc_set_load_store <> Delta:317 var
R43668:43672 VST.floyd.canon <> PROPx def
R43677:43682 VST.floyd.canon <> LOCALx def
R43687:43690 VST.floyd.canon <> SEPx def
R43692:43692 VST.floyd.sc_set_load_store <> R:322 var
R43684:43684 VST.floyd.sc_set_load_store <> Q:321 var
R43674:43674 VST.floyd.sc_set_load_store <> P:320 var
R43708:43716 VST.veric.SeparationLogic <> tc_lvalue def
R43724:43724 VST.floyd.sc_set_load_store <> e:323 var
R43718:43722 VST.floyd.sc_set_load_store <> Delta:317 var
R43540:43546 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R43552:43553 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R43581:43593 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R43547:43551 VST.floyd.sc_set_load_store <> Delta:317 var
R43554:43558 VST.floyd.canon <> PROPx def
R43563:43568 VST.floyd.canon <> LOCALx def
R43573:43576 VST.floyd.canon <> SEPx def
R43578:43578 VST.floyd.sc_set_load_store <> R:322 var
R43570:43570 VST.floyd.sc_set_load_store <> Q:321 var
R43560:43560 VST.floyd.sc_set_load_store <> P:320 var
R43594:43598 VST.veric.SeparationLogic <> local def
R43601:43602 VST.veric.lift LiftNotation :::'`('_x_')' not
R43642:43642 VST.veric.lift LiftNotation :::'`('_x_')' not
R43603:43608 VST.veric.Cop2 <> tc_val def
R43613:43621 VST.veric.expr <> eval_cast def
R43636:43640 VST.floyd.sc_set_load_store <> v_val:334 var
R43634:43634 VST.floyd.sc_set_load_store <> t:324 var
R43624:43629 compcert.cfrontend.Clight <> typeof def
R43631:43631 VST.floyd.sc_set_load_store <> e:323 var
R43610:43610 VST.floyd.sc_set_load_store <> t:324 var
R43458:43461 VST.floyd.jmeq_lemmas <> JMeq def
R43525:43529 VST.floyd.sc_set_load_store <> v_val:334 var
R43464:43475 VST.floyd.proj_reptype_lemmas <> proj_reptype def
R43514:43522 VST.floyd.sc_set_load_store <> v_reptype:335 var
R43509:43512 VST.floyd.sc_set_load_store <> gfs1:331 var
R43478:43494 VST.floyd.nested_field_lemmas <> nested_field_type def
R43503:43506 VST.floyd.sc_set_load_store <> gfs0:330 var
R43496:43501 VST.floyd.sc_set_load_store <> t_root:329 var
R43431:43444 VST.veric.shares <> readable_share def
R43446:43447 VST.floyd.sc_set_load_store <> sh:318 var
R43315:43328 VST.floyd.find_nth_tactic <> find_nth_preds ind
R43408:43411 Coq.Init.Datatypes <> Some constr
R43413:43413 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R43415:43416 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R43419:43419 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R43414:43414 VST.floyd.sc_set_load_store <> n:315 var
R43417:43418 VST.floyd.sc_set_load_store <> Rn:316 var
R43405:43405 VST.floyd.sc_set_load_store <> R:322 var
binder 43335:43336 <> Rn:336
R43381:43384 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R43343:43345 Coq.Init.Logic <> ::type_scope:x_'='_x not
R43341:43342 VST.floyd.sc_set_load_store <> Rn:336 var
R43346:43353 VST.floyd.field_at <> field_at def
R43380:43380 VST.floyd.sc_set_load_store <> p:333 var
R43370:43378 VST.floyd.sc_set_load_store <> v_reptype:335 var
R43365:43368 VST.floyd.sc_set_load_store <> gfs0:330 var
R43358:43363 VST.floyd.sc_set_load_store <> t_root:329 var
R43355:43356 VST.floyd.sc_set_load_store <> sh:318 var
R43388:43390 Coq.Init.Logic <> ::type_scope:x_'='_x not
R43385:43387 VST.floyd.sc_set_load_store <> gfs:332 var
R43395:43398 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R43391:43394 VST.floyd.sc_set_load_store <> gfs1:331 var
R43399:43402 VST.floyd.sc_set_load_store <> gfs0:330 var
R43274:43276 Coq.Init.Logic <> ::type_scope:x_'='_x not
R43266:43271 compcert.cfrontend.Clight <> typeof def
R43273:43273 VST.floyd.sc_set_load_store <> e:323 var
R43277:43293 VST.floyd.nested_field_lemmas <> nested_field_type def
R43302:43304 VST.floyd.sc_set_load_store <> gfs:332 var
R43295:43300 VST.floyd.sc_set_load_store <> t_root:329 var
R43227:43229 Coq.Init.Logic <> ::type_scope:x_'='_x not
R43219:43226 VST.floyd.sc_set_load_store <> p_from_e:328 var
R43230:43242 VST.floyd.nested_field_lemmas <> field_address def
R43255:43255 VST.floyd.sc_set_load_store <> p:333 var
R43251:43253 VST.floyd.sc_set_load_store <> gfs:332 var
R43244:43249 VST.floyd.sc_set_load_store <> t_root:329 var
R43193:43195 Coq.Init.Logic <> ::type_scope:x_'='_x not
R43158:43175 VST.floyd.local2ptree_eval <> msubst_eval_lvalue def
R43192:43192 VST.floyd.sc_set_load_store <> e:323 var
R43189:43190 VST.floyd.sc_set_load_store <> GV:327 var
R43186:43187 VST.floyd.sc_set_load_store <> T2:326 var
R43183:43184 VST.floyd.sc_set_load_store <> T1:325 var
R43177:43181 VST.floyd.sc_set_load_store <> Delta:317 var
R43196:43199 Coq.Init.Datatypes <> Some constr
R43201:43208 VST.floyd.sc_set_load_store <> p_from_e:328 var
R43140:43142 Coq.Init.Logic <> ::type_scope:x_'='_x not
R43107:43126 VST.veric.SeparationLogic <> cast_pointer_to_bool def
R43139:43139 VST.floyd.sc_set_load_store <> t:324 var
R43129:43134 compcert.cfrontend.Clight <> typeof def
R43136:43136 VST.floyd.sc_set_load_store <> e:323 var
R43143:43147 Coq.Init.Datatypes <> false constr
R43089:43091 Coq.Init.Logic <> ::type_scope:x_'='_x not
R43062:43077 compcert.cfrontend.Ctypes <> type_is_volatile def
R43080:43085 compcert.cfrontend.Clight <> typeof def
R43087:43087 VST.floyd.sc_set_load_store <> e:323 var
R43092:43096 Coq.Init.Datatypes <> false constr
R43045:43047 Coq.Init.Logic <> ::type_scope:x_'='_x not
R43018:43033 VST.veric.mpred <> type_is_by_value def
R43036:43041 compcert.cfrontend.Clight <> typeof def
R43043:43043 VST.floyd.sc_set_load_store <> e:323 var
R43048:43051 Coq.Init.Datatypes <> true constr
R42999:43001 Coq.Init.Logic <> ::type_scope:x_'='_x not
R42979:42989 VST.veric.SeparationLogic <> typeof_temp def
R42997:42998 VST.floyd.sc_set_load_store <> id:319 var
R42991:42995 VST.floyd.sc_set_load_store <> Delta:317 var
R43002:43005 Coq.Init.Datatypes <> Some constr
R43007:43007 VST.floyd.sc_set_load_store <> t:324 var
R42949:42951 Coq.Init.Logic <> ::type_scope:x_'='_x not
R42936:42946 VST.floyd.local2ptree_denote <> local2ptree def
R42948:42948 VST.floyd.sc_set_load_store <> Q:321 var
R42952:42952 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R42955:42956 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R42959:42960 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R42964:42965 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R42968:42968 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R42953:42954 VST.floyd.sc_set_load_store <> T1:325 var
R42957:42958 VST.floyd.sc_set_load_store <> T2:326 var
R42961:42963 Coq.Init.Datatypes <> nil constr
R42966:42967 VST.floyd.sc_set_load_store <> GV:327 var
R44155:44173 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R44155:44173 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R44239:44248 VST.msl.seplog <> andp_right meth
R44239:44248 VST.msl.seplog <> andp_right meth
R44295:44318 VST.floyd.sc_set_load_store <> semax_SC_field_cast_load thm
R44295:44318 VST.floyd.sc_set_load_store <> semax_SC_field_cast_load thm
R44617:44637 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R44617:44637 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R44617:44637 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R44683:44703 VST.floyd.local2ptree_eval <> msubst_eval_lvalue_eq thm
R44683:44703 VST.floyd.local2ptree_eval <> msubst_eval_lvalue_eq thm
prf 44724:44754 <> semax_PTree_field_store_no_hint
R44774:44783 VST.veric.juicy_extspec <> OracleKind class
binder 44767:44771 <> Espec:337
binder 44798:44798 <> n:338
binder 44800:44801 <> Rn:339
binder 44803:44807 <> Delta:340
binder 44809:44810 <> sh:341
binder 44812:44812 <> P:342
binder 44814:44814 <> Q:343
binder 44816:44816 <> R:344
R44827:44830 compcert.cfrontend.Clight <> expr ind
binder 44819:44820 <> e1:345
binder 44822:44823 <> e2:346
binder 44839:44840 <> T1:347
binder 44842:44843 <> T2:348
binder 44845:44846 <> GV:349
binder 44848:44853 <> e_root:350
R44861:44864 Coq.Init.Datatypes <> list ind
R44866:44871 VST.floyd.efield_lemmas <> efield ind
binder 44856:44858 <> efs:351
binder 44874:44875 <> lr:352
binder 44883:44895 <> t_root_from_e:353
binder 44897:44906 <> gfs_from_e:354
binder 44908:44915 <> p_from_e:355
R44932:44935 compcert.cfrontend.Ctypes <> type ind
binder 44924:44929 <> t_root:356
R44954:44957 Coq.Init.Datatypes <> list ind
R44959:44964 VST.floyd.nested_field_lemmas <> gfield ind
binder 44939:44942 <> gfs0:357
binder 44944:44947 <> gfs1:358
binder 44949:44951 <> gfs:359
R44971:44973 compcert.common.Values <> val ind
binder 44968:44968 <> p:360
R44988:44994 VST.floyd.reptype_lemmas <> reptype def
R44997:45013 VST.floyd.nested_field_lemmas <> nested_field_type def
R45047:45050 VST.floyd.sc_set_load_store <> gfs1:358 var
R45016:45032 VST.floyd.nested_field_lemmas <> nested_field_type def
R45041:45044 VST.floyd.sc_set_load_store <> gfs0:357 var
R45034:45039 VST.floyd.sc_set_load_store <> t_root:356 var
binder 44984:44985 <> v0:361
R45069:45071 compcert.common.Values <> val ind
binder 45061:45066 <> v0_val:362
binder 45074:45075 <> Rv:363
R45087:45093 VST.floyd.reptype_lemmas <> reptype def
R45096:45112 VST.floyd.nested_field_lemmas <> nested_field_type def
R45121:45124 VST.floyd.sc_set_load_store <> gfs0:357 var
R45114:45119 VST.floyd.sc_set_load_store <> t_root:356 var
binder 45078:45078 <> v:364
binder 45080:45084 <> v_new:365
R45168:45177 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45222:45231 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45267:45276 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45313:45322 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45391:45400 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45456:45465 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45516:45525 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45576:45585 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45658:45667 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45792:45801 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45819:45828 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45843:45852 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45925:45934 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46167:46176 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46291:46300 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46301:46305 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46380:46396 VST.veric.SeparationLogic <> normal_ret_assert def
R46411:46415 VST.floyd.canon <> PROPx def
R46434:46439 VST.floyd.canon <> LOCALx def
R46460:46463 VST.floyd.canon <> SEPx def
R46484:46494 VST.floyd.canon <> replace_nth def
R46501:46502 VST.floyd.sc_set_load_store <> Rv:363 var
R46504:46508 VST.floyd.sc_set_load_store <> v_new:365 var
R46498:46498 VST.floyd.sc_set_load_store <> R:344 var
R46496:46496 VST.floyd.sc_set_load_store <> n:338 var
R46441:46441 VST.floyd.sc_set_load_store <> Q:343 var
R46417:46417 VST.floyd.sc_set_load_store <> P:342 var
R46354:46360 compcert.cfrontend.Clight <> Sassign constr
R46365:46366 VST.floyd.sc_set_load_store <> e2:346 var
R46362:46363 VST.floyd.sc_set_load_store <> e1:345 var
R46314:46315 VST.msl.seplog <> ::logic:'|>'_x not
R46316:46320 VST.floyd.canon <> PROPx def
R46325:46330 VST.floyd.canon <> LOCALx def
R46335:46338 VST.floyd.canon <> SEPx def
R46340:46340 VST.floyd.sc_set_load_store <> R:344 var
R46332:46332 VST.floyd.sc_set_load_store <> Q:343 var
R46322:46322 VST.floyd.sc_set_load_store <> P:342 var
R46307:46311 VST.floyd.sc_set_load_store <> Delta:340 var
R46177:46183 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R46189:46190 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R46218:46230 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R46184:46188 VST.floyd.sc_set_load_store <> Delta:340 var
R46191:46195 VST.floyd.canon <> PROPx def
R46200:46205 VST.floyd.canon <> LOCALx def
R46210:46213 VST.floyd.canon <> SEPx def
R46215:46215 VST.floyd.sc_set_load_store <> R:344 var
R46207:46207 VST.floyd.sc_set_load_store <> Q:343 var
R46197:46197 VST.floyd.sc_set_load_store <> P:342 var
R46231:46234 VST.msl.seplog <> ::logic:'!!'_x not
R46290:46290 VST.msl.seplog <> ::logic:'!!'_x not
R46235:46252 VST.floyd.nested_field_lemmas <> legal_nested_field def
R46286:46289 VST.floyd.sc_set_load_store <> gfs1:358 var
R46255:46271 VST.floyd.nested_field_lemmas <> nested_field_type def
R46280:46283 VST.floyd.sc_set_load_store <> gfs0:357 var
R46273:46278 VST.floyd.sc_set_load_store <> t_root:356 var
R45935:45941 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R45947:45948 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R45976:45988 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R45942:45946 VST.floyd.sc_set_load_store <> Delta:340 var
R45949:45953 VST.floyd.canon <> PROPx def
R45958:45963 VST.floyd.canon <> LOCALx def
R45968:45971 VST.floyd.canon <> SEPx def
R45973:45973 VST.floyd.sc_set_load_store <> R:344 var
R45965:45965 VST.floyd.sc_set_load_store <> Q:343 var
R45955:45955 VST.floyd.sc_set_load_store <> P:342 var
R45989:46004 VST.veric.SeparationLogic <> denote_tc_assert def
R46017:46023 VST.veric.expr <> tc_andp def
R46069:46075 VST.veric.expr <> tc_andp def
R46138:46153 VST.floyd.efield_lemmas <> typecheck_efield def
R46161:46163 VST.floyd.sc_set_load_store <> efs:351 var
R46155:46159 VST.floyd.sc_set_load_store <> Delta:340 var
R46078:46091 VST.veric.expr <> typecheck_expr def
R46100:46104 compcert.cfrontend.Clight <> Ecast constr
R46110:46115 compcert.cfrontend.Clight <> typeof def
R46117:46118 VST.floyd.sc_set_load_store <> e1:345 var
R46106:46107 VST.floyd.sc_set_load_store <> e2:346 var
R46093:46097 VST.floyd.sc_set_load_store <> Delta:340 var
R46026:46037 VST.floyd.typecheck_lemmas <> typecheck_LR def
R46052:46053 VST.floyd.sc_set_load_store <> lr:352 var
R46045:46050 VST.floyd.sc_set_load_store <> e_root:350 var
R46039:46043 VST.floyd.sc_set_load_store <> Delta:340 var
R45853:45862 VST.floyd.stronger <> data_equal def
R45920:45924 VST.floyd.sc_set_load_store <> v_new:365 var
R45865:45875 VST.floyd.replace_refill_reptype_lemmas <> upd_reptype def
R45916:45917 VST.floyd.sc_set_load_store <> v0:361 var
R45914:45914 VST.floyd.sc_set_load_store <> v:364 var
R45909:45912 VST.floyd.sc_set_load_store <> gfs1:358 var
R45878:45894 VST.floyd.nested_field_lemmas <> nested_field_type def
R45903:45906 VST.floyd.sc_set_load_store <> gfs0:357 var
R45896:45901 VST.floyd.sc_set_load_store <> t_root:356 var
R45829:45832 VST.floyd.jmeq_lemmas <> JMeq def
R45841:45842 VST.floyd.sc_set_load_store <> v0:361 var
R45834:45839 VST.floyd.sc_set_load_store <> v0_val:362 var
R45802:45815 VST.veric.shares <> writable_share def
R45817:45818 VST.floyd.sc_set_load_store <> sh:341 var
R45668:45681 VST.floyd.find_nth_tactic <> find_nth_preds ind
R45779:45782 Coq.Init.Datatypes <> Some constr
R45784:45784 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45786:45787 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45790:45790 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45785:45785 VST.floyd.sc_set_load_store <> n:338 var
R45788:45789 VST.floyd.sc_set_load_store <> Rn:339 var
R45776:45776 VST.floyd.sc_set_load_store <> R:344 var
binder 45688:45689 <> Rn:366
R45694:45694 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R45751:45755 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R45704:45708 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R45750:45750 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R45697:45699 Coq.Init.Logic <> ::type_scope:x_'='_x not
R45695:45696 VST.floyd.sc_set_load_store <> Rn:366 var
R45700:45701 VST.floyd.sc_set_load_store <> Rv:363 var
R45703:45703 VST.floyd.sc_set_load_store <> v:364 var
R45711:45713 Coq.Init.Logic <> ::type_scope:x_'='_x not
R45709:45710 VST.floyd.sc_set_load_store <> Rv:363 var
binder 45718:45718 <> v:367
R45723:45730 VST.floyd.field_at <> field_at def
R45749:45749 VST.floyd.sc_set_load_store <> p:360 var
R45747:45747 VST.floyd.sc_set_load_store <> v:367 var
R45742:45745 VST.floyd.sc_set_load_store <> gfs0:357 var
R45735:45740 VST.floyd.sc_set_load_store <> t_root:356 var
R45732:45733 VST.floyd.sc_set_load_store <> sh:341 var
R45759:45761 Coq.Init.Logic <> ::type_scope:x_'='_x not
R45756:45758 VST.floyd.sc_set_load_store <> gfs:359 var
R45766:45769 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R45762:45765 VST.floyd.sc_set_load_store <> gfs1:358 var
R45770:45773 VST.floyd.sc_set_load_store <> gfs0:357 var
R45586:45602 VST.floyd.sc_set_load_store <> field_address_gen ind
R45642:45642 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45649:45650 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45654:45655 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45657:45657 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45643:45648 VST.floyd.sc_set_load_store <> t_root:356 var
R45651:45653 VST.floyd.sc_set_load_store <> gfs:359 var
R45656:45656 VST.floyd.sc_set_load_store <> p:360 var
R45604:45604 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45618:45619 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45630:45631 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45640:45640 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45605:45617 VST.floyd.sc_set_load_store <> t_root_from_e:353 var
R45620:45629 VST.floyd.sc_set_load_store <> gfs_from_e:354 var
R45632:45639 VST.floyd.sc_set_load_store <> p_from_e:355 var
R45526:45542 VST.floyd.efield_lemmas <> compute_root_type ind
R45563:45575 VST.floyd.sc_set_load_store <> t_root_from_e:353 var
R45560:45561 VST.floyd.sc_set_load_store <> lr:352 var
R45545:45550 compcert.cfrontend.Clight <> typeof def
R45552:45557 VST.floyd.sc_set_load_store <> e_root:350 var
R45466:45485 VST.floyd.sc_set_load_store <> msubst_efield_denote ind
R45506:45515 VST.floyd.sc_set_load_store <> gfs_from_e:354 var
R45502:45504 VST.floyd.sc_set_load_store <> efs:351 var
R45499:45500 VST.floyd.sc_set_load_store <> GV:349 var
R45496:45497 VST.floyd.sc_set_load_store <> T2:348 var
R45493:45494 VST.floyd.sc_set_load_store <> T1:347 var
R45487:45491 VST.floyd.sc_set_load_store <> Delta:340 var
R45440:45442 Coq.Init.Logic <> ::type_scope:x_'='_x not
R45401:45414 VST.floyd.local2ptree_eval <> msubst_eval_LR def
R45438:45439 VST.floyd.sc_set_load_store <> lr:352 var
R45431:45436 VST.floyd.sc_set_load_store <> e_root:350 var
R45428:45429 VST.floyd.sc_set_load_store <> GV:349 var
R45425:45426 VST.floyd.sc_set_load_store <> T2:348 var
R45422:45423 VST.floyd.sc_set_load_store <> T1:347 var
R45416:45420 VST.floyd.sc_set_load_store <> Delta:340 var
R45443:45446 Coq.Init.Datatypes <> Some constr
R45448:45455 VST.floyd.sc_set_load_store <> p_from_e:355 var
R45377:45379 Coq.Init.Logic <> ::type_scope:x_'='_x not
R45323:45338 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R45356:45360 compcert.cfrontend.Clight <> Ecast constr
R45366:45371 compcert.cfrontend.Clight <> typeof def
R45373:45374 VST.floyd.sc_set_load_store <> e1:345 var
R45362:45363 VST.floyd.sc_set_load_store <> e2:346 var
R45352:45353 VST.floyd.sc_set_load_store <> GV:349 var
R45349:45350 VST.floyd.sc_set_load_store <> T2:348 var
R45346:45347 VST.floyd.sc_set_load_store <> T1:347 var
R45340:45344 VST.floyd.sc_set_load_store <> Delta:340 var
R45380:45383 Coq.Init.Datatypes <> Some constr
R45385:45390 VST.floyd.sc_set_load_store <> v0_val:362 var
R45305:45307 Coq.Init.Logic <> ::type_scope:x_'='_x not
R45277:45292 compcert.cfrontend.Ctypes <> type_is_volatile def
R45295:45300 compcert.cfrontend.Clight <> typeof def
R45302:45303 VST.floyd.sc_set_load_store <> e1:345 var
R45308:45312 Coq.Init.Datatypes <> false constr
R45260:45262 Coq.Init.Logic <> ::type_scope:x_'='_x not
R45232:45247 VST.veric.mpred <> type_is_by_value def
R45250:45255 compcert.cfrontend.Clight <> typeof def
R45257:45258 VST.floyd.sc_set_load_store <> e1:345 var
R45263:45266 Coq.Init.Datatypes <> true constr
R45202:45204 Coq.Init.Logic <> ::type_scope:x_'='_x not
R45178:45198 VST.floyd.efield_lemmas <> compute_nested_efield def
R45200:45201 VST.floyd.sc_set_load_store <> e1:345 var
R45205:45205 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45212:45213 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45217:45218 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45221:45221 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45206:45211 VST.floyd.sc_set_load_store <> e_root:350 var
R45214:45216 VST.floyd.sc_set_load_store <> efs:351 var
R45219:45220 VST.floyd.sc_set_load_store <> lr:352 var
R45148:45150 Coq.Init.Logic <> ::type_scope:x_'='_x not
R45135:45145 VST.floyd.local2ptree_denote <> local2ptree def
R45147:45147 VST.floyd.sc_set_load_store <> Q:343 var
R45151:45151 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45154:45155 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45158:45159 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45163:45164 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45167:45167 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45152:45153 VST.floyd.sc_set_load_store <> T1:347 var
R45156:45157 VST.floyd.sc_set_load_store <> T2:348 var
R45160:45162 Coq.Init.Datatypes <> nil constr
R45165:45166 VST.floyd.sc_set_load_store <> GV:349 var
R46801:46807 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R46811:46827 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 46808:46810 <> tts:368
R46861:46879 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R46856:46858 Coq.Init.Logic <> ::type_scope:x_'='_x not
R46828:46840 VST.floyd.efield_lemmas <> nested_efield def
R46853:46855 VST.floyd.sc_set_load_store <> tts:368 var
R46909:46927 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R46904:46906 Coq.Init.Logic <> ::type_scope:x_'='_x not
R46880:46889 VST.floyd.efield_lemmas <> LR_of_type def
R46993:47011 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R46986:46988 Coq.Init.Logic <> ::type_scope:x_'='_x not
R46928:46946 VST.floyd.efield_lemmas <> legal_nested_efield def
R46980:46982 VST.floyd.sc_set_load_store <> tts:368 var
R46989:46992 Coq.Init.Datatypes <> true constr
R47054:47056 Coq.Init.Logic <> ::type_scope:x_'='_x not
R47012:47028 VST.floyd.nested_field_lemmas <> nested_field_type def
R47057:47062 compcert.cfrontend.Clight <> typeof def
R46801:46807 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R46811:46827 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 46808:46810 <> tts:369
R46861:46879 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R46856:46858 Coq.Init.Logic <> ::type_scope:x_'='_x not
R46828:46840 VST.floyd.efield_lemmas <> nested_efield def
R46853:46855 VST.floyd.sc_set_load_store <> tts:369 var
R46909:46927 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R46904:46906 Coq.Init.Logic <> ::type_scope:x_'='_x not
R46880:46889 VST.floyd.efield_lemmas <> LR_of_type def
R46993:47011 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R46986:46988 Coq.Init.Logic <> ::type_scope:x_'='_x not
R46928:46946 VST.floyd.efield_lemmas <> legal_nested_efield def
R46980:46982 VST.floyd.sc_set_load_store <> tts:369 var
R46989:46992 Coq.Init.Datatypes <> true constr
R47054:47056 Coq.Init.Logic <> ::type_scope:x_'='_x not
R47012:47028 VST.floyd.nested_field_lemmas <> nested_field_type def
R47057:47062 compcert.cfrontend.Clight <> typeof def
R47087:47107 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R47087:47107 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R47087:47107 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R47152:47174 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R47152:47174 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R47218:47230 VST.msl.seplog <> derives_trans meth
R47218:47230 VST.msl.seplog <> derives_trans meth
R47285:47289 VST.veric.SeparationLogic <> local def
R47292:47296 VST.veric.mpred <> lift1 def
R47322:47333 VST.msl.log_normalize <> prop_derives thm
R47322:47333 VST.msl.log_normalize <> prop_derives thm
R47359:47385 VST.floyd.efield_lemmas <> compute_nested_efield_lemma thm
R47359:47385 VST.floyd.efield_lemmas <> compute_nested_efield_lemma thm
R47547:47565 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R47547:47565 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R47747:47762 VST.floyd.nested_field_lemmas <> field_compatible def
R47747:47762 VST.floyd.nested_field_lemmas <> field_compatible def
R47800:47816 VST.msl.log_normalize <> corable_sepcon_TT thm
R47819:47822 VST.msl.seplog <> prop meth
R47800:47816 VST.msl.log_normalize <> corable_sepcon_TT thm
R47819:47822 VST.msl.seplog <> prop meth
R47800:47816 VST.msl.log_normalize <> corable_sepcon_TT thm
R47819:47822 VST.msl.seplog <> prop meth
R47848:47871 VST.floyd.sc_set_load_store <> nth_error_SEP_sepcon_TT' thm
R47848:47871 VST.floyd.sc_set_load_store <> nth_error_SEP_sepcon_TT' thm
R47901:47910 VST.msl.seplog <> andp_left2 meth
R47901:47910 VST.msl.seplog <> andp_left2 meth
R47923:47932 VST.msl.seplog <> andp_left2 meth
R47923:47932 VST.msl.seplog <> andp_left2 meth
R47945:47954 VST.msl.seplog <> andp_left2 meth
R47945:47954 VST.msl.seplog <> andp_left2 meth
R47969:47988 VST.floyd.field_at <> field_at_compatible' thm
R47969:47988 VST.floyd.field_at <> field_at_compatible' thm
R47969:47988 VST.floyd.field_at <> field_at_compatible' thm
R48075:48092 VST.floyd.nested_field_lemmas <> legal_nested_field def
R48095:48111 VST.floyd.nested_field_lemmas <> nested_field_type def
R48075:48092 VST.floyd.nested_field_lemmas <> legal_nested_field def
R48095:48111 VST.floyd.nested_field_lemmas <> nested_field_type def
R48213:48237 VST.floyd.nested_field_lemmas <> field_compatible_app_inv' thm
R48213:48237 VST.floyd.nested_field_lemmas <> field_compatible_app_inv' thm
R48364:48385 VST.floyd.sc_set_load_store <> field_address_gen_fact thm
R48364:48385 VST.floyd.sc_set_load_store <> field_address_gen_fact thm
R48543:48561 VST.floyd.efield_lemmas <> nested_efield_facts thm
R48543:48561 VST.floyd.efield_lemmas <> nested_efield_facts thm
R48659:48679 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R48659:48679 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R48659:48679 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R48659:48679 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R48659:48679 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R48697:48709 VST.msl.seplog <> derives_trans meth
R48736:48739 VST.msl.seplog <> ::logic:x_'&&'_x not
R48712:48716 VST.veric.SeparationLogic <> local def
R48719:48728 VST.veric.SeparationLogic <> tc_environ def
R48740:48744 VST.floyd.canon <> PROPx def
R48749:48754 VST.floyd.canon <> LOCALx def
R48759:48762 VST.floyd.canon <> SEPx def
R48697:48709 VST.msl.seplog <> derives_trans meth
R48736:48739 VST.msl.seplog <> ::logic:x_'&&'_x not
R48712:48716 VST.veric.SeparationLogic <> local def
R48719:48728 VST.veric.SeparationLogic <> tc_environ def
R48740:48744 VST.floyd.canon <> PROPx def
R48749:48754 VST.floyd.canon <> LOCALx def
R48759:48762 VST.floyd.canon <> SEPx def
R48801:48809 VST.msl.log_normalize <> andp_comm thm
R48814:48818 VST.veric.SeparationLogic <> local def
R48821:48833 VST.floyd.efield_lemmas <> efield_denote ind
R48847:48856 VST.msl.log_normalize <> andp_assoc thm
R48801:48809 VST.msl.log_normalize <> andp_comm thm
R48814:48818 VST.veric.SeparationLogic <> local def
R48821:48833 VST.floyd.efield_lemmas <> efield_denote ind
R48801:48809 VST.msl.log_normalize <> andp_comm thm
R48814:48818 VST.veric.SeparationLogic <> local def
R48821:48833 VST.floyd.efield_lemmas <> efield_denote ind
R48847:48856 VST.msl.log_normalize <> andp_assoc thm
R48847:48856 VST.msl.log_normalize <> andp_assoc thm
R48847:48856 VST.msl.log_normalize <> andp_assoc thm
R48847:48856 VST.msl.log_normalize <> andp_assoc thm
R48847:48856 VST.msl.log_normalize <> andp_assoc thm
R48872:48879 VST.msl.log_normalize <> add_andp thm
R48872:48879 VST.msl.log_normalize <> add_andp thm
R48872:48879 VST.msl.log_normalize <> add_andp thm
R48916:48925 VST.msl.seplog <> andp_right meth
R48916:48925 VST.msl.seplog <> andp_right meth
R48954:48963 VST.msl.seplog <> andp_right meth
R48954:48963 VST.msl.seplog <> andp_right meth
R48992:49001 VST.msl.seplog <> andp_right meth
R48992:49001 VST.msl.seplog <> andp_right meth
R49030:49039 VST.msl.seplog <> andp_left1 meth
R49030:49039 VST.msl.seplog <> andp_left1 meth
R49056:49076 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R49056:49076 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R49056:49076 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R49120:49129 VST.msl.seplog <> andp_right meth
R49120:49129 VST.msl.seplog <> andp_right meth
R49145:49167 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R49145:49167 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R49218:49234 VST.floyd.local2ptree_eval <> msubst_eval_LR_eq thm
R49218:49234 VST.floyd.local2ptree_eval <> msubst_eval_LR_eq thm
R49308:49327 VST.floyd.sc_set_load_store <> semax_SC_field_store thm
R49308:49327 VST.floyd.sc_set_load_store <> semax_SC_field_store thm
R49526:49533 VST.floyd.jmeq_lemmas <> JMeq_sym thm
R49526:49533 VST.floyd.jmeq_lemmas <> JMeq_sym thm
R49607:49619 VST.msl.seplog <> derives_trans meth
R49607:49619 VST.msl.seplog <> derives_trans meth
R49720:49740 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R49720:49740 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R49720:49740 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R49762:49780 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R49762:49780 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R49803:49810 VST.msl.log_normalize <> add_andp thm
R49827:49834 VST.msl.log_normalize <> add_andp thm
R49803:49810 VST.msl.log_normalize <> add_andp thm
R49803:49810 VST.msl.log_normalize <> add_andp thm
R49827:49834 VST.msl.log_normalize <> add_andp thm
R49827:49834 VST.msl.log_normalize <> add_andp thm
def 49927:49944 <> replace_UnionField
R49951:49955 compcert.common.AST <> ident def
binder 49947:49948 <> id:370
R49964:49967 Coq.Init.Datatypes <> list ind
R49969:49974 VST.floyd.nested_field_lemmas <> gfield ind
binder 49959:49961 <> gfs:371
R49979:49984 Coq.Init.Datatypes <> option ind
R49987:49990 Coq.Init.Datatypes <> list ind
R49992:49997 VST.floyd.nested_field_lemmas <> gfield ind
R50011:50013 VST.floyd.sc_set_load_store <> gfs:371 var
R50036:50039 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R50024:50033 VST.floyd.nested_field_lemmas <> UnionField constr
R50048:50051 Coq.Init.Datatypes <> Some constr
R50067:50070 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R50054:50063 VST.floyd.nested_field_lemmas <> UnionField constr
R50065:50066 VST.floyd.sc_set_load_store <> id:370 var
R50086:50089 Coq.Init.Datatypes <> None constr
prf 50104:50137 <> semax_PTree_field_store_union_hack
R50157:50166 VST.veric.juicy_extspec <> OracleKind class
binder 50150:50154 <> Espec:373
binder 50181:50182 <> id:374
binder 50184:50184 <> n:375
binder 50186:50187 <> Rn:376
binder 50189:50193 <> Delta:377
binder 50195:50196 <> sh:378
binder 50198:50198 <> P:379
binder 50200:50200 <> Q:380
binder 50202:50202 <> R:381
R50213:50216 compcert.cfrontend.Clight <> expr ind
binder 50205:50206 <> e1:382
binder 50208:50209 <> e2:383
binder 50225:50226 <> T1:384
binder 50228:50229 <> T2:385
binder 50231:50232 <> GV:386
binder 50234:50239 <> e_root:387
R50247:50250 Coq.Init.Datatypes <> list ind
R50252:50257 VST.floyd.efield_lemmas <> efield ind
binder 50242:50244 <> efs:388
binder 50260:50261 <> lr:389
binder 50263:50264 <> ch:390
binder 50266:50268 <> ch':391
binder 50276:50288 <> t_root_from_e:392
binder 50290:50299 <> gfs_from_e:393
binder 50301:50308 <> p_from_e:394
R50325:50328 compcert.cfrontend.Ctypes <> type ind
binder 50317:50322 <> t_root:395
R50358:50361 Coq.Init.Datatypes <> list ind
R50363:50368 VST.floyd.nested_field_lemmas <> gfield ind
binder 50332:50335 <> gfs0:396
binder 50337:50340 <> gfs1:397
binder 50342:50346 <> gfs1':398
binder 50348:50350 <> gfs:399
binder 50352:50355 <> gfs':400
R50375:50377 compcert.common.Values <> val ind
binder 50372:50372 <> p:401
R50392:50398 VST.floyd.reptype_lemmas <> reptype def
R50401:50417 VST.floyd.nested_field_lemmas <> nested_field_type def
R50451:50455 VST.floyd.sc_set_load_store <> gfs1':398 var
R50420:50436 VST.floyd.nested_field_lemmas <> nested_field_type def
R50445:50448 VST.floyd.sc_set_load_store <> gfs0:396 var
R50438:50443 VST.floyd.sc_set_load_store <> t_root:395 var
binder 50388:50389 <> v0:402
R50482:50484 compcert.common.Values <> val ind
binder 50466:50471 <> v0_val:403
binder 50473:50479 <> v0_val':404
binder 50487:50488 <> Rv:405
R50500:50506 VST.floyd.reptype_lemmas <> reptype def
R50509:50525 VST.floyd.nested_field_lemmas <> nested_field_type def
R50534:50537 VST.floyd.sc_set_load_store <> gfs0:396 var
R50527:50532 VST.floyd.sc_set_load_store <> t_root:395 var
binder 50491:50491 <> v:406
binder 50493:50497 <> v_new:407
R50581:50590 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50635:50644 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50682:50691 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50728:50737 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50806:50815 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50871:50880 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50931:50940 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50991:51000 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51073:51082 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51120:51129 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51186:51195 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51260:51269 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51328:51337 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51443:51452 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51480:51489 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51614:51623 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51663:51672 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51690:51699 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51739:51748 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51764:51773 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51847:51856 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R52089:52097 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R52212:52221 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R52311:52321 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R52322:52326 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R52401:52417 VST.veric.SeparationLogic <> normal_ret_assert def
R52432:52436 VST.floyd.canon <> PROPx def
R52455:52460 VST.floyd.canon <> LOCALx def
R52481:52484 VST.floyd.canon <> SEPx def
R52505:52515 VST.floyd.canon <> replace_nth def
R52522:52523 VST.floyd.sc_set_load_store <> Rv:405 var
R52525:52529 VST.floyd.sc_set_load_store <> v_new:407 var
R52519:52519 VST.floyd.sc_set_load_store <> R:381 var
R52517:52517 VST.floyd.sc_set_load_store <> n:375 var
R52462:52462 VST.floyd.sc_set_load_store <> Q:380 var
R52438:52438 VST.floyd.sc_set_load_store <> P:379 var
R52375:52381 compcert.cfrontend.Clight <> Sassign constr
R52386:52387 VST.floyd.sc_set_load_store <> e2:383 var
R52383:52384 VST.floyd.sc_set_load_store <> e1:382 var
R52335:52336 VST.msl.seplog <> ::logic:'|>'_x not
R52337:52341 VST.floyd.canon <> PROPx def
R52346:52351 VST.floyd.canon <> LOCALx def
R52356:52359 VST.floyd.canon <> SEPx def
R52361:52361 VST.floyd.sc_set_load_store <> R:381 var
R52353:52353 VST.floyd.sc_set_load_store <> Q:380 var
R52343:52343 VST.floyd.sc_set_load_store <> P:379 var
R52328:52332 VST.floyd.sc_set_load_store <> Delta:377 var
R52222:52228 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R52234:52235 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R52263:52275 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R52229:52233 VST.floyd.sc_set_load_store <> Delta:377 var
R52236:52240 VST.floyd.canon <> PROPx def
R52245:52250 VST.floyd.canon <> LOCALx def
R52255:52258 VST.floyd.canon <> SEPx def
R52260:52260 VST.floyd.sc_set_load_store <> R:381 var
R52252:52252 VST.floyd.sc_set_load_store <> Q:380 var
R52242:52242 VST.floyd.sc_set_load_store <> P:379 var
R52276:52279 VST.msl.seplog <> ::logic:'!!'_x not
R52310:52310 VST.msl.seplog <> ::logic:'!!'_x not
R52280:52295 VST.floyd.nested_field_lemmas <> field_compatible def
R52309:52309 VST.floyd.sc_set_load_store <> p:401 var
R52304:52307 VST.floyd.sc_set_load_store <> gfs':400 var
R52297:52302 VST.floyd.sc_set_load_store <> t_root:395 var
R52098:52104 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R52110:52111 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R52139:52151 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R52105:52109 VST.floyd.sc_set_load_store <> Delta:377 var
R52112:52116 VST.floyd.canon <> PROPx def
R52121:52126 VST.floyd.canon <> LOCALx def
R52131:52134 VST.floyd.canon <> SEPx def
R52136:52136 VST.floyd.sc_set_load_store <> R:381 var
R52128:52128 VST.floyd.sc_set_load_store <> Q:380 var
R52118:52118 VST.floyd.sc_set_load_store <> P:379 var
R52152:52155 VST.msl.seplog <> ::logic:'!!'_x not
R52211:52211 VST.msl.seplog <> ::logic:'!!'_x not
R52156:52173 VST.floyd.nested_field_lemmas <> legal_nested_field def
R52207:52210 VST.floyd.sc_set_load_store <> gfs1:397 var
R52176:52192 VST.floyd.nested_field_lemmas <> nested_field_type def
R52201:52204 VST.floyd.sc_set_load_store <> gfs0:396 var
R52194:52199 VST.floyd.sc_set_load_store <> t_root:395 var
R51857:51863 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R51869:51870 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R51898:51910 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R51864:51868 VST.floyd.sc_set_load_store <> Delta:377 var
R51871:51875 VST.floyd.canon <> PROPx def
R51880:51885 VST.floyd.canon <> LOCALx def
R51890:51893 VST.floyd.canon <> SEPx def
R51895:51895 VST.floyd.sc_set_load_store <> R:381 var
R51887:51887 VST.floyd.sc_set_load_store <> Q:380 var
R51877:51877 VST.floyd.sc_set_load_store <> P:379 var
R51911:51926 VST.veric.SeparationLogic <> denote_tc_assert def
R51939:51945 VST.veric.expr <> tc_andp def
R51991:51997 VST.veric.expr <> tc_andp def
R52060:52075 VST.floyd.efield_lemmas <> typecheck_efield def
R52083:52085 VST.floyd.sc_set_load_store <> efs:388 var
R52077:52081 VST.floyd.sc_set_load_store <> Delta:377 var
R52000:52013 VST.veric.expr <> typecheck_expr def
R52022:52026 compcert.cfrontend.Clight <> Ecast constr
R52032:52037 compcert.cfrontend.Clight <> typeof def
R52039:52040 VST.floyd.sc_set_load_store <> e1:382 var
R52028:52029 VST.floyd.sc_set_load_store <> e2:383 var
R52015:52019 VST.floyd.sc_set_load_store <> Delta:377 var
R51948:51959 VST.floyd.typecheck_lemmas <> typecheck_LR def
R51974:51975 VST.floyd.sc_set_load_store <> lr:389 var
R51967:51972 VST.floyd.sc_set_load_store <> e_root:387 var
R51961:51965 VST.floyd.sc_set_load_store <> Delta:377 var
R51774:51783 VST.floyd.stronger <> data_equal def
R51842:51846 VST.floyd.sc_set_load_store <> v_new:407 var
R51786:51796 VST.floyd.replace_refill_reptype_lemmas <> upd_reptype def
R51838:51839 VST.floyd.sc_set_load_store <> v0:402 var
R51836:51836 VST.floyd.sc_set_load_store <> v:406 var
R51830:51834 VST.floyd.sc_set_load_store <> gfs1':398 var
R51799:51815 VST.floyd.nested_field_lemmas <> nested_field_type def
R51824:51827 VST.floyd.sc_set_load_store <> gfs0:396 var
R51817:51822 VST.floyd.sc_set_load_store <> t_root:395 var
R51749:51752 VST.floyd.jmeq_lemmas <> JMeq def
R51762:51763 VST.floyd.sc_set_load_store <> v0:402 var
R51754:51760 VST.floyd.sc_set_load_store <> v0_val':404 var
R51700:51716 compcert.common.Memdata <> decode_encode_val def
R51732:51738 VST.floyd.sc_set_load_store <> v0_val':404 var
R51728:51730 VST.floyd.sc_set_load_store <> ch':391 var
R51725:51726 VST.floyd.sc_set_load_store <> ch:390 var
R51718:51723 VST.floyd.sc_set_load_store <> v0_val:403 var
R51673:51686 VST.veric.shares <> writable_share def
R51688:51689 VST.floyd.sc_set_load_store <> sh:378 var
R51650:51652 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51624:51641 VST.floyd.sc_set_load_store <> replace_UnionField def
R51646:51649 VST.floyd.sc_set_load_store <> gfs1:397 var
R51643:51644 VST.floyd.sc_set_load_store <> id:374 var
R51653:51656 Coq.Init.Datatypes <> Some constr
R51658:51662 VST.floyd.sc_set_load_store <> gfs1':398 var
R51490:51503 VST.floyd.find_nth_tactic <> find_nth_preds ind
R51601:51604 Coq.Init.Datatypes <> Some constr
R51606:51606 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R51608:51609 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R51612:51612 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R51607:51607 VST.floyd.sc_set_load_store <> n:375 var
R51610:51611 VST.floyd.sc_set_load_store <> Rn:376 var
R51598:51598 VST.floyd.sc_set_load_store <> R:381 var
binder 51510:51511 <> Rn:408
R51516:51516 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R51573:51577 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R51526:51530 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R51572:51572 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R51519:51521 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51517:51518 VST.floyd.sc_set_load_store <> Rn:408 var
R51522:51523 VST.floyd.sc_set_load_store <> Rv:405 var
R51525:51525 VST.floyd.sc_set_load_store <> v:406 var
R51533:51535 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51531:51532 VST.floyd.sc_set_load_store <> Rv:405 var
binder 51540:51540 <> v:409
R51545:51552 VST.floyd.field_at <> field_at def
R51571:51571 VST.floyd.sc_set_load_store <> p:401 var
R51569:51569 VST.floyd.sc_set_load_store <> v:409 var
R51564:51567 VST.floyd.sc_set_load_store <> gfs0:396 var
R51557:51562 VST.floyd.sc_set_load_store <> t_root:395 var
R51554:51555 VST.floyd.sc_set_load_store <> sh:378 var
R51581:51583 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51578:51580 VST.floyd.sc_set_load_store <> gfs:399 var
R51588:51591 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R51584:51587 VST.floyd.sc_set_load_store <> gfs1:397 var
R51592:51595 VST.floyd.sc_set_load_store <> gfs0:396 var
R51453:51472 VST.veric.SeparationLogic <> decode_encode_val_ok def
R51477:51479 VST.floyd.sc_set_load_store <> ch':391 var
R51474:51475 VST.floyd.sc_set_load_store <> ch:390 var
R51436:51438 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51382:51385 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R51339:51350 VST.veric.SeparationLogic <> numeric_type def
R51353:51369 VST.floyd.nested_field_lemmas <> nested_field_type def
R51378:51380 VST.floyd.sc_set_load_store <> gfs:399 var
R51371:51376 VST.floyd.sc_set_load_store <> t_root:395 var
R51386:51397 VST.veric.SeparationLogic <> numeric_type def
R51400:51416 VST.floyd.nested_field_lemmas <> nested_field_type def
R51425:51428 VST.floyd.sc_set_load_store <> gfs':400 var
R51418:51423 VST.floyd.sc_set_load_store <> t_root:395 var
R51439:51442 Coq.Init.Datatypes <> true constr
R51313:51315 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51270:51280 compcert.cfrontend.Ctypes <> access_mode def
R51283:51299 VST.floyd.nested_field_lemmas <> nested_field_type def
R51308:51311 VST.floyd.sc_set_load_store <> gfs':400 var
R51301:51306 VST.floyd.sc_set_load_store <> t_root:395 var
R51316:51323 compcert.cfrontend.Ctypes <> By_value constr
R51325:51327 VST.floyd.sc_set_load_store <> ch':391 var
R51226:51228 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51196:51214 VST.floyd.nested_field_lemmas <> nested_field_offset def
R51223:51225 VST.floyd.sc_set_load_store <> gfs:399 var
R51216:51221 VST.floyd.sc_set_load_store <> t_root:395 var
R51229:51247 VST.floyd.nested_field_lemmas <> nested_field_offset def
R51256:51259 VST.floyd.sc_set_load_store <> gfs':400 var
R51249:51254 VST.floyd.sc_set_load_store <> t_root:395 var
R51178:51180 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51130:51145 compcert.cfrontend.Ctypes <> type_is_volatile def
R51148:51164 VST.floyd.nested_field_lemmas <> nested_field_type def
R51173:51176 VST.floyd.sc_set_load_store <> gfs':400 var
R51166:51171 VST.floyd.sc_set_load_store <> t_root:395 var
R51181:51185 Coq.Init.Datatypes <> false constr
R51108:51110 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51083:51100 VST.floyd.sc_set_load_store <> replace_UnionField def
R51105:51107 VST.floyd.sc_set_load_store <> gfs:399 var
R51102:51103 VST.floyd.sc_set_load_store <> id:374 var
R51111:51114 Coq.Init.Datatypes <> Some constr
R51116:51119 VST.floyd.sc_set_load_store <> gfs':400 var
R51001:51017 VST.floyd.sc_set_load_store <> field_address_gen ind
R51057:51057 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R51064:51065 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R51069:51070 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R51072:51072 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R51058:51063 VST.floyd.sc_set_load_store <> t_root:395 var
R51066:51068 VST.floyd.sc_set_load_store <> gfs:399 var
R51071:51071 VST.floyd.sc_set_load_store <> p:401 var
R51019:51019 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R51033:51034 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R51045:51046 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R51055:51055 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R51020:51032 VST.floyd.sc_set_load_store <> t_root_from_e:392 var
R51035:51044 VST.floyd.sc_set_load_store <> gfs_from_e:393 var
R51047:51054 VST.floyd.sc_set_load_store <> p_from_e:394 var
R50941:50957 VST.floyd.efield_lemmas <> compute_root_type ind
R50978:50990 VST.floyd.sc_set_load_store <> t_root_from_e:392 var
R50975:50976 VST.floyd.sc_set_load_store <> lr:389 var
R50960:50965 compcert.cfrontend.Clight <> typeof def
R50967:50972 VST.floyd.sc_set_load_store <> e_root:387 var
R50881:50900 VST.floyd.sc_set_load_store <> msubst_efield_denote ind
R50921:50930 VST.floyd.sc_set_load_store <> gfs_from_e:393 var
R50917:50919 VST.floyd.sc_set_load_store <> efs:388 var
R50914:50915 VST.floyd.sc_set_load_store <> GV:386 var
R50911:50912 VST.floyd.sc_set_load_store <> T2:385 var
R50908:50909 VST.floyd.sc_set_load_store <> T1:384 var
R50902:50906 VST.floyd.sc_set_load_store <> Delta:377 var
R50855:50857 Coq.Init.Logic <> ::type_scope:x_'='_x not
R50816:50829 VST.floyd.local2ptree_eval <> msubst_eval_LR def
R50853:50854 VST.floyd.sc_set_load_store <> lr:389 var
R50846:50851 VST.floyd.sc_set_load_store <> e_root:387 var
R50843:50844 VST.floyd.sc_set_load_store <> GV:386 var
R50840:50841 VST.floyd.sc_set_load_store <> T2:385 var
R50837:50838 VST.floyd.sc_set_load_store <> T1:384 var
R50831:50835 VST.floyd.sc_set_load_store <> Delta:377 var
R50858:50861 Coq.Init.Datatypes <> Some constr
R50863:50870 VST.floyd.sc_set_load_store <> p_from_e:394 var
R50792:50794 Coq.Init.Logic <> ::type_scope:x_'='_x not
R50738:50753 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R50771:50775 compcert.cfrontend.Clight <> Ecast constr
R50781:50786 compcert.cfrontend.Clight <> typeof def
R50788:50789 VST.floyd.sc_set_load_store <> e1:382 var
R50777:50778 VST.floyd.sc_set_load_store <> e2:383 var
R50767:50768 VST.floyd.sc_set_load_store <> GV:386 var
R50764:50765 VST.floyd.sc_set_load_store <> T2:385 var
R50761:50762 VST.floyd.sc_set_load_store <> T1:384 var
R50755:50759 VST.floyd.sc_set_load_store <> Delta:377 var
R50795:50798 Coq.Init.Datatypes <> Some constr
R50800:50805 VST.floyd.sc_set_load_store <> v0_val:403 var
R50720:50722 Coq.Init.Logic <> ::type_scope:x_'='_x not
R50692:50707 compcert.cfrontend.Ctypes <> type_is_volatile def
R50710:50715 compcert.cfrontend.Clight <> typeof def
R50717:50718 VST.floyd.sc_set_load_store <> e1:382 var
R50723:50727 Coq.Init.Datatypes <> false constr
R50668:50670 Coq.Init.Logic <> ::type_scope:x_'='_x not
R50645:50655 compcert.cfrontend.Ctypes <> access_mode def
R50658:50663 compcert.cfrontend.Clight <> typeof def
R50665:50666 VST.floyd.sc_set_load_store <> e1:382 var
R50671:50678 compcert.cfrontend.Ctypes <> By_value constr
R50680:50681 VST.floyd.sc_set_load_store <> ch:390 var
R50615:50617 Coq.Init.Logic <> ::type_scope:x_'='_x not
R50591:50611 VST.floyd.efield_lemmas <> compute_nested_efield def
R50613:50614 VST.floyd.sc_set_load_store <> e1:382 var
R50618:50618 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R50625:50626 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R50630:50631 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R50634:50634 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R50619:50624 VST.floyd.sc_set_load_store <> e_root:387 var
R50627:50629 VST.floyd.sc_set_load_store <> efs:388 var
R50632:50633 VST.floyd.sc_set_load_store <> lr:389 var
R50561:50563 Coq.Init.Logic <> ::type_scope:x_'='_x not
R50548:50558 VST.floyd.local2ptree_denote <> local2ptree def
R50560:50560 VST.floyd.sc_set_load_store <> Q:380 var
R50564:50564 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R50567:50568 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R50571:50572 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R50576:50577 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R50580:50580 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R50565:50566 VST.floyd.sc_set_load_store <> T1:384 var
R50569:50570 VST.floyd.sc_set_load_store <> T2:385 var
R50573:50575 Coq.Init.Datatypes <> nil constr
R50578:50579 VST.floyd.sc_set_load_store <> GV:386 var
R52964:52966 Coq.Init.Logic <> ::type_scope:x_'='_x not
R52936:52951 VST.veric.mpred <> type_is_by_value def
R52954:52959 compcert.cfrontend.Clight <> typeof def
R52967:52970 Coq.Init.Datatypes <> true constr
R52964:52966 Coq.Init.Logic <> ::type_scope:x_'='_x not
R52936:52951 VST.veric.mpred <> type_is_by_value def
R52954:52959 compcert.cfrontend.Clight <> typeof def
R52967:52970 Coq.Init.Datatypes <> true constr
R53008:53013 compcert.cfrontend.Clight <> typeof def
R53008:53013 compcert.cfrontend.Clight <> typeof def
R53058:53064 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R53068:53084 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 53065:53067 <> tts:410
R53118:53136 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R53113:53115 Coq.Init.Logic <> ::type_scope:x_'='_x not
R53085:53097 VST.floyd.efield_lemmas <> nested_efield def
R53110:53112 VST.floyd.sc_set_load_store <> tts:410 var
R53166:53184 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R53161:53163 Coq.Init.Logic <> ::type_scope:x_'='_x not
R53137:53146 VST.floyd.efield_lemmas <> LR_of_type def
R53250:53268 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R53243:53245 Coq.Init.Logic <> ::type_scope:x_'='_x not
R53185:53203 VST.floyd.efield_lemmas <> legal_nested_efield def
R53237:53239 VST.floyd.sc_set_load_store <> tts:410 var
R53246:53249 Coq.Init.Datatypes <> true constr
R53311:53313 Coq.Init.Logic <> ::type_scope:x_'='_x not
R53269:53285 VST.floyd.nested_field_lemmas <> nested_field_type def
R53314:53319 compcert.cfrontend.Clight <> typeof def
R53058:53064 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R53068:53084 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 53065:53067 <> tts:411
R53118:53136 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R53113:53115 Coq.Init.Logic <> ::type_scope:x_'='_x not
R53085:53097 VST.floyd.efield_lemmas <> nested_efield def
R53110:53112 VST.floyd.sc_set_load_store <> tts:411 var
R53166:53184 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R53161:53163 Coq.Init.Logic <> ::type_scope:x_'='_x not
R53137:53146 VST.floyd.efield_lemmas <> LR_of_type def
R53250:53268 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R53243:53245 Coq.Init.Logic <> ::type_scope:x_'='_x not
R53185:53203 VST.floyd.efield_lemmas <> legal_nested_efield def
R53237:53239 VST.floyd.sc_set_load_store <> tts:411 var
R53246:53249 Coq.Init.Datatypes <> true constr
R53311:53313 Coq.Init.Logic <> ::type_scope:x_'='_x not
R53269:53285 VST.floyd.nested_field_lemmas <> nested_field_type def
R53314:53319 compcert.cfrontend.Clight <> typeof def
R53344:53364 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R53344:53364 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R53344:53364 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R53409:53431 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R53409:53431 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R53475:53487 VST.msl.seplog <> derives_trans meth
R53475:53487 VST.msl.seplog <> derives_trans meth
R53542:53546 VST.veric.SeparationLogic <> local def
R53549:53553 VST.veric.mpred <> lift1 def
R53579:53590 VST.msl.log_normalize <> prop_derives thm
R53579:53590 VST.msl.log_normalize <> prop_derives thm
R53616:53642 VST.floyd.efield_lemmas <> compute_nested_efield_lemma thm
R53616:53642 VST.floyd.efield_lemmas <> compute_nested_efield_lemma thm
R53805:53823 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R53805:53823 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R54005:54020 VST.floyd.nested_field_lemmas <> field_compatible def
R54005:54020 VST.floyd.nested_field_lemmas <> field_compatible def
R54078:54094 VST.msl.log_normalize <> corable_sepcon_TT thm
R54097:54100 VST.msl.seplog <> prop meth
R54078:54094 VST.msl.log_normalize <> corable_sepcon_TT thm
R54097:54100 VST.msl.seplog <> prop meth
R54078:54094 VST.msl.log_normalize <> corable_sepcon_TT thm
R54097:54100 VST.msl.seplog <> prop meth
R54126:54149 VST.floyd.sc_set_load_store <> nth_error_SEP_sepcon_TT' thm
R54126:54149 VST.floyd.sc_set_load_store <> nth_error_SEP_sepcon_TT' thm
R54179:54188 VST.msl.seplog <> andp_left2 meth
R54179:54188 VST.msl.seplog <> andp_left2 meth
R54201:54210 VST.msl.seplog <> andp_left2 meth
R54201:54210 VST.msl.seplog <> andp_left2 meth
R54223:54232 VST.msl.seplog <> andp_left2 meth
R54223:54232 VST.msl.seplog <> andp_left2 meth
R54247:54266 VST.floyd.field_at <> field_at_compatible' thm
R54247:54266 VST.floyd.field_at <> field_at_compatible' thm
R54247:54266 VST.floyd.field_at <> field_at_compatible' thm
R54318:54335 VST.floyd.nested_field_lemmas <> legal_nested_field def
R54338:54354 VST.floyd.nested_field_lemmas <> nested_field_type def
R54318:54335 VST.floyd.nested_field_lemmas <> legal_nested_field def
R54338:54354 VST.floyd.nested_field_lemmas <> nested_field_type def
R54399:54414 VST.floyd.nested_field_lemmas <> field_compatible def
R54399:54414 VST.floyd.nested_field_lemmas <> field_compatible def
R54545:54569 VST.floyd.nested_field_lemmas <> field_compatible_app_inv' thm
R54545:54569 VST.floyd.nested_field_lemmas <> field_compatible_app_inv' thm
R54696:54717 VST.floyd.sc_set_load_store <> field_address_gen_fact thm
R54696:54717 VST.floyd.sc_set_load_store <> field_address_gen_fact thm
R54875:54893 VST.floyd.efield_lemmas <> nested_efield_facts thm
R54875:54893 VST.floyd.efield_lemmas <> nested_efield_facts thm
R54982:55002 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R54982:55002 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R54982:55002 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R54982:55002 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R54982:55002 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R55020:55032 VST.msl.seplog <> derives_trans meth
R55059:55062 VST.msl.seplog <> ::logic:x_'&&'_x not
R55035:55039 VST.veric.SeparationLogic <> local def
R55042:55051 VST.veric.SeparationLogic <> tc_environ def
R55063:55067 VST.floyd.canon <> PROPx def
R55072:55077 VST.floyd.canon <> LOCALx def
R55082:55085 VST.floyd.canon <> SEPx def
R55020:55032 VST.msl.seplog <> derives_trans meth
R55059:55062 VST.msl.seplog <> ::logic:x_'&&'_x not
R55035:55039 VST.veric.SeparationLogic <> local def
R55042:55051 VST.veric.SeparationLogic <> tc_environ def
R55063:55067 VST.floyd.canon <> PROPx def
R55072:55077 VST.floyd.canon <> LOCALx def
R55082:55085 VST.floyd.canon <> SEPx def
R55124:55132 VST.msl.log_normalize <> andp_comm thm
R55137:55141 VST.veric.SeparationLogic <> local def
R55144:55156 VST.floyd.efield_lemmas <> efield_denote ind
R55170:55179 VST.msl.log_normalize <> andp_assoc thm
R55124:55132 VST.msl.log_normalize <> andp_comm thm
R55137:55141 VST.veric.SeparationLogic <> local def
R55144:55156 VST.floyd.efield_lemmas <> efield_denote ind
R55124:55132 VST.msl.log_normalize <> andp_comm thm
R55137:55141 VST.veric.SeparationLogic <> local def
R55144:55156 VST.floyd.efield_lemmas <> efield_denote ind
R55170:55179 VST.msl.log_normalize <> andp_assoc thm
R55170:55179 VST.msl.log_normalize <> andp_assoc thm
R55170:55179 VST.msl.log_normalize <> andp_assoc thm
R55170:55179 VST.msl.log_normalize <> andp_assoc thm
R55170:55179 VST.msl.log_normalize <> andp_assoc thm
R55195:55202 VST.msl.log_normalize <> add_andp thm
R55195:55202 VST.msl.log_normalize <> add_andp thm
R55195:55202 VST.msl.log_normalize <> add_andp thm
R55239:55248 VST.msl.seplog <> andp_right meth
R55239:55248 VST.msl.seplog <> andp_right meth
R55277:55286 VST.msl.seplog <> andp_right meth
R55277:55286 VST.msl.seplog <> andp_right meth
R55315:55324 VST.msl.seplog <> andp_right meth
R55315:55324 VST.msl.seplog <> andp_right meth
R55353:55362 VST.msl.seplog <> andp_left1 meth
R55353:55362 VST.msl.seplog <> andp_left1 meth
R55379:55399 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R55379:55399 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R55379:55399 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R55443:55452 VST.msl.seplog <> andp_right meth
R55443:55452 VST.msl.seplog <> andp_right meth
R55468:55490 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R55468:55490 VST.floyd.sc_set_load_store <> msubst_efield_denote_eq thm
R55541:55557 VST.floyd.local2ptree_eval <> msubst_eval_LR_eq thm
R55541:55557 VST.floyd.local2ptree_eval <> msubst_eval_LR_eq thm
R55631:55661 VST.floyd.sc_set_load_store <> semax_SC_field_store_union_hack thm
R55631:55661 VST.floyd.sc_set_load_store <> semax_SC_field_store_union_hack thm
R56068:56080 VST.msl.seplog <> derives_trans meth
R56068:56080 VST.msl.seplog <> derives_trans meth
R56179:56199 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R56179:56199 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R56179:56199 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R56221:56239 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R56221:56239 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R56281:56288 VST.floyd.jmeq_lemmas <> JMeq_sym thm
R56281:56288 VST.floyd.jmeq_lemmas <> JMeq_sym thm
R56326:56335 VST.msl.seplog <> andp_right meth
R56326:56335 VST.msl.seplog <> andp_right meth
R56347:56356 VST.msl.seplog <> prop_right meth
R56347:56356 VST.msl.seplog <> prop_right meth
R56378:56385 VST.msl.log_normalize <> add_andp thm
R56402:56409 VST.msl.log_normalize <> add_andp thm
R56378:56385 VST.msl.log_normalize <> add_andp thm
R56378:56385 VST.msl.log_normalize <> add_andp thm
R56402:56409 VST.msl.log_normalize <> add_andp thm
R56402:56409 VST.msl.log_normalize <> add_andp thm
R56492:56512 VST.floyd.loadstore_field_at <> access_mode_by_value' thm
R56492:56512 VST.floyd.loadstore_field_at <> access_mode_by_value' thm
prf 56534:56566 <> semax_PTree_field_store_with_hint
R56586:56595 VST.veric.juicy_extspec <> OracleKind class
binder 56579:56583 <> Espec:412
binder 56610:56610 <> n:413
binder 56612:56613 <> Rn:414
binder 56615:56619 <> Delta:415
binder 56621:56622 <> sh:416
binder 56624:56624 <> P:417
binder 56626:56626 <> Q:418
binder 56628:56628 <> R:419
R56639:56642 compcert.cfrontend.Clight <> expr ind
binder 56631:56632 <> e1:420
binder 56634:56635 <> e2:421
binder 56651:56652 <> T1:422
binder 56654:56655 <> T2:423
binder 56657:56658 <> GV:424
binder 56660:56667 <> p_from_e:425
R56684:56687 compcert.cfrontend.Ctypes <> type ind
binder 56676:56681 <> t_root:426
R56706:56709 Coq.Init.Datatypes <> list ind
R56711:56716 VST.floyd.nested_field_lemmas <> gfield ind
binder 56691:56694 <> gfs0:427
binder 56696:56699 <> gfs1:428
binder 56701:56703 <> gfs:429
R56723:56725 compcert.common.Values <> val ind
binder 56720:56720 <> p:430
R56740:56746 VST.floyd.reptype_lemmas <> reptype def
R56749:56765 VST.floyd.nested_field_lemmas <> nested_field_type def
R56799:56802 VST.floyd.sc_set_load_store <> gfs1:428 var
R56768:56784 VST.floyd.nested_field_lemmas <> nested_field_type def
R56793:56796 VST.floyd.sc_set_load_store <> gfs0:427 var
R56786:56791 VST.floyd.sc_set_load_store <> t_root:426 var
binder 56736:56737 <> v0:431
R56821:56823 compcert.common.Values <> val ind
binder 56813:56818 <> v0_val:432
binder 56826:56827 <> Rv:433
R56839:56845 VST.floyd.reptype_lemmas <> reptype def
R56848:56864 VST.floyd.nested_field_lemmas <> nested_field_type def
R56873:56876 VST.floyd.sc_set_load_store <> gfs0:427 var
R56866:56871 VST.floyd.sc_set_load_store <> t_root:426 var
binder 56830:56830 <> v:434
binder 56832:56836 <> v_new:435
R56920:56929 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56965:56974 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57011:57020 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57089:57098 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57151:57160 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57198:57207 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57248:57257 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57382:57391 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57409:57418 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57433:57442 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57515:57524 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57689:57698 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57699:57703 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R57778:57794 VST.veric.SeparationLogic <> normal_ret_assert def
R57809:57813 VST.floyd.canon <> PROPx def
R57832:57837 VST.floyd.canon <> LOCALx def
R57858:57861 VST.floyd.canon <> SEPx def
R57882:57892 VST.floyd.canon <> replace_nth def
R57919:57926 VST.floyd.field_at <> field_at def
R57949:57949 VST.floyd.sc_set_load_store <> p:430 var
R57943:57947 VST.floyd.sc_set_load_store <> v_new:435 var
R57938:57941 VST.floyd.sc_set_load_store <> gfs0:427 var
R57931:57936 VST.floyd.sc_set_load_store <> t_root:426 var
R57928:57929 VST.floyd.sc_set_load_store <> sh:416 var
R57896:57896 VST.floyd.sc_set_load_store <> R:419 var
R57894:57894 VST.floyd.sc_set_load_store <> n:413 var
R57839:57839 VST.floyd.sc_set_load_store <> Q:418 var
R57815:57815 VST.floyd.sc_set_load_store <> P:417 var
R57752:57758 compcert.cfrontend.Clight <> Sassign constr
R57763:57764 VST.floyd.sc_set_load_store <> e2:421 var
R57760:57761 VST.floyd.sc_set_load_store <> e1:420 var
R57712:57713 VST.msl.seplog <> ::logic:'|>'_x not
R57714:57718 VST.floyd.canon <> PROPx def
R57723:57728 VST.floyd.canon <> LOCALx def
R57733:57736 VST.floyd.canon <> SEPx def
R57738:57738 VST.floyd.sc_set_load_store <> R:419 var
R57730:57730 VST.floyd.sc_set_load_store <> Q:418 var
R57720:57720 VST.floyd.sc_set_load_store <> P:417 var
R57705:57709 VST.floyd.sc_set_load_store <> Delta:415 var
R57525:57531 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R57537:57538 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R57566:57578 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R57532:57536 VST.floyd.sc_set_load_store <> Delta:415 var
R57539:57543 VST.floyd.canon <> PROPx def
R57548:57553 VST.floyd.canon <> LOCALx def
R57558:57561 VST.floyd.canon <> SEPx def
R57563:57563 VST.floyd.sc_set_load_store <> R:419 var
R57555:57555 VST.floyd.sc_set_load_store <> Q:418 var
R57545:57545 VST.floyd.sc_set_load_store <> P:417 var
R57579:57594 VST.veric.SeparationLogic <> denote_tc_assert def
R57607:57613 VST.veric.expr <> tc_andp def
R57644:57657 VST.veric.expr <> typecheck_expr def
R57666:57670 compcert.cfrontend.Clight <> Ecast constr
R57676:57681 compcert.cfrontend.Clight <> typeof def
R57683:57684 VST.floyd.sc_set_load_store <> e1:420 var
R57672:57673 VST.floyd.sc_set_load_store <> e2:421 var
R57659:57663 VST.floyd.sc_set_load_store <> Delta:415 var
R57616:57631 VST.veric.expr <> typecheck_lvalue def
R57639:57640 VST.floyd.sc_set_load_store <> e1:420 var
R57633:57637 VST.floyd.sc_set_load_store <> Delta:415 var
R57443:57452 VST.floyd.stronger <> data_equal def
R57510:57514 VST.floyd.sc_set_load_store <> v_new:435 var
R57455:57465 VST.floyd.replace_refill_reptype_lemmas <> upd_reptype def
R57506:57507 VST.floyd.sc_set_load_store <> v0:431 var
R57504:57504 VST.floyd.sc_set_load_store <> v:434 var
R57499:57502 VST.floyd.sc_set_load_store <> gfs1:428 var
R57468:57484 VST.floyd.nested_field_lemmas <> nested_field_type def
R57493:57496 VST.floyd.sc_set_load_store <> gfs0:427 var
R57486:57491 VST.floyd.sc_set_load_store <> t_root:426 var
R57419:57422 VST.floyd.jmeq_lemmas <> JMeq def
R57431:57432 VST.floyd.sc_set_load_store <> v0:431 var
R57424:57429 VST.floyd.sc_set_load_store <> v0_val:432 var
R57392:57405 VST.veric.shares <> writable_share def
R57407:57408 VST.floyd.sc_set_load_store <> sh:416 var
R57258:57271 VST.floyd.find_nth_tactic <> find_nth_preds ind
R57369:57372 Coq.Init.Datatypes <> Some constr
R57374:57374 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R57376:57377 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R57380:57380 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R57375:57375 VST.floyd.sc_set_load_store <> n:413 var
R57378:57379 VST.floyd.sc_set_load_store <> Rn:414 var
R57366:57366 VST.floyd.sc_set_load_store <> R:419 var
binder 57278:57279 <> Rn:436
R57284:57284 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R57341:57345 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R57294:57298 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R57340:57340 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R57287:57289 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57285:57286 VST.floyd.sc_set_load_store <> Rn:436 var
R57290:57291 VST.floyd.sc_set_load_store <> Rv:433 var
R57293:57293 VST.floyd.sc_set_load_store <> v:434 var
R57301:57303 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57299:57300 VST.floyd.sc_set_load_store <> Rv:433 var
binder 57308:57308 <> v:437
R57313:57320 VST.floyd.field_at <> field_at def
R57339:57339 VST.floyd.sc_set_load_store <> p:430 var
R57337:57337 VST.floyd.sc_set_load_store <> v:437 var
R57332:57335 VST.floyd.sc_set_load_store <> gfs0:427 var
R57325:57330 VST.floyd.sc_set_load_store <> t_root:426 var
R57322:57323 VST.floyd.sc_set_load_store <> sh:416 var
R57349:57351 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57346:57348 VST.floyd.sc_set_load_store <> gfs:429 var
R57356:57359 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R57352:57355 VST.floyd.sc_set_load_store <> gfs1:428 var
R57360:57363 VST.floyd.sc_set_load_store <> gfs0:427 var
R57217:57219 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57208:57213 compcert.cfrontend.Clight <> typeof def
R57215:57216 VST.floyd.sc_set_load_store <> e1:420 var
R57220:57236 VST.floyd.nested_field_lemmas <> nested_field_type def
R57245:57247 VST.floyd.sc_set_load_store <> gfs:429 var
R57238:57243 VST.floyd.sc_set_load_store <> t_root:426 var
R57169:57171 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57161:57168 VST.floyd.sc_set_load_store <> p_from_e:425 var
R57172:57184 VST.floyd.nested_field_lemmas <> field_address def
R57197:57197 VST.floyd.sc_set_load_store <> p:430 var
R57193:57195 VST.floyd.sc_set_load_store <> gfs:429 var
R57186:57191 VST.floyd.sc_set_load_store <> t_root:426 var
R57135:57137 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57099:57116 VST.floyd.local2ptree_eval <> msubst_eval_lvalue def
R57133:57134 VST.floyd.sc_set_load_store <> e1:420 var
R57130:57131 VST.floyd.sc_set_load_store <> GV:424 var
R57127:57128 VST.floyd.sc_set_load_store <> T2:423 var
R57124:57125 VST.floyd.sc_set_load_store <> T1:422 var
R57118:57122 VST.floyd.sc_set_load_store <> Delta:415 var
R57138:57141 Coq.Init.Datatypes <> Some constr
R57143:57150 VST.floyd.sc_set_load_store <> p_from_e:425 var
R57075:57077 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57021:57036 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R57054:57058 compcert.cfrontend.Clight <> Ecast constr
R57064:57069 compcert.cfrontend.Clight <> typeof def
R57071:57072 VST.floyd.sc_set_load_store <> e1:420 var
R57060:57061 VST.floyd.sc_set_load_store <> e2:421 var
R57050:57051 VST.floyd.sc_set_load_store <> GV:424 var
R57047:57048 VST.floyd.sc_set_load_store <> T2:423 var
R57044:57045 VST.floyd.sc_set_load_store <> T1:422 var
R57038:57042 VST.floyd.sc_set_load_store <> Delta:415 var
R57078:57081 Coq.Init.Datatypes <> Some constr
R57083:57088 VST.floyd.sc_set_load_store <> v0_val:432 var
R57003:57005 Coq.Init.Logic <> ::type_scope:x_'='_x not
R56975:56990 compcert.cfrontend.Ctypes <> type_is_volatile def
R56993:56998 compcert.cfrontend.Clight <> typeof def
R57000:57001 VST.floyd.sc_set_load_store <> e1:420 var
R57006:57010 Coq.Init.Datatypes <> false constr
R56958:56960 Coq.Init.Logic <> ::type_scope:x_'='_x not
R56930:56945 VST.veric.mpred <> type_is_by_value def
R56948:56953 compcert.cfrontend.Clight <> typeof def
R56955:56956 VST.floyd.sc_set_load_store <> e1:420 var
R56961:56964 Coq.Init.Datatypes <> true constr
R56900:56902 Coq.Init.Logic <> ::type_scope:x_'='_x not
R56887:56897 VST.floyd.local2ptree_denote <> local2ptree def
R56899:56899 VST.floyd.sc_set_load_store <> Q:418 var
R56903:56903 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R56906:56907 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R56910:56911 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R56915:56916 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R56919:56919 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R56904:56905 VST.floyd.sc_set_load_store <> T1:422 var
R56908:56909 VST.floyd.sc_set_load_store <> T2:423 var
R56912:56914 Coq.Init.Datatypes <> nil constr
R56917:56918 VST.floyd.sc_set_load_store <> GV:424 var
R58138:58156 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R58138:58156 VST.floyd.find_nth_tactic <> find_nth_preds_Some thm
R58226:58246 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R58226:58246 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R58226:58246 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R58264:58283 VST.floyd.sc_set_load_store <> semax_SC_field_store thm
R58264:58283 VST.floyd.sc_set_load_store <> semax_SC_field_store thm
R58446:58453 VST.floyd.jmeq_lemmas <> JMeq_sym thm
R58446:58453 VST.floyd.jmeq_lemmas <> JMeq_sym thm
R58558:58578 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R58558:58578 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R58558:58578 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R58628:58648 VST.floyd.local2ptree_eval <> msubst_eval_lvalue_eq thm
R58628:58648 VST.floyd.local2ptree_eval <> msubst_eval_lvalue_eq thm
R58695:58715 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R58695:58715 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R58695:58715 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R58765:58783 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R58765:58783 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
def 58809:58816 <> proj_val
binder 58818:58823 <> t_root:438
binder 58825:58827 <> gfs:439
binder 58829:58829 <> v:440
R58837:58845 VST.floyd.reptype_lemmas <> repinject def
R58879:58890 VST.floyd.proj_reptype_lemmas <> proj_reptype def
R58903:58903 VST.floyd.sc_set_load_store <> v:440 var
R58899:58901 VST.floyd.sc_set_load_store <> gfs:439 var
R58892:58897 VST.floyd.sc_set_load_store <> t_root:438 var
R58848:58864 VST.floyd.nested_field_lemmas <> nested_field_type def
R58873:58875 VST.floyd.sc_set_load_store <> gfs:439 var
R58866:58871 VST.floyd.sc_set_load_store <> t_root:438 var
def 58919:58925 <> upd_val
binder 58927:58932 <> t_root:441
binder 58934:58936 <> gfs:442
binder 58938:58938 <> v:443
binder 58940:58941 <> v0:444
R58949:58959 VST.floyd.replace_refill_reptype_lemmas <> upd_reptype def
R58975:58983 VST.floyd.reptype_lemmas <> valinject def
R59016:59017 VST.floyd.sc_set_load_store <> v0:444 var
R58986:59002 VST.floyd.nested_field_lemmas <> nested_field_type def
R59011:59013 VST.floyd.sc_set_load_store <> gfs:442 var
R59004:59009 VST.floyd.sc_set_load_store <> t_root:441 var
R58972:58972 VST.floyd.sc_set_load_store <> v:443 var
R58968:58970 VST.floyd.sc_set_load_store <> gfs:442 var
R58961:58966 VST.floyd.sc_set_load_store <> t_root:441 var
R59026:59036 VST.floyd.sc_set_load_store SEMAX_PTREE <> sec
R59128:59130 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59097:59104 VST.floyd.field_at <> field_at def
R59131:59138 VST.floyd.field_at <> field_at def
R59128:59130 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59097:59104 VST.floyd.field_at <> field_at def
R59131:59138 VST.floyd.field_at <> field_at def
R59198:59202 Coq.Lists.List <> skipn def
R59215:59217 Coq.Init.Peano <> ::nat_scope:x_'-'_x not
R59205:59210 Coq.Lists.List <> length syndef
R59218:59223 Coq.Lists.List <> length syndef
R59351:59370 VST.floyd.field_at <> field_at_offset_zero thm
R59534:59536 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59519:59525 VST.floyd.field_at <> data_at def
R59534:59536 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59519:59525 VST.floyd.field_at <> data_at def
R59609:59611 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59595:59602 VST.floyd.field_at <> data_at_ def
R59609:59611 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59595:59602 VST.floyd.field_at <> data_at_ def
R59700:59702 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59682:59689 VST.floyd.field_at <> field_at def
R59700:59702 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59682:59689 VST.floyd.field_at <> field_at def
R59762:59764 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59745:59753 VST.floyd.field_at <> field_at_ def
R59762:59764 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59745:59753 VST.floyd.field_at <> field_at_ def
R59783:59791 VST.floyd.field_at <> field_at_ def
R59630:59637 VST.floyd.field_at <> data_at_ def
R59640:59648 VST.floyd.field_at <> field_at_ def
R59555:59561 VST.floyd.field_at <> data_at def
R59936:59940 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R59983:59983 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R59926:59928 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59891:59898 VST.floyd.field_at <> field_at def
R59942:59944 Coq.Init.Logic <> ::type_scope:x_'='_x not
binder 59949:59949 <> v:445
R59954:59961 VST.floyd.field_at <> field_at def
R59978:59978 VST.floyd.sc_set_load_store <> v:445 var
R59936:59940 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R59983:59983 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R59926:59928 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59891:59898 VST.floyd.field_at <> field_at def
R59942:59944 Coq.Init.Logic <> ::type_scope:x_'='_x not
binder 59949:59949 <> v:446
R59954:59961 VST.floyd.field_at <> field_at def
R59978:59978 VST.floyd.sc_set_load_store <> v:446 var
R60393:60397 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R60440:60440 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R60383:60385 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60355:60361 VST.floyd.field_at <> data_at def
R60399:60401 Coq.Init.Logic <> ::type_scope:x_'='_x not
binder 60406:60406 <> v:447
R60411:60418 VST.floyd.field_at <> field_at def
R60435:60435 VST.floyd.sc_set_load_store <> v:447 var
R60393:60397 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R60440:60440 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R60383:60385 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60355:60361 VST.floyd.field_at <> data_at def
R60399:60401 Coq.Init.Logic <> ::type_scope:x_'='_x not
binder 60406:60406 <> v:448
R60411:60418 VST.floyd.field_at <> field_at def
R60435:60435 VST.floyd.sc_set_load_store <> v:448 var
R60483:60485 Coq.Init.Datatypes <> nil constr
R60487:60492 VST.floyd.nested_field_lemmas <> gfield ind
binder 60611:60611 <> v:449
R60622:60628 VST.floyd.field_at <> data_at def
R60640:60640 VST.floyd.sc_set_load_store <> v:449 var
R60710:60716 VST.floyd.field_at <> data_at def
R60739:60758 VST.floyd.field_at <> field_at_offset_zero thm
R60020:60024 Coq.Lists.List <> skipn def
R60037:60039 Coq.Init.Peano <> ::nat_scope:x_'-'_x not
R60027:60032 Coq.Lists.List <> length syndef
R60040:60045 Coq.Lists.List <> length syndef
binder 60202:60202 <> v:450
R60213:60220 VST.floyd.field_at <> field_at def
R60237:60237 VST.floyd.sc_set_load_store <> v:450 var
R60312:60331 VST.floyd.field_at <> field_at_offset_zero thm
R60867:60870 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R60863:60865 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60845:60852 VST.floyd.field_at <> data_at_ def
R60867:60870 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R60863:60865 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60845:60852 VST.floyd.field_at <> data_at_ def
R61011:61014 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R61007:61009 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60990:60998 VST.floyd.field_at <> field_at_ def
R61011:61014 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R61007:61009 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60990:60998 VST.floyd.field_at <> field_at_ def
R61033:61041 VST.floyd.field_at <> field_at_ def
R60890:60897 VST.floyd.field_at <> data_at_ def
R60890:60897 VST.floyd.field_at <> data_at_ def
R60913:60919 VST.floyd.field_at <> data_at def
R60927:60937 VST.floyd.reptype_lemmas <> default_val def
R61288:61291 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R61288:61291 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R61350:61352 Coq.Init.Datatypes <> nil constr
R61350:61352 Coq.Init.Datatypes <> nil constr
R61370:61372 Coq.Init.Datatypes <> nil constr
R61335:61338 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R61440:61442 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61448:61451 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R61440:61442 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61448:61451 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R61525:61530 Coq.Lists.List <> firstn def
R61544:61546 Coq.Init.Peano <> ::nat_scope:x_'-'_x not
R61534:61539 Coq.Lists.List <> length syndef
R61547:61552 Coq.Lists.List <> length syndef
R61687:61690 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R61695:61697 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61699:61702 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R61687:61690 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R61695:61697 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61699:61702 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R61746:61749 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R61746:61749 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
prf 61949:61967 <> quick_derives_right
R61992:61995 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61996:62000 VST.veric.mpred <> mpred def
R61985:61991 VST.veric.mpred <> environ ind
binder 61979:61979 <> P:451
binder 61981:61981 <> Q:452
R62014:62017 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R62019:62023 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R62018:62018 VST.floyd.sc_set_load_store <> P:451 var
R62024:62024 VST.floyd.sc_set_load_store <> Q:452 var
R62008:62012 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R62006:62007 VST.msl.seplog <> TT meth
R62013:62013 VST.floyd.sc_set_load_store <> Q:452 var
R62049:62061 VST.msl.seplog <> derives_trans meth
R62049:62061 VST.msl.seplog <> derives_trans meth
R62214:62232 VST.floyd.sc_set_load_store <> quick_derives_right thm
R62282:62291 VST.msl.seplog <> andp_right meth
R62433:62441 VST.floyd.efield_lemmas <> tc_efield def
R62444:62448 VST.floyd.typecheck_lemmas <> tc_LR def
R62451:62462 VST.floyd.typecheck_lemmas <> tc_LR_strong def
R62706:62708 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62697:62702 compcert.cfrontend.Clight <> typeof def
R62706:62708 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62697:62702 compcert.cfrontend.Clight <> typeof def
R62738:62743 compcert.cfrontend.Clight <> typeof def
R63079:63110 VST.floyd.sc_set_load_store <> semax_PTree_field_load_with_hint thm
R64521:64550 VST.floyd.sc_set_load_store <> semax_PTree_field_load_no_hint thm
R66267:66271 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R66319:66322 compcert.cfrontend.Clight <> Sset constr
R66281:66284 VST.msl.seplog <> ::logic:'|>'_x not
R66315:66315 VST.msl.seplog <> ::logic:'|>'_x not
R66285:66289 VST.floyd.canon <> PROPx def
R66295:66300 VST.floyd.canon <> LOCALx def
R66306:66309 VST.floyd.canon <> SEPx def
R66267:66271 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R66319:66322 compcert.cfrontend.Clight <> Sset constr
R66281:66284 VST.msl.seplog <> ::logic:'|>'_x not
R66315:66315 VST.msl.seplog <> ::logic:'|>'_x not
R66285:66289 VST.floyd.canon <> PROPx def
R66295:66300 VST.floyd.canon <> LOCALx def
R66306:66309 VST.floyd.canon <> SEPx def
R66373:66379 compcert.lib.Maps PTree t def
R66381:66383 compcert.common.Values <> val ind
R66425:66431 compcert.lib.Maps PTree t def
R66438:66440 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R66434:66437 compcert.cfrontend.Ctypes <> type ind
R66441:66443 compcert.common.Values <> val ind
R66484:66489 Coq.Init.Datatypes <> option ind
R66491:66497 VST.veric.SeparationLogic <> globals def
R66572:66574 Coq.Init.Logic <> ::type_scope:x_'='_x not
R66559:66569 VST.floyd.local2ptree_denote <> local2ptree def
R66575:66575 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66578:66579 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66582:66583 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66587:66588 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66590:66590 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66584:66586 Coq.Init.Datatypes <> nil constr
R66893:66929 VST.floyd.sc_set_load_store <> semax_PTree_field_cast_load_with_hint thm
R68386:68420 VST.floyd.sc_set_load_store <> semax_PTree_field_cast_load_no_hint thm
R70182:70186 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R70234:70237 compcert.cfrontend.Clight <> Sset constr
R70242:70246 compcert.cfrontend.Clight <> Ecast constr
R70196:70199 VST.msl.seplog <> ::logic:'|>'_x not
R70230:70230 VST.msl.seplog <> ::logic:'|>'_x not
R70200:70204 VST.floyd.canon <> PROPx def
R70210:70215 VST.floyd.canon <> LOCALx def
R70221:70224 VST.floyd.canon <> SEPx def
R70182:70186 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R70234:70237 compcert.cfrontend.Clight <> Sset constr
R70242:70246 compcert.cfrontend.Clight <> Ecast constr
R70196:70199 VST.msl.seplog <> ::logic:'|>'_x not
R70230:70230 VST.msl.seplog <> ::logic:'|>'_x not
R70200:70204 VST.floyd.canon <> PROPx def
R70210:70215 VST.floyd.canon <> LOCALx def
R70221:70224 VST.floyd.canon <> SEPx def
R70298:70304 compcert.lib.Maps PTree t def
R70306:70308 compcert.common.Values <> val ind
R70350:70356 compcert.lib.Maps PTree t def
R70363:70365 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R70359:70362 compcert.cfrontend.Ctypes <> type ind
R70366:70368 compcert.common.Values <> val ind
R70409:70414 Coq.Init.Datatypes <> option ind
R70416:70422 VST.veric.SeparationLogic <> globals def
R70497:70499 Coq.Init.Logic <> ::type_scope:x_'='_x not
R70484:70494 VST.floyd.local2ptree_denote <> local2ptree def
R70500:70500 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70503:70504 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70507:70508 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70512:70513 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70515:70515 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70509:70511 Coq.Init.Datatypes <> nil constr
prf 70781:70796 <> data_equal_congr
R70803:70811 VST.veric.mpred <> compspecs class
binder 70799:70800 <> cs:453
binder 70826:70826 <> T:454
R70836:70842 VST.floyd.reptype_lemmas <> reptype def
R70844:70844 VST.floyd.sc_set_load_store <> T:454 var
binder 70829:70830 <> v1:455
binder 70832:70833 <> v2:456
R70858:70864 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R70865:70874 VST.floyd.stronger <> data_equal def
R70879:70880 VST.floyd.sc_set_load_store <> v2:456 var
R70876:70877 VST.floyd.sc_set_load_store <> v1:455 var
R70853:70855 Coq.Init.Logic <> ::type_scope:x_'='_x not
R70851:70852 VST.floyd.sc_set_load_store <> v1:455 var
R70856:70857 VST.floyd.sc_set_load_store <> v2:456 var
def 70942:70952 <> intsize_leq
binder 70954:70954 <> a:457
binder 70956:70956 <> b:458
R70971:70971 VST.floyd.sc_set_load_store <> b:458 var
R70969:70969 VST.floyd.sc_set_load_store <> a:457 var
R70981:70985 compcert.cfrontend.Ctypes <> IBool constr
R70988:70992 compcert.cfrontend.Ctypes <> IBool constr
R70997:71000 Coq.Init.Logic <> True ind
R71005:71009 compcert.cfrontend.Ctypes <> IBool constr
R71017:71021 Coq.Init.Logic <> False ind
R71029:71033 compcert.cfrontend.Ctypes <> IBool constr
R71038:71042 Coq.Init.Logic <> False ind
R71047:71048 compcert.cfrontend.Ctypes <> I8 constr
R71056:71059 Coq.Init.Logic <> True ind
R71067:71068 compcert.cfrontend.Ctypes <> I8 constr
R71073:71077 Coq.Init.Logic <> False ind
R71082:71084 compcert.cfrontend.Ctypes <> I16 constr
R71092:71095 Coq.Init.Logic <> True ind
R71103:71105 compcert.cfrontend.Ctypes <> I16 constr
R71110:71114 Coq.Init.Logic <> False ind
R71119:71121 compcert.cfrontend.Ctypes <> I32 constr
R71124:71126 compcert.cfrontend.Ctypes <> I32 constr
R71131:71134 Coq.Init.Logic <> True ind
prf 71149:71168 <> sem_cast_i2i_compose
binder 71179:71181 <> sz1:461
binder 71183:71184 <> sg:462
binder 71186:71188 <> sz2:463
binder 71190:71190 <> x:464
R71215:71221 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R71277:71282 Coq.Init.Logic <> ::type_scope:x_'='_x not
R71222:71233 VST.veric.Clight_Cop2 <> sem_cast_i2i def
R71243:71251 VST.veric.val_lemmas <> force_val def
R71254:71265 VST.veric.Clight_Cop2 <> sem_cast_i2i def
R71274:71274 VST.floyd.sc_set_load_store <> x:464 var
R71271:71272 VST.floyd.sc_set_load_store <> sg:462 var
R71267:71269 VST.floyd.sc_set_load_store <> sz2:463 var
R71239:71240 VST.floyd.sc_set_load_store <> sg:462 var
R71235:71237 VST.floyd.sc_set_load_store <> sz1:461 var
R71283:71294 VST.veric.Clight_Cop2 <> sem_cast_i2i def
R71303:71303 VST.floyd.sc_set_load_store <> x:464 var
R71300:71301 VST.floyd.sc_set_load_store <> sg:462 var
R71296:71298 VST.floyd.sc_set_load_store <> sz2:463 var
R71196:71206 VST.floyd.sc_set_load_store <> intsize_leq def
R71212:71214 VST.floyd.sc_set_load_store <> sz1:461 var
R71208:71210 VST.floyd.sc_set_load_store <> sz2:463 var
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71487:71492 compcert.lib.Integers Int eq def
R71496:71503 compcert.lib.Integers Int zero def
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71412:71429 compcert.lib.Integers Int sign_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71444:71461 compcert.lib.Integers Int zero_ext_widen thm
R71487:71492 compcert.lib.Integers Int eq def
R71496:71503 compcert.lib.Integers Int zero def
R71487:71492 compcert.lib.Integers Int eq def
R71496:71503 compcert.lib.Integers Int zero def
R71589:71595 Coq.Init.Logic <> I constr
R71559:71578 VST.floyd.sc_set_load_store <> sem_cast_i2i_compose thm
R71607:71615 VST.floyd.jmeq_lemmas <> JMeq_refl thm
R71743:71775 VST.floyd.sc_set_load_store <> semax_PTree_field_store_with_hint thm
R72713:72728 VST.floyd.sc_set_load_store <> data_equal_congr thm
R73227:73257 VST.floyd.sc_set_load_store <> semax_PTree_field_store_no_hint thm
R74210:74225 VST.floyd.sc_set_load_store <> data_equal_congr thm
R74999:75009 compcert.cfrontend.Ctypes <> access_mode def
R75012:75017 compcert.cfrontend.Clight <> typeof def
R75077:75084 compcert.cfrontend.Ctypes <> By_value constr
R75077:75084 compcert.cfrontend.Ctypes <> By_value constr
R75106:75117 compcert.cfrontend.Ctypes <> By_reference constr
R75106:75117 compcert.cfrontend.Ctypes <> By_reference constr
R75194:75200 compcert.cfrontend.Ctypes <> By_copy constr
R75194:75200 compcert.cfrontend.Ctypes <> By_copy constr
R75361:75370 compcert.cfrontend.Ctypes <> By_nothing constr
R75361:75370 compcert.cfrontend.Ctypes <> By_nothing constr
R75477:75481 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R75529:75535 compcert.cfrontend.Clight <> Sassign constr
R75491:75494 VST.msl.seplog <> ::logic:'|>'_x not
R75525:75525 VST.msl.seplog <> ::logic:'|>'_x not
R75495:75499 VST.floyd.canon <> PROPx def
R75505:75510 VST.floyd.canon <> LOCALx def
R75516:75519 VST.floyd.canon <> SEPx def
R75477:75481 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R75529:75535 compcert.cfrontend.Clight <> Sassign constr
R75491:75494 VST.msl.seplog <> ::logic:'|>'_x not
R75525:75525 VST.msl.seplog <> ::logic:'|>'_x not
R75495:75499 VST.floyd.canon <> PROPx def
R75505:75510 VST.floyd.canon <> LOCALx def
R75516:75519 VST.floyd.canon <> SEPx def
R75623:75629 compcert.lib.Maps PTree t def
R75631:75633 compcert.common.Values <> val ind
R75675:75681 compcert.lib.Maps PTree t def
R75688:75690 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R75684:75687 compcert.cfrontend.Ctypes <> type ind
R75691:75693 compcert.common.Values <> val ind
R75734:75739 Coq.Init.Datatypes <> option ind
R75741:75747 VST.veric.SeparationLogic <> globals def
R75822:75824 Coq.Init.Logic <> ::type_scope:x_'='_x not
R75809:75819 VST.floyd.local2ptree_denote <> local2ptree def
R75825:75825 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75828:75829 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75832:75833 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75837:75838 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75840:75840 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75834:75836 Coq.Init.Datatypes <> nil constr
R76152:76156 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R76204:76210 compcert.cfrontend.Clight <> Sassign constr
R76166:76169 VST.msl.seplog <> ::logic:'|>'_x not
R76200:76200 VST.msl.seplog <> ::logic:'|>'_x not
R76170:76174 VST.floyd.canon <> PROPx def
R76180:76185 VST.floyd.canon <> LOCALx def
R76191:76194 VST.floyd.canon <> SEPx def
R76152:76156 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R76204:76210 compcert.cfrontend.Clight <> Sassign constr
R76166:76169 VST.msl.seplog <> ::logic:'|>'_x not
R76200:76200 VST.msl.seplog <> ::logic:'|>'_x not
R76170:76174 VST.floyd.canon <> PROPx def
R76180:76185 VST.floyd.canon <> LOCALx def
R76191:76194 VST.floyd.canon <> SEPx def
R76298:76304 compcert.lib.Maps PTree t def
R76306:76308 compcert.common.Values <> val ind
R76350:76356 compcert.lib.Maps PTree t def
R76363:76365 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R76359:76362 compcert.cfrontend.Ctypes <> type ind
R76366:76368 compcert.common.Values <> val ind
R76409:76414 Coq.Init.Datatypes <> option ind
R76416:76422 VST.veric.SeparationLogic <> globals def
R76497:76499 Coq.Init.Logic <> ::type_scope:x_'='_x not
R76484:76494 VST.floyd.local2ptree_denote <> local2ptree def
R76500:76500 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R76503:76504 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R76507:76508 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R76512:76513 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R76515:76515 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R76509:76511 Coq.Init.Datatypes <> nil constr
R76585:76618 VST.floyd.sc_set_load_store <> semax_PTree_field_store_union_hack thm
R77549:77549 Coq.Init.Logic <> I constr
R77957:77972 VST.floyd.sc_set_load_store <> data_equal_congr thm
R78740:78744 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R78745:78748 VST.msl.seplog <> prop meth
R78740:78744 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R78745:78748 VST.msl.seplog <> prop meth
