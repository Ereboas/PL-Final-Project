DIGEST 8f5d8d8107aa2081db02496bb3855c06
FVST.floyd.semax_tactics
R15:29 VST.floyd.base2 <> <> lib
R47:69 VST.floyd.client_lemmas <> <> lib
R287:296 VST.floyd.client_lemmas <> abbreviate def
R480:489 VST.floyd.client_lemmas <> abbreviate def
R586:595 VST.floyd.client_lemmas <> abbreviate def
R586:595 VST.floyd.client_lemmas <> abbreviate def
R643:652 VST.floyd.client_lemmas <> abbreviate def
R750:759 VST.floyd.client_lemmas <> abbreviate def
R761:770 VST.veric.tycontext <> ret_assert rec
R750:759 VST.floyd.client_lemmas <> abbreviate def
R761:770 VST.veric.tycontext <> ret_assert rec
R968:977 VST.floyd.client_lemmas <> abbreviate def
R979:987 compcert.cfrontend.Clight <> statement ind
R968:977 VST.floyd.client_lemmas <> abbreviate def
R979:987 compcert.cfrontend.Clight <> statement ind
R1033:1042 VST.floyd.client_lemmas <> abbreviate def
R816:825 VST.floyd.client_lemmas <> abbreviate def
R1128:1137 VST.floyd.client_lemmas <> abbreviate def
R1139:1148 VST.veric.tycontext <> ret_assert rec
R1128:1137 VST.floyd.client_lemmas <> abbreviate def
R1139:1148 VST.veric.tycontext <> ret_assert rec
R1194:1203 VST.floyd.client_lemmas <> abbreviate def
R1294:1303 VST.floyd.client_lemmas <> abbreviate def
R1305:1313 compcert.cfrontend.Clight <> statement ind
R1294:1303 VST.floyd.client_lemmas <> abbreviate def
R1305:1313 compcert.cfrontend.Clight <> statement ind
R1359:1368 VST.floyd.client_lemmas <> abbreviate def
R1487:1496 VST.floyd.client_lemmas <> abbreviate def
R1498:1506 compcert.cfrontend.Clight <> statement ind
R1487:1496 VST.floyd.client_lemmas <> abbreviate def
R1498:1506 compcert.cfrontend.Clight <> statement ind
R1570:1579 VST.floyd.client_lemmas <> abbreviate def
R1581:1590 VST.veric.tycontext <> ret_assert rec
R1570:1579 VST.floyd.client_lemmas <> abbreviate def
R1581:1590 VST.veric.tycontext <> ret_assert rec
R1654:1663 VST.floyd.client_lemmas <> abbreviate def
R1665:1673 VST.veric.seplog <> tycontext ind
R1654:1663 VST.floyd.client_lemmas <> abbreviate def
R1665:1673 VST.veric.seplog <> tycontext ind
R1745:1753 VST.veric.seplog <> var_types def
R2324:2326 Coq.Init.Datatypes <> snd def
R2324:2326 Coq.Init.Datatypes <> snd def
R2366:2368 Coq.Init.Datatypes <> snd def
R2504:2513 compcert.lib.Maps PTree Node constr
R2504:2513 compcert.lib.Maps PTree Node constr
R2574:2583 compcert.lib.Maps PTree Leaf constr
R2574:2583 compcert.lib.Maps PTree Leaf constr
R2658:2667 VST.floyd.client_lemmas <> abbreviate def
R2672:2683 VST.veric.seplog <> mk_tycontext constr
R2658:2667 VST.floyd.client_lemmas <> abbreviate def
R2672:2683 VST.veric.seplog <> mk_tycontext constr
R3115:3124 VST.floyd.client_lemmas <> abbreviate def
R3129:3140 VST.veric.seplog <> mk_tycontext constr
R3115:3124 VST.floyd.client_lemmas <> abbreviate def
R3129:3140 VST.veric.seplog <> mk_tycontext constr
R3175:3184 VST.floyd.client_lemmas <> abbreviate def
R3187:3193 compcert.lib.Maps PTree t def
R3195:3201 VST.veric.mpred <> funspec ind
R3175:3184 VST.floyd.client_lemmas <> abbreviate def
R3187:3193 compcert.lib.Maps PTree t def
R3195:3201 VST.veric.mpred <> funspec ind
R3325:3334 VST.floyd.client_lemmas <> abbreviate def
R3339:3350 VST.veric.seplog <> mk_tycontext constr
R3325:3334 VST.floyd.client_lemmas <> abbreviate def
R3339:3350 VST.veric.seplog <> mk_tycontext constr
R3384:3390 compcert.lib.Maps PTree t def
R3392:3398 VST.veric.mpred <> funspec ind
R3384:3390 compcert.lib.Maps PTree t def
R3392:3398 VST.veric.mpred <> funspec ind
R3589:3602 VST.veric.tycontext <> func_tycontext def
R3589:3602 VST.veric.tycontext <> func_tycontext def
R3699:3708 VST.floyd.client_lemmas <> abbreviate def
R3721:3734 VST.veric.tycontext <> func_tycontext def
R3710:3718 VST.veric.seplog <> tycontext ind
R3759:3772 VST.veric.tycontext <> func_tycontext def
R3759:3772 VST.veric.tycontext <> func_tycontext def
R3806:3819 VST.veric.tycontext <> func_tycontext def
R3822:3835 VST.veric.seplog <> make_tycontext def
R3928:3943 VST.veric.mpred <> make_tycontext_s def
R3966:3975 VST.floyd.client_lemmas <> abbreviate def
R3978:3984 compcert.lib.Maps PTree t def
R3986:3992 VST.veric.mpred <> funspec ind
R4013:4028 VST.veric.mpred <> make_tycontext_s def
R4013:4028 VST.veric.mpred <> make_tycontext_s def
R4092:4100 VST.veric.mpred <> ptree_set def
R4158:4167 VST.floyd.client_lemmas <> abbreviate def
R4269:4273 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R4269:4273 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R4323:4329 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R4333:4334 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R4336:4340 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R4323:4329 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R4333:4334 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R4336:4340 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
def 4393:4408 <> with_Delta_specs
R4415:4421 compcert.lib.Maps PTree t def
R4423:4429 VST.veric.mpred <> funspec ind
binder 4411:4412 <> DS:1
R4440:4448 VST.veric.seplog <> tycontext ind
binder 4433:4437 <> Delta:2
R4453:4461 VST.veric.seplog <> tycontext ind
R4474:4478 VST.floyd.semax_tactics <> Delta:2 var
R4489:4500 VST.veric.seplog <> mk_tycontext constr
R4519:4530 VST.veric.seplog <> mk_tycontext constr
R4540:4541 VST.floyd.semax_tactics <> DS:1 var
R4611:4620 VST.floyd.client_lemmas <> abbreviate def
R4623:4629 compcert.lib.Maps PTree t def
R4631:4637 VST.veric.mpred <> funspec ind
R4611:4620 VST.floyd.client_lemmas <> abbreviate def
R4623:4629 compcert.lib.Maps PTree t def
R4631:4637 VST.veric.mpred <> funspec ind
R4653:4662 VST.floyd.client_lemmas <> abbreviate def
R4664:4672 VST.veric.seplog <> tycontext ind
R4653:4662 VST.floyd.client_lemmas <> abbreviate def
R4664:4672 VST.veric.seplog <> tycontext ind
R4760:4769 VST.floyd.client_lemmas <> abbreviate def
R4771:4779 VST.veric.seplog <> tycontext ind
R4760:4769 VST.floyd.client_lemmas <> abbreviate def
R4771:4779 VST.veric.seplog <> tycontext ind
R4830:4839 VST.floyd.client_lemmas <> abbreviate def
R4723:4732 VST.floyd.client_lemmas <> abbreviate def
R5745:5760 VST.floyd.semax_tactics <> with_Delta_specs def
R5745:5760 VST.floyd.semax_tactics <> with_Delta_specs def
R5821:5830 VST.floyd.client_lemmas <> abbreviate def
R5843:5858 VST.floyd.semax_tactics <> with_Delta_specs def
R5832:5840 VST.veric.seplog <> tycontext ind
R5952:5967 VST.floyd.semax_tactics <> with_Delta_specs def
R6000:6009 VST.floyd.client_lemmas <> abbreviate def
R6044:6053 VST.floyd.client_lemmas <> abbreviate def
R6564:6573 VST.floyd.client_lemmas <> abbreviate def
R6575:6583 VST.veric.seplog <> tycontext ind
R6564:6573 VST.floyd.client_lemmas <> abbreviate def
R6575:6583 VST.veric.seplog <> tycontext ind
R6633:6642 VST.floyd.client_lemmas <> abbreviate def
R6645:6651 compcert.lib.Maps PTree t def
R6653:6659 VST.veric.mpred <> funspec ind
R6633:6642 VST.floyd.client_lemmas <> abbreviate def
R6645:6651 compcert.lib.Maps PTree t def
R6653:6659 VST.veric.mpred <> funspec ind
R6707:6716 VST.floyd.client_lemmas <> abbreviate def
R6718:6726 VST.veric.seplog <> tycontext ind
R6707:6716 VST.floyd.client_lemmas <> abbreviate def
R6718:6726 VST.veric.seplog <> tycontext ind
R6733:6737 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R6733:6737 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7303:7312 VST.floyd.client_lemmas <> abbreviate def
R7314:7322 VST.veric.seplog <> tycontext ind
R7303:7312 VST.floyd.client_lemmas <> abbreviate def
R7314:7322 VST.veric.seplog <> tycontext ind
R7329:7335 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7338:7339 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7341:7345 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7329:7335 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7338:7339 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7341:7345 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7413:7417 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7413:7417 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7462:7468 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7471:7472 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7474:7478 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7462:7468 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7471:7472 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7474:7478 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7573:7582 VST.floyd.client_lemmas <> abbreviate def
R7584:7592 VST.veric.seplog <> tycontext ind
R7573:7582 VST.floyd.client_lemmas <> abbreviate def
R7584:7592 VST.veric.seplog <> tycontext ind
R7607:7611 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7607:7611 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7682:7691 VST.floyd.client_lemmas <> abbreviate def
R7693:7701 VST.veric.seplog <> tycontext ind
R7682:7691 VST.floyd.client_lemmas <> abbreviate def
R7693:7701 VST.veric.seplog <> tycontext ind
R7716:7722 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7726:7727 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7729:7733 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7716:7722 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7726:7727 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7729:7733 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7788:7792 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7788:7792 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7830:7837 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7851:7853 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7855:7859 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7838:7846 VST.floyd.canon <> ret_tycon def
R7830:7837 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7851:7853 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7855:7859 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7838:7846 VST.floyd.canon <> ret_tycon def
R8120:8127 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8142:8144 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8146:8150 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8128:8137 VST.floyd.canon <> ret0_tycon def
R8120:8127 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8142:8144 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8146:8150 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8128:8137 VST.floyd.canon <> ret0_tycon def
R8411:8418 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8432:8434 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8436:8440 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8419:8427 VST.floyd.canon <> ret_tycon def
R8411:8418 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8432:8434 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8436:8440 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R8419:8427 VST.floyd.canon <> ret_tycon def
R8208:8217 VST.floyd.canon <> ret0_tycon def
R8325:8334 VST.floyd.client_lemmas <> abbreviate def
R8336:8344 VST.veric.seplog <> tycontext ind
R7917:7925 VST.floyd.canon <> ret_tycon def
R8033:8042 VST.floyd.client_lemmas <> abbreviate def
R8044:8052 VST.veric.seplog <> tycontext ind
R8890:8898 compcert.cfrontend.Clight <> Ssequence constr
R8890:8898 compcert.cfrontend.Clight <> Ssequence constr
R8961:8971 compcert.cfrontend.Clight <> Sifthenelse constr
R8961:8971 compcert.cfrontend.Clight <> Sifthenelse constr
R9036:9040 compcert.cfrontend.Clight <> Sloop constr
R9036:9040 compcert.cfrontend.Clight <> Sloop constr
R9121:9124 compcert.cfrontend.Clight <> Sfor def
R9121:9124 compcert.cfrontend.Clight <> Sfor def
R9246:9251 compcert.cfrontend.Clight <> Swhile def
R9246:9251 compcert.cfrontend.Clight <> Swhile def
R9296:9302 compcert.cfrontend.Clight <> Sswitch constr
R9296:9302 compcert.cfrontend.Clight <> Sswitch constr
R9339:9344 compcert.cfrontend.Clight <> Sbreak constr
R9339:9344 compcert.cfrontend.Clight <> Sbreak constr
R9370:9378 compcert.cfrontend.Clight <> Scontinue constr
R9370:9378 compcert.cfrontend.Clight <> Scontinue constr
R9404:9410 compcert.cfrontend.Clight <> Sreturn constr
R9404:9410 compcert.cfrontend.Clight <> Sreturn constr
R9425:9431 compcert.cfrontend.Clight <> Sswitch constr
R9425:9431 compcert.cfrontend.Clight <> Sswitch constr
R9448:9452 compcert.cfrontend.Clight <> Sgoto constr
R9448:9452 compcert.cfrontend.Clight <> Sgoto constr
R9467:9471 compcert.cfrontend.Clight <> Sskip constr
R9467:9471 compcert.cfrontend.Clight <> Sskip constr
R9485:9491 compcert.cfrontend.Clight <> Sassign constr
R9485:9491 compcert.cfrontend.Clight <> Sassign constr
R9509:9512 compcert.cfrontend.Clight <> Sset constr
R9509:9512 compcert.cfrontend.Clight <> Sset constr
R9530:9534 compcert.cfrontend.Clight <> Scall constr
R9530:9534 compcert.cfrontend.Clight <> Scall constr
R9554:9561 compcert.cfrontend.Clight <> Sbuiltin constr
R9554:9561 compcert.cfrontend.Clight <> Sbuiltin constr
R9611:9620 VST.floyd.client_lemmas <> abbreviate def
R9622:9630 compcert.cfrontend.Clight <> statement ind
R9611:9620 VST.floyd.client_lemmas <> abbreviate def
R9622:9630 compcert.cfrontend.Clight <> statement ind
R9774:9778 compcert.cfrontend.Clight <> LSnil constr
R9774:9778 compcert.cfrontend.Clight <> LSnil constr
R9792:9797 compcert.cfrontend.Clight <> LScons constr
R9792:9797 compcert.cfrontend.Clight <> LScons constr
R9918:9927 VST.floyd.client_lemmas <> abbreviate def
R9941:9957 VST.veric.SeparationLogic <> normal_ret_assert def
R9929:9938 VST.veric.tycontext <> ret_assert rec
R9918:9927 VST.floyd.client_lemmas <> abbreviate def
R9941:9957 VST.veric.SeparationLogic <> normal_ret_assert def
R9929:9938 VST.veric.tycontext <> ret_assert rec
R9965:9969 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R9965:9969 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10011:10020 VST.floyd.client_lemmas <> abbreviate def
R10022:10031 VST.veric.tycontext <> ret_assert rec
R10011:10020 VST.floyd.client_lemmas <> abbreviate def
R10022:10031 VST.veric.tycontext <> ret_assert rec
R10038:10042 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10038:10042 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10212:10221 VST.floyd.client_lemmas <> abbreviate def
R10223:10232 VST.veric.tycontext <> ret_assert rec
R10212:10221 VST.floyd.client_lemmas <> abbreviate def
R10223:10232 VST.veric.tycontext <> ret_assert rec
R10311:10320 VST.veric.tycontext <> ret_assert rec
R10311:10320 VST.veric.tycontext <> ret_assert rec
R10325:10329 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10325:10329 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10428:10432 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10441:10457 VST.veric.SeparationLogic <> normal_ret_assert def
R10428:10432 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10441:10457 VST.veric.SeparationLogic <> normal_ret_assert def
R10542:10546 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10542:10546 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10789:10798 VST.veric.tycontext <> ret_assert rec
R10617:10626 VST.floyd.canon <> sequential thm
R10676:10680 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10676:10680 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10722:10731 VST.veric.tycontext <> ret_assert rec
R10486:10502 VST.veric.SeparationLogic <> normal_ret_assert def
R10509:10518 VST.veric.tycontext <> ret_assert rec
R10374:10383 VST.floyd.client_lemmas <> abbreviate def
R10251:10260 VST.floyd.client_lemmas <> abbreviate def
R10133:10142 VST.floyd.client_lemmas <> abbreviate def
R10174:10183 VST.floyd.canon <> sequential thm
R10871:10875 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10879:10880 VST.msl.seplog <> FF meth
R10871:10875 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10879:10880 VST.msl.seplog <> FF meth
R10910:10914 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10919:10923 VST.floyd.canon <> PROPx def
R10931:10932 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R10926:10930 Coq.Init.Logic <> False ind
R10910:10914 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10919:10923 VST.floyd.canon <> PROPx def
R10931:10932 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R10926:10930 Coq.Init.Logic <> False ind
R10974:10978 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R10974:10978 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R11756:11760 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R11756:11760 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R11045:11054 VST.floyd.client_lemmas <> abbreviate def
R11056:11064 compcert.cfrontend.Clight <> statement ind
R11045:11054 VST.floyd.client_lemmas <> abbreviate def
R11056:11064 compcert.cfrontend.Clight <> statement ind
R11083:11092 VST.floyd.client_lemmas <> abbreviate def
R11158:11162 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R11158:11162 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R11215:11223 compcert.cfrontend.Clight <> Ssequence constr
R11215:11223 compcert.cfrontend.Clight <> Ssequence constr
R11659:11664 compcert.cfrontend.Clight <> Swhile def
R11659:11664 compcert.cfrontend.Clight <> Swhile def
R11438:11447 VST.floyd.client_lemmas <> abbreviate def
R11487:11495 compcert.cfrontend.Clight <> Ssequence constr
R11553:11558 compcert.cfrontend.Clight <> Swhile def
R11553:11558 compcert.cfrontend.Clight <> Swhile def
R10895:10902 VST.floyd.canon <> semax_ff thm
R11871:11880 VST.floyd.client_lemmas <> abbreviate def
R11893:11904 VST.veric.seplog <> mk_tycontext constr
R11882:11890 VST.veric.seplog <> tycontext ind
R11871:11880 VST.floyd.client_lemmas <> abbreviate def
R11893:11904 VST.veric.seplog <> mk_tycontext constr
R11882:11890 VST.veric.seplog <> tycontext ind
R12076:12080 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R12076:12080 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R12121:12129 VST.veric.seplog <> tycontext ind
R11993:11997 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R11993:11997 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R12253:12257 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R12253:12257 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R12337:12341 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R12350:12366 VST.veric.SeparationLogic <> normal_ret_assert def
R12337:12341 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R12350:12366 VST.veric.SeparationLogic <> normal_ret_assert def
R12397:12406 VST.floyd.canon <> sequential thm
R12286:12295 VST.floyd.client_lemmas <> abbreviate def
R12556:12565 VST.floyd.client_lemmas <> abbreviate def
R12567:12576 VST.veric.tycontext <> ret_assert rec
R12556:12565 VST.floyd.client_lemmas <> abbreviate def
R12567:12576 VST.veric.tycontext <> ret_assert rec
R12610:12619 VST.floyd.client_lemmas <> abbreviate def
R14444:14448 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R14444:14448 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R14566:14575 VST.floyd.client_lemmas <> abbreviate def
R14577:14585 compcert.cfrontend.Clight <> statement ind
R14566:14575 VST.floyd.client_lemmas <> abbreviate def
R14577:14585 compcert.cfrontend.Clight <> statement ind
R14647:14656 VST.floyd.client_lemmas <> abbreviate def
R14658:14667 VST.veric.tycontext <> ret_assert rec
R14647:14656 VST.floyd.client_lemmas <> abbreviate def
R14658:14667 VST.veric.tycontext <> ret_assert rec
R14686:14695 VST.floyd.client_lemmas <> abbreviate def
R14604:14613 VST.floyd.client_lemmas <> abbreviate def
R14816:14825 compcert.lib.Maps PTree fold def
R14816:14825 compcert.lib.Maps PTree fold def
R14952:14958 compcert.cfrontend.Clight <> fn_body proj
R15110:15117 VST.veric.SeparationLogic <> bind_ret def
R15110:15117 VST.veric.SeparationLogic <> bind_ret def
R15451:15457 VST.veric.mpred <> environ ind
R15451:15457 VST.veric.mpred <> environ ind
R15835:15839 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R15835:15839 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R15908:15912 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R15908:15912 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
def 16032:16047 <> find_expressions
def 16693:16711 <> find_expressions_sl
binder 16050:16050 <> A:4
R16067:16070 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16072:16075 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16076:16076 VST.floyd.semax_tactics <> A:4 var
R16071:16071 VST.floyd.semax_tactics <> A:4 var
R16063:16066 compcert.cfrontend.Clight <> expr ind
binder 16060:16060 <> f:5
R16083:16091 compcert.cfrontend.Clight <> statement ind
binder 16080:16080 <> c:6
R16098:16098 VST.floyd.semax_tactics <> A:4 var
binder 16095:16095 <> x:7
binder 16714:16714 <> A:8
R16731:16734 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16736:16739 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16740:16740 VST.floyd.semax_tactics <> A:8 var
R16735:16735 VST.floyd.semax_tactics <> A:8 var
R16727:16730 compcert.cfrontend.Clight <> expr ind
binder 16724:16724 <> f:9
R16747:16764 compcert.cfrontend.Clight <> labeled_statements ind
binder 16744:16744 <> c:10
R16771:16771 VST.floyd.semax_tactics <> A:8 var
binder 16768:16768 <> x:11
R16103:16103 VST.floyd.semax_tactics <> A:4 var
R16776:16776 VST.floyd.semax_tactics <> A:8 var
R16115:16115 VST.floyd.semax_tactics <> c:6 var
R16125:16129 compcert.cfrontend.Clight <> Sskip constr
R16134:16134 VST.floyd.semax_tactics <> x:7 var
R16139:16145 compcert.cfrontend.Clight <> Sassign constr
R16156:16156 VST.floyd.semax_tactics <> f:5 var
R16162:16162 VST.floyd.semax_tactics <> f:5 var
R16167:16167 VST.floyd.semax_tactics <> x:7 var
R16173:16176 compcert.cfrontend.Clight <> Sset constr
R16185:16185 VST.floyd.semax_tactics <> f:5 var
R16189:16189 VST.floyd.semax_tactics <> x:7 var
R16194:16198 compcert.cfrontend.Clight <> Scall constr
R16210:16210 VST.floyd.semax_tactics <> f:5 var
R16215:16224 Coq.Lists.List <> fold_right def
R16228:16228 VST.floyd.semax_tactics <> x:7 var
R16226:16226 VST.floyd.semax_tactics <> f:5 var
R16237:16244 compcert.cfrontend.Clight <> Sbuiltin constr
R16258:16267 Coq.Lists.List <> fold_right def
R16271:16271 VST.floyd.semax_tactics <> x:7 var
R16269:16269 VST.floyd.semax_tactics <> f:5 var
R16279:16287 compcert.cfrontend.Clight <> Ssequence constr
R16298:16313 VST.floyd.semax_tactics <> find_expressions:12 def
R16321:16336 VST.floyd.semax_tactics <> find_expressions:12 def
R16343:16343 VST.floyd.semax_tactics <> x:7 var
R16338:16338 VST.floyd.semax_tactics <> f:5 var
R16315:16315 VST.floyd.semax_tactics <> f:5 var
R16349:16359 compcert.cfrontend.Clight <> Sifthenelse constr
R16372:16372 VST.floyd.semax_tactics <> f:5 var
R16377:16392 VST.floyd.semax_tactics <> find_expressions:12 def
R16400:16415 VST.floyd.semax_tactics <> find_expressions:12 def
R16422:16422 VST.floyd.semax_tactics <> x:7 var
R16417:16417 VST.floyd.semax_tactics <> f:5 var
R16394:16394 VST.floyd.semax_tactics <> f:5 var
R16429:16433 compcert.cfrontend.Clight <> Sloop constr
R16444:16459 VST.floyd.semax_tactics <> find_expressions:12 def
R16467:16482 VST.floyd.semax_tactics <> find_expressions:12 def
R16489:16489 VST.floyd.semax_tactics <> x:7 var
R16484:16484 VST.floyd.semax_tactics <> f:5 var
R16461:16461 VST.floyd.semax_tactics <> f:5 var
R16495:16500 compcert.cfrontend.Clight <> Sbreak constr
R16505:16505 VST.floyd.semax_tactics <> x:7 var
R16510:16518 compcert.cfrontend.Clight <> Scontinue constr
R16523:16523 VST.floyd.semax_tactics <> x:7 var
R16528:16534 compcert.cfrontend.Clight <> Sreturn constr
R16537:16540 Coq.Init.Datatypes <> Some constr
R16548:16548 VST.floyd.semax_tactics <> f:5 var
R16552:16552 VST.floyd.semax_tactics <> x:7 var
R16557:16563 compcert.cfrontend.Clight <> Sreturn constr
R16565:16568 Coq.Init.Datatypes <> None constr
R16573:16573 VST.floyd.semax_tactics <> x:7 var
R16578:16584 compcert.cfrontend.Clight <> Sswitch constr
R16594:16594 VST.floyd.semax_tactics <> f:5 var
R16599:16617 VST.floyd.semax_tactics <> find_expressions_sl:13 def
R16624:16624 VST.floyd.semax_tactics <> x:7 var
R16619:16619 VST.floyd.semax_tactics <> f:5 var
R16630:16635 compcert.cfrontend.Clight <> Slabel constr
R16644:16659 VST.floyd.semax_tactics <> find_expressions:12 def
R16665:16665 VST.floyd.semax_tactics <> x:7 var
R16663:16663 VST.floyd.semax_tactics <> c:6 var
R16661:16661 VST.floyd.semax_tactics <> f:5 var
R16670:16674 compcert.cfrontend.Clight <> Sgoto constr
R16681:16681 VST.floyd.semax_tactics <> x:7 var
R16788:16788 VST.floyd.semax_tactics <> c:10 var
R16798:16802 compcert.cfrontend.Clight <> LSnil constr
R16807:16807 VST.floyd.semax_tactics <> x:11 var
R16812:16817 compcert.cfrontend.Clight <> LScons constr
R16830:16845 VST.floyd.semax_tactics <> find_expressions:12 def
R16853:16871 VST.floyd.semax_tactics <> find_expressions_sl:13 def
R16878:16878 VST.floyd.semax_tactics <> x:11 var
R16873:16873 VST.floyd.semax_tactics <> f:9 var
R16847:16847 VST.floyd.semax_tactics <> f:9 var
def 16897:16905 <> find_vars
binder 16908:16908 <> A:16
R16926:16929 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16931:16934 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16935:16935 VST.floyd.semax_tactics <> A:16 var
R16930:16930 VST.floyd.semax_tactics <> A:16 var
R16921:16925 compcert.common.AST <> ident def
binder 16918:16918 <> f:17
R16942:16945 compcert.cfrontend.Clight <> expr ind
binder 16939:16939 <> e:18
R16952:16952 VST.floyd.semax_tactics <> A:16 var
binder 16949:16949 <> x:19
R16957:16957 VST.floyd.semax_tactics <> A:16 var
R16969:16969 VST.floyd.semax_tactics <> e:18 var
R16979:16982 compcert.cfrontend.Clight <> Evar constr
R16991:16991 VST.floyd.semax_tactics <> f:17 var
R16995:16995 VST.floyd.semax_tactics <> x:19 var
R17000:17005 compcert.cfrontend.Clight <> Ederef constr
R17014:17022 VST.floyd.semax_tactics <> find_vars:20 def
R17028:17028 VST.floyd.semax_tactics <> x:19 var
R17026:17026 VST.floyd.semax_tactics <> e:18 var
R17024:17024 VST.floyd.semax_tactics <> f:17 var
R17033:17039 compcert.cfrontend.Clight <> Eaddrof constr
R17048:17056 VST.floyd.semax_tactics <> find_vars:20 def
R17062:17062 VST.floyd.semax_tactics <> x:19 var
R17060:17060 VST.floyd.semax_tactics <> e:18 var
R17058:17058 VST.floyd.semax_tactics <> f:17 var
R17067:17071 compcert.cfrontend.Clight <> Eunop constr
R17082:17090 VST.floyd.semax_tactics <> find_vars:20 def
R17096:17096 VST.floyd.semax_tactics <> x:19 var
R17094:17094 VST.floyd.semax_tactics <> e:18 var
R17092:17092 VST.floyd.semax_tactics <> f:17 var
R17101:17106 compcert.cfrontend.Clight <> Ebinop constr
R17121:17129 VST.floyd.semax_tactics <> find_vars:20 def
R17137:17145 VST.floyd.semax_tactics <> find_vars:20 def
R17152:17152 VST.floyd.semax_tactics <> x:19 var
R17147:17147 VST.floyd.semax_tactics <> f:17 var
R17131:17131 VST.floyd.semax_tactics <> f:17 var
R17158:17162 compcert.cfrontend.Clight <> Ecast constr
R17171:17179 VST.floyd.semax_tactics <> find_vars:20 def
R17185:17185 VST.floyd.semax_tactics <> x:19 var
R17183:17183 VST.floyd.semax_tactics <> e:18 var
R17181:17181 VST.floyd.semax_tactics <> f:17 var
R17190:17195 compcert.cfrontend.Clight <> Efield constr
R17206:17214 VST.floyd.semax_tactics <> find_vars:20 def
R17220:17220 VST.floyd.semax_tactics <> x:19 var
R17218:17218 VST.floyd.semax_tactics <> e:18 var
R17216:17216 VST.floyd.semax_tactics <> f:17 var
R17230:17230 VST.floyd.semax_tactics <> x:19 var
def 17250:17255 <> isNone
binder 17258:17258 <> A:22
R17265:17270 Coq.Init.Datatypes <> option ind
R17272:17272 VST.floyd.semax_tactics <> A:22 var
binder 17262:17262 <> x:23
R17285:17285 VST.floyd.semax_tactics <> x:23 var
R17292:17295 Coq.Init.Datatypes <> None constr
R17300:17303 Coq.Init.Datatypes <> true constr
R17312:17316 Coq.Init.Datatypes <> false constr
def 17335:17350 <> check_no_overlap
R17360:17367 VST.veric.mpred <> varspecs def
binder 17357:17357 <> V:25
R17374:17381 VST.veric.mpred <> funspecs def
binder 17371:17371 <> G:26
R17386:17389 Coq.Init.Datatypes <> bool ind
R17410:17423 Coq.Lists.List <> fold_left def
R17464:17474 compcert.lib.Maps PTree empty def
R17461:17461 VST.floyd.semax_tactics <> G:26 var
binder 17430:17430 <> t:27
binder 17432:17432 <> v:28
R17437:17445 compcert.lib.Maps PTree set def
R17458:17458 VST.floyd.semax_tactics <> t:27 var
R17455:17456 Coq.Init.Datatypes <> tt constr
R17448:17450 Coq.Init.Datatypes <> fst def
R17452:17452 VST.floyd.semax_tactics <> v:28 var
binder 17400:17404 <> table:29
R17485:17491 Coq.Lists.List <> forallb def
R17529:17529 VST.floyd.semax_tactics <> V:25 var
binder 17498:17498 <> f:30
R17503:17508 VST.floyd.semax_tactics <> isNone def
R17516:17519 compcert.lib.Maps <> :::x_'!'_x not
R17525:17525 compcert.lib.Maps <> :::x_'!'_x not
R17520:17522 Coq.Init.Datatypes <> fst def
R17524:17524 VST.floyd.semax_tactics <> f:30 var
R17511:17515 VST.floyd.semax_tactics <> table:29 var
prf 17539:17556 <> check_no_overlap_e
binder 17568:17568 <> V:31
binder 17570:17570 <> G:32
R17600:17605 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 17613:17613 <> i:33
R17632:17635 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17636:17637 Coq.Init.Logic <> ::type_scope:'~'_x not
R17638:17639 Coq.Lists.List <> In def
R17644:17646 Coq.Lists.List <> map def
R17652:17652 VST.floyd.semax_tactics <> G:32 var
R17648:17650 Coq.Init.Datatypes <> fst def
R17641:17641 VST.floyd.semax_tactics <> i:33 var
R17616:17617 Coq.Lists.List <> In def
R17622:17624 Coq.Lists.List <> map def
R17630:17630 VST.floyd.semax_tactics <> V:31 var
R17626:17628 Coq.Init.Datatypes <> fst def
R17619:17619 VST.floyd.semax_tactics <> i:33 var
R17593:17595 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17573:17588 VST.floyd.semax_tactics <> check_no_overlap def
R17592:17592 VST.floyd.semax_tactics <> G:32 var
R17590:17590 VST.floyd.semax_tactics <> V:31 var
R17596:17599 Coq.Init.Datatypes <> true constr
R17698:17713 VST.floyd.semax_tactics <> check_no_overlap def
R17729:17729 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17885:17891 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18027:18027 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17746:17748 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R17738:17745 Coq.Numbers.BinNums <> positive ind
R17749:17752 compcert.cfrontend.Ctypes <> type ind
binder 17735:17735 <> f:34
R17766:17771 VST.floyd.semax_tactics <> isNone def
R17782:17782 compcert.lib.Maps <> :::x_'!'_x not
R17874:17878 compcert.lib.Maps <> :::x_'!'_x not
R17884:17884 compcert.lib.Maps <> :::x_'!'_x not
R17879:17881 Coq.Init.Datatypes <> fst def
R17883:17883 VST.floyd.semax_tactics <> f:34 var
R17783:17791 Coq.Lists.List <> fold_left def
R17857:17867 compcert.lib.Maps PTree empty def
R17869:17872 Coq.Init.Datatypes <> unit ind
binder 17810:17810 <> t:35
binder 17812:17812 <> v:36
R17830:17838 compcert.lib.Maps PTree set def
R17851:17851 VST.floyd.semax_tactics <> t:35 var
R17848:17849 Coq.Init.Datatypes <> tt constr
R17841:17843 Coq.Init.Datatypes <> fst def
R17845:17845 VST.floyd.semax_tactics <> v:36 var
binder 17896:17896 <> f:37
R17908:17913 VST.floyd.semax_tactics <> isNone def
R17924:17924 compcert.lib.Maps <> :::x_'!'_x not
R18016:18020 compcert.lib.Maps <> :::x_'!'_x not
R18026:18026 compcert.lib.Maps <> :::x_'!'_x not
R18021:18023 Coq.Init.Datatypes <> fst def
R18025:18025 VST.floyd.semax_tactics <> f:37 var
R17925:17934 Coq.Lists.List <> fold_right def
R17997:18007 compcert.lib.Maps PTree empty def
R18009:18012 Coq.Init.Datatypes <> unit ind
binder 17953:17953 <> v:38
binder 17955:17955 <> t:39
R17972:17980 compcert.lib.Maps PTree set def
R17993:17993 VST.floyd.semax_tactics <> t:39 var
R17990:17991 Coq.Init.Datatypes <> tt constr
R17983:17985 Coq.Init.Datatypes <> fst def
R17987:17987 VST.floyd.semax_tactics <> v:38 var
R17729:17729 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17885:17891 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18027:18027 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17746:17748 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R17738:17745 Coq.Numbers.BinNums <> positive ind
R17749:17752 compcert.cfrontend.Ctypes <> type ind
binder 17735:17735 <> f:40
R17766:17771 VST.floyd.semax_tactics <> isNone def
R17782:17782 compcert.lib.Maps <> :::x_'!'_x not
R17874:17878 compcert.lib.Maps <> :::x_'!'_x not
R17884:17884 compcert.lib.Maps <> :::x_'!'_x not
R17879:17881 Coq.Init.Datatypes <> fst def
R17883:17883 VST.floyd.semax_tactics <> f:40 var
R17783:17791 Coq.Lists.List <> fold_left def
R17857:17867 compcert.lib.Maps PTree empty def
R17869:17872 Coq.Init.Datatypes <> unit ind
binder 17810:17810 <> t:41
binder 17812:17812 <> v:42
R17830:17838 compcert.lib.Maps PTree set def
R17851:17851 VST.floyd.semax_tactics <> t:41 var
R17848:17849 Coq.Init.Datatypes <> tt constr
R17841:17843 Coq.Init.Datatypes <> fst def
R17845:17845 VST.floyd.semax_tactics <> v:42 var
binder 17896:17896 <> f:43
R17908:17913 VST.floyd.semax_tactics <> isNone def
R17924:17924 compcert.lib.Maps <> :::x_'!'_x not
R18016:18020 compcert.lib.Maps <> :::x_'!'_x not
R18026:18026 compcert.lib.Maps <> :::x_'!'_x not
R18021:18023 Coq.Init.Datatypes <> fst def
R18025:18025 VST.floyd.semax_tactics <> f:43 var
R17925:17934 Coq.Lists.List <> fold_right def
R17997:18007 compcert.lib.Maps PTree empty def
R18009:18012 Coq.Init.Datatypes <> unit ind
binder 17953:17953 <> v:44
binder 17955:17955 <> t:45
R17972:17980 compcert.lib.Maps PTree set def
R17993:17993 VST.floyd.semax_tactics <> t:45 var
R17990:17991 Coq.Init.Datatypes <> tt constr
R17983:17985 Coq.Init.Datatypes <> fst def
R17987:17987 VST.floyd.semax_tactics <> v:44 var
R18106:18111 VST.floyd.semax_tactics <> isNone def
R18123:18123 compcert.lib.Maps <> :::x_'!'_x not
R18207:18210 compcert.lib.Maps <> :::x_'!'_x not
R18124:18133 Coq.Lists.List <> fold_right def
R18188:18198 compcert.lib.Maps PTree empty def
R18200:18203 Coq.Init.Datatypes <> unit ind
binder 18145:18145 <> v:46
binder 18147:18147 <> t:47
R18158:18166 compcert.lib.Maps PTree set def
R18179:18179 VST.floyd.semax_tactics <> t:47 var
R18176:18177 Coq.Init.Datatypes <> tt constr
R18169:18171 Coq.Init.Datatypes <> fst def
R18173:18173 VST.floyd.semax_tactics <> v:46 var
R18224:18224 compcert.lib.Maps <> :::x_'!'_x not
R18307:18310 compcert.lib.Maps <> :::x_'!'_x not
R18225:18233 Coq.Lists.List <> fold_left def
R18290:18300 compcert.lib.Maps PTree empty def
R18302:18305 Coq.Init.Datatypes <> unit ind
binder 18245:18245 <> t:48
binder 18247:18247 <> v:49
R18258:18266 compcert.lib.Maps PTree set def
R18279:18279 VST.floyd.semax_tactics <> t:48 var
R18276:18277 Coq.Init.Datatypes <> tt constr
R18269:18271 Coq.Init.Datatypes <> fst def
R18273:18273 VST.floyd.semax_tactics <> v:49 var
R18123:18123 compcert.lib.Maps <> :::x_'!'_x not
R18207:18210 compcert.lib.Maps <> :::x_'!'_x not
R18124:18133 Coq.Lists.List <> fold_right def
R18188:18198 compcert.lib.Maps PTree empty def
R18200:18203 Coq.Init.Datatypes <> unit ind
binder 18145:18145 <> v:50
binder 18147:18147 <> t:51
R18158:18166 compcert.lib.Maps PTree set def
R18179:18179 VST.floyd.semax_tactics <> t:51 var
R18176:18177 Coq.Init.Datatypes <> tt constr
R18169:18171 Coq.Init.Datatypes <> fst def
R18173:18173 VST.floyd.semax_tactics <> v:50 var
R18224:18224 compcert.lib.Maps <> :::x_'!'_x not
R18307:18310 compcert.lib.Maps <> :::x_'!'_x not
R18225:18233 Coq.Lists.List <> fold_left def
R18290:18300 compcert.lib.Maps PTree empty def
R18302:18305 Coq.Init.Datatypes <> unit ind
binder 18245:18245 <> t:52
binder 18247:18247 <> v:53
R18258:18266 compcert.lib.Maps PTree set def
R18279:18279 VST.floyd.semax_tactics <> t:52 var
R18276:18277 Coq.Init.Datatypes <> tt constr
R18269:18271 Coq.Init.Datatypes <> fst def
R18273:18273 VST.floyd.semax_tactics <> v:53 var
R18332:18350 Coq.Lists.List <> fold_left_rev_right thm
R18332:18350 Coq.Lists.List <> fold_left_rev_right thm
R18332:18350 Coq.Lists.List <> fold_left_rev_right thm
R18361:18371 compcert.lib.Maps PTree empty def
R18373:18376 Coq.Init.Datatypes <> unit ind
R18361:18371 compcert.lib.Maps PTree empty def
R18373:18376 Coq.Init.Datatypes <> unit ind
R18443:18456 Coq.Lists.List <> fold_right_app thm
R18443:18456 Coq.Lists.List <> fold_right_app thm
R18443:18456 Coq.Lists.List <> fold_right_app thm
R18500:18507 compcert.common.AST <> ident_eq def
R18512:18514 Coq.Init.Datatypes <> fst def
R18500:18507 compcert.common.AST <> ident_eq def
R18512:18514 Coq.Init.Datatypes <> fst def
R18538:18546 compcert.lib.Maps PTree gss thm
R18538:18546 compcert.lib.Maps PTree gss thm
R18538:18546 compcert.lib.Maps PTree gss thm
R18589:18597 compcert.lib.Maps PTree gss thm
R18589:18597 compcert.lib.Maps PTree gss thm
R18614:18621 Coq.Numbers.BinNums <> positive ind
R18628:18632 compcert.common.AST <> ident def
R18614:18621 Coq.Numbers.BinNums <> positive ind
R18628:18632 compcert.common.AST <> ident def
R18628:18632 compcert.common.AST <> ident def
R18628:18632 compcert.common.AST <> ident def
R18628:18632 compcert.common.AST <> ident def
R18628:18632 compcert.common.AST <> ident def
R18646:18653 compcert.common.AST <> ident_eq def
R18664:18666 Coq.Init.Datatypes <> fst def
R18656:18658 Coq.Init.Datatypes <> fst def
R18646:18653 compcert.common.AST <> ident_eq def
R18664:18666 Coq.Init.Datatypes <> fst def
R18656:18658 Coq.Init.Datatypes <> fst def
R18696:18704 compcert.lib.Maps PTree gss thm
R18696:18704 compcert.lib.Maps PTree gss thm
R18696:18704 compcert.lib.Maps PTree gss thm
R18721:18729 compcert.lib.Maps PTree gso thm
R18721:18729 compcert.lib.Maps PTree gso thm
R18721:18729 compcert.lib.Maps PTree gso thm
R18721:18729 compcert.lib.Maps PTree gso thm
R18746:18754 compcert.lib.Maps PTree gso thm
R18746:18754 compcert.lib.Maps PTree gso thm
R18746:18754 compcert.lib.Maps PTree gso thm
R18746:18754 compcert.lib.Maps PTree gso thm
R18818:18826 compcert.lib.Maps PTree gso thm
R18818:18826 compcert.lib.Maps PTree gso thm
R18818:18826 compcert.lib.Maps PTree gso thm
R18818:18826 compcert.lib.Maps PTree gso thm
R18849:18856 Coq.Numbers.BinNums <> positive ind
R18863:18867 compcert.common.AST <> ident def
R18849:18856 Coq.Numbers.BinNums <> positive ind
R18863:18867 compcert.common.AST <> ident def
R18863:18867 compcert.common.AST <> ident def
R18863:18867 compcert.common.AST <> ident def
R18863:18867 compcert.common.AST <> ident def
R18863:18867 compcert.common.AST <> ident def
R18863:18867 compcert.common.AST <> ident def
R18863:18867 compcert.common.AST <> ident def
R18863:18867 compcert.common.AST <> ident def
R18863:18867 compcert.common.AST <> ident def
R18881:18888 compcert.common.AST <> ident_eq def
R18893:18895 Coq.Init.Datatypes <> fst def
R18881:18888 compcert.common.AST <> ident_eq def
R18893:18895 Coq.Init.Datatypes <> fst def
R18919:18927 compcert.lib.Maps PTree gss thm
R18919:18927 compcert.lib.Maps PTree gss thm
R18919:18927 compcert.lib.Maps PTree gss thm
R18919:18927 compcert.lib.Maps PTree gss thm
R18919:18927 compcert.lib.Maps PTree gss thm
R18945:18953 compcert.lib.Maps PTree gso thm
R18945:18953 compcert.lib.Maps PTree gso thm
R18945:18953 compcert.lib.Maps PTree gso thm
R18945:18953 compcert.lib.Maps PTree gso thm
R18945:18953 compcert.lib.Maps PTree gso thm
R18945:18953 compcert.lib.Maps PTree gso thm
R18945:18953 compcert.lib.Maps PTree gso thm
R19056:19068 Coq.Bool.Bool <> andb_true_iff thm
R19056:19068 Coq.Bool.Bool <> andb_true_iff thm
R19056:19068 Coq.Bool.Bool <> andb_true_iff thm
R19141:19145 Coq.Init.Logic <> False ind
R19201:19208 Coq.Numbers.BinNums <> positive ind
R19215:19219 compcert.common.AST <> ident def
R19201:19208 Coq.Numbers.BinNums <> positive ind
R19215:19219 compcert.common.AST <> ident def
R19215:19219 compcert.common.AST <> ident def
R19215:19219 compcert.common.AST <> ident def
R19215:19219 compcert.common.AST <> ident def
R19215:19219 compcert.common.AST <> ident def
R19215:19219 compcert.common.AST <> ident def
R19215:19219 compcert.common.AST <> ident def
R19215:19219 compcert.common.AST <> ident def
R19215:19219 compcert.common.AST <> ident def
R19252:19260 compcert.lib.Maps PTree gss thm
R19252:19260 compcert.lib.Maps PTree gss thm
R19252:19260 compcert.lib.Maps PTree gss thm
R19325:19332 Coq.Numbers.BinNums <> positive ind
R19339:19343 compcert.common.AST <> ident def
R19325:19332 Coq.Numbers.BinNums <> positive ind
R19339:19343 compcert.common.AST <> ident def
R19339:19343 compcert.common.AST <> ident def
R19339:19343 compcert.common.AST <> ident def
R19339:19343 compcert.common.AST <> ident def
R19339:19343 compcert.common.AST <> ident def
R19339:19343 compcert.common.AST <> ident def
R19339:19343 compcert.common.AST <> ident def
R19339:19343 compcert.common.AST <> ident def
R19339:19343 compcert.common.AST <> ident def
R19361:19368 compcert.common.AST <> ident_eq def
R19380:19382 Coq.Init.Datatypes <> fst def
R19371:19373 Coq.Init.Datatypes <> fst def
R19361:19368 compcert.common.AST <> ident_eq def
R19380:19382 Coq.Init.Datatypes <> fst def
R19371:19373 Coq.Init.Datatypes <> fst def
R19413:19421 compcert.lib.Maps PTree gss thm
R19413:19421 compcert.lib.Maps PTree gss thm
R19413:19421 compcert.lib.Maps PTree gss thm
R19444:19452 compcert.lib.Maps PTree gso thm
R19444:19452 compcert.lib.Maps PTree gso thm
R19444:19452 compcert.lib.Maps PTree gso thm
R19496:19508 Coq.Bool.Bool <> andb_true_iff thm
R19496:19508 Coq.Bool.Bool <> andb_true_iff thm
R19496:19508 Coq.Bool.Bool <> andb_true_iff thm
prf 19546:19559 <> leaf_function'
binder 19571:19575 <> Vprog:54
binder 19577:19581 <> Gprog:55
R19588:19596 VST.veric.mpred <> compspecs class
binder 19584:19585 <> CS:56
binder 19599:19599 <> f:57
binder 19601:19601 <> s:58
R19640:19644 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19669:19673 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19674:19683 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R19699:19699 VST.floyd.semax_tactics <> s:58 var
R19697:19697 VST.floyd.semax_tactics <> f:57 var
R19691:19695 VST.floyd.semax_tactics <> Gprog:55 var
R19685:19689 VST.floyd.semax_tactics <> Vprog:54 var
R19645:19654 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R19668:19668 VST.floyd.semax_tactics <> s:58 var
R19666:19666 VST.floyd.semax_tactics <> f:57 var
R19662:19664 Coq.Init.Datatypes <> nil constr
R19656:19660 VST.floyd.semax_tactics <> Vprog:54 var
R19633:19635 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19605:19620 VST.floyd.semax_tactics <> check_no_overlap def
R19628:19632 VST.floyd.semax_tactics <> Gprog:55 var
R19622:19626 VST.floyd.semax_tactics <> Vprog:54 var
R19636:19639 Coq.Init.Datatypes <> true constr
R19724:19733 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R19877:19899 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_Delta_subsumption prfax
R19877:19899 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_Delta_subsumption prfax
R20004:20004 compcert.lib.Maps <> :::x_'!'_x not
R20048:20053 compcert.lib.Maps <> :::x_'!'_x not
R20005:20020 VST.veric.seplog <> make_tycontext_t def
R20037:20044 compcert.cfrontend.Clight <> fn_temps proj
R20023:20031 compcert.cfrontend.Clight <> fn_params proj
R20004:20004 compcert.lib.Maps <> :::x_'!'_x not
R20048:20053 compcert.lib.Maps <> :::x_'!'_x not
R20005:20020 VST.veric.seplog <> make_tycontext_t def
R20037:20044 compcert.cfrontend.Clight <> fn_temps proj
R20023:20031 compcert.cfrontend.Clight <> fn_params proj
R20098:20098 compcert.lib.Maps <> :::x_'!'_x not
R20142:20147 compcert.lib.Maps <> :::x_'!'_x not
R20099:20108 VST.veric.seplog <> glob_types def
R20111:20124 VST.veric.tycontext <> func_tycontext def
R20138:20140 Coq.Init.Datatypes <> nil constr
R20134:20136 Coq.Init.Datatypes <> nil constr
R20098:20098 compcert.lib.Maps <> :::x_'!'_x not
R20142:20147 compcert.lib.Maps <> :::x_'!'_x not
R20099:20108 VST.veric.seplog <> glob_types def
R20111:20124 VST.veric.tycontext <> func_tycontext def
R20138:20140 Coq.Init.Datatypes <> nil constr
R20134:20136 Coq.Init.Datatypes <> nil constr
R20185:20200 VST.veric.seplog <> make_tycontext_g def
R20209:20226 VST.floyd.semax_tactics <> check_no_overlap_e thm
R20209:20226 VST.floyd.semax_tactics <> check_no_overlap_e thm
R20255:20264 Coq.Lists.List <> fold_right def
R20338:20348 compcert.lib.Maps PTree empty def
R20350:20353 compcert.cfrontend.Ctypes <> type ind
R20286:20288 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R20281:20285 compcert.common.AST <> ident def
R20289:20292 compcert.cfrontend.Ctypes <> type ind
binder 20277:20277 <> v:59
R20304:20312 compcert.lib.Maps PTree set def
R20323:20325 Coq.Init.Datatypes <> snd def
R20327:20327 VST.floyd.semax_tactics <> v:59 var
R20315:20317 Coq.Init.Datatypes <> fst def
R20319:20319 VST.floyd.semax_tactics <> v:59 var
R20255:20264 Coq.Lists.List <> fold_right def
R20338:20348 compcert.lib.Maps PTree empty def
R20350:20353 compcert.cfrontend.Ctypes <> type ind
R20286:20288 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R20281:20285 compcert.common.AST <> ident def
R20289:20292 compcert.cfrontend.Ctypes <> type ind
binder 20277:20277 <> v:60
R20304:20312 compcert.lib.Maps PTree set def
R20323:20325 Coq.Init.Datatypes <> snd def
R20327:20327 VST.floyd.semax_tactics <> v:60 var
R20315:20317 Coq.Init.Datatypes <> fst def
R20319:20319 VST.floyd.semax_tactics <> v:60 var
R20420:20435 Coq.Logic.Decidable <> not_or thm
R20420:20435 Coq.Logic.Decidable <> not_or thm
R20470:20478 compcert.lib.Maps PTree gso thm
R20470:20478 compcert.lib.Maps PTree gso thm
R20470:20478 compcert.lib.Maps PTree gso thm
R20545:20556 compcert.lib.Maps PTree gempty thm
R20545:20556 compcert.lib.Maps PTree gempty thm
R20545:20556 compcert.lib.Maps PTree gempty thm
R20595:20602 compcert.common.AST <> ident_eq def
R20605:20607 Coq.Init.Datatypes <> fst def
R20595:20602 compcert.common.AST <> ident_eq def
R20605:20607 Coq.Init.Datatypes <> fst def
R20631:20639 compcert.lib.Maps PTree gso thm
R20631:20639 compcert.lib.Maps PTree gso thm
R20631:20639 compcert.lib.Maps PTree gso thm
R20700:20711 compcert.lib.Maps PTree gempty thm
R20700:20711 compcert.lib.Maps PTree gempty thm
R20700:20711 compcert.lib.Maps PTree gempty thm
R20759:20770 compcert.lib.Maps PTree gempty thm
R20759:20770 compcert.lib.Maps PTree gempty thm
R20759:20770 compcert.lib.Maps PTree gempty thm
R20759:20770 compcert.lib.Maps PTree gempty thm
def 20796:20812 <> check_no_overlap'
R20822:20829 VST.veric.mpred <> varspecs def
binder 20819:20819 <> V:61
R20841:20847 compcert.lib.Maps PTree t def
R20849:20852 Coq.Init.Datatypes <> unit ind
binder 20833:20838 <> Gtable:62
R20857:20860 Coq.Init.Datatypes <> bool ind
R20867:20873 Coq.Lists.List <> forallb def
R20912:20912 VST.floyd.semax_tactics <> V:61 var
binder 20880:20880 <> f:63
R20885:20890 VST.floyd.semax_tactics <> isNone def
R20899:20902 compcert.lib.Maps <> :::x_'!'_x not
R20908:20908 compcert.lib.Maps <> :::x_'!'_x not
R20903:20905 Coq.Init.Datatypes <> fst def
R20907:20907 VST.floyd.semax_tactics <> f:63 var
R20893:20898 VST.floyd.semax_tactics <> Gtable:62 var
def 20927:20940 <> check_no_Gvars
R20951:20957 compcert.lib.Maps PTree t def
R20959:20962 Coq.Init.Datatypes <> unit ind
binder 20943:20948 <> Gtable:64
R20969:20977 compcert.cfrontend.Clight <> statement ind
binder 20966:20966 <> s:65
R20982:20985 Coq.Init.Datatypes <> bool ind
R20992:21007 VST.floyd.semax_tactics <> find_expressions def
R21096:21099 Coq.Init.Datatypes <> true constr
R21094:21094 VST.floyd.semax_tactics <> s:65 var
R21015:21023 VST.floyd.semax_tactics <> find_vars def
binder 21030:21030 <> i:66
binder 21032:21032 <> b:67
R21049:21049 compcert.lib.Maps <> :::x_'!'_x not
R21050:21050 VST.floyd.semax_tactics <> i:66 var
R21043:21048 VST.floyd.semax_tactics <> Gtable:64 var
R21057:21060 Coq.Init.Datatypes <> Some constr
R21066:21070 Coq.Init.Datatypes <> false constr
R21074:21077 Coq.Init.Datatypes <> None constr
R21082:21082 VST.floyd.semax_tactics <> b:67 var
prf 21109:21121 <> leaf_function
binder 21133:21137 <> Vprog:68
binder 21139:21143 <> Gprog:69
R21150:21158 VST.veric.mpred <> compspecs class
binder 21146:21147 <> CS:70
binder 21161:21161 <> f:71
binder 21163:21163 <> s:72
binder 21165:21170 <> Gtable:73
R21299:21303 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21341:21345 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21386:21390 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21415:21419 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21420:21429 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R21445:21445 VST.floyd.semax_tactics <> s:72 var
R21443:21443 VST.floyd.semax_tactics <> f:71 var
R21437:21441 VST.floyd.semax_tactics <> Gprog:69 var
R21431:21435 VST.floyd.semax_tactics <> Vprog:68 var
R21391:21400 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R21414:21414 VST.floyd.semax_tactics <> s:72 var
R21412:21412 VST.floyd.semax_tactics <> f:71 var
R21408:21410 Coq.Init.Datatypes <> nil constr
R21402:21406 VST.floyd.semax_tactics <> Vprog:68 var
R21379:21381 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21346:21359 VST.floyd.semax_tactics <> check_no_Gvars def
R21369:21375 compcert.cfrontend.Clight <> fn_body proj
R21377:21377 VST.floyd.semax_tactics <> f:71 var
R21361:21366 VST.floyd.semax_tactics <> Gtable:73 var
R21382:21385 Coq.Init.Datatypes <> true constr
R21334:21336 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21304:21320 VST.floyd.semax_tactics <> check_no_overlap' def
R21328:21333 VST.floyd.semax_tactics <> Gtable:73 var
R21322:21326 VST.floyd.semax_tactics <> Vprog:68 var
R21337:21340 Coq.Init.Datatypes <> true constr
R21180:21182 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21174:21179 VST.floyd.semax_tactics <> Gtable:73 var
R21183:21191 Coq.Lists.List <> fold_left def
R21282:21292 compcert.lib.Maps PTree empty def
R21294:21297 Coq.Init.Datatypes <> unit ind
R21275:21279 VST.floyd.semax_tactics <> Gprog:69 var
R21207:21213 compcert.lib.Maps PTree t def
R21215:21218 Coq.Init.Datatypes <> unit ind
binder 21203:21203 <> t:74
R21231:21233 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R21226:21230 compcert.common.AST <> ident def
R21234:21240 VST.veric.mpred <> funspec ind
binder 21222:21222 <> v:75
R21251:21259 compcert.lib.Maps PTree set def
R21272:21272 VST.floyd.semax_tactics <> t:74 var
R21269:21270 Coq.Init.Datatypes <> tt constr
R21262:21264 Coq.Init.Datatypes <> fst def
R21266:21266 VST.floyd.semax_tactics <> v:75 var
R21480:21493 VST.floyd.semax_tactics <> leaf_function' thm
R21480:21493 VST.floyd.semax_tactics <> leaf_function' thm
def 21551:21567 <> function_pointers
R21572:21573 Coq.Init.Datatypes <> tt constr
R21645:21661 VST.floyd.semax_tactics <> function_pointers def
R21722:21738 VST.floyd.semax_tactics <> function_pointers def
R21722:21738 VST.floyd.semax_tactics <> function_pointers def
R21762:21771 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R21762:21771 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R21802:21814 VST.floyd.semax_tactics <> leaf_function thm
def 23030:23042 <> seq_stmt_size
R23048:23056 compcert.cfrontend.Clight <> statement ind
binder 23045:23045 <> c:76
R23061:23063 Coq.Init.Datatypes <> nat ind
R23075:23075 VST.floyd.semax_tactics <> c:76 var
R23085:23093 compcert.cfrontend.Clight <> Ssequence constr
R23120:23122 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R23104:23116 VST.floyd.semax_tactics <> seq_stmt_size:77 def
R23123:23135 VST.floyd.semax_tactics <> seq_stmt_size:77 def
def 23166:23177 <> unfold_seqN'
R23183:23185 Coq.Init.Datatypes <> nat ind
binder 23180:23180 <> K:79
R23192:23194 Coq.Init.Datatypes <> nat ind
binder 23189:23189 <> n:80
R23201:23209 compcert.cfrontend.Clight <> statement ind
binder 23198:23198 <> c:81
R23234:23236 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R23228:23230 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R23214:23217 Coq.Init.Datatypes <> list ind
R23219:23227 compcert.cfrontend.Clight <> statement ind
R23231:23233 Coq.Init.Datatypes <> nat ind
R23237:23245 compcert.cfrontend.Clight <> statement ind
R23256:23256 VST.floyd.semax_tactics <> K:79 var
R23263:23263 Coq.Init.Datatypes <> O constr
R23268:23268 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23272:23272 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23274:23274 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23276:23276 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23269:23271 Coq.Init.Datatypes <> nil constr
R23273:23273 VST.floyd.semax_tactics <> n:80 var
R23275:23275 VST.floyd.semax_tactics <> c:81 var
R23280:23280 Coq.Init.Datatypes <> S constr
R23295:23295 VST.floyd.semax_tactics <> n:80 var
R23306:23306 Coq.Init.Datatypes <> O constr
R23311:23311 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23315:23316 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23318:23319 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23321:23321 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23312:23314 Coq.Init.Datatypes <> nil constr
R23317:23317 Coq.Init.Datatypes <> O constr
R23320:23320 VST.floyd.semax_tactics <> c:81 var
R23327:23327 Coq.Init.Datatypes <> S constr
R23345:23345 VST.floyd.semax_tactics <> c:81 var
R23356:23360 compcert.cfrontend.Clight <> Sskip constr
R23365:23365 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23369:23370 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23372:23373 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23375:23375 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23366:23368 Coq.Init.Datatypes <> nil constr
R23371:23371 VST.floyd.semax_tactics <> n:80 var
R23374:23374 VST.floyd.semax_tactics <> c:81 var
R23381:23389 compcert.cfrontend.Clight <> Ssequence constr
R23414:23425 VST.floyd.semax_tactics <> unfold_seqN':82 def
R23429:23429 VST.floyd.semax_tactics <> n:80 var
R23450:23450 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23453:23454 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23457:23458 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23464:23464 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23459:23463 compcert.cfrontend.Clight <> Sskip constr
R23475:23486 VST.floyd.semax_tactics <> unfold_seqN':82 def
R23534:23534 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23537:23538 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23541:23542 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23545:23545 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23550:23550 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23557:23558 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23561:23562 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23565:23565 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23553:23554 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R23614:23614 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23617:23618 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23621:23622 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23626:23626 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23631:23631 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23634:23635 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23638:23639 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23656:23656 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23640:23648 compcert.cfrontend.Clight <> Ssequence constr
R23679:23679 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23686:23687 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23690:23691 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23697:23697 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23681:23682 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R23680:23680 VST.floyd.semax_tactics <> c:81 var
R23683:23685 Coq.Init.Datatypes <> nil constr
R23692:23696 compcert.cfrontend.Clight <> Sskip constr
def 23726:23736 <> unfold_seqN
binder 23738:23738 <> n:86
binder 23740:23740 <> c:87
R23745:23756 VST.floyd.semax_tactics <> unfold_seqN' def
R23778:23778 VST.floyd.semax_tactics <> c:87 var
R23776:23776 VST.floyd.semax_tactics <> n:86 var
R23759:23771 VST.floyd.semax_tactics <> seq_stmt_size def
R23773:23773 VST.floyd.semax_tactics <> c:87 var
def 23791:23798 <> fold_seq
binder 23800:23801 <> lc:88
R23805:23813 compcert.cfrontend.Clight <> statement ind
R23826:23827 VST.floyd.semax_tactics <> lc:88 var
R23838:23840 Coq.Init.Datatypes <> nil constr
R23845:23849 compcert.cfrontend.Clight <> Sskip constr
R23857:23858 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R23859:23861 Coq.Init.Datatypes <> nil constr
R23874:23877 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R23885:23893 compcert.cfrontend.Clight <> Ssequence constr
R23898:23905 VST.floyd.semax_tactics <> fold_seq:89 def
def 24260:24269 <> unfold_seq
binder 24271:24271 <> c:91
R24275:24278 Coq.Init.Datatypes <> list ind
R24280:24288 compcert.cfrontend.Clight <> statement ind
R24301:24301 VST.floyd.semax_tactics <> c:91 var
R24312:24316 compcert.cfrontend.Clight <> Sloop constr
R24319:24327 compcert.cfrontend.Clight <> Ssequence constr
R24330:24340 compcert.cfrontend.Clight <> Sifthenelse constr
R24344:24348 compcert.cfrontend.Clight <> Sskip constr
R24350:24355 compcert.cfrontend.Clight <> Sbreak constr
R24361:24365 compcert.cfrontend.Clight <> Sskip constr
R24384:24387 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R24374:24379 compcert.cfrontend.Clight <> Swhile def
R24388:24390 Coq.Init.Datatypes <> nil constr
R24396:24404 compcert.cfrontend.Clight <> Ssequence constr
R24410:24414 compcert.cfrontend.Clight <> Sloop constr
R24417:24425 compcert.cfrontend.Clight <> Ssequence constr
R24428:24438 compcert.cfrontend.Clight <> Sifthenelse constr
R24443:24447 compcert.cfrontend.Clight <> Sskip constr
R24449:24454 compcert.cfrontend.Clight <> Sbreak constr
R24730:24733 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R24714:24717 compcert.cfrontend.Clight <> Sfor def
R24734:24736 Coq.Init.Datatypes <> nil constr
R24742:24750 compcert.cfrontend.Clight <> Ssequence constr
R24774:24777 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R24761:24770 VST.floyd.semax_tactics <> unfold_seq:92 def
R24778:24787 VST.floyd.semax_tactics <> unfold_seq:92 def
R24802:24803 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R24801:24801 VST.floyd.semax_tactics <> c:91 var
R24804:24806 Coq.Init.Datatypes <> nil constr
prf 24822:24833 <> flat_map_app
binder 24844:24844 <> A:94
binder 24846:24846 <> B:95
R24860:24863 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24864:24867 Coq.Init.Datatypes <> list ind
R24869:24869 VST.floyd.semax_tactics <> B:95 var
R24859:24859 VST.floyd.semax_tactics <> A:94 var
binder 24856:24856 <> f:96
binder 24872:24873 <> l1:97
binder 24875:24876 <> l2:98
R24911:24913 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24894:24897 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R24881:24888 Coq.Lists.List <> flat_map def
R24892:24893 VST.floyd.semax_tactics <> l1:97 var
R24890:24890 VST.floyd.semax_tactics <> f:96 var
R24898:24905 Coq.Lists.List <> flat_map def
R24909:24910 VST.floyd.semax_tactics <> l2:98 var
R24907:24907 VST.floyd.semax_tactics <> f:96 var
R24914:24921 Coq.Lists.List <> flat_map def
R24928:24931 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R24926:24927 VST.floyd.semax_tactics <> l1:97 var
R24932:24933 VST.floyd.semax_tactics <> l2:98 var
R24923:24923 VST.floyd.semax_tactics <> f:96 var
R25007:25015 Coq.Lists.List <> app_assoc thm
R25007:25015 Coq.Lists.List <> app_assoc thm
R25007:25015 Coq.Lists.List <> app_assoc thm
prf 25042:25068 <> unfold_Ssequence_idempotent
binder 25078:25078 <> c:99
R25129:25131 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25083:25090 Coq.Lists.List <> flat_map def
R25110:25125 VST.veric.SeparationLogic <> unfold_Ssequence def
R25127:25127 VST.floyd.semax_tactics <> c:99 var
R25092:25107 VST.veric.SeparationLogic <> unfold_Ssequence def
R25132:25147 VST.veric.SeparationLogic <> unfold_Ssequence def
R25149:25149 VST.floyd.semax_tactics <> c:99 var
R25220:25231 VST.floyd.semax_tactics <> flat_map_app thm
R25220:25231 VST.floyd.semax_tactics <> flat_map_app thm
R25220:25231 VST.floyd.semax_tactics <> flat_map_app thm
prf 25258:25293 <> flat_map_unfold_Ssequence_idempotent
binder 25303:25304 <> ls:100
R25365:25367 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25309:25316 Coq.Lists.List <> flat_map def
R25336:25343 Coq.Lists.List <> flat_map def
R25362:25363 VST.floyd.semax_tactics <> ls:100 var
R25345:25360 VST.veric.SeparationLogic <> unfold_Ssequence def
R25318:25333 VST.veric.SeparationLogic <> unfold_Ssequence def
R25368:25375 Coq.Lists.List <> flat_map def
R25394:25395 VST.floyd.semax_tactics <> ls:100 var
R25377:25392 VST.veric.SeparationLogic <> unfold_Ssequence def
R25467:25478 VST.floyd.semax_tactics <> flat_map_app thm
R25467:25478 VST.floyd.semax_tactics <> flat_map_app thm
R25467:25478 VST.floyd.semax_tactics <> flat_map_app thm
R25518:25544 VST.floyd.semax_tactics <> unfold_Ssequence_idempotent thm
R25518:25544 VST.floyd.semax_tactics <> unfold_Ssequence_idempotent thm
prf 25559:25588 <> unfold_seq_to_unfold_Ssequence
binder 25598:25599 <> cs:101
R25623:25625 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25604:25619 VST.veric.SeparationLogic <> unfold_Ssequence def
R25621:25622 VST.floyd.semax_tactics <> cs:101 var
R25626:25633 Coq.Lists.List <> flat_map def
R25653:25662 VST.floyd.semax_tactics <> unfold_seq def
R25664:25665 VST.floyd.semax_tactics <> cs:101 var
R25635:25650 VST.veric.SeparationLogic <> unfold_Ssequence def
R25760:25771 VST.floyd.semax_tactics <> flat_map_app thm
R25760:25771 VST.floyd.semax_tactics <> flat_map_app thm
R25760:25771 VST.floyd.semax_tactics <> flat_map_app thm
R25825:25860 VST.floyd.semax_tactics <> flat_map_unfold_Ssequence_idempotent thm
R25825:25860 VST.floyd.semax_tactics <> flat_map_unfold_Ssequence_idempotent thm
R25933:25968 VST.floyd.semax_tactics <> flat_map_unfold_Ssequence_idempotent thm
R25933:25968 VST.floyd.semax_tactics <> flat_map_unfold_Ssequence_idempotent thm
R26043:26078 VST.floyd.semax_tactics <> flat_map_unfold_Ssequence_idempotent thm
R26043:26078 VST.floyd.semax_tactics <> flat_map_unfold_Ssequence_idempotent thm
R26155:26190 VST.floyd.semax_tactics <> flat_map_unfold_Ssequence_idempotent thm
R26155:26190 VST.floyd.semax_tactics <> flat_map_unfold_Ssequence_idempotent thm
R26267:26302 VST.floyd.semax_tactics <> flat_map_unfold_Ssequence_idempotent thm
R26267:26302 VST.floyd.semax_tactics <> flat_map_unfold_Ssequence_idempotent thm
R26337:26348 VST.floyd.semax_tactics <> flat_map_app thm
R26337:26348 VST.floyd.semax_tactics <> flat_map_app thm
R26337:26348 VST.floyd.semax_tactics <> flat_map_app thm
R26370:26378 Coq.Lists.List <> app_nil_r thm
R26370:26378 Coq.Lists.List <> app_nil_r thm
R26370:26378 Coq.Lists.List <> app_nil_r thm
prf 26655:26670 <> semax_unfold_seq
R26680:26689 VST.veric.juicy_extspec <> OracleKind class
binder 26673:26677 <> Espec:102
R26697:26705 VST.veric.mpred <> compspecs class
binder 26693:26694 <> CS:103
binder 26717:26718 <> c1:104
binder 26720:26721 <> c2:105
R26755:26760 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 26768:26768 <> P:106
binder 26770:26770 <> Q:107
binder 26772:26776 <> Delta:108
R26797:26800 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26801:26805 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R26818:26818 VST.floyd.semax_tactics <> Q:107 var
R26815:26816 VST.floyd.semax_tactics <> c2:105 var
R26813:26813 VST.floyd.semax_tactics <> P:106 var
R26807:26811 VST.floyd.semax_tactics <> Delta:108 var
R26779:26783 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R26796:26796 VST.floyd.semax_tactics <> Q:107 var
R26793:26794 VST.floyd.semax_tactics <> c1:104 var
R26791:26791 VST.floyd.semax_tactics <> P:106 var
R26785:26789 VST.floyd.semax_tactics <> Delta:108 var
R26739:26741 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26726:26735 VST.floyd.semax_tactics <> unfold_seq def
R26737:26738 VST.floyd.semax_tactics <> c1:104 var
R26742:26751 VST.floyd.semax_tactics <> unfold_seq def
R26753:26754 VST.floyd.semax_tactics <> c2:105 var
R26845:26866 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_unfold_Ssequence prfax
R26845:26866 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_unfold_Ssequence prfax
R26903:26932 VST.floyd.semax_tactics <> unfold_seq_to_unfold_Ssequence thm
R26903:26932 VST.floyd.semax_tactics <> unfold_seq_to_unfold_Ssequence thm
R26903:26932 VST.floyd.semax_tactics <> unfold_seq_to_unfold_Ssequence thm
R26903:26932 VST.floyd.semax_tactics <> unfold_seq_to_unfold_Ssequence thm
R26903:26932 VST.floyd.semax_tactics <> unfold_seq_to_unfold_Ssequence thm
R27008:27012 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R27008:27012 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R27045:27055 VST.floyd.semax_tactics <> unfold_seqN def
R27205:27205 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27207:27208 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27212:27213 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27215:27215 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27209:27209 Coq.Init.Datatypes <> S constr
R27205:27205 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27207:27208 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27212:27213 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27215:27215 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27209:27209 Coq.Init.Datatypes <> S constr
R27283:27283 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27287:27288 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27290:27291 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27296:27296 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27289:27289 Coq.Init.Datatypes <> O constr
R27283:27283 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27287:27288 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27290:27291 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27296:27296 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27289:27289 Coq.Init.Datatypes <> O constr
R27320:27327 VST.floyd.semax_tactics <> fold_seq def
R27477:27485 compcert.cfrontend.Clight <> Ssequence constr
R27454:27469 VST.floyd.semax_tactics <> semax_unfold_seq thm
R27545:27554 VST.floyd.canon <> semax_seq' thm
