DIGEST ecc340f95442d32b60634dd2f16408d5
Fcompcert.flocq.Calc.Round
R770:773 compcert.flocq.Core.Core <> <> lib
R775:780 compcert.flocq.Core.Digits <> <> lib
R782:791 compcert.flocq.Core.Float_prop <> <> lib
R793:799 compcert.flocq.Calc.Bracket <> <> lib
sec 811:821 <> Fcalc_round
var 834:837 Fcalc_round beta
R841:845 compcert.flocq.Core.Zaux <> radix rec
syndef 857:860 <> bpow
R868:871 compcert.flocq.Core.Raux <> bpow def
R873:876 compcert.flocq.Calc.Round <> Fcalc_round.beta var
sec 891:906 Fcalc_round Fcalc_round_fexp
var 919:922 Fcalc_round.Fcalc_round_fexp fexp
R927:930 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R931:931 Coq.Numbers.BinNums <> Z ind
R926:926 Coq.Numbers.BinNums <> Z ind
R956:964 compcert.flocq.Core.Generic_fmt <> Valid_exp class
R966:969 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
syndef 983:988 <> format
R994:1007 compcert.flocq.Core.Generic_fmt <> generic_format def
R1014:1017 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R1009:1012 compcert.flocq.Calc.Round <> Fcalc_round.beta var
prf 1030:1049 <> cexp_inbetween_float
R1082:1087 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1116:1121 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1181:1186 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1203:1205 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1187:1190 compcert.flocq.Core.Generic_fmt <> cexp def
R1202:1202 compcert.flocq.Calc.Round <> x var
R1197:1200 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R1192:1195 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R1206:1209 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R1226:1228 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R1212:1218 compcert.flocq.Core.Digits <> Zdigits def
R1225:1225 compcert.flocq.Calc.Round <> m var
R1220:1223 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R1229:1229 compcert.flocq.Calc.Round <> e var
R1144:1147 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R1124:1127 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1123:1123 compcert.flocq.Calc.Round <> e var
R1128:1131 compcert.flocq.Core.Generic_fmt <> cexp def
R1143:1143 compcert.flocq.Calc.Round <> x var
R1138:1141 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R1133:1136 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R1149:1152 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1148:1148 compcert.flocq.Calc.Round <> e var
R1153:1156 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R1173:1175 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R1159:1165 compcert.flocq.Core.Digits <> Zdigits def
R1172:1172 compcert.flocq.Calc.Round <> m var
R1167:1170 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R1176:1176 compcert.flocq.Calc.Round <> e var
R1088:1102 compcert.flocq.Calc.Bracket <> inbetween_float def
R1115:1115 compcert.flocq.Calc.Round <> l var
R1113:1113 compcert.flocq.Calc.Round <> x var
R1111:1111 compcert.flocq.Calc.Round <> e var
R1109:1109 compcert.flocq.Calc.Round <> m var
R1104:1107 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R1075:1077 Coq.Reals.Rdefinitions <> ::R_scope:x_'<'_x not
R1078:1078 compcert.flocq.Calc.Round <> x var
R1272:1275 compcert.flocq.Core.Generic_fmt <> cexp def
R1284:1305 compcert.flocq.Calc.Bracket <> inbetween_float_bounds thm
R1284:1305 compcert.flocq.Calc.Bracket <> inbetween_float_bounds thm
R1323:1326 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1323:1326 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1347:1357 Coq.ZArith.Zorder <> Zlt_succ_le thm
R1347:1357 Coq.ZArith.Zorder <> Zlt_succ_le thm
R1369:1376 compcert.flocq.Core.Float_prop <> gt_0_F2R thm
R1369:1376 compcert.flocq.Core.Float_prop <> gt_0_F2R thm
R1387:1395 Coq.Reals.Raxioms <> Rlt_trans prfax
R1387:1395 Coq.Reals.Raxioms <> Rlt_trans prfax
R1437:1448 Coq.ZArith.Zorder <> Zle_lt_or_eq thm
R1437:1448 Coq.ZArith.Zorder <> Zle_lt_or_eq thm
R1489:1510 compcert.flocq.Core.Float_prop <> mag_F2R_bounds_Zdigits thm
R1489:1510 compcert.flocq.Core.Float_prop <> mag_F2R_bounds_Zdigits thm
R1489:1510 compcert.flocq.Core.Float_prop <> mag_F2R_bounds_Zdigits thm
R1489:1510 compcert.flocq.Core.Float_prop <> mag_F2R_bounds_Zdigits thm
R1557:1560 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1547:1549 compcert.flocq.Core.Raux <> mag def
R1551:1554 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R1557:1560 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1547:1549 compcert.flocq.Core.Raux <> mag def
R1551:1554 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R1581:1591 compcert.flocq.Core.Raux <> mag_le_bpow thm
R1581:1591 compcert.flocq.Core.Raux <> mag_le_bpow thm
R1606:1615 Coq.Reals.RIneq <> Rgt_not_eq thm
R1606:1615 Coq.Reals.RIneq <> Rgt_not_eq thm
R1628:1638 Coq.Reals.Rbasic_fun <> Rabs_pos_eq thm
R1628:1638 Coq.Reals.Rbasic_fun <> Rabs_pos_eq thm
R1628:1638 Coq.Reals.Rbasic_fun <> Rabs_pos_eq thm
R1628:1638 Coq.Reals.Rbasic_fun <> Rabs_pos_eq thm
R1658:1665 compcert.flocq.Core.Float_prop <> F2R_bpow thm
R1658:1665 compcert.flocq.Core.Float_prop <> F2R_bpow thm
R1658:1665 compcert.flocq.Core.Float_prop <> F2R_bpow thm
R1680:1685 Coq.Reals.RIneq <> Rlt_le thm
R1680:1685 Coq.Reals.RIneq <> Rlt_le thm
R1750:1755 Coq.Init.Logic <> eq_sym thm
R1758:1766 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.valid_exp var
R1750:1755 Coq.Init.Logic <> eq_sym thm
R1758:1766 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.valid_exp var
R1796:1805 Coq.ZArith.BinInt Z le_trans thm
R1796:1805 Coq.ZArith.BinInt Z le_trans thm
R1823:1831 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.valid_exp var
R1823:1831 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.valid_exp var
R1861:1870 Coq.ZArith.BinInt Z le_trans thm
R1861:1870 Coq.ZArith.BinInt Z le_trans thm
prf 1894:1923 <> cexp_inbetween_float_loc_Exact
R1957:1962 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1991:1996 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2036:2043 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R2019:2022 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R1999:2002 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1998:1998 compcert.flocq.Calc.Round <> e var
R2003:2006 compcert.flocq.Core.Generic_fmt <> cexp def
R2018:2018 compcert.flocq.Calc.Round <> x var
R2013:2016 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R2008:2011 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R2024:2026 Coq.Init.Logic <> ::type_scope:x_'='_x not
R2023:2023 compcert.flocq.Calc.Round <> l var
R2027:2035 compcert.flocq.Calc.Bracket <> loc_Exact constr
R2074:2077 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R2045:2048 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R2044:2044 compcert.flocq.Calc.Round <> e var
R2049:2052 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R2069:2071 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R2055:2061 compcert.flocq.Core.Digits <> Zdigits def
R2068:2068 compcert.flocq.Calc.Round <> m var
R2063:2066 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R2072:2072 compcert.flocq.Calc.Round <> e var
R2079:2081 Coq.Init.Logic <> ::type_scope:x_'='_x not
R2078:2078 compcert.flocq.Calc.Round <> l var
R2082:2090 compcert.flocq.Calc.Bracket <> loc_Exact constr
R1963:1977 compcert.flocq.Calc.Bracket <> inbetween_float def
R1990:1990 compcert.flocq.Calc.Round <> l var
R1988:1988 compcert.flocq.Calc.Round <> x var
R1986:1986 compcert.flocq.Calc.Round <> e var
R1984:1984 compcert.flocq.Calc.Round <> m var
R1979:1982 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R1949:1952 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x not
R1953:1953 compcert.flocq.Calc.Round <> x var
R2207:2226 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R2207:2226 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R2207:2226 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R2207:2226 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R2287:2306 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R2287:2306 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R2287:2306 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R2287:2306 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R2486:2493 compcert.flocq.Core.Float_prop <> lt_0_F2R thm
R2486:2493 compcert.flocq.Core.Float_prop <> lt_0_F2R thm
R2511:2518 compcert.flocq.Core.Float_prop <> gt_0_F2R thm
R2511:2518 compcert.flocq.Core.Float_prop <> gt_0_F2R thm
prf 2590:2610 <> inbetween_float_round
R2637:2638 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2694:2701 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2727:2730 compcert.flocq.Core.Generic_fmt <> cexp def
R2742:2742 compcert.flocq.Calc.Round <> x var
R2737:2740 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R2732:2735 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R2777:2782 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2804:2806 Coq.Init.Logic <> ::type_scope:x_'='_x not
R2783:2787 compcert.flocq.Core.Generic_fmt <> round def
R2803:2803 compcert.flocq.Calc.Round <> x var
R2799:2801 compcert.flocq.Calc.Round <> rnd var
R2794:2797 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R2789:2792 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R2807:2809 compcert.flocq.Core.Defs <> F2R def
R2812:2816 compcert.flocq.Core.Defs <> Float constr
R2836:2836 compcert.flocq.Calc.Round <> e var
R2824:2829 compcert.flocq.Calc.Round <> choice var
R2833:2833 compcert.flocq.Calc.Round <> l var
R2831:2831 compcert.flocq.Calc.Round <> m var
R2818:2821 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R2749:2763 compcert.flocq.Calc.Bracket <> inbetween_float def
R2776:2776 compcert.flocq.Calc.Round <> l var
R2774:2774 compcert.flocq.Calc.Round <> x var
R2772:2772 compcert.flocq.Calc.Round <> e var
R2770:2770 compcert.flocq.Calc.Round <> m var
R2765:2768 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R2672:2675 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2681:2683 Coq.Init.Logic <> ::type_scope:x_'='_x not
R2676:2678 compcert.flocq.Calc.Round <> rnd var
R2680:2680 compcert.flocq.Calc.Round <> x var
R2684:2689 compcert.flocq.Calc.Round <> choice var
R2693:2693 compcert.flocq.Calc.Round <> l var
R2691:2691 compcert.flocq.Calc.Round <> m var
R2653:2665 compcert.flocq.Calc.Bracket <> inbetween_int def
R2671:2671 compcert.flocq.Calc.Round <> l var
R2669:2669 compcert.flocq.Calc.Round <> x var
R2667:2667 compcert.flocq.Calc.Round <> m var
R2887:2891 compcert.flocq.Core.Generic_fmt <> round def
R2894:2896 compcert.flocq.Core.Defs <> F2R def
R2913:2919 Coq.Init.Logic <> f_equal thm
R2937:2939 Coq.Reals.Rdefinitions <> ::R_scope:x_'*'_x not
R2932:2934 Coq.Reals.Rdefinitions <> IZR def
R2936:2936 compcert.flocq.Calc.Round <> m var
R2940:2943 compcert.flocq.Calc.Round <> bpow syndef
R2913:2919 Coq.Init.Logic <> f_equal thm
R2937:2939 Coq.Reals.Rdefinitions <> ::R_scope:x_'*'_x not
R2932:2934 Coq.Reals.Rdefinitions <> IZR def
R2936:2936 compcert.flocq.Calc.Round <> m var
R2940:2943 compcert.flocq.Calc.Round <> bpow syndef
R2994:2997 compcert.flocq.Calc.Round <> bpow syndef
R2969:2986 compcert.flocq.Calc.Bracket <> inbetween_mult_reg thm
R2994:2997 compcert.flocq.Calc.Round <> bpow syndef
R2969:2986 compcert.flocq.Calc.Bracket <> inbetween_mult_reg thm
R3009:3017 compcert.flocq.Core.Raux <> bpow_gt_0 thm
R3009:3017 compcert.flocq.Core.Raux <> bpow_gt_0 thm
R3032:3056 compcert.flocq.Core.Generic_fmt <> scaled_mantissa_mult_bpow thm
R3032:3056 compcert.flocq.Core.Generic_fmt <> scaled_mantissa_mult_bpow thm
R3032:3056 compcert.flocq.Core.Generic_fmt <> scaled_mantissa_mult_bpow thm
def 3076:3084 <> cond_incr
R3091:3094 Coq.Init.Datatypes <> bool ind
R3105:3105 compcert.flocq.Calc.Round <> b var
R3127:3127 compcert.flocq.Calc.Round <> m var
R3114:3116 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R3113:3113 compcert.flocq.Calc.Round <> m var
prf 3139:3164 <> inbetween_float_round_sign
R3191:3192 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3301:3308 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3334:3337 compcert.flocq.Core.Generic_fmt <> cexp def
R3349:3349 compcert.flocq.Calc.Round <> x var
R3344:3347 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R3339:3342 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R3391:3396 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3418:3420 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3397:3401 compcert.flocq.Core.Generic_fmt <> round def
R3417:3417 compcert.flocq.Calc.Round <> x var
R3413:3415 compcert.flocq.Calc.Round <> rnd var
R3408:3411 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R3403:3406 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R3421:3423 compcert.flocq.Core.Defs <> F2R def
R3426:3430 compcert.flocq.Core.Defs <> Float constr
R3492:3492 compcert.flocq.Calc.Round <> e var
R3438:3446 compcert.flocq.Core.Zaux <> cond_Zopp def
R3464:3469 compcert.flocq.Calc.Round <> choice var
R3488:3488 compcert.flocq.Calc.Round <> l var
R3486:3486 compcert.flocq.Calc.Round <> m var
R3472:3479 compcert.flocq.Core.Raux <> Rlt_bool def
R3481:3481 compcert.flocq.Calc.Round <> x var
R3449:3456 compcert.flocq.Core.Raux <> Rlt_bool def
R3458:3458 compcert.flocq.Calc.Round <> x var
R3432:3435 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R3356:3370 compcert.flocq.Calc.Bracket <> inbetween_float def
R3390:3390 compcert.flocq.Calc.Round <> l var
R3382:3385 Coq.Reals.Rbasic_fun <> Rabs def
R3387:3387 compcert.flocq.Calc.Round <> x var
R3379:3379 compcert.flocq.Calc.Round <> e var
R3377:3377 compcert.flocq.Calc.Round <> m var
R3372:3375 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R3233:3240 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3246:3248 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3241:3243 compcert.flocq.Calc.Round <> rnd var
R3245:3245 compcert.flocq.Calc.Round <> x var
R3249:3257 compcert.flocq.Core.Zaux <> cond_Zopp def
R3275:3280 compcert.flocq.Calc.Round <> choice var
R3299:3299 compcert.flocq.Calc.Round <> l var
R3297:3297 compcert.flocq.Calc.Round <> m var
R3283:3290 compcert.flocq.Core.Raux <> Rlt_bool def
R3292:3292 compcert.flocq.Calc.Round <> x var
R3260:3267 compcert.flocq.Core.Raux <> Rlt_bool def
R3269:3269 compcert.flocq.Calc.Round <> x var
R3207:3219 compcert.flocq.Calc.Bracket <> inbetween_int def
R3232:3232 compcert.flocq.Calc.Round <> l var
R3224:3227 Coq.Reals.Rbasic_fun <> Rabs def
R3229:3229 compcert.flocq.Calc.Round <> x var
R3221:3221 compcert.flocq.Calc.Round <> m var
R3543:3549 Coq.Init.Logic <> f_equal thm
R3567:3569 Coq.Reals.Rdefinitions <> ::R_scope:x_'*'_x not
R3562:3564 Coq.Reals.Rdefinitions <> IZR def
R3566:3566 compcert.flocq.Calc.Round <> m var
R3570:3573 compcert.flocq.Calc.Round <> bpow syndef
R3543:3549 Coq.Init.Logic <> f_equal thm
R3567:3569 Coq.Reals.Rdefinitions <> ::R_scope:x_'*'_x not
R3562:3564 Coq.Reals.Rdefinitions <> IZR def
R3566:3566 compcert.flocq.Calc.Round <> m var
R3570:3573 compcert.flocq.Calc.Round <> bpow syndef
R3599:3606 compcert.flocq.Core.Raux <> Rlt_bool def
R3619:3626 compcert.flocq.Core.Raux <> Rlt_bool def
R3629:3643 compcert.flocq.Core.Generic_fmt <> scaled_mantissa def
R3650:3653 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R3645:3648 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R3599:3606 compcert.flocq.Core.Raux <> Rlt_bool def
R3619:3626 compcert.flocq.Core.Raux <> Rlt_bool def
R3629:3643 compcert.flocq.Core.Generic_fmt <> scaled_mantissa def
R3650:3653 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R3645:3648 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R3709:3712 compcert.flocq.Calc.Round <> bpow syndef
R3684:3701 compcert.flocq.Calc.Bracket <> inbetween_mult_reg thm
R3709:3712 compcert.flocq.Calc.Round <> bpow syndef
R3684:3701 compcert.flocq.Calc.Bracket <> inbetween_mult_reg thm
R3724:3732 compcert.flocq.Core.Raux <> bpow_gt_0 thm
R3724:3732 compcert.flocq.Core.Raux <> bpow_gt_0 thm
R3747:3756 Coq.Reals.Rbasic_fun <> Rabs_right thm
R3759:3762 compcert.flocq.Calc.Round <> bpow syndef
R3747:3756 Coq.Reals.Rbasic_fun <> Rabs_right thm
R3759:3762 compcert.flocq.Calc.Round <> bpow syndef
R3747:3756 Coq.Reals.Rbasic_fun <> Rabs_right thm
R3759:3762 compcert.flocq.Calc.Round <> bpow syndef
R3747:3756 Coq.Reals.Rbasic_fun <> Rabs_right thm
R3759:3762 compcert.flocq.Calc.Round <> bpow syndef
R3785:3793 Coq.Reals.Rbasic_fun <> Rabs_mult thm
R3785:3793 Coq.Reals.Rbasic_fun <> Rabs_mult thm
R3785:3793 Coq.Reals.Rbasic_fun <> Rabs_mult thm
R3808:3832 compcert.flocq.Core.Generic_fmt <> scaled_mantissa_mult_bpow thm
R3808:3832 compcert.flocq.Core.Generic_fmt <> scaled_mantissa_mult_bpow thm
R3808:3832 compcert.flocq.Core.Generic_fmt <> scaled_mantissa_mult_bpow thm
R3841:3846 Coq.Reals.RIneq <> Rle_ge thm
R3841:3846 Coq.Reals.RIneq <> Rle_ge thm
R3855:3863 compcert.flocq.Core.Raux <> bpow_ge_0 thm
R3855:3863 compcert.flocq.Core.Raux <> bpow_ge_0 thm
R3882:3894 compcert.flocq.Core.Raux <> Rlt_bool_spec thm
R3882:3894 compcert.flocq.Core.Raux <> Rlt_bool_spec thm
R3927:3939 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R3927:3939 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R3954:3962 Coq.Reals.RIneq <> Rmult_0_l thm
R3965:3968 compcert.flocq.Calc.Round <> bpow syndef
R3971:3971 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R3954:3962 Coq.Reals.RIneq <> Rmult_0_l thm
R3965:3968 compcert.flocq.Calc.Round <> bpow syndef
R3971:3971 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R3954:3962 Coq.Reals.RIneq <> Rmult_0_l thm
R3965:3968 compcert.flocq.Calc.Round <> bpow syndef
R3971:3971 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R3984:4000 Coq.Reals.RIneq <> Rmult_lt_compat_r thm
R3984:4000 Coq.Reals.RIneq <> Rmult_lt_compat_r thm
R4024:4032 compcert.flocq.Core.Raux <> bpow_gt_0 thm
R4024:4032 compcert.flocq.Core.Raux <> bpow_gt_0 thm
R4041:4054 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R4041:4054 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R4063:4074 Coq.Reals.RIneq <> Rmult_le_pos thm
R4063:4074 Coq.Reals.RIneq <> Rmult_le_pos thm
R4098:4106 compcert.flocq.Core.Raux <> bpow_ge_0 thm
R4098:4106 compcert.flocq.Core.Raux <> bpow_ge_0 thm
prf 4167:4182 <> inbetween_int_DN
R4223:4228 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4237:4239 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4229:4234 compcert.flocq.Core.Raux <> Zfloor def
R4236:4236 compcert.flocq.Calc.Round <> x var
R4240:4240 compcert.flocq.Calc.Round <> m var
R4204:4216 compcert.flocq.Calc.Bracket <> inbetween_int def
R4222:4222 compcert.flocq.Calc.Round <> l var
R4220:4220 compcert.flocq.Calc.Round <> x var
R4218:4218 compcert.flocq.Calc.Round <> m var
R4275:4284 compcert.flocq.Core.Raux <> Zfloor_imp thm
R4275:4284 compcert.flocq.Core.Raux <> Zfloor_imp thm
R4300:4315 compcert.flocq.Calc.Bracket <> inbetween_bounds thm
R4300:4315 compcert.flocq.Calc.Bracket <> inbetween_bounds thm
R4339:4344 Coq.Reals.RIneq <> IZR_lt thm
R4339:4344 Coq.Reals.RIneq <> IZR_lt thm
R4353:4360 Coq.ZArith.Zorder <> Zlt_succ syndef
R4353:4360 Coq.ZArith.Zorder <> Zlt_succ syndef
prf 4377:4394 <> inbetween_float_DN
R4425:4428 compcert.flocq.Core.Generic_fmt <> cexp def
R4440:4440 compcert.flocq.Calc.Round <> x var
R4435:4438 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R4430:4433 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R4475:4480 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4505:4507 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4481:4485 compcert.flocq.Core.Generic_fmt <> round def
R4504:4504 compcert.flocq.Calc.Round <> x var
R4497:4502 compcert.flocq.Core.Raux <> Zfloor def
R4492:4495 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R4487:4490 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R4508:4510 compcert.flocq.Core.Defs <> F2R def
R4513:4517 compcert.flocq.Core.Defs <> Float constr
R4526:4526 compcert.flocq.Calc.Round <> e var
R4524:4524 compcert.flocq.Calc.Round <> m var
R4519:4522 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R4447:4461 compcert.flocq.Calc.Bracket <> inbetween_float def
R4474:4474 compcert.flocq.Calc.Round <> l var
R4472:4472 compcert.flocq.Calc.Round <> x var
R4470:4470 compcert.flocq.Calc.Round <> e var
R4468:4468 compcert.flocq.Calc.Round <> m var
R4463:4466 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R4592:4592 compcert.flocq.Calc.Round <> m var
R4543:4563 compcert.flocq.Calc.Round <> inbetween_float_round thm
R4592:4592 compcert.flocq.Calc.Round <> m var
R4543:4563 compcert.flocq.Calc.Round <> inbetween_float_round thm
R4602:4617 compcert.flocq.Calc.Round <> inbetween_int_DN thm
R4602:4617 compcert.flocq.Calc.Round <> inbetween_int_DN thm
def 4637:4649 <> round_sign_DN
R4666:4666 compcert.flocq.Calc.Round <> l var
R4677:4685 compcert.flocq.Calc.Bracket <> loc_Exact constr
R4690:4694 Coq.Init.Datatypes <> false constr
R4705:4705 compcert.flocq.Calc.Round <> s var
prf 4723:4743 <> inbetween_int_DN_sign
R4791:4796 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4805:4807 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4797:4802 compcert.flocq.Core.Raux <> Zfloor def
R4804:4804 compcert.flocq.Calc.Round <> x var
R4808:4816 compcert.flocq.Core.Zaux <> cond_Zopp def
R4834:4842 compcert.flocq.Calc.Round <> cond_incr def
R4877:4877 compcert.flocq.Calc.Round <> m var
R4845:4857 compcert.flocq.Calc.Round <> round_sign_DN def
R4874:4874 compcert.flocq.Calc.Round <> l var
R4860:4867 compcert.flocq.Core.Raux <> Rlt_bool def
R4869:4869 compcert.flocq.Calc.Round <> x var
R4819:4826 compcert.flocq.Core.Raux <> Rlt_bool def
R4828:4828 compcert.flocq.Calc.Round <> x var
R4765:4777 compcert.flocq.Calc.Bracket <> inbetween_int def
R4790:4790 compcert.flocq.Calc.Round <> l var
R4782:4785 Coq.Reals.Rbasic_fun <> Rabs def
R4787:4787 compcert.flocq.Calc.Round <> x var
R4779:4779 compcert.flocq.Calc.Round <> m var
R4912:4915 Coq.Reals.Rbasic_fun <> Rabs def
R4934:4942 Coq.Reals.Rbasic_fun <> Rcase_abs thm
R4934:4942 Coq.Reals.Rbasic_fun <> Rcase_abs thm
R4974:4986 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R4974:4986 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R4974:4986 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R5044:5058 Coq.Reals.RIneq <> Ropp_involutive thm
R5044:5058 Coq.Reals.RIneq <> Ropp_involutive thm
R5044:5058 Coq.Reals.RIneq <> Ropp_involutive thm
R5078:5084 Coq.Reals.RIneq <> opp_IZR thm
R5078:5084 Coq.Reals.RIneq <> opp_IZR thm
R5078:5084 Coq.Reals.RIneq <> opp_IZR thm
R5093:5102 compcert.flocq.Core.Raux <> Zfloor_IZR thm
R5093:5102 compcert.flocq.Core.Raux <> Zfloor_IZR thm
R5111:5120 compcert.flocq.Core.Raux <> Zfloor_imp thm
R5111:5120 compcert.flocq.Core.Raux <> Zfloor_imp thm
R5136:5141 Coq.Reals.RIneq <> Rlt_le thm
R5136:5141 Coq.Reals.RIneq <> Rlt_le thm
R5152:5158 Coq.Reals.RIneq <> opp_IZR thm
R5152:5158 Coq.Reals.RIneq <> opp_IZR thm
R5152:5158 Coq.Reals.RIneq <> opp_IZR thm
R5167:5180 Coq.Reals.RIneq <> Ropp_lt_cancel thm
R5167:5180 Coq.Reals.RIneq <> Ropp_lt_cancel thm
R5195:5209 Coq.Reals.RIneq <> Ropp_involutive thm
R5195:5209 Coq.Reals.RIneq <> Ropp_involutive thm
R5195:5209 Coq.Reals.RIneq <> Ropp_involutive thm
R5236:5238 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R5227:5229 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R5235:5235 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R5231:5233 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R5236:5238 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R5227:5229 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R5235:5235 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R5231:5233 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R5253:5259 Coq.Reals.RIneq <> opp_IZR thm
R5253:5259 Coq.Reals.RIneq <> opp_IZR thm
R5253:5259 Coq.Reals.RIneq <> opp_IZR thm
R5268:5281 Coq.Reals.RIneq <> Ropp_lt_cancel thm
R5268:5281 Coq.Reals.RIneq <> Ropp_lt_cancel thm
R5296:5310 Coq.Reals.RIneq <> Ropp_involutive thm
R5296:5310 Coq.Reals.RIneq <> Ropp_involutive thm
R5296:5310 Coq.Reals.RIneq <> Ropp_involutive thm
R5327:5340 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R5327:5340 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R5327:5340 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R5327:5340 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R5388:5397 compcert.flocq.Core.Raux <> Zfloor_IZR thm
R5388:5397 compcert.flocq.Core.Raux <> Zfloor_IZR thm
R5406:5415 compcert.flocq.Core.Raux <> Zfloor_imp thm
R5406:5415 compcert.flocq.Core.Raux <> Zfloor_imp thm
R5435:5440 Coq.Reals.RIneq <> Rlt_le thm
R5435:5440 Coq.Reals.RIneq <> Rlt_le thm
R5462:5467 Coq.Reals.RIneq <> Rge_le thm
R5462:5467 Coq.Reals.RIneq <> Rge_le thm
prf 5484:5506 <> inbetween_float_DN_sign
R5537:5540 compcert.flocq.Core.Generic_fmt <> cexp def
R5552:5552 compcert.flocq.Calc.Round <> x var
R5547:5550 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R5542:5545 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R5594:5599 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5624:5626 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5600:5604 compcert.flocq.Core.Generic_fmt <> round def
R5623:5623 compcert.flocq.Calc.Round <> x var
R5616:5621 compcert.flocq.Core.Raux <> Zfloor def
R5611:5614 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R5606:5609 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R5627:5629 compcert.flocq.Core.Defs <> F2R def
R5632:5636 compcert.flocq.Core.Defs <> Float constr
R5717:5717 compcert.flocq.Calc.Round <> e var
R5644:5652 compcert.flocq.Core.Zaux <> cond_Zopp def
R5670:5678 compcert.flocq.Calc.Round <> cond_incr def
R5713:5713 compcert.flocq.Calc.Round <> m var
R5681:5693 compcert.flocq.Calc.Round <> round_sign_DN def
R5710:5710 compcert.flocq.Calc.Round <> l var
R5696:5703 compcert.flocq.Core.Raux <> Rlt_bool def
R5705:5705 compcert.flocq.Calc.Round <> x var
R5655:5662 compcert.flocq.Core.Raux <> Rlt_bool def
R5664:5664 compcert.flocq.Calc.Round <> x var
R5638:5641 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R5559:5573 compcert.flocq.Calc.Bracket <> inbetween_float def
R5593:5593 compcert.flocq.Calc.Round <> l var
R5585:5588 Coq.Reals.Rbasic_fun <> Rabs def
R5590:5590 compcert.flocq.Calc.Round <> x var
R5582:5582 compcert.flocq.Calc.Round <> e var
R5580:5580 compcert.flocq.Calc.Round <> m var
R5575:5578 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R5790:5798 compcert.flocq.Calc.Round <> cond_incr def
R5820:5820 compcert.flocq.Calc.Round <> m var
R5801:5813 compcert.flocq.Calc.Round <> round_sign_DN def
R5817:5817 compcert.flocq.Calc.Round <> l var
R5815:5815 compcert.flocq.Calc.Round <> s var
R5734:5759 compcert.flocq.Calc.Round <> inbetween_float_round_sign thm
R5790:5798 compcert.flocq.Calc.Round <> cond_incr def
R5820:5820 compcert.flocq.Calc.Round <> m var
R5801:5813 compcert.flocq.Calc.Round <> round_sign_DN def
R5817:5817 compcert.flocq.Calc.Round <> l var
R5815:5815 compcert.flocq.Calc.Round <> s var
R5734:5759 compcert.flocq.Calc.Round <> inbetween_float_round_sign thm
R5830:5850 compcert.flocq.Calc.Round <> inbetween_int_DN_sign thm
R5830:5850 compcert.flocq.Calc.Round <> inbetween_int_DN_sign thm
def 5912:5919 <> round_UP
R5934:5934 compcert.flocq.Calc.Round <> l var
R5945:5953 compcert.flocq.Calc.Bracket <> loc_Exact constr
R5958:5962 Coq.Init.Datatypes <> false constr
R5973:5976 Coq.Init.Datatypes <> true constr
prf 5994:6009 <> inbetween_int_UP
R6050:6055 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6063:6065 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6056:6060 compcert.flocq.Core.Raux <> Zceil def
R6062:6062 compcert.flocq.Calc.Round <> x var
R6066:6074 compcert.flocq.Calc.Round <> cond_incr def
R6089:6089 compcert.flocq.Calc.Round <> m var
R6077:6084 compcert.flocq.Calc.Round <> round_UP def
R6086:6086 compcert.flocq.Calc.Round <> l var
R6031:6043 compcert.flocq.Calc.Bracket <> inbetween_int def
R6049:6049 compcert.flocq.Calc.Round <> l var
R6047:6047 compcert.flocq.Calc.Round <> x var
R6045:6045 compcert.flocq.Calc.Round <> m var
R6142:6146 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R6182:6182 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R6130:6132 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6133:6141 compcert.flocq.Calc.Bracket <> loc_Exact constr
R6161:6164 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6148:6151 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R6152:6160 compcert.flocq.Calc.Bracket <> loc_Exact constr
R6175:6177 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6165:6172 compcert.flocq.Calc.Round <> round_UP def
R6178:6181 Coq.Init.Datatypes <> true constr
R6142:6146 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R6182:6182 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R6130:6132 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6133:6141 compcert.flocq.Calc.Bracket <> loc_Exact constr
R6161:6164 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6148:6151 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R6152:6160 compcert.flocq.Calc.Bracket <> loc_Exact constr
R6175:6177 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6165:6172 compcert.flocq.Calc.Round <> round_UP def
R6178:6181 Coq.Init.Datatypes <> true constr
R6332:6340 compcert.flocq.Core.Raux <> Zceil_IZR thm
R6332:6340 compcert.flocq.Core.Raux <> Zceil_IZR thm
R6388:6396 compcert.flocq.Core.Raux <> Zceil_imp thm
R6388:6396 compcert.flocq.Core.Raux <> Zceil_imp thm
R6419:6421 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R6415:6417 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R6419:6421 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R6415:6417 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R6450:6453 Coq.Init.Logic <> conj constr
R6466:6471 Coq.Reals.RIneq <> Rlt_le thm
R6478:6482 Coq.Init.Logic <> proj2 thm
R6484:6484 compcert.flocq.Calc.Round <> H var
R6456:6460 Coq.Init.Logic <> proj1 thm
R6462:6462 compcert.flocq.Calc.Round <> H var
R6450:6453 Coq.Init.Logic <> conj constr
R6466:6471 Coq.Reals.RIneq <> Rlt_le thm
R6478:6482 Coq.Init.Logic <> proj2 thm
R6484:6484 compcert.flocq.Calc.Round <> H var
R6456:6460 Coq.Init.Logic <> proj1 thm
R6462:6462 compcert.flocq.Calc.Round <> H var
R6496:6518 compcert.flocq.Calc.Bracket <> inbetween_bounds_not_Eq thm
R6496:6518 compcert.flocq.Calc.Bracket <> inbetween_bounds_not_Eq thm
prf 6561:6578 <> inbetween_float_UP
R6609:6612 compcert.flocq.Core.Generic_fmt <> cexp def
R6624:6624 compcert.flocq.Calc.Round <> x var
R6619:6622 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R6614:6617 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R6659:6664 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6688:6690 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6665:6669 compcert.flocq.Core.Generic_fmt <> round def
R6687:6687 compcert.flocq.Calc.Round <> x var
R6681:6685 compcert.flocq.Core.Raux <> Zceil def
R6676:6679 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R6671:6674 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R6691:6693 compcert.flocq.Core.Defs <> F2R def
R6696:6700 compcert.flocq.Core.Defs <> Float constr
R6734:6734 compcert.flocq.Calc.Round <> e var
R6708:6716 compcert.flocq.Calc.Round <> cond_incr def
R6731:6731 compcert.flocq.Calc.Round <> m var
R6719:6726 compcert.flocq.Calc.Round <> round_UP def
R6728:6728 compcert.flocq.Calc.Round <> l var
R6702:6705 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R6631:6645 compcert.flocq.Calc.Bracket <> inbetween_float def
R6658:6658 compcert.flocq.Calc.Round <> l var
R6656:6656 compcert.flocq.Calc.Round <> x var
R6654:6654 compcert.flocq.Calc.Round <> e var
R6652:6652 compcert.flocq.Calc.Round <> m var
R6647:6650 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R6800:6808 compcert.flocq.Calc.Round <> cond_incr def
R6823:6823 compcert.flocq.Calc.Round <> m var
R6811:6818 compcert.flocq.Calc.Round <> round_UP def
R6820:6820 compcert.flocq.Calc.Round <> l var
R6751:6771 compcert.flocq.Calc.Round <> inbetween_float_round thm
R6800:6808 compcert.flocq.Calc.Round <> cond_incr def
R6823:6823 compcert.flocq.Calc.Round <> m var
R6811:6818 compcert.flocq.Calc.Round <> round_UP def
R6820:6820 compcert.flocq.Calc.Round <> l var
R6751:6771 compcert.flocq.Calc.Round <> inbetween_float_round thm
R6833:6848 compcert.flocq.Calc.Round <> inbetween_int_UP thm
R6833:6848 compcert.flocq.Calc.Round <> inbetween_int_UP thm
def 6868:6880 <> round_sign_UP
R6897:6897 compcert.flocq.Calc.Round <> l var
R6908:6916 compcert.flocq.Calc.Bracket <> loc_Exact constr
R6921:6925 Coq.Init.Datatypes <> false constr
R6936:6939 Coq.Init.Datatypes <> negb def
R6941:6941 compcert.flocq.Calc.Round <> s var
prf 6959:6979 <> inbetween_int_UP_sign
R7027:7032 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7040:7042 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7033:7037 compcert.flocq.Core.Raux <> Zceil def
R7039:7039 compcert.flocq.Calc.Round <> x var
R7043:7051 compcert.flocq.Core.Zaux <> cond_Zopp def
R7069:7077 compcert.flocq.Calc.Round <> cond_incr def
R7112:7112 compcert.flocq.Calc.Round <> m var
R7080:7092 compcert.flocq.Calc.Round <> round_sign_UP def
R7109:7109 compcert.flocq.Calc.Round <> l var
R7095:7102 compcert.flocq.Core.Raux <> Rlt_bool def
R7104:7104 compcert.flocq.Calc.Round <> x var
R7054:7061 compcert.flocq.Core.Raux <> Rlt_bool def
R7063:7063 compcert.flocq.Calc.Round <> x var
R7001:7013 compcert.flocq.Calc.Bracket <> inbetween_int def
R7026:7026 compcert.flocq.Calc.Round <> l var
R7018:7021 Coq.Reals.Rbasic_fun <> Rabs def
R7023:7023 compcert.flocq.Calc.Round <> x var
R7015:7015 compcert.flocq.Calc.Round <> m var
R7147:7150 Coq.Reals.Rbasic_fun <> Rabs def
R7169:7177 Coq.Reals.Rbasic_fun <> Rcase_abs thm
R7169:7177 Coq.Reals.Rbasic_fun <> Rcase_abs thm
R7209:7221 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R7209:7221 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R7209:7221 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R7253:7257 compcert.flocq.Core.Raux <> Zceil def
R7266:7272 Coq.Init.Logic <> f_equal thm
R7266:7272 Coq.Init.Logic <> f_equal thm
R7320:7329 compcert.flocq.Core.Raux <> Zfloor_IZR thm
R7320:7329 compcert.flocq.Core.Raux <> Zfloor_IZR thm
R7338:7347 compcert.flocq.Core.Raux <> Zfloor_imp thm
R7338:7347 compcert.flocq.Core.Raux <> Zfloor_imp thm
R7367:7372 Coq.Reals.RIneq <> Rlt_le thm
R7367:7372 Coq.Reals.RIneq <> Rlt_le thm
R7398:7411 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R7398:7411 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R7398:7411 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R7398:7411 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R7466:7474 compcert.flocq.Core.Raux <> Zceil_IZR thm
R7466:7474 compcert.flocq.Core.Raux <> Zceil_IZR thm
R7483:7491 compcert.flocq.Core.Raux <> Zceil_imp thm
R7483:7491 compcert.flocq.Core.Raux <> Zceil_imp thm
R7514:7516 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R7510:7512 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R7528:7533 Coq.ZArith.BinInt Z pred def
R7536:7541 Coq.ZArith.BinInt Z succ def
R7514:7516 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R7510:7512 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R7528:7533 Coq.ZArith.BinInt Z pred def
R7536:7541 Coq.ZArith.BinInt Z succ def
R7563:7572 Coq.ZArith.BinInt <> Zpred_succ thm
R7563:7572 Coq.ZArith.BinInt <> Zpred_succ thm
R7563:7572 Coq.ZArith.BinInt <> Zpred_succ thm
R7585:7590 Coq.Reals.RIneq <> Rlt_le thm
R7585:7590 Coq.Reals.RIneq <> Rlt_le thm
R7603:7608 Coq.Reals.RIneq <> Rge_le thm
R7603:7608 Coq.Reals.RIneq <> Rge_le thm
prf 7625:7647 <> inbetween_float_UP_sign
R7678:7681 compcert.flocq.Core.Generic_fmt <> cexp def
R7693:7693 compcert.flocq.Calc.Round <> x var
R7688:7691 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R7683:7686 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R7735:7740 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7764:7766 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7741:7745 compcert.flocq.Core.Generic_fmt <> round def
R7763:7763 compcert.flocq.Calc.Round <> x var
R7757:7761 compcert.flocq.Core.Raux <> Zceil def
R7752:7755 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R7747:7750 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R7767:7769 compcert.flocq.Core.Defs <> F2R def
R7772:7776 compcert.flocq.Core.Defs <> Float constr
R7857:7857 compcert.flocq.Calc.Round <> e var
R7784:7792 compcert.flocq.Core.Zaux <> cond_Zopp def
R7810:7818 compcert.flocq.Calc.Round <> cond_incr def
R7853:7853 compcert.flocq.Calc.Round <> m var
R7821:7833 compcert.flocq.Calc.Round <> round_sign_UP def
R7850:7850 compcert.flocq.Calc.Round <> l var
R7836:7843 compcert.flocq.Core.Raux <> Rlt_bool def
R7845:7845 compcert.flocq.Calc.Round <> x var
R7795:7802 compcert.flocq.Core.Raux <> Rlt_bool def
R7804:7804 compcert.flocq.Calc.Round <> x var
R7778:7781 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R7700:7714 compcert.flocq.Calc.Bracket <> inbetween_float def
R7734:7734 compcert.flocq.Calc.Round <> l var
R7726:7729 Coq.Reals.Rbasic_fun <> Rabs def
R7731:7731 compcert.flocq.Calc.Round <> x var
R7723:7723 compcert.flocq.Calc.Round <> e var
R7721:7721 compcert.flocq.Calc.Round <> m var
R7716:7719 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R7930:7938 compcert.flocq.Calc.Round <> cond_incr def
R7960:7960 compcert.flocq.Calc.Round <> m var
R7941:7953 compcert.flocq.Calc.Round <> round_sign_UP def
R7957:7957 compcert.flocq.Calc.Round <> l var
R7955:7955 compcert.flocq.Calc.Round <> s var
R7874:7899 compcert.flocq.Calc.Round <> inbetween_float_round_sign thm
R7930:7938 compcert.flocq.Calc.Round <> cond_incr def
R7960:7960 compcert.flocq.Calc.Round <> m var
R7941:7953 compcert.flocq.Calc.Round <> round_sign_UP def
R7957:7957 compcert.flocq.Calc.Round <> l var
R7955:7955 compcert.flocq.Calc.Round <> s var
R7874:7899 compcert.flocq.Calc.Round <> inbetween_float_round_sign thm
R7970:7990 compcert.flocq.Calc.Round <> inbetween_int_UP_sign thm
R7970:7990 compcert.flocq.Calc.Round <> inbetween_int_UP_sign thm
def 8061:8068 <> round_ZR
R8075:8078 Coq.Init.Datatypes <> bool ind
R8094:8094 compcert.flocq.Calc.Round <> l var
R8105:8113 compcert.flocq.Calc.Bracket <> loc_Exact constr
R8118:8122 Coq.Init.Datatypes <> false constr
R8133:8133 compcert.flocq.Calc.Round <> s var
prf 8151:8166 <> inbetween_int_ZR
R8207:8212 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8221:8223 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8213:8218 compcert.flocq.Core.Raux <> Ztrunc def
R8220:8220 compcert.flocq.Calc.Round <> x var
R8224:8232 compcert.flocq.Calc.Round <> cond_incr def
R8262:8262 compcert.flocq.Calc.Round <> m var
R8235:8242 compcert.flocq.Calc.Round <> round_ZR def
R8259:8259 compcert.flocq.Calc.Round <> l var
R8245:8252 Coq.ZArith.Zbool <> Zlt_bool syndef
R8254:8254 compcert.flocq.Calc.Round <> m var
R8188:8200 compcert.flocq.Calc.Bracket <> inbetween_int def
R8206:8206 compcert.flocq.Calc.Round <> l var
R8204:8204 compcert.flocq.Calc.Round <> x var
R8202:8202 compcert.flocq.Calc.Round <> m var
R8394:8401 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R8394:8401 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R8394:8401 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R8394:8401 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R8429:8434 compcert.flocq.Core.Raux <> Ztrunc def
R8457:8459 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8449:8454 compcert.flocq.Core.Raux <> Zfloor def
R8457:8459 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8449:8454 compcert.flocq.Core.Raux <> Zfloor def
R8470:8479 compcert.flocq.Core.Raux <> Zfloor_imp thm
R8470:8479 compcert.flocq.Core.Raux <> Zfloor_imp thm
R8489:8492 Coq.Init.Logic <> conj constr
R8519:8523 Coq.Init.Logic <> proj2 thm
R8495:8500 Coq.Reals.RIneq <> Rlt_le thm
R8507:8511 Coq.Init.Logic <> proj1 thm
R8489:8492 Coq.Init.Logic <> conj constr
R8519:8523 Coq.Init.Logic <> proj2 thm
R8495:8500 Coq.Reals.RIneq <> Rlt_le thm
R8507:8511 Coq.Init.Logic <> proj1 thm
R8539:8553 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R8539:8553 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R8539:8553 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R8539:8553 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R8575:8583 compcert.flocq.Calc.Round <> cond_incr def
R8598:8610 compcert.flocq.Core.Raux <> Rlt_bool_spec thm
R8634:8646 compcert.flocq.Core.Zaux <> Zlt_bool_spec thm
R8673:8682 Coq.Init.Logic <> refl_equal syndef
R8598:8610 compcert.flocq.Core.Raux <> Rlt_bool_spec thm
R8634:8646 compcert.flocq.Core.Zaux <> Zlt_bool_spec thm
R8634:8646 compcert.flocq.Core.Zaux <> Zlt_bool_spec thm
R8673:8682 Coq.Init.Logic <> refl_equal syndef
R8673:8682 Coq.Init.Logic <> refl_equal syndef
R8673:8682 Coq.Init.Logic <> refl_equal syndef
R8673:8682 Coq.Init.Logic <> refl_equal syndef
R8690:8699 Coq.Reals.RIneq <> Rlt_not_le thm
R8690:8699 Coq.Reals.RIneq <> Rlt_not_le thm
R8724:8729 Coq.Reals.RIneq <> Rlt_le thm
R8724:8729 Coq.Reals.RIneq <> Rlt_le thm
R8762:8766 Coq.Init.Logic <> proj1 thm
R8738:8749 Coq.Reals.RIneq <> Rle_lt_trans thm
R8762:8766 Coq.Init.Logic <> proj1 thm
R8738:8749 Coq.Reals.RIneq <> Rle_lt_trans thm
R8783:8788 Coq.Reals.RIneq <> IZR_le thm
R8783:8788 Coq.Reals.RIneq <> IZR_le thm
R8796:8805 Coq.Reals.RIneq <> Rle_not_lt thm
R8796:8805 Coq.Reals.RIneq <> Rle_not_lt thm
R8854:8858 Coq.Init.Logic <> proj2 thm
R8830:8841 Coq.Reals.RIneq <> Rlt_le_trans thm
R8854:8858 Coq.Init.Logic <> proj2 thm
R8830:8841 Coq.Reals.RIneq <> Rlt_le_trans thm
R8871:8876 Coq.Reals.RIneq <> IZR_le thm
R8871:8876 Coq.Reals.RIneq <> IZR_le thm
R8889:8899 Coq.ZArith.Zorder <> Zlt_le_succ thm
R8889:8899 Coq.ZArith.Zorder <> Zlt_le_succ thm
R8924:8933 Coq.Reals.RIneq <> Rlt_not_eq thm
R8924:8933 Coq.Reals.RIneq <> Rlt_not_eq thm
prf 8950:8967 <> inbetween_float_ZR
R8998:9001 compcert.flocq.Core.Generic_fmt <> cexp def
R9013:9013 compcert.flocq.Calc.Round <> x var
R9008:9011 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R9003:9006 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R9048:9053 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9078:9080 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9054:9058 compcert.flocq.Core.Generic_fmt <> round def
R9077:9077 compcert.flocq.Calc.Round <> x var
R9070:9075 compcert.flocq.Core.Raux <> Ztrunc def
R9065:9068 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R9060:9063 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R9081:9083 compcert.flocq.Core.Defs <> F2R def
R9086:9090 compcert.flocq.Core.Defs <> Float constr
R9139:9139 compcert.flocq.Calc.Round <> e var
R9098:9106 compcert.flocq.Calc.Round <> cond_incr def
R9136:9136 compcert.flocq.Calc.Round <> m var
R9109:9116 compcert.flocq.Calc.Round <> round_ZR def
R9133:9133 compcert.flocq.Calc.Round <> l var
R9119:9126 Coq.ZArith.Zbool <> Zlt_bool syndef
R9128:9128 compcert.flocq.Calc.Round <> m var
R9092:9095 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R9020:9034 compcert.flocq.Calc.Bracket <> inbetween_float def
R9047:9047 compcert.flocq.Calc.Round <> l var
R9045:9045 compcert.flocq.Calc.Round <> x var
R9043:9043 compcert.flocq.Calc.Round <> e var
R9041:9041 compcert.flocq.Calc.Round <> m var
R9036:9039 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R9205:9213 compcert.flocq.Calc.Round <> cond_incr def
R9243:9243 compcert.flocq.Calc.Round <> m var
R9216:9223 compcert.flocq.Calc.Round <> round_ZR def
R9240:9240 compcert.flocq.Calc.Round <> l var
R9226:9233 Coq.ZArith.Zbool <> Zlt_bool syndef
R9235:9235 compcert.flocq.Calc.Round <> m var
R9156:9176 compcert.flocq.Calc.Round <> inbetween_float_round thm
R9205:9213 compcert.flocq.Calc.Round <> cond_incr def
R9243:9243 compcert.flocq.Calc.Round <> m var
R9216:9223 compcert.flocq.Calc.Round <> round_ZR def
R9240:9240 compcert.flocq.Calc.Round <> l var
R9226:9233 Coq.ZArith.Zbool <> Zlt_bool syndef
R9235:9235 compcert.flocq.Calc.Round <> m var
R9156:9176 compcert.flocq.Calc.Round <> inbetween_float_round thm
R9253:9268 compcert.flocq.Calc.Round <> inbetween_int_ZR thm
R9253:9268 compcert.flocq.Calc.Round <> inbetween_int_ZR thm
prf 9285:9305 <> inbetween_int_ZR_sign
R9353:9358 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9367:9369 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9359:9364 compcert.flocq.Core.Raux <> Ztrunc def
R9366:9366 compcert.flocq.Calc.Round <> x var
R9370:9378 compcert.flocq.Core.Zaux <> cond_Zopp def
R9395:9395 compcert.flocq.Calc.Round <> m var
R9381:9388 compcert.flocq.Core.Raux <> Rlt_bool def
R9390:9390 compcert.flocq.Calc.Round <> x var
R9327:9339 compcert.flocq.Calc.Bracket <> inbetween_int def
R9352:9352 compcert.flocq.Calc.Round <> l var
R9344:9347 Coq.Reals.Rbasic_fun <> Rabs def
R9349:9349 compcert.flocq.Calc.Round <> x var
R9341:9341 compcert.flocq.Calc.Round <> m var
R9436:9441 compcert.flocq.Core.Raux <> Ztrunc def
R9454:9463 Coq.Reals.RIneq <> Rlt_le_dec thm
R9454:9463 Coq.Reals.RIneq <> Rlt_le_dec thm
R9496:9508 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R9496:9508 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R9496:9508 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R9540:9544 compcert.flocq.Core.Raux <> Zceil def
R9553:9559 Coq.Init.Logic <> f_equal thm
R9553:9559 Coq.Init.Logic <> f_equal thm
R9568:9577 compcert.flocq.Core.Raux <> Zfloor_imp thm
R9568:9577 compcert.flocq.Core.Raux <> Zfloor_imp thm
R9591:9599 Coq.Reals.Rbasic_fun <> Rabs_left thm
R9591:9599 Coq.Reals.Rbasic_fun <> Rabs_left thm
R9591:9599 Coq.Reals.Rbasic_fun <> Rabs_left thm
R9623:9638 compcert.flocq.Calc.Bracket <> inbetween_bounds thm
R9623:9638 compcert.flocq.Calc.Bracket <> inbetween_bounds thm
R9662:9667 Coq.Reals.RIneq <> IZR_lt thm
R9662:9667 Coq.Reals.RIneq <> IZR_lt thm
R9676:9683 Coq.ZArith.Zorder <> Zlt_succ syndef
R9676:9683 Coq.ZArith.Zorder <> Zlt_succ syndef
R9700:9713 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R9700:9713 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R9700:9713 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R9744:9753 compcert.flocq.Core.Raux <> Zfloor_imp thm
R9744:9753 compcert.flocq.Core.Raux <> Zfloor_imp thm
R9767:9777 Coq.Reals.Rbasic_fun <> Rabs_pos_eq thm
R9767:9777 Coq.Reals.Rbasic_fun <> Rabs_pos_eq thm
R9767:9777 Coq.Reals.Rbasic_fun <> Rabs_pos_eq thm
R9801:9816 compcert.flocq.Calc.Bracket <> inbetween_bounds thm
R9801:9816 compcert.flocq.Calc.Bracket <> inbetween_bounds thm
R9840:9845 Coq.Reals.RIneq <> IZR_lt thm
R9840:9845 Coq.Reals.RIneq <> IZR_lt thm
R9854:9861 Coq.ZArith.Zorder <> Zlt_succ syndef
R9854:9861 Coq.ZArith.Zorder <> Zlt_succ syndef
prf 9878:9900 <> inbetween_float_ZR_sign
R9931:9934 compcert.flocq.Core.Generic_fmt <> cexp def
R9946:9946 compcert.flocq.Calc.Round <> x var
R9941:9944 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R9936:9939 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R9988:9993 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10018:10020 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9994:9998 compcert.flocq.Core.Generic_fmt <> round def
R10017:10017 compcert.flocq.Calc.Round <> x var
R10010:10015 compcert.flocq.Core.Raux <> Ztrunc def
R10005:10008 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R10000:10003 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R10021:10023 compcert.flocq.Core.Defs <> F2R def
R10026:10030 compcert.flocq.Core.Defs <> Float constr
R10066:10066 compcert.flocq.Calc.Round <> e var
R10038:10046 compcert.flocq.Core.Zaux <> cond_Zopp def
R10063:10063 compcert.flocq.Calc.Round <> m var
R10049:10056 compcert.flocq.Core.Raux <> Rlt_bool def
R10058:10058 compcert.flocq.Calc.Round <> x var
R10032:10035 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R9953:9967 compcert.flocq.Calc.Bracket <> inbetween_float def
R9987:9987 compcert.flocq.Calc.Round <> l var
R9979:9982 Coq.Reals.Rbasic_fun <> Rabs def
R9984:9984 compcert.flocq.Calc.Round <> x var
R9976:9976 compcert.flocq.Calc.Round <> e var
R9974:9974 compcert.flocq.Calc.Round <> m var
R9969:9972 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R10139:10139 compcert.flocq.Calc.Round <> m var
R10083:10108 compcert.flocq.Calc.Round <> inbetween_float_round_sign thm
R10139:10139 compcert.flocq.Calc.Round <> m var
R10083:10108 compcert.flocq.Calc.Round <> inbetween_float_round_sign thm
R10149:10169 compcert.flocq.Calc.Round <> inbetween_int_ZR_sign thm
R10149:10169 compcert.flocq.Calc.Round <> inbetween_int_ZR_sign thm
def 10239:10245 <> round_N
R10252:10255 Coq.Init.Datatypes <> bool ind
R10271:10271 compcert.flocq.Calc.Round <> l var
R10282:10290 compcert.flocq.Calc.Bracket <> loc_Exact constr
R10295:10299 Coq.Init.Datatypes <> false constr
R10305:10315 compcert.flocq.Calc.Bracket <> loc_Inexact constr
R10317:10318 Coq.Init.Datatypes <> Lt constr
R10323:10327 Coq.Init.Datatypes <> false constr
R10333:10343 compcert.flocq.Calc.Bracket <> loc_Inexact constr
R10345:10346 Coq.Init.Datatypes <> Eq constr
R10351:10351 compcert.flocq.Calc.Round <> p var
R10357:10367 compcert.flocq.Calc.Bracket <> loc_Inexact constr
R10369:10370 Coq.Init.Datatypes <> Gt constr
R10375:10378 Coq.Init.Datatypes <> true constr
prf 10396:10410 <> inbetween_int_N
R10458:10463 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10481:10483 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10464:10471 compcert.flocq.Core.Generic_fmt <> Znearest def
R10480:10480 compcert.flocq.Calc.Round <> x var
R10473:10478 compcert.flocq.Calc.Round <> choice var
R10484:10492 compcert.flocq.Calc.Round <> cond_incr def
R10517:10517 compcert.flocq.Calc.Round <> m var
R10495:10501 compcert.flocq.Calc.Round <> round_N def
R10514:10514 compcert.flocq.Calc.Round <> l var
R10504:10509 compcert.flocq.Calc.Round <> choice var
R10511:10511 compcert.flocq.Calc.Round <> m var
R10439:10451 compcert.flocq.Calc.Bracket <> inbetween_int def
R10457:10457 compcert.flocq.Calc.Round <> l var
R10455:10455 compcert.flocq.Calc.Round <> x var
R10453:10453 compcert.flocq.Calc.Round <> m var
R10656:10663 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R10656:10663 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R10656:10663 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R10656:10663 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R10691:10698 compcert.flocq.Core.Generic_fmt <> Znearest def
R10721:10723 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10713:10718 compcert.flocq.Core.Raux <> Zfloor def
R10721:10723 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10713:10718 compcert.flocq.Core.Raux <> Zfloor def
R10734:10743 compcert.flocq.Core.Raux <> Zfloor_imp thm
R10734:10743 compcert.flocq.Core.Raux <> Zfloor_imp thm
R10753:10756 Coq.Init.Logic <> conj constr
R10783:10787 Coq.Init.Logic <> proj2 thm
R10759:10764 Coq.Reals.RIneq <> Rlt_le thm
R10771:10775 Coq.Init.Logic <> proj1 thm
R10753:10756 Coq.Init.Logic <> conj constr
R10783:10787 Coq.Init.Logic <> proj2 thm
R10759:10764 Coq.Reals.RIneq <> Rlt_le thm
R10771:10775 Coq.Init.Logic <> proj1 thm
R10803:10817 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R10803:10817 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R10803:10817 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R10803:10817 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R10841:10848 compcert.flocq.Core.Raux <> Rcompare def
R10863:10863 Coq.Reals.Rdefinitions <> ::R_scope:'/'_x not
R10852:10854 Coq.Reals.Rdefinitions <> ::R_scope:x_'-'_x not
R10855:10857 Coq.Reals.Rdefinitions <> IZR def
R10841:10848 compcert.flocq.Core.Raux <> Rcompare def
R10863:10863 Coq.Reals.Rdefinitions <> ::R_scope:'/'_x not
R10852:10854 Coq.Reals.Rdefinitions <> ::R_scope:x_'-'_x not
R10855:10857 Coq.Reals.Rdefinitions <> IZR def
R10914:10921 Coq.Reals.RIneq <> plus_IZR thm
R10914:10921 Coq.Reals.RIneq <> plus_IZR thm
R10914:10921 Coq.Reals.RIneq <> plus_IZR thm
R10936:10950 compcert.flocq.Core.Raux <> Rcompare_plus_r thm
R10953:10954 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R10955:10957 Coq.Reals.Rdefinitions <> IZR def
R10936:10950 compcert.flocq.Core.Raux <> Rcompare_plus_r thm
R10953:10954 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R10955:10957 Coq.Reals.Rdefinitions <> IZR def
R10936:10950 compcert.flocq.Core.Raux <> Rcompare_plus_r thm
R10953:10954 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R10955:10957 Coq.Reals.Rdefinitions <> IZR def
R10972:10978 Coq.Init.Logic <> f_equal thm
R10972:10978 Coq.Init.Logic <> f_equal thm
R11010:11019 Coq.Reals.RIneq <> Rlt_not_eq thm
R11010:11019 Coq.Reals.RIneq <> Rlt_not_eq thm
prf 11036:11055 <> inbetween_int_N_sign
R11110:11115 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11133:11135 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11116:11123 compcert.flocq.Core.Generic_fmt <> Znearest def
R11132:11132 compcert.flocq.Calc.Round <> x var
R11125:11130 compcert.flocq.Calc.Round <> choice var
R11136:11144 compcert.flocq.Core.Zaux <> cond_Zopp def
R11162:11170 compcert.flocq.Calc.Round <> cond_incr def
R11248:11248 compcert.flocq.Calc.Round <> m var
R11173:11179 compcert.flocq.Calc.Round <> round_N def
R11245:11245 compcert.flocq.Calc.Round <> l var
R11185:11192 compcert.flocq.Core.Raux <> Rlt_bool def
R11194:11194 compcert.flocq.Calc.Round <> x var
R11235:11240 compcert.flocq.Calc.Round <> choice var
R11242:11242 compcert.flocq.Calc.Round <> m var
R11203:11206 Coq.Init.Datatypes <> negb def
R11209:11214 compcert.flocq.Calc.Round <> choice var
R11217:11218 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R11224:11224 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R11220:11222 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R11219:11219 compcert.flocq.Calc.Round <> m var
R11147:11154 compcert.flocq.Core.Raux <> Rlt_bool def
R11156:11156 compcert.flocq.Calc.Round <> x var
R11084:11096 compcert.flocq.Calc.Bracket <> inbetween_int def
R11109:11109 compcert.flocq.Calc.Round <> l var
R11101:11104 Coq.Reals.Rbasic_fun <> Rabs def
R11106:11106 compcert.flocq.Calc.Round <> x var
R11098:11098 compcert.flocq.Calc.Round <> m var
R11332:11335 Coq.Reals.Rbasic_fun <> Rabs def
R11354:11362 Coq.Reals.Rbasic_fun <> Rcase_abs thm
R11354:11362 Coq.Reals.Rbasic_fun <> Rcase_abs thm
R11393:11405 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R11393:11405 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R11393:11405 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R11442:11456 Coq.Reals.RIneq <> Ropp_involutive thm
R11442:11456 Coq.Reals.RIneq <> Ropp_involutive thm
R11442:11456 Coq.Reals.RIneq <> Ropp_involutive thm
R11470:11481 compcert.flocq.Core.Generic_fmt <> Znearest_opp thm
R11470:11481 compcert.flocq.Core.Generic_fmt <> Znearest_opp thm
R11470:11481 compcert.flocq.Core.Generic_fmt <> Znearest_opp thm
R11490:11496 Coq.Init.Logic <> f_equal thm
R11490:11496 Coq.Init.Logic <> f_equal thm
R11555:11562 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R11555:11562 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R11590:11592 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11579:11584 compcert.flocq.Core.Raux <> Zfloor def
R11587:11587 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R11590:11592 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11579:11584 compcert.flocq.Core.Raux <> Zfloor def
R11587:11587 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R11603:11612 compcert.flocq.Core.Raux <> Zfloor_imp thm
R11603:11612 compcert.flocq.Core.Raux <> Zfloor_imp thm
R11622:11625 Coq.Init.Logic <> conj constr
R11652:11656 Coq.Init.Logic <> proj2 thm
R11628:11633 Coq.Reals.RIneq <> Rlt_le thm
R11640:11644 Coq.Init.Logic <> proj1 thm
R11622:11625 Coq.Init.Logic <> conj constr
R11652:11656 Coq.Init.Logic <> proj2 thm
R11628:11633 Coq.Reals.RIneq <> Rlt_le thm
R11640:11644 Coq.Init.Logic <> proj1 thm
R11671:11678 compcert.flocq.Core.Generic_fmt <> Znearest def
R11689:11703 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R11689:11703 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R11689:11703 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R11689:11703 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R11727:11734 compcert.flocq.Core.Raux <> Rcompare def
R11751:11751 Coq.Reals.Rdefinitions <> ::R_scope:'/'_x not
R11740:11742 Coq.Reals.Rdefinitions <> ::R_scope:x_'-'_x not
R11737:11738 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R11743:11745 Coq.Reals.Rdefinitions <> IZR def
R11727:11734 compcert.flocq.Core.Raux <> Rcompare def
R11751:11751 Coq.Reals.Rdefinitions <> ::R_scope:'/'_x not
R11740:11742 Coq.Reals.Rdefinitions <> ::R_scope:x_'-'_x not
R11737:11738 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R11743:11745 Coq.Reals.Rdefinitions <> IZR def
R11802:11809 Coq.Reals.RIneq <> plus_IZR thm
R11802:11809 Coq.Reals.RIneq <> plus_IZR thm
R11802:11809 Coq.Reals.RIneq <> plus_IZR thm
R11824:11838 compcert.flocq.Core.Raux <> Rcompare_plus_r thm
R11851:11851 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R11841:11842 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R11843:11845 Coq.Reals.Rdefinitions <> IZR def
R11824:11838 compcert.flocq.Core.Raux <> Rcompare_plus_r thm
R11851:11851 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R11841:11842 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R11843:11845 Coq.Reals.Rdefinitions <> IZR def
R11824:11838 compcert.flocq.Core.Raux <> Rcompare_plus_r thm
R11851:11851 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R11841:11842 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R11843:11845 Coq.Reals.Rdefinitions <> IZR def
R11863:11869 Coq.Init.Logic <> f_equal thm
R11863:11869 Coq.Init.Logic <> f_equal thm
R11901:11910 Coq.Reals.RIneq <> Rlt_not_eq thm
R11901:11910 Coq.Reals.RIneq <> Rlt_not_eq thm
R11931:11936 Coq.Reals.RIneq <> Rge_le thm
R11931:11936 Coq.Reals.RIneq <> Rge_le thm
R11976:11989 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R11976:11989 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R11976:11989 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R12070:12077 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R12070:12077 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R12102:12104 Coq.Init.Logic <> ::type_scope:x_'='_x not
R12094:12099 compcert.flocq.Core.Raux <> Zfloor def
R12102:12104 Coq.Init.Logic <> ::type_scope:x_'='_x not
R12094:12099 compcert.flocq.Core.Raux <> Zfloor def
R12115:12124 compcert.flocq.Core.Raux <> Zfloor_imp thm
R12115:12124 compcert.flocq.Core.Raux <> Zfloor_imp thm
R12134:12137 Coq.Init.Logic <> conj constr
R12164:12168 Coq.Init.Logic <> proj2 thm
R12140:12145 Coq.Reals.RIneq <> Rlt_le thm
R12152:12156 Coq.Init.Logic <> proj1 thm
R12134:12137 Coq.Init.Logic <> conj constr
R12164:12168 Coq.Init.Logic <> proj2 thm
R12140:12145 Coq.Reals.RIneq <> Rlt_le thm
R12152:12156 Coq.Init.Logic <> proj1 thm
R12183:12190 compcert.flocq.Core.Generic_fmt <> Znearest def
R12201:12215 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R12201:12215 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R12201:12215 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R12201:12215 compcert.flocq.Core.Raux <> Zceil_floor_neq thm
R12239:12246 compcert.flocq.Core.Raux <> Rcompare def
R12261:12261 Coq.Reals.Rdefinitions <> ::R_scope:'/'_x not
R12250:12252 Coq.Reals.Rdefinitions <> ::R_scope:x_'-'_x not
R12253:12255 Coq.Reals.Rdefinitions <> IZR def
R12239:12246 compcert.flocq.Core.Raux <> Rcompare def
R12261:12261 Coq.Reals.Rdefinitions <> ::R_scope:'/'_x not
R12250:12252 Coq.Reals.Rdefinitions <> ::R_scope:x_'-'_x not
R12253:12255 Coq.Reals.Rdefinitions <> IZR def
R12312:12319 Coq.Reals.RIneq <> plus_IZR thm
R12312:12319 Coq.Reals.RIneq <> plus_IZR thm
R12312:12319 Coq.Reals.RIneq <> plus_IZR thm
R12334:12348 compcert.flocq.Core.Raux <> Rcompare_plus_r thm
R12351:12352 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R12353:12355 Coq.Reals.Rdefinitions <> IZR def
R12334:12348 compcert.flocq.Core.Raux <> Rcompare_plus_r thm
R12351:12352 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R12353:12355 Coq.Reals.Rdefinitions <> IZR def
R12334:12348 compcert.flocq.Core.Raux <> Rcompare_plus_r thm
R12351:12352 Coq.Reals.Rdefinitions <> ::R_scope:'-'_x not
R12353:12355 Coq.Reals.Rdefinitions <> IZR def
R12370:12376 Coq.Init.Logic <> f_equal thm
R12370:12376 Coq.Init.Logic <> f_equal thm
R12408:12417 Coq.Reals.RIneq <> Rlt_not_eq thm
R12408:12417 Coq.Reals.RIneq <> Rlt_not_eq thm
prf 12489:12504 <> inbetween_int_NE
R12545:12550 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12562:12564 Coq.Init.Logic <> ::type_scope:x_'='_x not
R12551:12559 compcert.flocq.Core.Round_NE <> ZnearestE syndef
R12561:12561 compcert.flocq.Calc.Round <> x var
R12565:12573 compcert.flocq.Calc.Round <> cond_incr def
R12605:12605 compcert.flocq.Calc.Round <> m var
R12576:12582 compcert.flocq.Calc.Round <> round_N def
R12602:12602 compcert.flocq.Calc.Round <> l var
R12585:12588 Coq.Init.Datatypes <> negb def
R12591:12596 Coq.ZArith.BinInt Z even def
R12598:12598 compcert.flocq.Calc.Round <> m var
R12526:12538 compcert.flocq.Calc.Bracket <> inbetween_int def
R12544:12544 compcert.flocq.Calc.Round <> l var
R12542:12542 compcert.flocq.Calc.Round <> x var
R12540:12540 compcert.flocq.Calc.Round <> m var
R12683:12686 Coq.Init.Datatypes <> negb def
R12689:12694 Coq.ZArith.BinInt Z even def
R12696:12696 compcert.flocq.Calc.Round <> x var
R12642:12656 compcert.flocq.Calc.Round <> inbetween_int_N thm
R12683:12686 Coq.Init.Datatypes <> negb def
R12689:12694 Coq.ZArith.BinInt Z even def
R12696:12696 compcert.flocq.Calc.Round <> x var
R12642:12656 compcert.flocq.Calc.Round <> inbetween_int_N thm
prf 12715:12732 <> inbetween_float_NE
R12763:12766 compcert.flocq.Core.Generic_fmt <> cexp def
R12778:12778 compcert.flocq.Calc.Round <> x var
R12773:12776 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R12768:12771 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R12813:12818 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12846:12848 Coq.Init.Logic <> ::type_scope:x_'='_x not
R12819:12823 compcert.flocq.Core.Generic_fmt <> round def
R12845:12845 compcert.flocq.Calc.Round <> x var
R12835:12843 compcert.flocq.Core.Round_NE <> ZnearestE syndef
R12830:12833 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R12825:12828 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R12849:12851 compcert.flocq.Core.Defs <> F2R def
R12854:12858 compcert.flocq.Core.Defs <> Float constr
R12909:12909 compcert.flocq.Calc.Round <> e var
R12866:12874 compcert.flocq.Calc.Round <> cond_incr def
R12906:12906 compcert.flocq.Calc.Round <> m var
R12877:12883 compcert.flocq.Calc.Round <> round_N def
R12903:12903 compcert.flocq.Calc.Round <> l var
R12886:12889 Coq.Init.Datatypes <> negb def
R12892:12897 Coq.ZArith.BinInt Z even def
R12899:12899 compcert.flocq.Calc.Round <> m var
R12860:12863 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R12785:12799 compcert.flocq.Calc.Bracket <> inbetween_float def
R12812:12812 compcert.flocq.Calc.Round <> l var
R12810:12810 compcert.flocq.Calc.Round <> x var
R12808:12808 compcert.flocq.Calc.Round <> e var
R12806:12806 compcert.flocq.Calc.Round <> m var
R12801:12804 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R12975:12983 compcert.flocq.Calc.Round <> cond_incr def
R13015:13015 compcert.flocq.Calc.Round <> m var
R12986:12992 compcert.flocq.Calc.Round <> round_N def
R13012:13012 compcert.flocq.Calc.Round <> l var
R12995:12998 Coq.Init.Datatypes <> negb def
R13001:13006 Coq.ZArith.BinInt Z even def
R13008:13008 compcert.flocq.Calc.Round <> m var
R12926:12946 compcert.flocq.Calc.Round <> inbetween_float_round thm
R12975:12983 compcert.flocq.Calc.Round <> cond_incr def
R13015:13015 compcert.flocq.Calc.Round <> m var
R12986:12992 compcert.flocq.Calc.Round <> round_N def
R13012:13012 compcert.flocq.Calc.Round <> l var
R12995:12998 Coq.Init.Datatypes <> negb def
R13001:13006 Coq.ZArith.BinInt Z even def
R13008:13008 compcert.flocq.Calc.Round <> m var
R12926:12946 compcert.flocq.Calc.Round <> inbetween_float_round thm
R13025:13040 compcert.flocq.Calc.Round <> inbetween_int_NE thm
R13025:13040 compcert.flocq.Calc.Round <> inbetween_int_NE thm
prf 13057:13077 <> inbetween_int_NE_sign
R13125:13130 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13142:13144 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13131:13139 compcert.flocq.Core.Round_NE <> ZnearestE syndef
R13141:13141 compcert.flocq.Calc.Round <> x var
R13145:13153 compcert.flocq.Core.Zaux <> cond_Zopp def
R13171:13179 compcert.flocq.Calc.Round <> cond_incr def
R13211:13211 compcert.flocq.Calc.Round <> m var
R13182:13188 compcert.flocq.Calc.Round <> round_N def
R13208:13208 compcert.flocq.Calc.Round <> l var
R13191:13194 Coq.Init.Datatypes <> negb def
R13197:13202 Coq.ZArith.BinInt Z even def
R13204:13204 compcert.flocq.Calc.Round <> m var
R13156:13163 compcert.flocq.Core.Raux <> Rlt_bool def
R13165:13165 compcert.flocq.Calc.Round <> x var
R13099:13111 compcert.flocq.Calc.Bracket <> inbetween_int def
R13124:13124 compcert.flocq.Calc.Round <> l var
R13116:13119 Coq.Reals.Rbasic_fun <> Rabs def
R13121:13121 compcert.flocq.Calc.Round <> x var
R13113:13113 compcert.flocq.Calc.Round <> m var
R13294:13297 Coq.Init.Datatypes <> negb def
R13300:13305 Coq.ZArith.BinInt Z even def
R13307:13307 compcert.flocq.Calc.Round <> x var
R13248:13267 compcert.flocq.Calc.Round <> inbetween_int_N_sign thm
R13294:13297 Coq.Init.Datatypes <> negb def
R13300:13305 Coq.ZArith.BinInt Z even def
R13307:13307 compcert.flocq.Calc.Round <> x var
R13248:13267 compcert.flocq.Calc.Round <> inbetween_int_N_sign thm
R13294:13297 Coq.Init.Datatypes <> negb def
R13300:13305 Coq.ZArith.BinInt Z even def
R13307:13307 compcert.flocq.Calc.Round <> x var
R13248:13267 compcert.flocq.Calc.Round <> inbetween_int_N_sign thm
R13294:13297 Coq.Init.Datatypes <> negb def
R13300:13305 Coq.ZArith.BinInt Z even def
R13307:13307 compcert.flocq.Calc.Round <> x var
R13248:13267 compcert.flocq.Calc.Round <> inbetween_int_N_sign thm
R13332:13338 Coq.Init.Logic <> f_equal thm
R13332:13338 Coq.Init.Logic <> f_equal thm
R13346:13353 compcert.flocq.Core.Raux <> Rlt_bool def
R13346:13353 compcert.flocq.Core.Raux <> Rlt_bool def
R13364:13373 Coq.ZArith.BinInt Z even_opp thm
R13376:13385 Coq.ZArith.BinInt Z even_add thm
R13364:13373 Coq.ZArith.BinInt Z even_opp thm
R13364:13373 Coq.ZArith.BinInt Z even_opp thm
R13376:13385 Coq.ZArith.BinInt Z even_add thm
R13376:13385 Coq.ZArith.BinInt Z even_add thm
R13398:13403 Coq.ZArith.BinInt Z even def
R13398:13403 Coq.ZArith.BinInt Z even def
R13415:13424 Coq.Init.Logic <> refl_equal syndef
R13415:13424 Coq.Init.Logic <> refl_equal syndef
prf 13441:13463 <> inbetween_float_NE_sign
R13494:13497 compcert.flocq.Core.Generic_fmt <> cexp def
R13509:13509 compcert.flocq.Calc.Round <> x var
R13504:13507 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R13499:13502 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R13551:13556 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13584:13586 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13557:13561 compcert.flocq.Core.Generic_fmt <> round def
R13583:13583 compcert.flocq.Calc.Round <> x var
R13573:13581 compcert.flocq.Core.Round_NE <> ZnearestE syndef
R13568:13571 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R13563:13566 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R13587:13589 compcert.flocq.Core.Defs <> F2R def
R13592:13596 compcert.flocq.Core.Defs <> Float constr
R13674:13674 compcert.flocq.Calc.Round <> e var
R13604:13612 compcert.flocq.Core.Zaux <> cond_Zopp def
R13630:13638 compcert.flocq.Calc.Round <> cond_incr def
R13670:13670 compcert.flocq.Calc.Round <> m var
R13641:13647 compcert.flocq.Calc.Round <> round_N def
R13667:13667 compcert.flocq.Calc.Round <> l var
R13650:13653 Coq.Init.Datatypes <> negb def
R13656:13661 Coq.ZArith.BinInt Z even def
R13663:13663 compcert.flocq.Calc.Round <> m var
R13615:13622 compcert.flocq.Core.Raux <> Rlt_bool def
R13624:13624 compcert.flocq.Calc.Round <> x var
R13598:13601 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R13516:13530 compcert.flocq.Calc.Bracket <> inbetween_float def
R13550:13550 compcert.flocq.Calc.Round <> l var
R13542:13545 Coq.Reals.Rbasic_fun <> Rabs def
R13547:13547 compcert.flocq.Calc.Round <> x var
R13539:13539 compcert.flocq.Calc.Round <> e var
R13537:13537 compcert.flocq.Calc.Round <> m var
R13532:13535 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R13747:13755 compcert.flocq.Calc.Round <> cond_incr def
R13787:13787 compcert.flocq.Calc.Round <> m var
R13758:13764 compcert.flocq.Calc.Round <> round_N def
R13784:13784 compcert.flocq.Calc.Round <> l var
R13767:13770 Coq.Init.Datatypes <> negb def
R13773:13778 Coq.ZArith.BinInt Z even def
R13780:13780 compcert.flocq.Calc.Round <> m var
R13691:13716 compcert.flocq.Calc.Round <> inbetween_float_round_sign thm
R13747:13755 compcert.flocq.Calc.Round <> cond_incr def
R13787:13787 compcert.flocq.Calc.Round <> m var
R13758:13764 compcert.flocq.Calc.Round <> round_N def
R13784:13784 compcert.flocq.Calc.Round <> l var
R13767:13770 Coq.Init.Datatypes <> negb def
R13773:13778 Coq.ZArith.BinInt Z even def
R13780:13780 compcert.flocq.Calc.Round <> m var
R13691:13716 compcert.flocq.Calc.Round <> inbetween_float_round_sign thm
R13797:13817 compcert.flocq.Calc.Round <> inbetween_int_NE_sign thm
R13797:13817 compcert.flocq.Calc.Round <> inbetween_int_NE_sign thm
prf 13889:13904 <> inbetween_int_NA
R13945:13950 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13962:13964 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13951:13959 compcert.flocq.Core.Generic_fmt <> ZnearestA syndef
R13961:13961 compcert.flocq.Calc.Round <> x var
R13965:13973 compcert.flocq.Calc.Round <> cond_incr def
R14002:14002 compcert.flocq.Calc.Round <> m var
R13976:13982 compcert.flocq.Calc.Round <> round_N def
R13999:13999 compcert.flocq.Calc.Round <> l var
R13985:13992 Coq.ZArith.Zbool <> Zle_bool syndef
R13996:13996 compcert.flocq.Calc.Round <> m var
R13926:13938 compcert.flocq.Calc.Bracket <> inbetween_int def
R13944:13944 compcert.flocq.Calc.Round <> l var
R13942:13942 compcert.flocq.Calc.Round <> x var
R13940:13940 compcert.flocq.Calc.Round <> m var
R14080:14087 Coq.ZArith.Zbool <> Zle_bool syndef
R14091:14091 compcert.flocq.Calc.Round <> x var
R14039:14053 compcert.flocq.Calc.Round <> inbetween_int_N thm
R14080:14087 Coq.ZArith.Zbool <> Zle_bool syndef
R14091:14091 compcert.flocq.Calc.Round <> x var
R14039:14053 compcert.flocq.Calc.Round <> inbetween_int_N thm
prf 14109:14126 <> inbetween_float_NA
R14157:14160 compcert.flocq.Core.Generic_fmt <> cexp def
R14172:14172 compcert.flocq.Calc.Round <> x var
R14167:14170 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R14162:14165 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R14207:14212 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14240:14242 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14213:14217 compcert.flocq.Core.Generic_fmt <> round def
R14239:14239 compcert.flocq.Calc.Round <> x var
R14229:14237 compcert.flocq.Core.Generic_fmt <> ZnearestA syndef
R14224:14227 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R14219:14222 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R14243:14245 compcert.flocq.Core.Defs <> F2R def
R14248:14252 compcert.flocq.Core.Defs <> Float constr
R14300:14300 compcert.flocq.Calc.Round <> e var
R14260:14268 compcert.flocq.Calc.Round <> cond_incr def
R14297:14297 compcert.flocq.Calc.Round <> m var
R14271:14277 compcert.flocq.Calc.Round <> round_N def
R14294:14294 compcert.flocq.Calc.Round <> l var
R14280:14287 Coq.ZArith.Zbool <> Zle_bool syndef
R14291:14291 compcert.flocq.Calc.Round <> m var
R14254:14257 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R14179:14193 compcert.flocq.Calc.Bracket <> inbetween_float def
R14206:14206 compcert.flocq.Calc.Round <> l var
R14204:14204 compcert.flocq.Calc.Round <> x var
R14202:14202 compcert.flocq.Calc.Round <> e var
R14200:14200 compcert.flocq.Calc.Round <> m var
R14195:14198 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R14366:14374 compcert.flocq.Calc.Round <> cond_incr def
R14403:14403 compcert.flocq.Calc.Round <> m var
R14377:14383 compcert.flocq.Calc.Round <> round_N def
R14400:14400 compcert.flocq.Calc.Round <> l var
R14386:14393 Coq.ZArith.Zbool <> Zle_bool syndef
R14397:14397 compcert.flocq.Calc.Round <> m var
R14317:14337 compcert.flocq.Calc.Round <> inbetween_float_round thm
R14366:14374 compcert.flocq.Calc.Round <> cond_incr def
R14403:14403 compcert.flocq.Calc.Round <> m var
R14377:14383 compcert.flocq.Calc.Round <> round_N def
R14400:14400 compcert.flocq.Calc.Round <> l var
R14386:14393 Coq.ZArith.Zbool <> Zle_bool syndef
R14397:14397 compcert.flocq.Calc.Round <> m var
R14317:14337 compcert.flocq.Calc.Round <> inbetween_float_round thm
R14413:14428 compcert.flocq.Calc.Round <> inbetween_int_NA thm
R14413:14428 compcert.flocq.Calc.Round <> inbetween_int_NA thm
prf 14445:14465 <> inbetween_int_NA_sign
R14513:14518 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14530:14532 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14519:14527 compcert.flocq.Core.Generic_fmt <> ZnearestA syndef
R14529:14529 compcert.flocq.Calc.Round <> x var
R14533:14541 compcert.flocq.Core.Zaux <> cond_Zopp def
R14559:14567 compcert.flocq.Calc.Round <> cond_incr def
R14586:14586 compcert.flocq.Calc.Round <> m var
R14570:14576 compcert.flocq.Calc.Round <> round_N def
R14583:14583 compcert.flocq.Calc.Round <> l var
R14578:14581 Coq.Init.Datatypes <> true constr
R14544:14551 compcert.flocq.Core.Raux <> Rlt_bool def
R14553:14553 compcert.flocq.Calc.Round <> x var
R14487:14499 compcert.flocq.Calc.Bracket <> inbetween_int def
R14512:14512 compcert.flocq.Calc.Round <> l var
R14504:14507 Coq.Reals.Rbasic_fun <> Rabs def
R14509:14509 compcert.flocq.Calc.Round <> x var
R14501:14501 compcert.flocq.Calc.Round <> m var
R14660:14667 Coq.ZArith.Zbool <> Zle_bool syndef
R14623:14642 compcert.flocq.Calc.Round <> inbetween_int_N_sign thm
R14660:14667 Coq.ZArith.Zbool <> Zle_bool syndef
R14623:14642 compcert.flocq.Calc.Round <> inbetween_int_N_sign thm
R14660:14667 Coq.ZArith.Zbool <> Zle_bool syndef
R14623:14642 compcert.flocq.Calc.Round <> inbetween_int_N_sign thm
R14660:14667 Coq.ZArith.Zbool <> Zle_bool syndef
R14623:14642 compcert.flocq.Calc.Round <> inbetween_int_N_sign thm
R14693:14699 Coq.Init.Logic <> f_equal thm
R14693:14699 Coq.Init.Logic <> f_equal thm
R14716:14719 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R14716:14719 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R14733:14743 Coq.ZArith.Zorder <> Zlt_succ_le thm
R14733:14743 Coq.ZArith.Zorder <> Zlt_succ_le thm
R14752:14757 Coq.Reals.RIneq <> lt_IZR thm
R14752:14757 Coq.Reals.RIneq <> lt_IZR thm
R14785:14788 Coq.Reals.Rbasic_fun <> Rabs def
R14766:14777 Coq.Reals.RIneq <> Rle_lt_trans thm
R14785:14788 Coq.Reals.Rbasic_fun <> Rabs def
R14766:14777 Coq.Reals.RIneq <> Rle_lt_trans thm
R14800:14807 Coq.Reals.Rbasic_fun <> Rabs_pos thm
R14800:14807 Coq.Reals.Rbasic_fun <> Rabs_pos thm
R14818:14822 Coq.Init.Logic <> proj2 thm
R14825:14840 compcert.flocq.Calc.Bracket <> inbetween_bounds thm
R14818:14822 Coq.Init.Logic <> proj2 thm
R14825:14840 compcert.flocq.Calc.Bracket <> inbetween_bounds thm
R14864:14869 Coq.Reals.RIneq <> IZR_lt thm
R14864:14869 Coq.Reals.RIneq <> IZR_lt thm
R14878:14885 Coq.ZArith.Zorder <> Zlt_succ syndef
R14878:14885 Coq.ZArith.Zorder <> Zlt_succ syndef
R14896:14908 compcert.flocq.Core.Zaux <> Zle_bool_true thm
R14896:14908 compcert.flocq.Core.Zaux <> Zle_bool_true thm
R14896:14908 compcert.flocq.Core.Zaux <> Zle_bool_true thm
R14934:14947 compcert.flocq.Core.Zaux <> Zle_bool_false thm
R14934:14947 compcert.flocq.Core.Zaux <> Zle_bool_false thm
R14934:14947 compcert.flocq.Core.Zaux <> Zle_bool_false thm
R14934:14947 compcert.flocq.Core.Zaux <> Zle_bool_false thm
R14959:14966 compcert.flocq.Core.Raux <> Rlt_bool def
R14959:14966 compcert.flocq.Core.Raux <> Rlt_bool def
def 14993:15004 <> truncate_aux
R15033:15033 compcert.flocq.Calc.Round <> t var
R15020:15020 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15022:15023 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15025:15026 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15028:15028 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15049:15054 Coq.ZArith.Zpow_def <> Zpower syndef
R15061:15061 compcert.flocq.Calc.Round <> k var
R15056:15059 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R15068:15068 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15078:15079 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15089:15090 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15118:15118 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15069:15073 Coq.ZArith.BinInt Z div def
R15077:15077 compcert.flocq.Calc.Round <> p var
R15082:15084 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R15085:15085 compcert.flocq.Calc.Round <> k var
R15091:15102 compcert.flocq.Calc.Bracket <> new_location def
R15107:15110 Coq.ZArith.Zdiv <> Zmod syndef
R15114:15114 compcert.flocq.Calc.Round <> p var
R15104:15104 compcert.flocq.Calc.Round <> p var
prf 15130:15146 <> truncate_aux_comp
R15180:15185 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15196:15201 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15226:15228 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15202:15213 compcert.flocq.Calc.Round <> truncate_aux def
R15220:15222 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R15218:15219 compcert.flocq.Calc.Round <> k1 var
R15223:15224 compcert.flocq.Calc.Round <> k2 var
R15215:15215 compcert.flocq.Calc.Round <> t var
R15229:15240 compcert.flocq.Calc.Round <> truncate_aux def
R15262:15263 compcert.flocq.Calc.Round <> k2 var
R15243:15254 compcert.flocq.Calc.Round <> truncate_aux def
R15258:15259 compcert.flocq.Calc.Round <> k1 var
R15256:15256 compcert.flocq.Calc.Round <> t var
R15188:15190 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R15191:15192 compcert.flocq.Calc.Round <> k2 var
R15172:15174 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R15175:15176 compcert.flocq.Calc.Round <> k1 var
R15312:15323 compcert.flocq.Calc.Round <> truncate_aux def
R15336:15353 compcert.flocq.Calc.Bracket <> inbetween_float_ex thm
R15355:15358 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R15336:15353 compcert.flocq.Calc.Bracket <> inbetween_float_ex thm
R15355:15358 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R15392:15419 compcert.flocq.Calc.Bracket <> inbetween_float_new_location thm
R15392:15419 compcert.flocq.Calc.Bracket <> inbetween_float_new_location thm
R15457:15459 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R15462:15464 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R15457:15459 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R15462:15464 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R15480:15481 Coq.Numbers.BinNums <> Z0 constr
R15490:15492 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R15480:15481 Coq.Numbers.BinNums <> Z0 constr
R15490:15492 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R15509:15523 Coq.ZArith.Zorder <> Zplus_lt_compat syndef
R15509:15523 Coq.ZArith.Zorder <> Zplus_lt_compat syndef
R15540:15567 compcert.flocq.Calc.Bracket <> inbetween_float_new_location thm
R15540:15567 compcert.flocq.Calc.Bracket <> inbetween_float_new_location thm
R15604:15631 compcert.flocq.Calc.Bracket <> inbetween_float_new_location thm
R15604:15631 compcert.flocq.Calc.Bracket <> inbetween_float_new_location thm
R15662:15672 Coq.ZArith.BinInt <> Zplus_assoc syndef
R15662:15672 Coq.ZArith.BinInt <> Zplus_assoc syndef
R15662:15672 Coq.ZArith.BinInt <> Zplus_assoc syndef
R15691:15712 compcert.flocq.Calc.Bracket <> inbetween_float_unique thm
R15691:15712 compcert.flocq.Calc.Bracket <> inbetween_float_unique thm
R15755:15765 Coq.ZArith.BinInt <> Zplus_assoc syndef
R15755:15765 Coq.ZArith.BinInt <> Zplus_assoc syndef
R15755:15765 Coq.ZArith.BinInt <> Zplus_assoc syndef
def 15956:15963 <> truncate
R15990:15990 compcert.flocq.Calc.Round <> t var
R15977:15977 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15979:15980 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15982:15983 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15985:15985 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16032:16034 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R16007:16010 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R16027:16029 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R16013:16019 compcert.flocq.Core.Digits <> Zdigits def
R16021:16024 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R16048:16055 Coq.ZArith.Zbool <> Zlt_bool syndef
R16059:16059 compcert.flocq.Calc.Round <> k var
R16090:16090 compcert.flocq.Calc.Round <> t var
R16066:16077 compcert.flocq.Calc.Round <> truncate_aux def
R16081:16081 compcert.flocq.Calc.Round <> k var
R16079:16079 compcert.flocq.Calc.Round <> t var
prf 16102:16111 <> truncate_0
R16152:16159 compcert.flocq.Calc.Round <> truncate def
R16161:16161 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16163:16164 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16166:16167 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16169:16169 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16165:16165 compcert.flocq.Calc.Round <> e var
R16168:16168 compcert.flocq.Calc.Round <> l var
R16136:16136 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16139:16140 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16143:16144 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16147:16147 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16180:16182 Coq.Init.Logic <> ::type_scope:x_'='_x not
R16183:16184 Coq.Numbers.BinNums <> Z0 constr
R16213:16220 compcert.flocq.Calc.Round <> truncate def
R16228:16235 Coq.ZArith.Zbool <> Zlt_bool syndef
R16228:16235 Coq.ZArith.Zbool <> Zlt_bool syndef
R16251:16258 Coq.ZArith.Zdiv <> Zdiv_0_l thm
R16251:16258 Coq.ZArith.Zdiv <> Zdiv_0_l thm
R16267:16276 Coq.Init.Logic <> refl_equal syndef
R16267:16276 Coq.Init.Logic <> refl_equal syndef
prf 16293:16315 <> generic_format_truncate
R16347:16352 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16374:16381 compcert.flocq.Calc.Round <> truncate def
R16383:16383 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16385:16386 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16388:16389 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16391:16391 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16384:16384 compcert.flocq.Calc.Round <> m var
R16387:16387 compcert.flocq.Calc.Round <> e var
R16390:16390 compcert.flocq.Calc.Round <> l var
R16358:16358 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16361:16362 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16365:16366 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16369:16369 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16398:16403 compcert.flocq.Calc.Round <> format syndef
R16406:16408 compcert.flocq.Core.Defs <> F2R def
R16411:16415 compcert.flocq.Core.Defs <> Float constr
R16417:16420 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R16339:16342 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R16343:16343 compcert.flocq.Calc.Round <> m var
R16462:16469 compcert.flocq.Calc.Round <> truncate def
R16508:16510 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R16483:16486 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R16503:16505 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R16489:16495 compcert.flocq.Core.Digits <> Zdigits def
R16497:16500 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R16508:16510 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R16483:16486 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R16503:16505 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R16489:16495 compcert.flocq.Core.Digits <> Zdigits def
R16497:16500 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R16523:16535 compcert.flocq.Core.Zaux <> Zlt_bool_spec thm
R16523:16535 compcert.flocq.Core.Zaux <> Zlt_bool_spec thm
R16563:16574 compcert.flocq.Calc.Round <> truncate_aux def
R16583:16600 compcert.flocq.Core.Generic_fmt <> generic_format_F2R thm
R16583:16600 compcert.flocq.Core.Generic_fmt <> generic_format_F2R thm
R16621:16624 compcert.flocq.Core.Generic_fmt <> cexp def
R16635:16649 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R16635:16649 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R16635:16649 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R16675:16692 compcert.flocq.Core.Digits <> Zdigits_div_Zpower thm
R16675:16692 compcert.flocq.Core.Digits <> Zdigits_div_Zpower thm
R16675:16692 compcert.flocq.Core.Digits <> Zdigits_div_Zpower thm
R16675:16692 compcert.flocq.Core.Digits <> Zdigits_div_Zpower thm
R16737:16740 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R16746:16746 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R16733:16735 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R16719:16725 compcert.flocq.Core.Digits <> Zdigits def
R16727:16730 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R16742:16744 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R16771:16773 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R16757:16763 compcert.flocq.Core.Digits <> Zdigits def
R16765:16768 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R16737:16740 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R16746:16746 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R16733:16735 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R16719:16725 compcert.flocq.Core.Digits <> Zdigits def
R16727:16730 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R16742:16744 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R16771:16773 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R16757:16763 compcert.flocq.Core.Digits <> Zdigits def
R16765:16768 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R16819:16827 Coq.ZArith.BinInt Z le_refl thm
R16819:16827 Coq.ZArith.BinInt Z le_refl thm
R16847:16857 Coq.ZArith.Zorder <> Zlt_le_weak syndef
R16847:16857 Coq.ZArith.Zorder <> Zlt_le_weak syndef
R16866:16875 Coq.ZArith.Zorder <> Znot_gt_le thm
R16866:16875 Coq.ZArith.Zorder <> Znot_gt_le thm
R16899:16908 Coq.ZArith.Zdiv <> Zdiv_small thm
R16899:16908 Coq.ZArith.Zdiv <> Zdiv_small thm
R16917:16920 Coq.Init.Logic <> conj constr
R16917:16920 Coq.Init.Logic <> conj constr
R16949:16956 Coq.ZArith.BinInt Z abs_eq thm
R16949:16956 Coq.ZArith.BinInt Z abs_eq thm
R16949:16956 Coq.ZArith.BinInt Z abs_eq thm
R16980:16996 compcert.flocq.Core.Digits <> Zpower_gt_Zdigits thm
R16980:16996 compcert.flocq.Core.Digits <> Zpower_gt_Zdigits thm
R17005:17015 Coq.ZArith.Zorder <> Zlt_le_weak syndef
R17005:17015 Coq.ZArith.Zorder <> Zlt_le_weak syndef
R17028:17034 Coq.ZArith.BinInt Z gt_lt thm
R17028:17034 Coq.ZArith.BinInt Z gt_lt thm
R17053:17064 Coq.ZArith.Zorder <> Zle_lt_or_eq thm
R17053:17064 Coq.ZArith.Zorder <> Zle_lt_or_eq thm
R17094:17111 compcert.flocq.Core.Generic_fmt <> generic_format_F2R thm
R17094:17111 compcert.flocq.Core.Generic_fmt <> generic_format_F2R thm
R17121:17124 compcert.flocq.Core.Generic_fmt <> cexp def
R17135:17149 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R17135:17149 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R17135:17149 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R17135:17149 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R17165:17174 compcert.flocq.Core.Zaux <> Zgt_not_eq thm
R17165:17174 compcert.flocq.Core.Zaux <> Zgt_not_eq thm
R17227:17231 compcert.flocq.Core.Float_prop <> F2R_0 thm
R17227:17231 compcert.flocq.Core.Float_prop <> F2R_0 thm
R17227:17231 compcert.flocq.Core.Float_prop <> F2R_0 thm
R17240:17255 compcert.flocq.Core.Generic_fmt <> generic_format_0 thm
R17240:17255 compcert.flocq.Core.Generic_fmt <> generic_format_0 thm
prf 17272:17294 <> truncate_correct_format
R17321:17326 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17336:17338 compcert.flocq.Core.Defs <> F2R def
R17341:17345 compcert.flocq.Core.Defs <> Float constr
R17354:17354 compcert.flocq.Calc.Round <> e var
R17352:17352 compcert.flocq.Calc.Round <> m var
R17347:17350 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17388:17393 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17428:17433 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17455:17462 compcert.flocq.Calc.Round <> truncate def
R17464:17464 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17466:17467 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17469:17470 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17480:17480 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17465:17465 compcert.flocq.Calc.Round <> m var
R17468:17468 compcert.flocq.Calc.Round <> e var
R17471:17479 compcert.flocq.Calc.Bracket <> loc_Exact constr
R17439:17439 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17442:17443 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17446:17447 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17450:17450 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17513:17516 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R17488:17490 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17487:17487 compcert.flocq.Calc.Round <> x var
R17491:17493 compcert.flocq.Core.Defs <> F2R def
R17496:17500 compcert.flocq.Core.Defs <> Float constr
R17502:17505 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17519:17521 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17522:17525 compcert.flocq.Core.Generic_fmt <> cexp def
R17537:17537 compcert.flocq.Calc.Round <> x var
R17532:17535 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17527:17530 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17396:17399 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R17395:17395 compcert.flocq.Calc.Round <> e var
R17400:17403 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17420:17422 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R17406:17412 compcert.flocq.Core.Digits <> Zdigits def
R17419:17419 compcert.flocq.Calc.Round <> m var
R17414:17417 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17423:17423 compcert.flocq.Calc.Round <> e var
R17362:17375 compcert.flocq.Core.Generic_fmt <> generic_format def
R17387:17387 compcert.flocq.Calc.Round <> x var
R17382:17385 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17377:17380 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17315:17318 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R17314:17314 compcert.flocq.Calc.Round <> m var
R17319:17320 Coq.Numbers.BinNums <> Z0 constr
R17598:17600 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17582:17585 compcert.flocq.Core.Generic_fmt <> cexp def
R17592:17595 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17587:17590 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17601:17604 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17621:17623 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R17607:17613 compcert.flocq.Core.Digits <> Zdigits def
R17615:17618 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17598:17600 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17582:17585 compcert.flocq.Core.Generic_fmt <> cexp def
R17592:17595 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17587:17590 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17601:17604 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17621:17623 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R17607:17613 compcert.flocq.Core.Digits <> Zdigits def
R17615:17618 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17636:17639 compcert.flocq.Core.Generic_fmt <> cexp def
R17657:17671 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R17657:17671 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R17657:17671 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R17657:17671 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R17681:17688 compcert.flocq.Calc.Round <> truncate def
R17733:17735 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R17717:17720 compcert.flocq.Core.Generic_fmt <> cexp def
R17727:17730 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17722:17725 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17733:17735 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R17717:17720 compcert.flocq.Core.Generic_fmt <> cexp def
R17727:17730 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17722:17725 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17748:17760 compcert.flocq.Core.Zaux <> Zlt_bool_spec thm
R17748:17760 compcert.flocq.Core.Zaux <> Zlt_bool_spec thm
R17788:17799 compcert.flocq.Calc.Round <> truncate_aux def
R17839:17841 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17832:17834 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R17842:17845 compcert.flocq.Core.Generic_fmt <> cexp def
R17852:17855 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17847:17850 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17839:17841 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17832:17834 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R17842:17845 compcert.flocq.Core.Generic_fmt <> cexp def
R17852:17855 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17847:17850 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17885:17888 Coq.Init.Logic <> conj constr
R17885:17888 Coq.Init.Logic <> conj constr
R17916:17921 compcert.flocq.Core.Float_prop <> F2R_eq thm
R17916:17921 compcert.flocq.Core.Float_prop <> F2R_eq thm
R17933:17947 compcert.flocq.Core.Generic_fmt <> scaled_mantissa def
R17954:17957 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17949:17952 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17968:17970 Coq.Reals.Rdefinitions <> IZR def
R17973:17978 compcert.flocq.Core.Raux <> Zfloor def
R17981:17995 compcert.flocq.Core.Generic_fmt <> scaled_mantissa def
R18002:18005 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17997:18000 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17933:17947 compcert.flocq.Core.Generic_fmt <> scaled_mantissa def
R17954:17957 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17949:17952 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R17968:17970 Coq.Reals.Rdefinitions <> IZR def
R17973:17978 compcert.flocq.Core.Raux <> Zfloor def
R17981:17995 compcert.flocq.Core.Generic_fmt <> scaled_mantissa def
R18002:18005 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R17997:18000 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R18021:18030 compcert.flocq.Core.Raux <> Ztrunc_IZR thm
R18021:18030 compcert.flocq.Core.Raux <> Ztrunc_IZR thm
R18021:18030 compcert.flocq.Core.Raux <> Ztrunc_IZR thm
R18040:18054 compcert.flocq.Core.Generic_fmt <> scaled_mantissa def
R18081:18083 compcert.flocq.Core.Defs <> F2R def
R18101:18111 Coq.Reals.Raxioms <> Rmult_assoc prfax
R18117:18125 compcert.flocq.Core.Raux <> bpow_plus thm
R18101:18111 Coq.Reals.Raxioms <> Rmult_assoc prfax
R18101:18111 Coq.Reals.Raxioms <> Rmult_assoc prfax
R18117:18125 compcert.flocq.Core.Raux <> bpow_plus thm
R18117:18125 compcert.flocq.Core.Raux <> bpow_plus thm
R18144:18146 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18147:18149 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R18155:18155 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R18151:18153 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18144:18146 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18147:18149 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R18155:18155 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R18151:18153 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18221:18230 compcert.flocq.Core.Raux <> Zfloor_div thm
R18221:18230 compcert.flocq.Core.Raux <> Zfloor_div thm
R18255:18269 compcert.flocq.Core.Zaux <> Zpower_pos_gt_0 thm
R18271:18274 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R18280:18294 Coq.ZArith.Zbool <> Zle_bool_imp_le thm
R18301:18310 compcert.flocq.Core.Zaux <> radix_prop proj
R18312:18315 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R18255:18269 compcert.flocq.Core.Zaux <> Zpower_pos_gt_0 thm
R18271:18274 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R18280:18294 Coq.ZArith.Zbool <> Zle_bool_imp_le thm
R18301:18310 compcert.flocq.Core.Zaux <> radix_prop proj
R18312:18315 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R18335:18357 compcert.flocq.Core.Generic_fmt <> scaled_mantissa_generic thm
R18335:18357 compcert.flocq.Core.Generic_fmt <> scaled_mantissa_generic thm
R18335:18357 compcert.flocq.Core.Generic_fmt <> scaled_mantissa_generic thm
R18387:18396 compcert.flocq.Core.Raux <> Zfloor_IZR thm
R18387:18396 compcert.flocq.Core.Raux <> Zfloor_IZR thm
R18387:18396 compcert.flocq.Core.Raux <> Zfloor_IZR thm
R18418:18427 Coq.Init.Logic <> refl_equal syndef
R18418:18427 Coq.Init.Logic <> refl_equal syndef
prf 18467:18491 <> truncate_correct_partial'
R18524:18529 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18558:18563 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18589:18594 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18616:18623 compcert.flocq.Calc.Round <> truncate def
R18625:18625 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18627:18628 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18630:18631 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18633:18633 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18626:18626 compcert.flocq.Calc.Round <> m var
R18629:18629 compcert.flocq.Calc.Round <> e var
R18632:18632 compcert.flocq.Calc.Round <> l var
R18600:18600 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18603:18604 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18607:18608 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18611:18611 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18671:18674 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R18640:18654 compcert.flocq.Calc.Bracket <> inbetween_float def
R18667:18667 compcert.flocq.Calc.Round <> x var
R18656:18659 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R18677:18679 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18680:18683 compcert.flocq.Core.Generic_fmt <> cexp def
R18695:18695 compcert.flocq.Calc.Round <> x var
R18690:18693 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R18685:18688 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R18566:18569 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R18565:18565 compcert.flocq.Calc.Round <> e var
R18570:18573 compcert.flocq.Core.Generic_fmt <> cexp def
R18585:18585 compcert.flocq.Calc.Round <> x var
R18580:18583 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R18575:18578 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R18530:18544 compcert.flocq.Calc.Bracket <> inbetween_float def
R18557:18557 compcert.flocq.Calc.Round <> l var
R18555:18555 compcert.flocq.Calc.Round <> x var
R18553:18553 compcert.flocq.Calc.Round <> e var
R18551:18551 compcert.flocq.Calc.Round <> m var
R18546:18549 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R18517:18519 Coq.Reals.Rdefinitions <> ::R_scope:x_'<'_x not
R18520:18520 compcert.flocq.Calc.Round <> x var
R18737:18744 compcert.flocq.Calc.Round <> truncate def
R18758:18777 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R18758:18777 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R18758:18777 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R18829:18837 Coq.ZArith.Zbool <> Zlt_cases thm
R18858:18860 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R18842:18845 compcert.flocq.Core.Generic_fmt <> cexp def
R18852:18855 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R18847:18850 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R18829:18837 Coq.ZArith.Zbool <> Zlt_cases thm
R18858:18860 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R18842:18845 compcert.flocq.Core.Generic_fmt <> cexp def
R18852:18855 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R18847:18850 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R18875:18882 Coq.ZArith.Zbool <> Zlt_bool syndef
R18918:18945 compcert.flocq.Calc.Bracket <> inbetween_float_new_location thm
R18918:18945 compcert.flocq.Calc.Bracket <> inbetween_float_new_location thm
R18965:18968 Coq.Init.Logic <> conj constr
R18965:18968 Coq.Init.Logic <> conj constr
prf 18998:19021 <> truncate_correct_partial
R19054:19059 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19088:19093 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19128:19133 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19155:19162 compcert.flocq.Calc.Round <> truncate def
R19164:19164 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19166:19167 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19169:19170 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19172:19172 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19165:19165 compcert.flocq.Calc.Round <> m var
R19168:19168 compcert.flocq.Calc.Round <> e var
R19171:19171 compcert.flocq.Calc.Round <> l var
R19139:19139 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19142:19143 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19146:19147 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19150:19150 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19210:19213 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19179:19193 compcert.flocq.Calc.Bracket <> inbetween_float def
R19206:19206 compcert.flocq.Calc.Round <> x var
R19195:19198 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R19216:19218 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19219:19222 compcert.flocq.Core.Generic_fmt <> cexp def
R19234:19234 compcert.flocq.Calc.Round <> x var
R19229:19232 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R19224:19227 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R19096:19099 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R19095:19095 compcert.flocq.Calc.Round <> e var
R19100:19103 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R19120:19122 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R19106:19112 compcert.flocq.Core.Digits <> Zdigits def
R19119:19119 compcert.flocq.Calc.Round <> m var
R19114:19117 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R19123:19123 compcert.flocq.Calc.Round <> e var
R19060:19074 compcert.flocq.Calc.Bracket <> inbetween_float def
R19087:19087 compcert.flocq.Calc.Round <> l var
R19085:19085 compcert.flocq.Calc.Round <> x var
R19083:19083 compcert.flocq.Calc.Round <> e var
R19081:19081 compcert.flocq.Calc.Round <> m var
R19076:19079 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R19047:19049 Coq.Reals.Rdefinitions <> ::R_scope:x_'<'_x not
R19050:19050 compcert.flocq.Calc.Round <> x var
R19275:19299 compcert.flocq.Calc.Round <> truncate_correct_partial' thm
R19275:19299 compcert.flocq.Calc.Round <> truncate_correct_partial' thm
R19335:19354 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R19335:19354 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R19335:19354 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
R19335:19354 compcert.flocq.Calc.Round <> cexp_inbetween_float thm
prf 19417:19433 <> truncate_correct'
R19467:19472 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19501:19506 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19549:19554 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19576:19583 compcert.flocq.Calc.Round <> truncate def
R19585:19585 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19587:19588 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19590:19591 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19593:19593 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19586:19586 compcert.flocq.Calc.Round <> m var
R19589:19589 compcert.flocq.Calc.Round <> e var
R19592:19592 compcert.flocq.Calc.Round <> l var
R19560:19560 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19563:19564 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19567:19568 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19571:19571 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19631:19637 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19691:19691 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19600:19614 compcert.flocq.Calc.Bracket <> inbetween_float def
R19627:19627 compcert.flocq.Calc.Round <> x var
R19616:19619 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R19659:19663 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R19690:19690 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R19640:19642 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19643:19646 compcert.flocq.Core.Generic_fmt <> cexp def
R19658:19658 compcert.flocq.Calc.Round <> x var
R19653:19656 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R19648:19651 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R19678:19681 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19666:19668 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19669:19677 compcert.flocq.Calc.Bracket <> loc_Exact constr
R19682:19687 compcert.flocq.Calc.Round <> format syndef
R19689:19689 compcert.flocq.Calc.Round <> x var
R19532:19535 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R19509:19512 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R19508:19508 compcert.flocq.Calc.Round <> e var
R19513:19516 compcert.flocq.Core.Generic_fmt <> cexp def
R19528:19528 compcert.flocq.Calc.Round <> x var
R19523:19526 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R19518:19521 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R19537:19539 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19536:19536 compcert.flocq.Calc.Round <> l var
R19540:19548 compcert.flocq.Calc.Bracket <> loc_Exact constr
R19473:19487 compcert.flocq.Calc.Bracket <> inbetween_float def
R19500:19500 compcert.flocq.Calc.Round <> l var
R19498:19498 compcert.flocq.Calc.Round <> x var
R19496:19496 compcert.flocq.Calc.Round <> e var
R19494:19494 compcert.flocq.Calc.Round <> m var
R19489:19492 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R19459:19462 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x not
R19463:19463 compcert.flocq.Calc.Round <> x var
R19743:19751 Coq.ZArith.Zorder <> Zle_or_lt syndef
R19756:19759 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R19776:19778 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R19762:19768 compcert.flocq.Core.Digits <> Zdigits def
R19770:19773 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R19743:19751 Coq.ZArith.Zorder <> Zle_or_lt syndef
R19756:19759 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R19776:19778 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R19762:19768 compcert.flocq.Core.Digits <> Zdigits def
R19770:19773 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R19812:19835 compcert.flocq.Calc.Round <> truncate_correct_partial thm
R19812:19835 compcert.flocq.Calc.Round <> truncate_correct_partial thm
R19870:19877 compcert.flocq.Calc.Round <> truncate def
R19879:19879 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19881:19882 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19884:19885 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19887:19887 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19870:19877 compcert.flocq.Calc.Round <> truncate def
R19879:19879 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19881:19882 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19884:19885 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19887:19887 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19938:19941 Coq.Init.Logic <> conj constr
R19938:19941 Coq.Init.Logic <> conj constr
R20008:20032 compcert.flocq.Calc.Round <> truncate_correct_partial' thm
R20008:20032 compcert.flocq.Calc.Round <> truncate_correct_partial' thm
R20069:20076 compcert.flocq.Calc.Round <> truncate def
R20078:20078 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20080:20081 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20083:20084 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20086:20086 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20069:20076 compcert.flocq.Calc.Round <> truncate def
R20078:20078 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20080:20081 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20083:20084 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20086:20086 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20141:20144 Coq.Init.Logic <> conj constr
R20141:20144 Coq.Init.Logic <> conj constr
R20221:20229 Coq.ZArith.Zbool <> Zlt_cases thm
R20259:20261 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R20234:20237 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R20254:20256 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R20240:20246 compcert.flocq.Core.Digits <> Zdigits def
R20248:20251 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R20221:20229 Coq.ZArith.Zbool <> Zlt_cases thm
R20259:20261 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R20234:20237 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R20254:20256 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R20240:20246 compcert.flocq.Core.Digits <> Zdigits def
R20248:20251 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R20280:20287 Coq.ZArith.Zbool <> Zlt_bool syndef
R20318:20326 Coq.Init.Logic <> False_ind scheme
R20318:20326 Coq.Init.Logic <> False_ind scheme
R20367:20370 Coq.Init.Logic <> conj constr
R20367:20370 Coq.Init.Logic <> conj constr
R20455:20472 compcert.flocq.Core.Generic_fmt <> generic_format_F2R thm
R20455:20472 compcert.flocq.Core.Generic_fmt <> generic_format_F2R thm
R20501:20504 compcert.flocq.Core.Generic_fmt <> cexp def
R20519:20533 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R20519:20533 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R20519:20533 compcert.flocq.Core.Float_prop <> mag_F2R_Zdigits thm
R20565:20575 Coq.ZArith.Zorder <> Zlt_le_weak syndef
R20565:20575 Coq.ZArith.Zorder <> Zlt_le_weak syndef
R20593:20595 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20593:20595 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20610:20613 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R20615:20617 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R20619:20621 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R20610:20613 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R20615:20617 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R20619:20621 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R20665:20668 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x_'<'_x not
R20670:20672 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x_'<'_x not
R20645:20647 compcert.flocq.Core.Defs <> F2R def
R20650:20654 compcert.flocq.Core.Defs <> Float constr
R20656:20659 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R20673:20675 compcert.flocq.Core.Defs <> F2R def
R20678:20682 compcert.flocq.Core.Defs <> Float constr
R20691:20693 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R20684:20687 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R20665:20668 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x_'<'_x not
R20670:20672 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x_'<'_x not
R20645:20647 compcert.flocq.Core.Defs <> F2R def
R20650:20654 compcert.flocq.Core.Defs <> Float constr
R20656:20659 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R20673:20675 compcert.flocq.Core.Defs <> F2R def
R20678:20682 compcert.flocq.Core.Defs <> Float constr
R20691:20693 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R20684:20687 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R20721:20742 compcert.flocq.Calc.Bracket <> inbetween_float_bounds thm
R20721:20742 compcert.flocq.Calc.Bracket <> inbetween_float_bounds thm
R20827:20831 Coq.Init.Logic <> proj1 thm
R20807:20814 compcert.flocq.Core.Float_prop <> le_0_F2R thm
R20827:20831 Coq.Init.Logic <> proj1 thm
R20807:20814 compcert.flocq.Core.Float_prop <> le_0_F2R thm
R20869:20873 Coq.Init.Logic <> proj2 thm
R20849:20856 compcert.flocq.Core.Float_prop <> gt_0_F2R thm
R20869:20873 Coq.Init.Logic <> proj2 thm
R20849:20856 compcert.flocq.Core.Float_prop <> gt_0_F2R thm
R20973:20979 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R20982:20983 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R21011:21013 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20984:20991 compcert.flocq.Calc.Round <> truncate def
R20993:20993 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20996:20997 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20999:21000 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21010:21010 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20994:20995 Coq.Numbers.BinNums <> Z0 constr
R21001:21009 compcert.flocq.Calc.Bracket <> loc_Exact constr
R21014:21014 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21017:21018 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21021:21022 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21032:21032 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21015:21016 Coq.Numbers.BinNums <> Z0 constr
R21019:21020 compcert.flocq.Calc.Round <> e' var
R21023:21031 compcert.flocq.Calc.Bracket <> loc_Exact constr
R20973:20979 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R20982:20983 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R21011:21013 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20984:20991 compcert.flocq.Calc.Round <> truncate def
R20993:20993 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20996:20997 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20999:21000 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21010:21010 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20994:20995 Coq.Numbers.BinNums <> Z0 constr
R21001:21009 compcert.flocq.Calc.Bracket <> loc_Exact constr
R21014:21014 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21017:21018 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21021:21022 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21032:21032 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21015:21016 Coq.Numbers.BinNums <> Z0 constr
R21019:21020 compcert.flocq.Calc.Round <> e' var
R21023:21031 compcert.flocq.Calc.Bracket <> loc_Exact constr
R21049:21056 compcert.flocq.Calc.Round <> truncate def
R21059:21070 compcert.flocq.Calc.Round <> truncate_aux def
R21084:21091 Coq.ZArith.Zbool <> Zlt_bool syndef
R21084:21091 Coq.ZArith.Zbool <> Zlt_bool syndef
R21110:21117 Coq.ZArith.Zdiv <> Zdiv_0_l thm
R21120:21127 Coq.ZArith.Zdiv <> Zmod_0_l thm
R21110:21117 Coq.ZArith.Zdiv <> Zdiv_0_l thm
R21110:21117 Coq.ZArith.Zdiv <> Zdiv_0_l thm
R21120:21127 Coq.ZArith.Zdiv <> Zmod_0_l thm
R21120:21127 Coq.ZArith.Zdiv <> Zmod_0_l thm
R21161:21167 Coq.Init.Logic <> f_equal thm
R21161:21167 Coq.Init.Logic <> f_equal thm
R21185:21196 compcert.flocq.Calc.Bracket <> new_location def
R21216:21221 Coq.ZArith.BinInt Z even def
R21216:21221 Coq.ZArith.BinInt Z even def
R21326:21331 Coq.Init.Logic <> eq_sym thm
R21334:21338 compcert.flocq.Core.Float_prop <> F2R_0 thm
R21326:21331 Coq.Init.Logic <> eq_sym thm
R21334:21338 compcert.flocq.Core.Float_prop <> F2R_0 thm
R21386:21401 compcert.flocq.Core.Generic_fmt <> generic_format_0 thm
R21386:21401 compcert.flocq.Core.Generic_fmt <> generic_format_0 thm
R21416:21420 compcert.flocq.Core.Float_prop <> F2R_0 thm
R21416:21420 compcert.flocq.Core.Float_prop <> F2R_0 thm
R21416:21420 compcert.flocq.Core.Float_prop <> F2R_0 thm
R21437:21446 Coq.Reals.RIneq <> Rlt_irrefl thm
R21437:21446 Coq.Reals.RIneq <> Rlt_irrefl thm
prf 21477:21492 <> truncate_correct
R21526:21531 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21560:21565 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21617:21622 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21644:21651 compcert.flocq.Calc.Round <> truncate def
R21653:21653 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21655:21656 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21658:21659 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21661:21661 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21654:21654 compcert.flocq.Calc.Round <> m var
R21657:21657 compcert.flocq.Calc.Round <> e var
R21660:21660 compcert.flocq.Calc.Round <> l var
R21628:21628 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21631:21632 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21635:21636 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21639:21639 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21699:21705 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R21759:21759 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R21668:21682 compcert.flocq.Calc.Bracket <> inbetween_float def
R21695:21695 compcert.flocq.Calc.Round <> x var
R21684:21687 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R21727:21731 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R21758:21758 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R21708:21710 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21711:21714 compcert.flocq.Core.Generic_fmt <> cexp def
R21726:21726 compcert.flocq.Calc.Round <> x var
R21721:21724 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R21716:21719 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R21746:21749 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R21734:21736 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21737:21745 compcert.flocq.Calc.Bracket <> loc_Exact constr
R21750:21755 compcert.flocq.Calc.Round <> format syndef
R21757:21757 compcert.flocq.Calc.Round <> x var
R21600:21603 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R21568:21571 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R21567:21567 compcert.flocq.Calc.Round <> e var
R21572:21575 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R21592:21594 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R21578:21584 compcert.flocq.Core.Digits <> Zdigits def
R21591:21591 compcert.flocq.Calc.Round <> m var
R21586:21589 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R21595:21595 compcert.flocq.Calc.Round <> e var
R21605:21607 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21604:21604 compcert.flocq.Calc.Round <> l var
R21608:21616 compcert.flocq.Calc.Bracket <> loc_Exact constr
R21532:21546 compcert.flocq.Calc.Bracket <> inbetween_float def
R21559:21559 compcert.flocq.Calc.Round <> l var
R21557:21557 compcert.flocq.Calc.Round <> x var
R21555:21555 compcert.flocq.Calc.Round <> e var
R21553:21553 compcert.flocq.Calc.Round <> m var
R21548:21551 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R21518:21521 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x not
R21522:21522 compcert.flocq.Calc.Round <> x var
R21800:21816 compcert.flocq.Calc.Round <> truncate_correct' thm
R21800:21816 compcert.flocq.Calc.Round <> truncate_correct' thm
R21854:21883 compcert.flocq.Calc.Round <> cexp_inbetween_float_loc_Exact thm
R21854:21883 compcert.flocq.Calc.Round <> cexp_inbetween_float_loc_Exact thm
sec 21915:21923 Fcalc_round.Fcalc_round_fexp round_dir
var 21936:21938 Fcalc_round.Fcalc_round_fexp.round_dir rnd
R21943:21946 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21947:21947 Coq.Numbers.BinNums <> Z ind
R21942:21942 Coq.Reals.Rdefinitions <> R defax
R21972:21980 compcert.flocq.Core.Generic_fmt <> Valid_rnd class
R21982:21984 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.rnd var
var 21999:22004 Fcalc_round.Fcalc_round_fexp.round_dir choice
R22009:22012 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22021:22024 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22025:22025 Coq.Numbers.BinNums <> Z ind
R22013:22020 compcert.flocq.Calc.Bracket <> location ind
R22008:22008 Coq.Numbers.BinNums <> Z ind
var 22039:22057 Fcalc_round.Fcalc_round_fexp.round_dir inbetween_int_valid
R22098:22103 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22109:22111 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22104:22106 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.rnd var
R22108:22108 compcert.flocq.Calc.Round <> x var
R22112:22117 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.choice var
R22121:22121 compcert.flocq.Calc.Round <> l var
R22119:22119 compcert.flocq.Calc.Round <> m var
R22079:22091 compcert.flocq.Calc.Bracket <> inbetween_int def
R22097:22097 compcert.flocq.Calc.Round <> l var
R22095:22095 compcert.flocq.Calc.Round <> x var
R22093:22093 compcert.flocq.Calc.Round <> m var
prf 22133:22149 <> round_any_correct
R22201:22206 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22207:22207 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22259:22265 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22287:22289 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22266:22270 compcert.flocq.Core.Generic_fmt <> round def
R22286:22286 compcert.flocq.Calc.Round <> x var
R22282:22284 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.rnd var
R22277:22280 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R22272:22275 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R22290:22292 compcert.flocq.Core.Defs <> F2R def
R22295:22299 compcert.flocq.Core.Defs <> Float constr
R22319:22319 compcert.flocq.Calc.Round <> e var
R22307:22312 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.choice var
R22316:22316 compcert.flocq.Calc.Round <> l var
R22314:22314 compcert.flocq.Calc.Round <> m var
R22301:22304 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R22228:22232 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R22258:22258 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R22209:22211 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22208:22208 compcert.flocq.Calc.Round <> e var
R22212:22215 compcert.flocq.Core.Generic_fmt <> cexp def
R22227:22227 compcert.flocq.Calc.Round <> x var
R22222:22225 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R22217:22220 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R22246:22249 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R22234:22236 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22233:22233 compcert.flocq.Calc.Round <> l var
R22237:22245 compcert.flocq.Calc.Bracket <> loc_Exact constr
R22250:22255 compcert.flocq.Calc.Round <> format syndef
R22257:22257 compcert.flocq.Calc.Round <> x var
R22173:22187 compcert.flocq.Calc.Bracket <> inbetween_float def
R22200:22200 compcert.flocq.Calc.Round <> l var
R22198:22198 compcert.flocq.Calc.Round <> x var
R22196:22196 compcert.flocq.Calc.Round <> e var
R22194:22194 compcert.flocq.Calc.Round <> m var
R22189:22192 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R22428:22448 compcert.flocq.Calc.Round <> inbetween_float_round thm
R22428:22448 compcert.flocq.Calc.Round <> inbetween_float_round thm
R22473:22491 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.inbetween_int_valid var
R22473:22491 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.inbetween_int_valid var
R22555:22560 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.choice var
R22564:22572 compcert.flocq.Calc.Bracket <> loc_Exact constr
R22555:22560 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.choice var
R22564:22572 compcert.flocq.Calc.Bracket <> loc_Exact constr
R22603:22615 compcert.flocq.Core.Generic_fmt <> round_generic thm
R22603:22615 compcert.flocq.Core.Generic_fmt <> round_generic thm
R22632:22639 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R22641:22643 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.rnd var
R22632:22639 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R22641:22643 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.rnd var
R22632:22639 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R22641:22643 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.rnd var
R22660:22678 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.inbetween_int_valid var
R22660:22678 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.inbetween_int_valid var
prf 22778:22800 <> round_trunc_any_correct
R22834:22839 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22868:22873 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22925:22930 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22952:22954 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22931:22935 compcert.flocq.Core.Generic_fmt <> round def
R22951:22951 compcert.flocq.Calc.Round <> x var
R22947:22949 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.rnd var
R22942:22945 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R22937:22940 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R22976:22983 compcert.flocq.Calc.Round <> truncate def
R22985:22985 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22987:22988 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22990:22991 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22993:22993 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22986:22986 compcert.flocq.Calc.Round <> m var
R22989:22989 compcert.flocq.Calc.Round <> e var
R22992:22992 compcert.flocq.Calc.Round <> l var
R22960:22960 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22963:22964 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22967:22968 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22971:22971 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22998:23000 compcert.flocq.Core.Defs <> F2R def
R23003:23007 compcert.flocq.Core.Defs <> Float constr
R23015:23020 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.choice var
R23009:23012 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R22908:22911 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R22876:22879 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R22875:22875 compcert.flocq.Calc.Round <> e var
R22880:22883 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R22900:22902 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R22886:22892 compcert.flocq.Core.Digits <> Zdigits def
R22899:22899 compcert.flocq.Calc.Round <> m var
R22894:22897 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R22903:22903 compcert.flocq.Calc.Round <> e var
R22913:22915 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22912:22912 compcert.flocq.Calc.Round <> l var
R22916:22924 compcert.flocq.Calc.Bracket <> loc_Exact constr
R22840:22854 compcert.flocq.Calc.Bracket <> inbetween_float def
R22867:22867 compcert.flocq.Calc.Round <> l var
R22865:22865 compcert.flocq.Calc.Round <> x var
R22863:22863 compcert.flocq.Calc.Round <> e var
R22861:22861 compcert.flocq.Calc.Round <> m var
R22856:22859 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R22826:22829 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x not
R22830:22830 compcert.flocq.Calc.Round <> x var
R23078:23093 compcert.flocq.Calc.Round <> truncate_correct thm
R23078:23093 compcert.flocq.Calc.Round <> truncate_correct thm
R23124:23131 compcert.flocq.Calc.Round <> truncate def
R23133:23133 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23135:23136 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23138:23139 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23141:23141 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23124:23131 compcert.flocq.Calc.Round <> truncate def
R23133:23133 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23135:23136 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23138:23139 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23141:23141 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23190:23206 compcert.flocq.Calc.Round <> round_any_correct thm
R23190:23206 compcert.flocq.Calc.Round <> round_any_correct thm
prf 23223:23246 <> round_trunc_any_correct'
R23280:23285 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23314:23319 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23362:23367 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23389:23391 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23368:23372 compcert.flocq.Core.Generic_fmt <> round def
R23388:23388 compcert.flocq.Calc.Round <> x var
R23384:23386 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.rnd var
R23379:23382 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R23374:23377 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R23413:23420 compcert.flocq.Calc.Round <> truncate def
R23422:23422 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23424:23425 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23427:23428 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23430:23430 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23423:23423 compcert.flocq.Calc.Round <> m var
R23426:23426 compcert.flocq.Calc.Round <> e var
R23429:23429 compcert.flocq.Calc.Round <> l var
R23397:23397 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23400:23401 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23404:23405 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23408:23408 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23435:23437 compcert.flocq.Core.Defs <> F2R def
R23440:23444 compcert.flocq.Core.Defs <> Float constr
R23452:23457 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir.choice var
R23446:23449 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R23345:23348 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R23322:23325 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R23321:23321 compcert.flocq.Calc.Round <> e var
R23326:23329 compcert.flocq.Core.Generic_fmt <> cexp def
R23341:23341 compcert.flocq.Calc.Round <> x var
R23336:23339 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R23331:23334 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R23350:23352 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23349:23349 compcert.flocq.Calc.Round <> l var
R23353:23361 compcert.flocq.Calc.Bracket <> loc_Exact constr
R23286:23300 compcert.flocq.Calc.Bracket <> inbetween_float def
R23313:23313 compcert.flocq.Calc.Round <> l var
R23311:23311 compcert.flocq.Calc.Round <> x var
R23309:23309 compcert.flocq.Calc.Round <> e var
R23307:23307 compcert.flocq.Calc.Round <> m var
R23302:23305 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R23272:23275 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x not
R23276:23276 compcert.flocq.Calc.Round <> x var
R23515:23531 compcert.flocq.Calc.Round <> truncate_correct' thm
R23515:23531 compcert.flocq.Calc.Round <> truncate_correct' thm
R23562:23569 compcert.flocq.Calc.Round <> truncate def
R23571:23571 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23573:23574 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23576:23577 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23579:23579 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23562:23569 compcert.flocq.Calc.Round <> truncate def
R23571:23571 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23573:23574 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23576:23577 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23579:23579 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23625:23641 compcert.flocq.Calc.Round <> round_any_correct thm
R23625:23641 compcert.flocq.Calc.Round <> round_any_correct thm
R23654:23662 compcert.flocq.Calc.Round Fcalc_round.Fcalc_round_fexp.round_dir <> sec
sec 23674:23687 Fcalc_round.Fcalc_round_fexp round_dir_sign
var 23700:23702 Fcalc_round.Fcalc_round_fexp.round_dir_sign rnd
R23707:23710 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23711:23711 Coq.Numbers.BinNums <> Z ind
R23706:23706 Coq.Reals.Rdefinitions <> R defax
R23736:23744 compcert.flocq.Core.Generic_fmt <> Valid_rnd class
R23746:23748 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.rnd var
var 23763:23768 Fcalc_round.Fcalc_round_fexp.round_dir_sign choice
R23776:23779 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23781:23784 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23793:23796 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23797:23797 Coq.Numbers.BinNums <> Z ind
R23785:23792 compcert.flocq.Calc.Bracket <> location ind
R23780:23780 Coq.Numbers.BinNums <> Z ind
R23772:23775 Coq.Init.Datatypes <> bool ind
var 23811:23829 Fcalc_round.Fcalc_round_fexp.round_dir_sign inbetween_int_valid
R23877:23882 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23888:23890 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23883:23885 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.rnd var
R23887:23887 compcert.flocq.Calc.Round <> x var
R23891:23899 compcert.flocq.Core.Zaux <> cond_Zopp def
R23917:23922 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.choice var
R23941:23941 compcert.flocq.Calc.Round <> l var
R23939:23939 compcert.flocq.Calc.Round <> m var
R23925:23932 compcert.flocq.Core.Raux <> Rlt_bool def
R23934:23934 compcert.flocq.Calc.Round <> x var
R23902:23909 compcert.flocq.Core.Raux <> Rlt_bool def
R23911:23911 compcert.flocq.Calc.Round <> x var
R23851:23863 compcert.flocq.Calc.Bracket <> inbetween_int def
R23876:23876 compcert.flocq.Calc.Round <> l var
R23868:23871 Coq.Reals.Rbasic_fun <> Rabs def
R23873:23873 compcert.flocq.Calc.Round <> x var
R23865:23865 compcert.flocq.Calc.Round <> m var
prf 23954:23975 <> round_sign_any_correct
R24034:24039 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24040:24040 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24092:24098 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24120:24122 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24099:24103 compcert.flocq.Core.Generic_fmt <> round def
R24119:24119 compcert.flocq.Calc.Round <> x var
R24115:24117 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.rnd var
R24110:24113 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R24105:24108 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R24123:24125 compcert.flocq.Core.Defs <> F2R def
R24128:24132 compcert.flocq.Core.Defs <> Float constr
R24194:24194 compcert.flocq.Calc.Round <> e var
R24140:24148 compcert.flocq.Core.Zaux <> cond_Zopp def
R24166:24171 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.choice var
R24190:24190 compcert.flocq.Calc.Round <> l var
R24188:24188 compcert.flocq.Calc.Round <> m var
R24174:24181 compcert.flocq.Core.Raux <> Rlt_bool def
R24183:24183 compcert.flocq.Calc.Round <> x var
R24151:24158 compcert.flocq.Core.Raux <> Rlt_bool def
R24160:24160 compcert.flocq.Calc.Round <> x var
R24134:24137 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R24061:24065 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R24091:24091 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R24042:24044 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24041:24041 compcert.flocq.Calc.Round <> e var
R24045:24048 compcert.flocq.Core.Generic_fmt <> cexp def
R24060:24060 compcert.flocq.Calc.Round <> x var
R24055:24058 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R24050:24053 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R24079:24082 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R24067:24069 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24066:24066 compcert.flocq.Calc.Round <> l var
R24070:24078 compcert.flocq.Calc.Bracket <> loc_Exact constr
R24083:24088 compcert.flocq.Calc.Round <> format syndef
R24090:24090 compcert.flocq.Calc.Round <> x var
R23999:24013 compcert.flocq.Calc.Bracket <> inbetween_float def
R24033:24033 compcert.flocq.Calc.Round <> l var
R24025:24028 Coq.Reals.Rbasic_fun <> Rabs def
R24030:24030 compcert.flocq.Calc.Round <> x var
R24022:24022 compcert.flocq.Calc.Round <> e var
R24020:24020 compcert.flocq.Calc.Round <> m var
R24015:24018 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R24303:24328 compcert.flocq.Calc.Round <> inbetween_float_round_sign thm
R24303:24328 compcert.flocq.Calc.Round <> inbetween_float_round_sign thm
R24353:24371 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.inbetween_int_valid var
R24353:24371 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.inbetween_int_valid var
R24435:24440 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.choice var
R24459:24467 compcert.flocq.Calc.Bracket <> loc_Exact constr
R24443:24450 compcert.flocq.Core.Raux <> Rlt_bool def
R24435:24440 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.choice var
R24459:24467 compcert.flocq.Calc.Bracket <> loc_Exact constr
R24443:24450 compcert.flocq.Core.Raux <> Rlt_bool def
R24491:24494 Coq.Reals.Rbasic_fun <> Rabs def
R24512:24520 Coq.Reals.Rbasic_fun <> Rcase_abs thm
R24512:24520 Coq.Reals.Rbasic_fun <> Rcase_abs thm
R24545:24557 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R24545:24557 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R24545:24557 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R24590:24597 compcert.flocq.Core.Float_prop <> F2R_Zopp thm
R24590:24597 compcert.flocq.Core.Float_prop <> F2R_Zopp thm
R24590:24597 compcert.flocq.Core.Float_prop <> F2R_Zopp thm
R24614:24628 Coq.Reals.RIneq <> Ropp_involutive thm
R24614:24628 Coq.Reals.RIneq <> Ropp_involutive thm
R24614:24628 Coq.Reals.RIneq <> Ropp_involutive thm
R24637:24649 compcert.flocq.Core.Generic_fmt <> round_generic thm
R24637:24649 compcert.flocq.Core.Generic_fmt <> round_generic thm
R24662:24675 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R24662:24675 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R24662:24675 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R24662:24675 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R24709:24721 compcert.flocq.Core.Generic_fmt <> round_generic thm
R24709:24721 compcert.flocq.Core.Generic_fmt <> round_generic thm
R24734:24739 Coq.Reals.RIneq <> Rge_le thm
R24734:24739 Coq.Reals.RIneq <> Rge_le thm
R24758:24770 compcert.flocq.Core.Raux <> Rlt_bool_spec thm
R24758:24770 compcert.flocq.Core.Raux <> Rlt_bool_spec thm
R24803:24811 Coq.ZArith.BinInt Z opp_inj thm
R24803:24811 Coq.ZArith.BinInt Z opp_inj thm
R24825:24827 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24822:24823 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R24828:24836 compcert.flocq.Core.Zaux <> cond_Zopp def
R24844:24849 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.choice var
R24858:24866 compcert.flocq.Calc.Bracket <> loc_Exact constr
R24851:24854 Coq.Init.Datatypes <> true constr
R24838:24841 Coq.Init.Datatypes <> true constr
R24825:24827 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24822:24823 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R24828:24836 compcert.flocq.Core.Zaux <> cond_Zopp def
R24844:24849 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.choice var
R24858:24866 compcert.flocq.Calc.Bracket <> loc_Exact constr
R24851:24854 Coq.Init.Datatypes <> true constr
R24838:24841 Coq.Init.Datatypes <> true constr
R24885:24892 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R24899:24899 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R24894:24896 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.rnd var
R24885:24892 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R24899:24899 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R24894:24896 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.rnd var
R24885:24892 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R24899:24899 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R24894:24896 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.rnd var
R24926:24928 Coq.Reals.Rdefinitions <> ::R_scope:x_'<'_x not
R24918:24920 Coq.Reals.Rdefinitions <> IZR def
R24923:24923 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R24926:24928 Coq.Reals.Rdefinitions <> ::R_scope:x_'<'_x not
R24918:24920 Coq.Reals.Rdefinitions <> IZR def
R24923:24923 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R24943:24949 Coq.Reals.RIneq <> opp_IZR thm
R24943:24949 Coq.Reals.RIneq <> opp_IZR thm
R24943:24949 Coq.Reals.RIneq <> opp_IZR thm
R24958:24979 Coq.Reals.RIneq <> Ropp_lt_gt_0_contravar thm
R24958:24979 Coq.Reals.RIneq <> Ropp_lt_gt_0_contravar thm
R24988:24993 Coq.Reals.RIneq <> IZR_lt thm
R24988:24993 Coq.Reals.RIneq <> IZR_lt thm
R25016:25019 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R25002:25009 compcert.flocq.Core.Float_prop <> gt_0_F2R thm
R25016:25019 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R25002:25009 compcert.flocq.Core.Float_prop <> gt_0_F2R thm
R25044:25054 Coq.Reals.Rbasic_fun <> Rabs_pos_lt thm
R25044:25054 Coq.Reals.Rbasic_fun <> Rabs_pos_lt thm
R25067:25076 Coq.Reals.RIneq <> Rlt_not_eq thm
R25067:25076 Coq.Reals.RIneq <> Rlt_not_eq thm
R25090:25102 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R25090:25102 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R25090:25102 compcert.flocq.Core.Raux <> Rlt_bool_true thm
R25126:25144 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.inbetween_int_valid var
R25126:25144 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.inbetween_int_valid var
R25168:25176 Coq.Reals.Rbasic_fun <> Rabs_left thm
R25168:25176 Coq.Reals.Rbasic_fun <> Rabs_left thm
R25168:25176 Coq.Reals.Rbasic_fun <> Rabs_left thm
R25202:25208 Coq.Reals.RIneq <> opp_IZR thm
R25202:25208 Coq.Reals.RIneq <> opp_IZR thm
R25202:25208 Coq.Reals.RIneq <> opp_IZR thm
R25217:25231 Coq.Reals.RIneq <> Ropp_involutive thm
R25217:25231 Coq.Reals.RIneq <> Ropp_involutive thm
R25251:25253 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25254:25262 compcert.flocq.Core.Zaux <> cond_Zopp def
R25271:25276 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.choice var
R25286:25294 compcert.flocq.Calc.Bracket <> loc_Exact constr
R25278:25282 Coq.Init.Datatypes <> false constr
R25264:25268 Coq.Init.Datatypes <> false constr
R25251:25253 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25254:25262 compcert.flocq.Core.Zaux <> cond_Zopp def
R25271:25276 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.choice var
R25286:25294 compcert.flocq.Calc.Bracket <> loc_Exact constr
R25278:25282 Coq.Init.Datatypes <> false constr
R25264:25268 Coq.Init.Datatypes <> false constr
R25313:25320 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R25322:25324 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.rnd var
R25313:25320 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R25322:25324 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.rnd var
R25313:25320 compcert.flocq.Core.Generic_fmt <> Zrnd_IZR meth
R25322:25324 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.rnd var
R25344:25347 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x not
R25348:25350 Coq.Reals.Rdefinitions <> IZR def
R25344:25347 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x not
R25348:25350 Coq.Reals.Rdefinitions <> IZR def
R25364:25369 Coq.Reals.RIneq <> IZR_le thm
R25364:25369 Coq.Reals.RIneq <> IZR_le thm
R25392:25395 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R25378:25385 compcert.flocq.Core.Float_prop <> ge_0_F2R thm
R25392:25395 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R25378:25385 compcert.flocq.Core.Float_prop <> ge_0_F2R thm
R25420:25427 Coq.Reals.Rbasic_fun <> Rabs_pos thm
R25420:25427 Coq.Reals.Rbasic_fun <> Rabs_pos thm
R25441:25454 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R25441:25454 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R25441:25454 compcert.flocq.Core.Raux <> Rlt_bool_false thm
R25478:25496 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.inbetween_int_valid var
R25478:25496 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.inbetween_int_valid var
R25522:25532 Coq.Reals.Rbasic_fun <> Rabs_pos_eq thm
R25522:25532 Coq.Reals.Rbasic_fun <> Rabs_pos_eq thm
prf 25615:25643 <> round_trunc_sign_any_correct'
R25702:25707 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25750:25755 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25777:25779 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25756:25760 compcert.flocq.Core.Generic_fmt <> round def
R25776:25776 compcert.flocq.Calc.Round <> x var
R25772:25774 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.rnd var
R25767:25770 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R25762:25765 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R25801:25808 compcert.flocq.Calc.Round <> truncate def
R25810:25810 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25812:25813 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25815:25816 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25818:25818 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25811:25811 compcert.flocq.Calc.Round <> m var
R25814:25814 compcert.flocq.Calc.Round <> e var
R25817:25817 compcert.flocq.Calc.Round <> l var
R25785:25785 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25788:25789 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25792:25793 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25796:25796 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25823:25825 compcert.flocq.Core.Defs <> F2R def
R25828:25832 compcert.flocq.Core.Defs <> Float constr
R25840:25848 compcert.flocq.Core.Zaux <> cond_Zopp def
R25866:25871 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.choice var
R25874:25881 compcert.flocq.Core.Raux <> Rlt_bool def
R25883:25883 compcert.flocq.Calc.Round <> x var
R25851:25858 compcert.flocq.Core.Raux <> Rlt_bool def
R25860:25860 compcert.flocq.Calc.Round <> x var
R25834:25837 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R25733:25736 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R25710:25713 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R25709:25709 compcert.flocq.Calc.Round <> e var
R25714:25717 compcert.flocq.Core.Generic_fmt <> cexp def
R25729:25729 compcert.flocq.Calc.Round <> x var
R25724:25727 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R25719:25722 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R25738:25740 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25737:25737 compcert.flocq.Calc.Round <> l var
R25741:25749 compcert.flocq.Calc.Bracket <> loc_Exact constr
R25667:25681 compcert.flocq.Calc.Bracket <> inbetween_float def
R25701:25701 compcert.flocq.Calc.Round <> l var
R25693:25696 Coq.Reals.Rbasic_fun <> Rabs def
R25698:25698 compcert.flocq.Calc.Round <> x var
R25690:25690 compcert.flocq.Calc.Round <> e var
R25688:25688 compcert.flocq.Calc.Round <> m var
R25683:25686 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R25941:25948 compcert.flocq.Core.Generic_fmt <> cexp_abs thm
R25941:25948 compcert.flocq.Core.Generic_fmt <> cexp_abs thm
R25941:25948 compcert.flocq.Core.Generic_fmt <> cexp_abs thm
R25969:25985 compcert.flocq.Calc.Round <> truncate_correct' thm
R26003:26010 Coq.Reals.Rbasic_fun <> Rabs_pos thm
R25988:25991 Coq.Reals.Rbasic_fun <> Rabs def
R25969:25985 compcert.flocq.Calc.Round <> truncate_correct' thm
R26003:26010 Coq.Reals.Rbasic_fun <> Rabs_pos thm
R25988:25991 Coq.Reals.Rbasic_fun <> Rabs def
R26033:26040 compcert.flocq.Calc.Round <> truncate def
R26042:26042 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26044:26045 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26047:26048 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26050:26050 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26033:26040 compcert.flocq.Calc.Round <> truncate def
R26042:26042 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26044:26045 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26047:26048 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26050:26050 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26092:26113 compcert.flocq.Calc.Round <> round_sign_any_correct thm
R26092:26113 compcert.flocq.Calc.Round <> round_sign_any_correct thm
R26176:26183 compcert.flocq.Core.Generic_fmt <> cexp_abs thm
R26176:26183 compcert.flocq.Core.Generic_fmt <> cexp_abs thm
R26176:26183 compcert.flocq.Core.Generic_fmt <> cexp_abs thm
R26200:26203 Coq.Init.Logic <> conj constr
R26200:26203 Coq.Init.Logic <> conj constr
R26220:26241 compcert.flocq.Core.Generic_fmt <> generic_format_abs_inv thm
R26220:26241 compcert.flocq.Core.Generic_fmt <> generic_format_abs_inv thm
prf 26258:26285 <> round_trunc_sign_any_correct
R26344:26349 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26401:26406 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26428:26430 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26407:26411 compcert.flocq.Core.Generic_fmt <> round def
R26427:26427 compcert.flocq.Calc.Round <> x var
R26423:26425 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.rnd var
R26418:26421 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R26413:26416 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R26452:26459 compcert.flocq.Calc.Round <> truncate def
R26461:26461 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26463:26464 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26466:26467 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26469:26469 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26462:26462 compcert.flocq.Calc.Round <> m var
R26465:26465 compcert.flocq.Calc.Round <> e var
R26468:26468 compcert.flocq.Calc.Round <> l var
R26436:26436 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26439:26440 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26443:26444 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26447:26447 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26474:26476 compcert.flocq.Core.Defs <> F2R def
R26479:26483 compcert.flocq.Core.Defs <> Float constr
R26491:26499 compcert.flocq.Core.Zaux <> cond_Zopp def
R26517:26522 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.round_dir_sign.choice var
R26525:26532 compcert.flocq.Core.Raux <> Rlt_bool def
R26534:26534 compcert.flocq.Calc.Round <> x var
R26502:26509 compcert.flocq.Core.Raux <> Rlt_bool def
R26511:26511 compcert.flocq.Calc.Round <> x var
R26485:26488 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R26384:26387 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R26352:26355 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R26351:26351 compcert.flocq.Calc.Round <> e var
R26356:26359 compcert.flocq.Calc.Round <> Fcalc_round.Fcalc_round_fexp.fexp var
R26376:26378 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R26362:26368 compcert.flocq.Core.Digits <> Zdigits def
R26375:26375 compcert.flocq.Calc.Round <> m var
R26370:26373 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R26379:26379 compcert.flocq.Calc.Round <> e var
R26389:26391 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26388:26388 compcert.flocq.Calc.Round <> l var
R26392:26400 compcert.flocq.Calc.Bracket <> loc_Exact constr
R26309:26323 compcert.flocq.Calc.Bracket <> inbetween_float def
R26343:26343 compcert.flocq.Calc.Round <> l var
R26335:26338 Coq.Reals.Rbasic_fun <> Rabs def
R26340:26340 compcert.flocq.Calc.Round <> x var
R26332:26332 compcert.flocq.Calc.Round <> e var
R26330:26330 compcert.flocq.Calc.Round <> m var
R26325:26328 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R26587:26615 compcert.flocq.Calc.Round <> round_trunc_sign_any_correct' thm
R26587:26615 compcert.flocq.Calc.Round <> round_trunc_sign_any_correct' thm
R26644:26651 compcert.flocq.Core.Generic_fmt <> cexp_abs thm
R26644:26651 compcert.flocq.Core.Generic_fmt <> cexp_abs thm
R26644:26651 compcert.flocq.Core.Generic_fmt <> cexp_abs thm
R26660:26689 compcert.flocq.Calc.Round <> cexp_inbetween_float_loc_Exact thm
R26660:26689 compcert.flocq.Calc.Round <> cexp_inbetween_float_loc_Exact thm
R26723:26730 Coq.Reals.Rbasic_fun <> Rabs_pos thm
R26723:26730 Coq.Reals.Rbasic_fun <> Rabs_pos thm
R26743:26756 compcert.flocq.Calc.Round Fcalc_round.Fcalc_round_fexp.round_dir_sign <> sec
def 26844:26859 <> round_DN_correct
R26866:26882 compcert.flocq.Calc.Round <> round_any_correct thm
R26901:26916 compcert.flocq.Calc.Round <> inbetween_int_DN thm
R26898:26898 compcert.flocq.Calc.Round <> m var
def 26931:26952 <> round_trunc_DN_correct
R26959:26981 compcert.flocq.Calc.Round <> round_trunc_any_correct thm
R27000:27015 compcert.flocq.Calc.Round <> inbetween_int_DN thm
R26997:26997 compcert.flocq.Calc.Round <> m var
def 27030:27052 <> round_trunc_DN_correct'
R27059:27082 compcert.flocq.Calc.Round <> round_trunc_any_correct' thm
R27101:27116 compcert.flocq.Calc.Round <> inbetween_int_DN thm
R27098:27098 compcert.flocq.Calc.Round <> m var
def 27131:27151 <> round_sign_DN_correct
R27158:27179 compcert.flocq.Calc.Round <> round_sign_any_correct thm
R27230:27250 compcert.flocq.Calc.Round <> inbetween_int_DN_sign thm
R27197:27205 compcert.flocq.Calc.Round <> cond_incr def
R27227:27227 compcert.flocq.Calc.Round <> m var
R27208:27220 compcert.flocq.Calc.Round <> round_sign_DN def
R27224:27224 compcert.flocq.Calc.Round <> l var
R27222:27222 compcert.flocq.Calc.Round <> s var
def 27265:27291 <> round_trunc_sign_DN_correct
R27298:27325 compcert.flocq.Calc.Round <> round_trunc_sign_any_correct thm
R27376:27396 compcert.flocq.Calc.Round <> inbetween_int_DN_sign thm
R27343:27351 compcert.flocq.Calc.Round <> cond_incr def
R27373:27373 compcert.flocq.Calc.Round <> m var
R27354:27366 compcert.flocq.Calc.Round <> round_sign_DN def
R27370:27370 compcert.flocq.Calc.Round <> l var
R27368:27368 compcert.flocq.Calc.Round <> s var
def 27411:27438 <> round_trunc_sign_DN_correct'
R27445:27473 compcert.flocq.Calc.Round <> round_trunc_sign_any_correct' thm
R27524:27544 compcert.flocq.Calc.Round <> inbetween_int_DN_sign thm
R27491:27499 compcert.flocq.Calc.Round <> cond_incr def
R27521:27521 compcert.flocq.Calc.Round <> m var
R27502:27514 compcert.flocq.Calc.Round <> round_sign_DN def
R27518:27518 compcert.flocq.Calc.Round <> l var
R27516:27516 compcert.flocq.Calc.Round <> s var
def 27559:27574 <> round_UP_correct
R27581:27597 compcert.flocq.Calc.Round <> round_any_correct thm
R27639:27654 compcert.flocq.Calc.Round <> inbetween_int_UP thm
R27613:27621 compcert.flocq.Calc.Round <> cond_incr def
R27636:27636 compcert.flocq.Calc.Round <> m var
R27624:27631 compcert.flocq.Calc.Round <> round_UP def
R27633:27633 compcert.flocq.Calc.Round <> l var
def 27669:27690 <> round_trunc_UP_correct
R27697:27719 compcert.flocq.Calc.Round <> round_trunc_any_correct thm
R27761:27776 compcert.flocq.Calc.Round <> inbetween_int_UP thm
R27735:27743 compcert.flocq.Calc.Round <> cond_incr def
R27758:27758 compcert.flocq.Calc.Round <> m var
R27746:27753 compcert.flocq.Calc.Round <> round_UP def
R27755:27755 compcert.flocq.Calc.Round <> l var
def 27791:27813 <> round_trunc_UP_correct'
R27820:27843 compcert.flocq.Calc.Round <> round_trunc_any_correct' thm
R27885:27900 compcert.flocq.Calc.Round <> inbetween_int_UP thm
R27859:27867 compcert.flocq.Calc.Round <> cond_incr def
R27882:27882 compcert.flocq.Calc.Round <> m var
R27870:27877 compcert.flocq.Calc.Round <> round_UP def
R27879:27879 compcert.flocq.Calc.Round <> l var
def 27915:27935 <> round_sign_UP_correct
R27942:27963 compcert.flocq.Calc.Round <> round_sign_any_correct thm
R28014:28034 compcert.flocq.Calc.Round <> inbetween_int_UP_sign thm
R27981:27989 compcert.flocq.Calc.Round <> cond_incr def
R28011:28011 compcert.flocq.Calc.Round <> m var
R27992:28004 compcert.flocq.Calc.Round <> round_sign_UP def
R28008:28008 compcert.flocq.Calc.Round <> l var
R28006:28006 compcert.flocq.Calc.Round <> s var
def 28049:28075 <> round_trunc_sign_UP_correct
R28082:28109 compcert.flocq.Calc.Round <> round_trunc_sign_any_correct thm
R28160:28180 compcert.flocq.Calc.Round <> inbetween_int_UP_sign thm
R28127:28135 compcert.flocq.Calc.Round <> cond_incr def
R28157:28157 compcert.flocq.Calc.Round <> m var
R28138:28150 compcert.flocq.Calc.Round <> round_sign_UP def
R28154:28154 compcert.flocq.Calc.Round <> l var
R28152:28152 compcert.flocq.Calc.Round <> s var
def 28195:28222 <> round_trunc_sign_UP_correct'
R28229:28257 compcert.flocq.Calc.Round <> round_trunc_sign_any_correct' thm
R28308:28328 compcert.flocq.Calc.Round <> inbetween_int_UP_sign thm
R28275:28283 compcert.flocq.Calc.Round <> cond_incr def
R28305:28305 compcert.flocq.Calc.Round <> m var
R28286:28298 compcert.flocq.Calc.Round <> round_sign_UP def
R28302:28302 compcert.flocq.Calc.Round <> l var
R28300:28300 compcert.flocq.Calc.Round <> s var
def 28343:28358 <> round_ZR_correct
R28365:28381 compcert.flocq.Calc.Round <> round_any_correct thm
R28438:28453 compcert.flocq.Calc.Round <> inbetween_int_ZR thm
R28397:28405 compcert.flocq.Calc.Round <> cond_incr def
R28435:28435 compcert.flocq.Calc.Round <> m var
R28408:28415 compcert.flocq.Calc.Round <> round_ZR def
R28432:28432 compcert.flocq.Calc.Round <> l var
R28418:28425 Coq.ZArith.Zbool <> Zlt_bool syndef
R28427:28427 compcert.flocq.Calc.Round <> m var
def 28468:28489 <> round_trunc_ZR_correct
R28496:28518 compcert.flocq.Calc.Round <> round_trunc_any_correct thm
R28575:28590 compcert.flocq.Calc.Round <> inbetween_int_ZR thm
R28534:28542 compcert.flocq.Calc.Round <> cond_incr def
R28572:28572 compcert.flocq.Calc.Round <> m var
R28545:28552 compcert.flocq.Calc.Round <> round_ZR def
R28569:28569 compcert.flocq.Calc.Round <> l var
R28555:28562 Coq.ZArith.Zbool <> Zlt_bool syndef
R28564:28564 compcert.flocq.Calc.Round <> m var
def 28605:28627 <> round_trunc_ZR_correct'
R28634:28657 compcert.flocq.Calc.Round <> round_trunc_any_correct' thm
R28714:28729 compcert.flocq.Calc.Round <> inbetween_int_ZR thm
R28673:28681 compcert.flocq.Calc.Round <> cond_incr def
R28711:28711 compcert.flocq.Calc.Round <> m var
R28684:28691 compcert.flocq.Calc.Round <> round_ZR def
R28708:28708 compcert.flocq.Calc.Round <> l var
R28694:28701 Coq.ZArith.Zbool <> Zlt_bool syndef
R28703:28703 compcert.flocq.Calc.Round <> m var
def 28744:28764 <> round_sign_ZR_correct
R28771:28792 compcert.flocq.Calc.Round <> round_sign_any_correct thm
R28813:28833 compcert.flocq.Calc.Round <> inbetween_int_ZR_sign thm
R28810:28810 compcert.flocq.Calc.Round <> m var
def 28848:28874 <> round_trunc_sign_ZR_correct
R28881:28908 compcert.flocq.Calc.Round <> round_trunc_sign_any_correct thm
R28929:28949 compcert.flocq.Calc.Round <> inbetween_int_ZR_sign thm
R28926:28926 compcert.flocq.Calc.Round <> m var
def 28964:28991 <> round_trunc_sign_ZR_correct'
R28998:29026 compcert.flocq.Calc.Round <> round_trunc_sign_any_correct' thm
R29047:29067 compcert.flocq.Calc.Round <> inbetween_int_ZR_sign thm
R29044:29044 compcert.flocq.Calc.Round <> m var
def 29082:29097 <> round_NE_correct
R29104:29120 compcert.flocq.Calc.Round <> round_any_correct thm
R29179:29194 compcert.flocq.Calc.Round <> inbetween_int_NE thm
R29136:29144 compcert.flocq.Calc.Round <> cond_incr def
R29176:29176 compcert.flocq.Calc.Round <> m var
R29147:29153 compcert.flocq.Calc.Round <> round_N def
R29173:29173 compcert.flocq.Calc.Round <> l var
R29156:29159 Coq.Init.Datatypes <> negb def
R29162:29167 Coq.ZArith.BinInt Z even def
R29169:29169 compcert.flocq.Calc.Round <> m var
def 29209:29230 <> round_trunc_NE_correct
R29237:29259 compcert.flocq.Calc.Round <> round_trunc_any_correct thm
R29318:29333 compcert.flocq.Calc.Round <> inbetween_int_NE thm
R29275:29283 compcert.flocq.Calc.Round <> cond_incr def
R29315:29315 compcert.flocq.Calc.Round <> m var
R29286:29292 compcert.flocq.Calc.Round <> round_N def
R29312:29312 compcert.flocq.Calc.Round <> l var
R29295:29298 Coq.Init.Datatypes <> negb def
R29301:29306 Coq.ZArith.BinInt Z even def
R29308:29308 compcert.flocq.Calc.Round <> m var
def 29348:29370 <> round_trunc_NE_correct'
R29377:29400 compcert.flocq.Calc.Round <> round_trunc_any_correct' thm
R29459:29474 compcert.flocq.Calc.Round <> inbetween_int_NE thm
R29416:29424 compcert.flocq.Calc.Round <> cond_incr def
R29456:29456 compcert.flocq.Calc.Round <> m var
R29427:29433 compcert.flocq.Calc.Round <> round_N def
R29453:29453 compcert.flocq.Calc.Round <> l var
R29436:29439 Coq.Init.Datatypes <> negb def
R29442:29447 Coq.ZArith.BinInt Z even def
R29449:29449 compcert.flocq.Calc.Round <> m var
def 29489:29509 <> round_sign_NE_correct
R29516:29537 compcert.flocq.Calc.Round <> round_sign_any_correct thm
R29598:29618 compcert.flocq.Calc.Round <> inbetween_int_NE_sign thm
R29555:29563 compcert.flocq.Calc.Round <> cond_incr def
R29595:29595 compcert.flocq.Calc.Round <> m var
R29566:29572 compcert.flocq.Calc.Round <> round_N def
R29592:29592 compcert.flocq.Calc.Round <> l var
R29575:29578 Coq.Init.Datatypes <> negb def
R29581:29586 Coq.ZArith.BinInt Z even def
R29588:29588 compcert.flocq.Calc.Round <> m var
def 29633:29659 <> round_trunc_sign_NE_correct
R29666:29693 compcert.flocq.Calc.Round <> round_trunc_sign_any_correct thm
R29754:29774 compcert.flocq.Calc.Round <> inbetween_int_NE_sign thm
R29711:29719 compcert.flocq.Calc.Round <> cond_incr def
R29751:29751 compcert.flocq.Calc.Round <> m var
R29722:29728 compcert.flocq.Calc.Round <> round_N def
R29748:29748 compcert.flocq.Calc.Round <> l var
R29731:29734 Coq.Init.Datatypes <> negb def
R29737:29742 Coq.ZArith.BinInt Z even def
R29744:29744 compcert.flocq.Calc.Round <> m var
def 29789:29816 <> round_trunc_sign_NE_correct'
R29823:29851 compcert.flocq.Calc.Round <> round_trunc_sign_any_correct' thm
R29912:29932 compcert.flocq.Calc.Round <> inbetween_int_NE_sign thm
R29869:29877 compcert.flocq.Calc.Round <> cond_incr def
R29909:29909 compcert.flocq.Calc.Round <> m var
R29880:29886 compcert.flocq.Calc.Round <> round_N def
R29906:29906 compcert.flocq.Calc.Round <> l var
R29889:29892 Coq.Init.Datatypes <> negb def
R29895:29900 Coq.ZArith.BinInt Z even def
R29902:29902 compcert.flocq.Calc.Round <> m var
def 29947:29962 <> round_NA_correct
R29969:29985 compcert.flocq.Calc.Round <> round_any_correct thm
R30041:30056 compcert.flocq.Calc.Round <> inbetween_int_NA thm
R30001:30009 compcert.flocq.Calc.Round <> cond_incr def
R30038:30038 compcert.flocq.Calc.Round <> m var
R30012:30018 compcert.flocq.Calc.Round <> round_N def
R30035:30035 compcert.flocq.Calc.Round <> l var
R30021:30028 Coq.ZArith.Zbool <> Zle_bool syndef
R30032:30032 compcert.flocq.Calc.Round <> m var
def 30071:30092 <> round_trunc_NA_correct
R30099:30121 compcert.flocq.Calc.Round <> round_trunc_any_correct thm
R30177:30192 compcert.flocq.Calc.Round <> inbetween_int_NA thm
R30137:30145 compcert.flocq.Calc.Round <> cond_incr def
R30174:30174 compcert.flocq.Calc.Round <> m var
R30148:30154 compcert.flocq.Calc.Round <> round_N def
R30171:30171 compcert.flocq.Calc.Round <> l var
R30157:30164 Coq.ZArith.Zbool <> Zle_bool syndef
R30168:30168 compcert.flocq.Calc.Round <> m var
def 30207:30229 <> round_trunc_NA_correct'
R30236:30259 compcert.flocq.Calc.Round <> round_trunc_any_correct' thm
R30315:30330 compcert.flocq.Calc.Round <> inbetween_int_NA thm
R30275:30283 compcert.flocq.Calc.Round <> cond_incr def
R30312:30312 compcert.flocq.Calc.Round <> m var
R30286:30292 compcert.flocq.Calc.Round <> round_N def
R30309:30309 compcert.flocq.Calc.Round <> l var
R30295:30302 Coq.ZArith.Zbool <> Zle_bool syndef
R30306:30306 compcert.flocq.Calc.Round <> m var
def 30345:30365 <> round_sign_NA_correct
R30372:30393 compcert.flocq.Calc.Round <> round_sign_any_correct thm
R30441:30461 compcert.flocq.Calc.Round <> inbetween_int_NA_sign thm
R30411:30419 compcert.flocq.Calc.Round <> cond_incr def
R30438:30438 compcert.flocq.Calc.Round <> m var
R30422:30428 compcert.flocq.Calc.Round <> round_N def
R30435:30435 compcert.flocq.Calc.Round <> l var
R30430:30433 Coq.Init.Datatypes <> true constr
def 30476:30502 <> round_trunc_sign_NA_correct
R30509:30536 compcert.flocq.Calc.Round <> round_trunc_sign_any_correct thm
R30584:30604 compcert.flocq.Calc.Round <> inbetween_int_NA_sign thm
R30554:30562 compcert.flocq.Calc.Round <> cond_incr def
R30581:30581 compcert.flocq.Calc.Round <> m var
R30565:30571 compcert.flocq.Calc.Round <> round_N def
R30578:30578 compcert.flocq.Calc.Round <> l var
R30573:30576 Coq.Init.Datatypes <> true constr
def 30619:30646 <> round_trunc_sign_NA_correct'
R30653:30681 compcert.flocq.Calc.Round <> round_trunc_sign_any_correct' thm
R30729:30749 compcert.flocq.Calc.Round <> inbetween_int_NA_sign thm
R30699:30707 compcert.flocq.Calc.Round <> cond_incr def
R30726:30726 compcert.flocq.Calc.Round <> m var
R30710:30716 compcert.flocq.Calc.Round <> round_N def
R30723:30723 compcert.flocq.Calc.Round <> l var
R30718:30721 Coq.Init.Datatypes <> true constr
R30757:30772 compcert.flocq.Calc.Round Fcalc_round.Fcalc_round_fexp <> sec
var 30837:30840 Fcalc_round emin
R30844:30844 Coq.Numbers.BinNums <> Z ind
def 30859:30870 <> truncate_FIX
R30897:30897 compcert.flocq.Calc.Round <> t var
R30884:30884 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30886:30887 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30889:30890 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30892:30892 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30918:30920 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R30914:30917 compcert.flocq.Calc.Round <> Fcalc_round.emin var
R30934:30941 Coq.ZArith.Zbool <> Zlt_bool syndef
R30945:30945 compcert.flocq.Calc.Round <> k var
R31045:31045 compcert.flocq.Calc.Round <> t var
R30965:30970 Coq.ZArith.Zpow_def <> Zpower syndef
R30977:30977 compcert.flocq.Calc.Round <> k var
R30972:30975 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R30986:30986 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30996:30997 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31007:31008 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31036:31036 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30987:30991 Coq.ZArith.BinInt Z div def
R30995:30995 compcert.flocq.Calc.Round <> p var
R31000:31002 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R31003:31003 compcert.flocq.Calc.Round <> k var
R31009:31020 compcert.flocq.Calc.Bracket <> new_location def
R31025:31028 Coq.ZArith.Zdiv <> Zmod syndef
R31032:31032 compcert.flocq.Calc.Round <> p var
R31022:31022 compcert.flocq.Calc.Round <> p var
prf 31057:31076 <> truncate_FIX_correct
R31128:31133 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31164:31169 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31191:31202 compcert.flocq.Calc.Round <> truncate_FIX def
R31204:31204 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31206:31207 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31209:31210 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31212:31212 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31205:31205 compcert.flocq.Calc.Round <> m var
R31208:31208 compcert.flocq.Calc.Round <> e var
R31211:31211 compcert.flocq.Calc.Round <> l var
R31175:31175 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31178:31179 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31182:31183 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31186:31186 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31250:31256 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R31348:31348 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R31219:31233 compcert.flocq.Calc.Bracket <> inbetween_float def
R31246:31246 compcert.flocq.Calc.Round <> x var
R31235:31238 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R31288:31292 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R31347:31347 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R31259:31261 Coq.Init.Logic <> ::type_scope:x_'='_x not
R31262:31265 compcert.flocq.Core.Generic_fmt <> cexp def
R31287:31287 compcert.flocq.Calc.Round <> x var
R31273:31279 compcert.flocq.Core.FIX <> FIX_exp def
R31281:31284 compcert.flocq.Calc.Round <> Fcalc_round.emin var
R31267:31270 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R31307:31310 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R31295:31297 Coq.Init.Logic <> ::type_scope:x_'='_x not
R31298:31306 compcert.flocq.Calc.Bracket <> loc_Exact constr
R31311:31324 compcert.flocq.Core.Generic_fmt <> generic_format def
R31346:31346 compcert.flocq.Calc.Round <> x var
R31332:31338 compcert.flocq.Core.FIX <> FIX_exp def
R31340:31343 compcert.flocq.Calc.Round <> Fcalc_round.emin var
R31326:31329 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R31147:31150 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R31136:31139 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R31135:31135 compcert.flocq.Calc.Round <> e var
R31140:31143 compcert.flocq.Calc.Round <> Fcalc_round.emin var
R31152:31154 Coq.Init.Logic <> ::type_scope:x_'='_x not
R31151:31151 compcert.flocq.Calc.Round <> l var
R31155:31163 compcert.flocq.Calc.Bracket <> loc_Exact constr
R31100:31114 compcert.flocq.Calc.Bracket <> inbetween_float def
R31127:31127 compcert.flocq.Calc.Round <> l var
R31125:31125 compcert.flocq.Calc.Round <> x var
R31123:31123 compcert.flocq.Calc.Round <> e var
R31121:31121 compcert.flocq.Calc.Round <> m var
R31116:31119 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R31387:31398 compcert.flocq.Calc.Round <> truncate_FIX def
R31416:31418 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R31412:31415 compcert.flocq.Calc.Round <> Fcalc_round.emin var
R31416:31418 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R31412:31415 compcert.flocq.Calc.Round <> Fcalc_round.emin var
R31436:31441 Coq.ZArith.Zpow_def <> Zpower syndef
R31443:31446 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R31436:31441 Coq.ZArith.Zpow_def <> Zpower syndef
R31443:31446 compcert.flocq.Calc.Round <> Fcalc_round.beta var
R31459:31462 compcert.flocq.Core.Generic_fmt <> cexp def
R31465:31471 compcert.flocq.Core.FIX <> FIX_exp def
R31486:31494 Coq.ZArith.Zbool <> Zlt_cases thm
R31486:31494 Coq.ZArith.Zbool <> Zlt_cases thm
R31508:31515 Coq.ZArith.Zbool <> Zlt_bool syndef
R31508:31515 Coq.ZArith.Zbool <> Zlt_bool syndef
R31564:31591 compcert.flocq.Calc.Bracket <> inbetween_float_new_location thm
R31564:31591 compcert.flocq.Calc.Bracket <> inbetween_float_new_location thm
R31790:31807 compcert.flocq.Core.Generic_fmt <> generic_format_F2R thm
R31790:31807 compcert.flocq.Core.Generic_fmt <> generic_format_F2R thm
R31817:31820 compcert.flocq.Core.Generic_fmt <> cexp def
R31840:31850 compcert.flocq.Calc.Round Fcalc_round <> sec
