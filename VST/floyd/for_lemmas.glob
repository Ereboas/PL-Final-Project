DIGEST 031ce40d875ccb4b970a1e4da3538856
FVST.floyd.for_lemmas
R15:29 VST.floyd.base2 <> <> lib
R47:69 VST.floyd.client_lemmas <> <> lib
R87:115 VST.floyd.mapsto_memory_block <> <> lib
R133:155 VST.floyd.closed_lemmas <> <> lib
R173:196 VST.floyd.compare_lemmas <> <> lib
R214:236 VST.floyd.semax_tactics <> <> lib
R254:277 VST.floyd.forward_lemmas <> <> lib
R295:312 VST.floyd.entailer <> <> lib
R330:357 VST.floyd.local2ptree_denote <> <> lib
R375:400 VST.floyd.local2ptree_eval <> <> lib
def 472:487 <> int_type_min_max
R506:509 compcert.cfrontend.Ctypes <> type ind
binder 490:495 <> type_i:1
binder 497:503 <> type_hi:2
R513:518 Coq.Init.Datatypes <> option ind
R522:524 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R521:521 Coq.Numbers.BinNums <> Z ind
R525:525 Coq.Numbers.BinNums <> Z ind
R547:553 VST.floyd.for_lemmas <> type_hi:2 var
R539:544 VST.floyd.for_lemmas <> type_i:1 var
R564:567 compcert.cfrontend.Ctypes <> Tint constr
R569:571 compcert.cfrontend.Ctypes <> I32 constr
R580:583 compcert.cfrontend.Ctypes <> Tint constr
R604:607 Coq.Init.Datatypes <> Some constr
R635:640 compcert.cfrontend.Ctypes <> Signed constr
R645:645 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R783:784 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R799:799 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R692:694 compcert.cfrontend.Ctypes <> I32 constr
R697:704 compcert.cfrontend.Ctypes <> Unsigned constr
R743:756 compcert.lib.Integers Int min_signed def
R785:798 compcert.lib.Integers Int max_signed def
R812:819 compcert.cfrontend.Ctypes <> Unsigned constr
R824:824 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R826:827 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R844:844 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R828:843 compcert.lib.Integers Int max_unsigned def
R863:866 compcert.cfrontend.Ctypes <> Tint constr
R868:870 compcert.cfrontend.Ctypes <> I32 constr
R879:883 compcert.cfrontend.Ctypes <> Tlong constr
R899:902 Coq.Init.Datatypes <> Some constr
R930:935 compcert.cfrontend.Ctypes <> Signed constr
R979:986 compcert.cfrontend.Ctypes <> Unsigned constr
R991:991 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R993:994 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1009:1009 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R995:1008 compcert.lib.Integers Int max_signed def
R1039:1039 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1054:1055 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1070:1070 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1040:1053 compcert.lib.Integers Int min_signed def
R1056:1069 compcert.lib.Integers Int max_signed def
R1108:1115 compcert.cfrontend.Ctypes <> Unsigned constr
R1120:1120 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1122:1123 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1140:1140 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1124:1139 compcert.lib.Integers Int max_unsigned def
R1167:1170 Coq.Init.Datatypes <> None constr
ind 1190:1202 <> range_init_hl
constr 1266:1288 <> construct_range_init_hl
R1229:1232 compcert.cfrontend.Ctypes <> type ind
binder 1205:1211 <> type_lo:10
binder 1213:1218 <> type_i:11
binder 1220:1226 <> type_hi:12
R1236:1236 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1251:1255 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1238:1241 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1243:1246 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1242:1242 Coq.Numbers.BinNums <> Z ind
R1237:1237 Coq.Numbers.BinNums <> Z ind
binder 1300:1306 <> int_min:15
binder 1308:1314 <> int_max:16
R1347:1354 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1412:1419 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1420:1432 VST.floyd.for_lemmas <> range_init_hl:13 ind
binder 1462:1462 <> m:17
binder 1464:1464 <> n:18
R1486:1489 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R1476:1479 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R1481:1484 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R1469:1475 VST.floyd.for_lemmas <> int_min:15 var
R1480:1480 VST.floyd.for_lemmas <> m:17 var
R1480:1480 VST.floyd.for_lemmas <> m:17 var
R1485:1485 VST.floyd.for_lemmas <> n:18 var
R1491:1494 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1490:1490 VST.floyd.for_lemmas <> n:18 var
R1495:1501 VST.floyd.for_lemmas <> int_max:16 var
R1449:1455 VST.floyd.for_lemmas <> type_hi:12 var
R1442:1447 VST.floyd.for_lemmas <> type_i:11 var
R1434:1440 VST.floyd.for_lemmas <> type_lo:10 var
R1386:1388 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1355:1370 VST.floyd.for_lemmas <> int_type_min_max def
R1379:1385 VST.floyd.for_lemmas <> type_hi:12 var
R1372:1377 VST.floyd.for_lemmas <> type_i:11 var
R1389:1392 Coq.Init.Datatypes <> Some constr
R1394:1394 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1402:1403 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1411:1411 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1395:1401 VST.floyd.for_lemmas <> int_min:15 var
R1404:1410 VST.floyd.for_lemmas <> int_max:16 var
R1340:1342 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1321:1331 VST.veric.expr <> is_int_type def
R1333:1339 VST.floyd.for_lemmas <> type_lo:10 var
R1343:1346 Coq.Init.Datatypes <> true constr
ind 2921:2932 <> range_init_h
constr 2988:3009 <> construct_range_init_h
R2951:2954 compcert.cfrontend.Ctypes <> type ind
binder 2935:2940 <> type_i:19
binder 2942:2948 <> type_hi:20
R2959:2962 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2963:2963 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2973:2977 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2965:2968 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2964:2964 Coq.Numbers.BinNums <> Z ind
R2958:2958 Coq.Numbers.BinNums <> Z ind
binder 3021:3027 <> int_min:23
binder 3029:3035 <> int_max:24
R3099:3106 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3107:3118 VST.floyd.for_lemmas <> range_init_h:21 ind
binder 3148:3148 <> n:25
R3166:3169 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R3171:3174 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R3159:3165 VST.floyd.for_lemmas <> int_min:23 var
R3170:3170 VST.floyd.for_lemmas <> n:25 var
R3170:3170 VST.floyd.for_lemmas <> n:25 var
R3175:3181 VST.floyd.for_lemmas <> int_max:24 var
R3135:3141 VST.floyd.for_lemmas <> int_min:23 var
R3127:3133 VST.floyd.for_lemmas <> type_hi:20 var
R3120:3125 VST.floyd.for_lemmas <> type_i:19 var
R3073:3075 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3042:3057 VST.floyd.for_lemmas <> int_type_min_max def
R3066:3072 VST.floyd.for_lemmas <> type_hi:20 var
R3059:3064 VST.floyd.for_lemmas <> type_i:19 var
R3076:3079 Coq.Init.Datatypes <> Some constr
R3081:3081 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3089:3090 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3098:3098 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3082:3088 VST.floyd.for_lemmas <> int_min:23 var
R3091:3097 VST.floyd.for_lemmas <> int_max:24 var
ind 3196:3211 <> Int_eqm_unsigned
constr 3236:3256 <> Int_eqm_unsigned_repr
R3217:3220 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3222:3225 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3221:3221 Coq.Numbers.BinNums <> Z ind
R3214:3216 compcert.lib.Integers <> int syndef
binder 3266:3266 <> z:28
R3269:3284 VST.floyd.for_lemmas <> Int_eqm_unsigned:26 ind
R3299:3299 VST.floyd.for_lemmas <> z:28 var
R3287:3294 compcert.lib.Integers Int repr def
R3296:3296 VST.floyd.for_lemmas <> z:28 var
ind 3313:3330 <> Int64_eqm_unsigned
constr 3357:3379 <> Int64_eqm_unsigned_repr
R3338:3341 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3343:3346 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3342:3342 Coq.Numbers.BinNums <> Z ind
R3333:3337 compcert.lib.Integers <> int64 syndef
binder 3389:3389 <> z:31
R3392:3409 VST.floyd.for_lemmas <> Int64_eqm_unsigned:29 ind
R3426:3426 VST.floyd.for_lemmas <> z:31 var
R3412:3421 compcert.lib.Integers Int64 repr def
R3423:3423 VST.floyd.for_lemmas <> z:31 var
ind 3440:3450 <> Int6432_val
constr 3483:3506 <> Int_64_eqm_unsigned_repr
constr 3606:3629 <> Int_32_eqm_unsigned_repr
R3457:3460 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3464:3467 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3469:3472 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3468:3468 Coq.Numbers.BinNums <> Z ind
R3461:3463 compcert.common.Values <> val ind
R3453:3456 compcert.cfrontend.Ctypes <> type ind
binder 3516:3516 <> s:34
binder 3518:3520 <> i64:35
binder 3522:3522 <> z:36
R3553:3560 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3561:3571 VST.floyd.for_lemmas <> Int6432_val:32 ind
R3602:3602 VST.floyd.for_lemmas <> z:36 var
R3591:3595 compcert.common.Values <> Vlong constr
R3597:3599 VST.floyd.for_lemmas <> i64:35 var
R3574:3578 compcert.cfrontend.Ctypes <> Tlong constr
R3582:3587 compcert.cfrontend.Ctypes <> noattr def
R3580:3580 VST.floyd.for_lemmas <> s:34 var
R3529:3546 VST.floyd.for_lemmas <> Int64_eqm_unsigned ind
R3552:3552 VST.floyd.for_lemmas <> z:36 var
R3548:3550 VST.floyd.for_lemmas <> i64:35 var
binder 3639:3639 <> s:37
binder 3641:3641 <> i:38
binder 3643:3645 <> i32:39
binder 3647:3647 <> z:40
R3676:3683 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3684:3694 VST.floyd.for_lemmas <> Int6432_val:32 ind
R3725:3725 VST.floyd.for_lemmas <> z:40 var
R3715:3718 compcert.common.Values <> Vint constr
R3720:3722 VST.floyd.for_lemmas <> i32:39 var
R3697:3700 compcert.cfrontend.Ctypes <> Tint constr
R3706:3711 compcert.cfrontend.Ctypes <> noattr def
R3704:3704 VST.floyd.for_lemmas <> i:38 var
R3702:3702 VST.floyd.for_lemmas <> s:37 var
R3654:3669 VST.floyd.for_lemmas <> Int_eqm_unsigned ind
R3675:3675 VST.floyd.for_lemmas <> z:40 var
R3671:3673 VST.floyd.for_lemmas <> i32:39 var
prf 3735:3756 <> Int_eqm_unsigned_repr'
binder 3766:3766 <> i:41
binder 3768:3768 <> z:42
R3787:3792 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3793:3808 VST.floyd.for_lemmas <> Int_eqm_unsigned ind
R3812:3812 VST.floyd.for_lemmas <> z:42 var
R3810:3810 VST.floyd.for_lemmas <> i:41 var
R3774:3776 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3773:3773 VST.floyd.for_lemmas <> i:41 var
R3777:3784 compcert.lib.Integers Int repr def
R3786:3786 VST.floyd.for_lemmas <> z:42 var
R3875:3902 VST.floyd.local2ptree_denote <> <> lib
R3920:3945 VST.floyd.local2ptree_eval <> <> lib
R3963:3993 VST.floyd.local2ptree_typecheck <> <> lib
prf 4005:4028 <> Int64_eqm_unsigned_repr'
binder 4038:4038 <> i:43
binder 4040:4040 <> z:44
R4061:4066 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4067:4084 VST.floyd.for_lemmas <> Int64_eqm_unsigned ind
R4088:4088 VST.floyd.for_lemmas <> z:44 var
R4086:4086 VST.floyd.for_lemmas <> i:43 var
R4046:4048 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4045:4045 VST.floyd.for_lemmas <> i:43 var
R4049:4058 compcert.lib.Integers Int64 repr def
R4060:4060 VST.floyd.for_lemmas <> z:44 var
prf 4142:4162 <> Int_eqm_unsigned_spec
binder 4172:4172 <> i:45
binder 4174:4174 <> z:46
R4199:4202 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4203:4209 compcert.lib.Integers Int eqm def
R4228:4228 VST.floyd.for_lemmas <> z:46 var
R4212:4223 compcert.lib.Integers Int unsigned def
R4225:4225 VST.floyd.for_lemmas <> i:45 var
R4179:4194 VST.floyd.for_lemmas <> Int_eqm_unsigned ind
R4198:4198 VST.floyd.for_lemmas <> z:46 var
R4196:4196 VST.floyd.for_lemmas <> i:45 var
R4265:4275 compcert.lib.Integers Int eqm_sym thm
R4278:4298 compcert.lib.Integers Int eqm_unsigned_repr thm
R4265:4275 compcert.lib.Integers Int eqm_sym thm
R4278:4298 compcert.lib.Integers Int eqm_unsigned_repr thm
prf 4313:4335 <> Int64_eqm_unsigned_spec
binder 4345:4345 <> i:47
binder 4347:4347 <> z:48
R4374:4377 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4378:4386 compcert.lib.Integers Int64 eqm def
R4407:4407 VST.floyd.for_lemmas <> z:48 var
R4389:4402 compcert.lib.Integers Int64 unsigned def
R4404:4404 VST.floyd.for_lemmas <> i:47 var
R4352:4369 VST.floyd.for_lemmas <> Int64_eqm_unsigned ind
R4373:4373 VST.floyd.for_lemmas <> z:48 var
R4371:4371 VST.floyd.for_lemmas <> i:47 var
R4444:4456 compcert.lib.Integers Int64 eqm_sym thm
R4459:4481 compcert.lib.Integers Int64 eqm_unsigned_repr thm
R4444:4456 compcert.lib.Integers Int64 eqm_sym thm
R4459:4481 compcert.lib.Integers Int64 eqm_unsigned_repr thm
ind 4500:4511 <> Sfor_inv_rec
constr 4657:4674 <> Sfor_inv_rec_step'
constr 4898:4913 <> Sfor_inv_rec_end
R4518:4526 VST.veric.mpred <> compspecs class
binder 4514:4515 <> cs:49
R4537:4545 VST.veric.seplog <> tycontext ind
binder 4530:4534 <> Delta:50
R4554:4557 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4559:4562 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4564:4567 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4572:4575 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4577:4580 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4581:4581 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4598:4602 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4603:4603 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4620:4624 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4625:4625 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4642:4646 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4633:4636 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4637:4641 VST.veric.mpred <> mpred def
R4626:4632 VST.veric.mpred <> environ ind
R4611:4614 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4615:4619 VST.veric.mpred <> mpred def
R4604:4610 VST.veric.mpred <> environ ind
R4589:4592 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4593:4597 VST.veric.mpred <> mpred def
R4582:4588 VST.veric.mpred <> environ ind
R4576:4576 Coq.Numbers.BinNums <> Z ind
R4568:4571 compcert.cfrontend.Clight <> expr ind
R4563:4563 Coq.Numbers.BinNums <> Z ind
R4558:4558 Coq.Numbers.BinNums <> Z ind
R4549:4553 compcert.common.AST <> ident def
binder 4684:4684 <> A:53
binder 4686:4687 <> _i:54
binder 4689:4689 <> i:55
binder 4691:4691 <> m:56
binder 4693:4694 <> hi:57
binder 4696:4696 <> n:58
binder 4698:4710 <> assert_callee:59
binder 4712:4715 <> inv0:60
binder 4717:4720 <> inv1:61
R4727:4727 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4814:4822 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4823:4834 VST.floyd.for_lemmas <> Sfor_inv_rec:51 ind
R4886:4888 VST.msl.seplog <> exp meth
R4890:4893 VST.floyd.for_lemmas <> inv1:61 var
R4875:4877 VST.msl.seplog <> exp meth
R4879:4882 VST.floyd.for_lemmas <> inv0:60 var
R4855:4857 VST.msl.seplog <> exp meth
R4859:4871 VST.floyd.for_lemmas <> assert_callee:59 var
R4852:4852 VST.floyd.for_lemmas <> n:58 var
R4849:4850 VST.floyd.for_lemmas <> hi:57 var
R4847:4847 VST.floyd.for_lemmas <> m:56 var
R4845:4845 VST.floyd.for_lemmas <> i:55 var
R4842:4843 VST.floyd.for_lemmas <> _i:54 var
R4836:4840 VST.floyd.for_lemmas <> Delta:50 var
R4738:4738 VST.floyd.for_lemmas <> A:53 var
binder 4735:4735 <> x:62
R4748:4759 VST.floyd.for_lemmas <> Sfor_inv_rec:51 ind
R4807:4810 VST.floyd.for_lemmas <> inv1:61 var
R4812:4812 VST.floyd.for_lemmas <> x:62 var
R4798:4801 VST.floyd.for_lemmas <> inv0:60 var
R4803:4803 VST.floyd.for_lemmas <> x:62 var
R4780:4792 VST.floyd.for_lemmas <> assert_callee:59 var
R4794:4794 VST.floyd.for_lemmas <> x:62 var
R4777:4777 VST.floyd.for_lemmas <> n:58 var
R4774:4775 VST.floyd.for_lemmas <> hi:57 var
R4772:4772 VST.floyd.for_lemmas <> m:56 var
R4770:4770 VST.floyd.for_lemmas <> i:55 var
R4767:4768 VST.floyd.for_lemmas <> _i:54 var
R4761:4765 VST.floyd.for_lemmas <> Delta:50 var
binder 4923:4924 <> _i:63
binder 4926:4926 <> i:64
binder 4928:4928 <> m:65
binder 4930:4931 <> hi:66
binder 4933:4934 <> n':67
binder 4936:4936 <> n:68
binder 4938:4938 <> P:69
binder 4940:4940 <> Q:70
binder 4942:4942 <> R:71
binder 4944:4945 <> T1:72
binder 4947:4948 <> T2:73
binder 4950:4951 <> GV:74
R5009:5016 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5031:5038 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5083:5090 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5119:5126 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5189:5196 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5197:5208 VST.floyd.for_lemmas <> Sfor_inv_rec:51 ind
R5359:5363 VST.floyd.canon <> PROPx def
R5368:5373 VST.floyd.canon <> LOCALx def
R5411:5414 VST.floyd.canon <> SEPx def
R5416:5416 VST.floyd.for_lemmas <> R:71 var
R5403:5406 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R5376:5379 VST.floyd.canon <> temp constr
R5385:5388 compcert.common.Values <> Vint constr
R5391:5398 compcert.lib.Integers Int repr def
R5400:5400 VST.floyd.for_lemmas <> i:64 var
R5381:5382 VST.floyd.for_lemmas <> _i:63 var
R5407:5407 VST.floyd.for_lemmas <> Q:70 var
R5365:5365 VST.floyd.for_lemmas <> P:69 var
R5271:5275 VST.floyd.canon <> PROPx def
R5299:5304 VST.floyd.canon <> LOCALx def
R5342:5345 VST.floyd.canon <> SEPx def
R5347:5347 VST.floyd.for_lemmas <> R:71 var
R5334:5337 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R5307:5310 VST.floyd.canon <> temp constr
R5316:5319 compcert.common.Values <> Vint constr
R5322:5329 compcert.lib.Integers Int repr def
R5331:5331 VST.floyd.for_lemmas <> i:64 var
R5312:5313 VST.floyd.for_lemmas <> _i:63 var
R5338:5338 VST.floyd.for_lemmas <> Q:70 var
R5278:5278 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R5290:5294 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R5280:5283 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R5285:5288 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R5279:5279 VST.floyd.for_lemmas <> m:65 var
R5284:5284 VST.floyd.for_lemmas <> i:64 var
R5284:5284 VST.floyd.for_lemmas <> i:64 var
R5289:5289 VST.floyd.for_lemmas <> n:68 var
R5295:5295 VST.floyd.for_lemmas <> P:69 var
R5235:5239 VST.floyd.canon <> PROPx def
R5244:5249 VST.floyd.canon <> LOCALx def
R5254:5257 VST.floyd.canon <> SEPx def
R5259:5259 VST.floyd.for_lemmas <> R:71 var
R5251:5251 VST.floyd.for_lemmas <> Q:70 var
R5241:5241 VST.floyd.for_lemmas <> P:69 var
R5226:5226 VST.floyd.for_lemmas <> n:68 var
R5223:5224 VST.floyd.for_lemmas <> hi:66 var
R5221:5221 VST.floyd.for_lemmas <> m:65 var
R5219:5219 VST.floyd.for_lemmas <> i:64 var
R5216:5217 VST.floyd.for_lemmas <> _i:63 var
R5210:5214 VST.floyd.for_lemmas <> Delta:50 var
R5127:5133 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R5139:5140 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R5168:5172 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R5134:5138 VST.floyd.for_lemmas <> Delta:50 var
R5141:5145 VST.floyd.canon <> PROPx def
R5150:5155 VST.floyd.canon <> LOCALx def
R5160:5163 VST.floyd.canon <> SEPx def
R5165:5165 VST.floyd.for_lemmas <> R:71 var
R5157:5157 VST.floyd.for_lemmas <> Q:70 var
R5147:5147 VST.floyd.for_lemmas <> P:69 var
R5173:5179 VST.veric.SeparationLogic <> tc_expr def
R5187:5188 VST.floyd.for_lemmas <> hi:66 var
R5181:5185 VST.floyd.for_lemmas <> Delta:50 var
R5091:5101 VST.floyd.for_lemmas <> Int6432_val ind
R5118:5118 VST.floyd.for_lemmas <> n:68 var
R5115:5116 VST.floyd.for_lemmas <> n':67 var
R5104:5109 compcert.cfrontend.Clight <> typeof def
R5111:5112 VST.floyd.for_lemmas <> hi:66 var
R5073:5075 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5039:5054 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R5071:5072 VST.floyd.for_lemmas <> hi:66 var
R5068:5069 VST.floyd.for_lemmas <> GV:74 var
R5065:5066 VST.floyd.for_lemmas <> T2:73 var
R5062:5063 VST.floyd.for_lemmas <> T1:72 var
R5056:5060 VST.floyd.for_lemmas <> Delta:50 var
R5076:5079 Coq.Init.Datatypes <> Some constr
R5081:5082 VST.floyd.for_lemmas <> n':67 var
R5024:5026 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5019:5021 compcert.lib.Maps <> :::x_'!'_x not
R5022:5023 VST.floyd.for_lemmas <> _i:63 var
R5017:5018 VST.floyd.for_lemmas <> T1:72 var
R5027:5030 Coq.Init.Datatypes <> None constr
R4989:4991 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4976:4986 VST.floyd.local2ptree_denote <> local2ptree def
R4988:4988 VST.floyd.for_lemmas <> Q:70 var
R4992:4992 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4995:4996 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4999:5000 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5004:5005 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5008:5008 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4993:4994 VST.floyd.for_lemmas <> T1:72 var
R4997:4998 VST.floyd.for_lemmas <> T2:73 var
R5001:5003 Coq.Init.Datatypes <> nil constr
R5006:5007 VST.floyd.for_lemmas <> GV:74 var
prf 5429:5445 <> Sfor_inv_rec_step
R5452:5460 VST.veric.mpred <> compspecs class
binder 5448:5449 <> cs:75
R5471:5479 VST.veric.seplog <> tycontext ind
binder 5464:5468 <> Delta:76
binder 5490:5490 <> A:77
binder 5492:5493 <> _i:78
binder 5495:5495 <> i:79
binder 5497:5497 <> m:80
binder 5499:5500 <> hi:81
binder 5502:5502 <> n:82
binder 5504:5516 <> assert_callee:83
binder 5518:5521 <> inv0:84
binder 5523:5526 <> inv1:85
R5533:5533 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5677:5685 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5686:5697 VST.floyd.for_lemmas <> Sfor_inv_rec ind
R5749:5751 VST.msl.seplog <> exp meth
R5753:5756 VST.floyd.for_lemmas <> inv1:85 var
R5738:5740 VST.msl.seplog <> exp meth
R5742:5745 VST.floyd.for_lemmas <> inv0:84 var
R5718:5720 VST.msl.seplog <> exp meth
R5722:5734 VST.floyd.for_lemmas <> assert_callee:83 var
R5715:5715 VST.floyd.for_lemmas <> n:82 var
R5712:5713 VST.floyd.for_lemmas <> hi:81 var
R5710:5710 VST.floyd.for_lemmas <> m:80 var
R5708:5708 VST.floyd.for_lemmas <> i:79 var
R5705:5706 VST.floyd.for_lemmas <> _i:78 var
R5699:5703 VST.floyd.for_lemmas <> Delta:76 var
R5544:5544 VST.floyd.for_lemmas <> A:77 var
binder 5541:5541 <> x:86
R5547:5553 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R5565:5573 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 5554:5558 <> inv0':87
binder 5560:5564 <> inv1':88
R5634:5644 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5574:5585 VST.floyd.for_lemmas <> Sfor_inv_rec ind
R5629:5633 VST.floyd.for_lemmas <> inv1':88 var
R5623:5627 VST.floyd.for_lemmas <> inv0':87 var
R5606:5618 VST.floyd.for_lemmas <> assert_callee:83 var
R5620:5620 VST.floyd.for_lemmas <> x:86 var
R5603:5603 VST.floyd.for_lemmas <> n:82 var
R5600:5601 VST.floyd.for_lemmas <> hi:81 var
R5598:5598 VST.floyd.for_lemmas <> m:80 var
R5596:5596 VST.floyd.for_lemmas <> i:79 var
R5593:5594 VST.floyd.for_lemmas <> _i:78 var
R5587:5591 VST.floyd.for_lemmas <> Delta:76 var
R5659:5662 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5651:5653 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5645:5648 VST.floyd.for_lemmas <> inv0:84 var
R5650:5650 VST.floyd.for_lemmas <> x:86 var
R5654:5658 VST.floyd.for_lemmas <> inv0':87 var
R5669:5671 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5663:5666 VST.floyd.for_lemmas <> inv1:85 var
R5668:5668 VST.floyd.for_lemmas <> x:86 var
R5672:5676 VST.floyd.for_lemmas <> inv1':88 var
R5785:5802 VST.floyd.for_lemmas <> Sfor_inv_rec_step' constr
R5785:5802 VST.floyd.for_lemmas <> Sfor_inv_rec_step' constr
ind 5901:5908 <> Sfor_inv
constr 6129:6146 <> construct_Sfor_inv
R5915:5923 VST.veric.mpred <> compspecs class
binder 5911:5912 <> cs:89
R5934:5942 VST.veric.seplog <> tycontext ind
binder 5927:5931 <> Delta:90
R5960:5964 compcert.common.AST <> ident def
binder 5956:5957 <> _i:91
R5971:5971 Coq.Numbers.BinNums <> Z ind
binder 5968:5968 <> m:92
R5979:5982 compcert.cfrontend.Clight <> expr ind
binder 5975:5976 <> hi:93
R5989:5989 Coq.Numbers.BinNums <> Z ind
binder 5986:5986 <> n:94
R6018:6021 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6029:6032 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6033:6037 VST.veric.mpred <> mpred def
R6022:6028 VST.veric.mpred <> environ ind
R6017:6017 Coq.Numbers.BinNums <> Z ind
binder 6002:6014 <> assert_callee:95
R6063:6066 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6067:6071 VST.veric.mpred <> mpred def
R6056:6062 VST.veric.mpred <> environ ind
binder 6050:6053 <> inv0:96
R6096:6099 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6107:6110 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6111:6115 VST.veric.mpred <> mpred def
R6100:6106 VST.veric.mpred <> environ ind
R6095:6095 Coq.Numbers.BinNums <> Z ind
binder 6084:6087 <> inv1:97
binder 6089:6092 <> inv2:98
binder 6156:6157 <> _i:101
binder 6159:6159 <> m:102
binder 6161:6162 <> hi:103
binder 6164:6164 <> n:104
binder 6166:6178 <> assert_callee:105
binder 6180:6183 <> inv0:106
binder 6185:6188 <> inv1:107
R6195:6195 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6384:6392 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6393:6400 VST.floyd.for_lemmas <> Sfor_inv:99 ind
binder 6477:6477 <> i:108
R6482:6485 VST.floyd.for_lemmas <> inv1:107 var
R6493:6493 VST.floyd.for_lemmas <> i:108 var
R6489:6489 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R6488:6488 VST.floyd.for_lemmas <> i:108 var
binder 6457:6457 <> i:109
R6462:6465 VST.floyd.for_lemmas <> inv1:107 var
R6469:6469 VST.floyd.for_lemmas <> i:109 var
R6467:6467 VST.floyd.for_lemmas <> i:109 var
R6433:6435 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6440:6441 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6439:6439 Coq.Numbers.BinNums <> Z ind
binder 6436:6436 <> i:110
R6442:6445 VST.floyd.for_lemmas <> inv0:106 var
R6449:6449 VST.floyd.for_lemmas <> i:110 var
R6447:6447 VST.floyd.for_lemmas <> i:110 var
R6418:6430 VST.floyd.for_lemmas <> assert_callee:105 var
R6416:6416 VST.floyd.for_lemmas <> n:104 var
R6413:6414 VST.floyd.for_lemmas <> hi:103 var
R6411:6411 VST.floyd.for_lemmas <> m:102 var
R6408:6409 VST.floyd.for_lemmas <> _i:101 var
R6402:6406 VST.floyd.for_lemmas <> Delta:90 var
binder 6203:6203 <> i:111
binder 6205:6206 <> i':112
R6209:6215 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R6241:6242 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 6216:6220 <> inv0':113
binder 6222:6227 <> inv0'':114
binder 6229:6233 <> inv1':115
binder 6235:6240 <> inv1'':116
R6306:6309 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6243:6254 VST.floyd.for_lemmas <> Sfor_inv_rec ind
R6300:6305 VST.floyd.for_lemmas <> inv1'':116 var
R6293:6298 VST.floyd.for_lemmas <> inv0'':114 var
R6276:6288 VST.floyd.for_lemmas <> assert_callee:105 var
R6290:6290 VST.floyd.for_lemmas <> i:111 var
R6273:6273 VST.floyd.for_lemmas <> n:104 var
R6270:6271 VST.floyd.for_lemmas <> hi:103 var
R6268:6268 VST.floyd.for_lemmas <> m:102 var
R6265:6266 VST.floyd.for_lemmas <> i':112 var
R6262:6263 VST.floyd.for_lemmas <> _i:101 var
R6256:6260 VST.floyd.for_lemmas <> Delta:90 var
R6327:6330 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6318:6320 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6310:6314 VST.floyd.for_lemmas <> inv0':113 var
R6316:6317 VST.floyd.for_lemmas <> i':112 var
R6321:6326 VST.floyd.for_lemmas <> inv0'':114 var
R6345:6348 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6337:6339 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6331:6334 VST.floyd.for_lemmas <> inv0:106 var
R6336:6336 VST.floyd.for_lemmas <> i:111 var
R6340:6344 VST.floyd.for_lemmas <> inv0':113 var
R6366:6369 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6357:6359 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6349:6353 VST.floyd.for_lemmas <> inv1':115 var
R6355:6356 VST.floyd.for_lemmas <> i':112 var
R6360:6365 VST.floyd.for_lemmas <> inv1'':116 var
R6376:6378 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6370:6373 VST.floyd.for_lemmas <> inv1:107 var
R6375:6375 VST.floyd.for_lemmas <> i:111 var
R6379:6383 VST.floyd.for_lemmas <> inv1':115 var
ind 6543:6552 <> Sfor_setup
constr 6801:6821 <> Sfor_setup_const_init
constr 7157:7172 <> Sfor_setup_other
R6559:6567 VST.veric.mpred <> compspecs class
binder 6555:6556 <> cs:117
R6578:6587 VST.veric.juicy_extspec <> OracleKind class
binder 6571:6575 <> Espec:118
R6598:6606 VST.veric.seplog <> tycontext ind
binder 6591:6595 <> Delta:119
R6624:6628 compcert.common.AST <> ident def
binder 6620:6621 <> _i:120
R6644:6647 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6648:6652 VST.veric.mpred <> mpred def
R6637:6643 VST.veric.mpred <> environ ind
binder 6632:6634 <> Pre:121
R6662:6670 compcert.cfrontend.Clight <> statement ind
binder 6656:6659 <> init:122
R6678:6681 compcert.cfrontend.Clight <> expr ind
binder 6674:6675 <> hi:123
R6693:6696 compcert.cfrontend.Ctypes <> type ind
binder 6685:6690 <> type_i:124
R6714:6714 Coq.Numbers.BinNums <> Z ind
binder 6709:6709 <> m:125
binder 6711:6711 <> n:126
R6734:6737 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6745:6748 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6749:6753 VST.veric.mpred <> mpred def
R6738:6744 VST.veric.mpred <> environ ind
R6733:6733 Coq.Numbers.BinNums <> Z ind
binder 6718:6730 <> assert_callee:127
R6779:6782 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6783:6787 VST.veric.mpred <> mpred def
R6772:6778 VST.veric.mpred <> environ ind
binder 6766:6769 <> inv0:128
binder 6831:6832 <> m':131
binder 6834:6834 <> m:132
binder 6836:6837 <> lo:133
binder 6839:6840 <> _i:134
binder 6842:6847 <> type_i:135
binder 6849:6850 <> hi:136
binder 6852:6852 <> n:137
binder 6854:6856 <> Pre:138
binder 6858:6870 <> assert_callee:139
binder 6872:6875 <> inv0:140
binder 6877:6881 <> range:141
R6938:6945 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6986:6993 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7015:7022 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7032:7039 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7077:7084 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7085:7094 VST.floyd.for_lemmas <> Sfor_setup:129 ind
R7150:7153 VST.floyd.for_lemmas <> inv0:140 var
R7136:7148 VST.floyd.for_lemmas <> assert_callee:139 var
R7134:7134 VST.floyd.for_lemmas <> n:137 var
R7132:7132 VST.floyd.for_lemmas <> m:132 var
R7125:7130 VST.floyd.for_lemmas <> type_i:135 var
R7122:7123 VST.floyd.for_lemmas <> hi:136 var
R7110:7113 compcert.cfrontend.Clight <> Sset constr
R7118:7119 VST.floyd.for_lemmas <> lo:133 var
R7115:7116 VST.floyd.for_lemmas <> _i:134 var
R7105:7107 VST.floyd.for_lemmas <> Pre:138 var
R7102:7103 VST.floyd.for_lemmas <> _i:134 var
R7096:7100 VST.floyd.for_lemmas <> Delta:119 var
R7040:7046 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7052:7053 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7057:7061 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7047:7051 VST.floyd.for_lemmas <> Delta:119 var
R7054:7056 VST.floyd.for_lemmas <> Pre:138 var
R7062:7074 VST.floyd.for_lemmas <> assert_callee:139 var
R7076:7076 VST.floyd.for_lemmas <> m:132 var
R7023:7027 VST.floyd.for_lemmas <> range:141 var
R7031:7031 VST.floyd.for_lemmas <> n:137 var
R7029:7029 VST.floyd.for_lemmas <> m:132 var
R6994:7009 VST.floyd.for_lemmas <> Int_eqm_unsigned ind
R7014:7014 VST.floyd.for_lemmas <> m:132 var
R7011:7012 VST.floyd.for_lemmas <> m':131 var
R6969:6971 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6946:6965 VST.floyd.const_only_eval <> const_only_eval_expr def
R6967:6968 VST.floyd.for_lemmas <> lo:133 var
R6972:6975 Coq.Init.Datatypes <> Some constr
R6978:6981 compcert.common.Values <> Vint constr
R6983:6984 VST.floyd.for_lemmas <> m':131 var
R6888:6900 VST.floyd.for_lemmas <> range_init_hl ind
R6933:6937 VST.floyd.for_lemmas <> range:141 var
R6922:6927 compcert.cfrontend.Clight <> typeof def
R6929:6930 VST.floyd.for_lemmas <> hi:136 var
R6914:6919 VST.floyd.for_lemmas <> type_i:135 var
R6903:6908 compcert.cfrontend.Clight <> typeof def
R6910:6911 VST.floyd.for_lemmas <> lo:133 var
binder 7182:7183 <> _i:142
binder 7185:7187 <> Pre:143
binder 7189:7192 <> init:144
binder 7194:7195 <> hi:145
binder 7197:7202 <> type_i:146
binder 7204:7204 <> m:147
binder 7206:7206 <> n:148
binder 7208:7220 <> assert_callee:149
binder 7222:7225 <> inv0:150
binder 7227:7231 <> range:151
R7277:7284 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7292:7299 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7355:7362 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7363:7372 VST.floyd.for_lemmas <> Sfor_setup:129 ind
R7420:7423 VST.floyd.for_lemmas <> inv0:150 var
R7406:7418 VST.floyd.for_lemmas <> assert_callee:149 var
R7404:7404 VST.floyd.for_lemmas <> n:148 var
R7402:7402 VST.floyd.for_lemmas <> m:147 var
R7395:7400 VST.floyd.for_lemmas <> type_i:146 var
R7392:7393 VST.floyd.for_lemmas <> hi:145 var
R7387:7390 VST.floyd.for_lemmas <> init:144 var
R7383:7385 VST.floyd.for_lemmas <> Pre:143 var
R7380:7381 VST.floyd.for_lemmas <> _i:142 var
R7374:7378 VST.floyd.for_lemmas <> Delta:119 var
R7301:7305 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7332:7348 VST.veric.SeparationLogic <> normal_ret_assert def
R7350:7353 VST.floyd.for_lemmas <> inv0:150 var
R7326:7329 VST.floyd.for_lemmas <> init:144 var
R7322:7324 VST.floyd.for_lemmas <> Pre:143 var
R7316:7320 VST.floyd.for_lemmas <> Delta:119 var
R7310:7314 VST.floyd.for_lemmas <> Espec:118 var
R7307:7308 VST.floyd.for_lemmas <> cs:117 var
R7285:7289 VST.floyd.for_lemmas <> range:151 var
R7291:7291 VST.floyd.for_lemmas <> n:148 var
R7238:7249 VST.floyd.for_lemmas <> range_init_h ind
R7272:7276 VST.floyd.for_lemmas <> range:151 var
R7270:7270 VST.floyd.for_lemmas <> m:147 var
R7259:7264 compcert.cfrontend.Clight <> typeof def
R7266:7267 VST.floyd.for_lemmas <> hi:145 var
R7251:7256 VST.floyd.for_lemmas <> type_i:146 var
prf 7433:7449 <> Sfor_inv_rec_spec
R7464:7472 VST.veric.mpred <> compspecs class
binder 7460:7461 <> cs:152
R7483:7491 VST.veric.seplog <> tycontext ind
binder 7476:7480 <> Delta:153
binder 7504:7505 <> _i:154
binder 7507:7507 <> i:155
binder 7509:7509 <> m:156
binder 7511:7512 <> hi:157
binder 7514:7514 <> n:158
binder 7516:7528 <> assert_callee:159
binder 7530:7533 <> inv0:160
binder 7535:7538 <> inv1:161
R7599:7606 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7711:7718 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R7607:7613 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7619:7620 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7625:7629 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7614:7618 VST.floyd.for_lemmas <> Delta:153 var
R7621:7624 VST.floyd.for_lemmas <> inv0:160 var
R7630:7632 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R7640:7641 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R7637:7639 compcert.common.Values <> val ind
binder 7633:7634 <> n':162
R7675:7678 VST.msl.seplog <> ::logic:x_'&&'_x not
R7642:7645 VST.msl.seplog <> ::logic:'!!'_x not
R7674:7674 VST.msl.seplog <> ::logic:'!!'_x not
R7646:7656 VST.floyd.for_lemmas <> Int6432_val ind
R7673:7673 VST.floyd.for_lemmas <> n:158 var
R7670:7671 VST.floyd.for_lemmas <> n':162 var
R7659:7664 compcert.cfrontend.Clight <> typeof def
R7666:7667 VST.floyd.for_lemmas <> hi:157 var
R7679:7683 VST.veric.SeparationLogic <> local def
R7686:7688 VST.veric.lift LiftNotation :::'`'_x not
R7694:7709 VST.veric.lift LiftNotation :::'`'_x not
R7689:7690 Coq.Init.Logic <> eq ind
R7692:7693 VST.floyd.for_lemmas <> n':162 var
R7697:7705 VST.veric.expr <> eval_expr def
R7707:7708 VST.floyd.for_lemmas <> hi:157 var
R7758:7765 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R7719:7725 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7731:7732 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7737:7741 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R7726:7730 VST.floyd.for_lemmas <> Delta:153 var
R7733:7736 VST.floyd.for_lemmas <> inv0:160 var
R7742:7748 VST.veric.SeparationLogic <> tc_expr def
R7756:7757 VST.floyd.for_lemmas <> hi:157 var
R7750:7754 VST.floyd.for_lemmas <> Delta:153 var
R7766:7766 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R7804:7812 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R7767:7781 VST.veric.SeparationLogic <> closed_wrt_vars def
R7791:7803 VST.floyd.for_lemmas <> assert_callee:159 var
R7784:7785 Coq.Init.Logic <> eq ind
R7787:7788 VST.floyd.for_lemmas <> _i:154 var
R7888:7895 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R7881:7883 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7864:7867 VST.msl.seplog <> ::logic:x_'&&'_x not
R7813:7817 VST.veric.SeparationLogic <> local def
R7820:7832 VST.floyd.canon <> locald_denote def
R7835:7838 VST.floyd.canon <> temp constr
R7844:7847 compcert.common.Values <> Vint constr
R7850:7857 compcert.lib.Integers Int repr def
R7859:7859 VST.floyd.for_lemmas <> i:155 var
R7840:7841 VST.floyd.for_lemmas <> _i:154 var
R7868:7880 VST.floyd.for_lemmas <> assert_callee:159 var
R7884:7887 VST.floyd.for_lemmas <> inv1:161 var
R7920:7922 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7912:7915 VST.msl.seplog <> ::logic:x_'&&'_x not
R7896:7899 VST.msl.seplog <> ::logic:'!!'_x not
R7911:7911 VST.msl.seplog <> ::logic:'!!'_x not
R7901:7904 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R7906:7909 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R7900:7900 VST.floyd.for_lemmas <> m:156 var
R7905:7905 VST.floyd.for_lemmas <> i:155 var
R7905:7905 VST.floyd.for_lemmas <> i:155 var
R7910:7910 VST.floyd.for_lemmas <> n:158 var
R7916:7919 VST.floyd.for_lemmas <> inv1:161 var
R7923:7926 VST.floyd.for_lemmas <> inv0:160 var
R7545:7556 VST.floyd.for_lemmas <> Sfor_inv_rec ind
R7595:7598 VST.floyd.for_lemmas <> inv1:161 var
R7590:7593 VST.floyd.for_lemmas <> inv0:160 var
R7576:7588 VST.floyd.for_lemmas <> assert_callee:159 var
R7574:7574 VST.floyd.for_lemmas <> n:158 var
R7571:7572 VST.floyd.for_lemmas <> hi:157 var
R7569:7569 VST.floyd.for_lemmas <> m:156 var
R7567:7567 VST.floyd.for_lemmas <> i:155 var
R7564:7565 VST.floyd.for_lemmas <> _i:154 var
R7558:7562 VST.floyd.for_lemmas <> Delta:153 var
binder 8027:8027 <> x:163
R8032:8036 Coq.Init.Logic <> proj1 thm
R8042:8042 VST.floyd.for_lemmas <> x:163 var
binder 8027:8027 <> x:164
R8032:8036 Coq.Init.Logic <> proj1 thm
R8042:8042 VST.floyd.for_lemmas <> x:164 var
R8081:8089 VST.msl.log_normalize <> exp_andp2 thm
R8081:8089 VST.msl.log_normalize <> exp_andp2 thm
R8081:8089 VST.msl.log_normalize <> exp_andp2 thm
R8104:8111 VST.msl.seplog <> exp_left meth
R8104:8111 VST.msl.seplog <> exp_left meth
binder 8142:8142 <> x:165
R8147:8151 Coq.Init.Logic <> proj1 thm
R8154:8158 Coq.Init.Logic <> proj2 thm
R8164:8164 VST.floyd.for_lemmas <> x:165 var
binder 8142:8142 <> x:166
R8147:8151 Coq.Init.Logic <> proj1 thm
R8154:8158 Coq.Init.Logic <> proj2 thm
R8164:8164 VST.floyd.for_lemmas <> x:166 var
R8204:8212 VST.msl.log_normalize <> exp_andp2 thm
R8204:8212 VST.msl.log_normalize <> exp_andp2 thm
R8204:8212 VST.msl.log_normalize <> exp_andp2 thm
R8227:8234 VST.msl.seplog <> exp_left meth
R8227:8234 VST.msl.seplog <> exp_left meth
binder 8265:8265 <> x:167
R8270:8274 Coq.Init.Logic <> proj1 thm
R8277:8281 Coq.Init.Logic <> proj2 thm
R8284:8288 Coq.Init.Logic <> proj2 thm
R8294:8294 VST.floyd.for_lemmas <> x:167 var
binder 8265:8265 <> x:168
R8270:8274 Coq.Init.Logic <> proj1 thm
R8277:8281 Coq.Init.Logic <> proj2 thm
R8284:8288 Coq.Init.Logic <> proj2 thm
R8294:8294 VST.floyd.for_lemmas <> x:168 var
R8333:8346 VST.floyd.closed_lemmas <> closed_wrt_exp thm
R8333:8346 VST.floyd.closed_lemmas <> closed_wrt_exp thm
binder 8377:8377 <> x:169
R8382:8386 Coq.Init.Logic <> proj1 thm
R8389:8393 Coq.Init.Logic <> proj2 thm
R8396:8400 Coq.Init.Logic <> proj2 thm
R8403:8407 Coq.Init.Logic <> proj2 thm
R8413:8413 VST.floyd.for_lemmas <> x:169 var
binder 8377:8377 <> x:170
R8382:8386 Coq.Init.Logic <> proj1 thm
R8389:8393 Coq.Init.Logic <> proj2 thm
R8396:8400 Coq.Init.Logic <> proj2 thm
R8403:8407 Coq.Init.Logic <> proj2 thm
R8413:8413 VST.floyd.for_lemmas <> x:170 var
R8455:8463 VST.msl.log_normalize <> exp_andp2 thm
R8455:8463 VST.msl.log_normalize <> exp_andp2 thm
R8455:8463 VST.msl.log_normalize <> exp_andp2 thm
R8478:8486 VST.msl.log_normalize <> exp_congr thm
R8478:8486 VST.msl.log_normalize <> exp_congr thm
binder 8517:8517 <> x:171
R8522:8526 Coq.Init.Logic <> proj2 thm
R8529:8533 Coq.Init.Logic <> proj2 thm
R8536:8540 Coq.Init.Logic <> proj2 thm
R8543:8547 Coq.Init.Logic <> proj2 thm
R8553:8553 VST.floyd.for_lemmas <> x:171 var
binder 8517:8517 <> x:172
R8522:8526 Coq.Init.Logic <> proj2 thm
R8529:8533 Coq.Init.Logic <> proj2 thm
R8536:8540 Coq.Init.Logic <> proj2 thm
R8543:8547 Coq.Init.Logic <> proj2 thm
R8553:8553 VST.floyd.for_lemmas <> x:172 var
R8595:8603 VST.msl.log_normalize <> exp_andp2 thm
R8595:8603 VST.msl.log_normalize <> exp_andp2 thm
R8595:8603 VST.msl.log_normalize <> exp_andp2 thm
R8618:8626 VST.msl.log_normalize <> exp_congr thm
R8618:8626 VST.msl.log_normalize <> exp_congr thm
R8693:8711 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R8693:8711 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R8752:8760 Coq.Lists.List <> app_nil_l thm
R8769:8789 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R8752:8760 Coq.Lists.List <> app_nil_l thm
R8752:8760 Coq.Lists.List <> app_nil_l thm
R8769:8789 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R8769:8789 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R8824:8835 VST.floyd.canon <> insert_local thm
R8841:8851 VST.floyd.canon <> insert_prop thm
R8824:8835 VST.floyd.canon <> insert_local thm
R8824:8835 VST.floyd.canon <> insert_local thm
R8841:8851 VST.floyd.canon <> insert_prop thm
R8841:8851 VST.floyd.canon <> insert_prop thm
R8901:8913 VST.msl.seplog <> derives_trans meth
R8901:8913 VST.msl.seplog <> derives_trans meth
R8965:8976 VST.floyd.canon <> insert_local thm
R8982:8992 VST.floyd.canon <> insert_prop thm
R8965:8976 VST.floyd.canon <> insert_local thm
R8965:8976 VST.floyd.canon <> insert_local thm
R8982:8992 VST.floyd.canon <> insert_prop thm
R8982:8992 VST.floyd.canon <> insert_prop thm
R9008:9020 VST.msl.seplog <> derives_trans meth
R9008:9020 VST.msl.seplog <> derives_trans meth
R9070:9090 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R9093:9101 Coq.Lists.List <> app_nil_l thm
R9070:9090 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R9070:9090 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R9093:9101 Coq.Lists.List <> app_nil_l thm
R9093:9101 Coq.Lists.List <> app_nil_l thm
R9125:9140 VST.floyd.closed_lemmas <> closed_wrt_PROPx thm
R9125:9140 VST.floyd.closed_lemmas <> closed_wrt_PROPx thm
R9155:9171 VST.floyd.closed_lemmas <> closed_wrt_LOCALx thm
R9183:9197 VST.floyd.closed_lemmas <> closed_wrt_SEPx thm
R9155:9171 VST.floyd.closed_lemmas <> closed_wrt_LOCALx thm
R9183:9197 VST.floyd.closed_lemmas <> closed_wrt_SEPx thm
R9215:9227 Coq.Lists.List <> Forall_forall thm
R9215:9227 Coq.Lists.List <> Forall_forall thm
R9215:9227 Coq.Lists.List <> Forall_forall thm
R9258:9267 Coq.Lists.List <> in_map_iff thm
R9258:9267 Coq.Lists.List <> in_map_iff thm
R9258:9267 Coq.Lists.List <> in_map_iff thm
R9327:9341 VST.floyd.local2ptree_denote <> LocalD_complete thm
R9327:9341 VST.floyd.local2ptree_denote <> LocalD_complete thm
R9443:9457 VST.floyd.closed_lemmas <> closed_wrt_temp thm
R9443:9457 VST.floyd.closed_lemmas <> closed_wrt_temp thm
R9509:9523 VST.floyd.closed_lemmas <> closed_wrt_lvar thm
R9509:9523 VST.floyd.closed_lemmas <> closed_wrt_lvar thm
R9540:9555 VST.floyd.closed_lemmas <> closed_wrt_gvars thm
R9540:9555 VST.floyd.closed_lemmas <> closed_wrt_gvars thm
R9575:9586 VST.floyd.canon <> insert_local thm
R9575:9586 VST.floyd.canon <> insert_local thm
R9575:9586 VST.floyd.canon <> insert_local thm
R9625:9635 VST.floyd.canon <> insert_prop thm
R9625:9635 VST.floyd.canon <> insert_prop thm
R9625:9635 VST.floyd.canon <> insert_prop thm
prf 9669:9681 <> Sfor_inv_spec
R9696:9704 VST.veric.mpred <> compspecs class
binder 9692:9693 <> cs:173
R9715:9723 VST.veric.seplog <> tycontext ind
binder 9708:9712 <> Delta:174
binder 9736:9737 <> _i:175
binder 9739:9739 <> m:176
binder 9741:9742 <> hi:177
binder 9744:9744 <> n:178
binder 9746:9758 <> assert_callee:179
binder 9760:9763 <> inv0:180
binder 9765:9768 <> inv1:181
binder 9770:9773 <> inv2:182
R9833:9840 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9945:9952 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R9841:9847 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R9853:9854 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R9859:9863 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R9848:9852 VST.floyd.for_lemmas <> Delta:174 var
R9855:9858 VST.floyd.for_lemmas <> inv0:180 var
R9864:9866 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R9874:9875 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R9871:9873 compcert.common.Values <> val ind
binder 9867:9868 <> n':183
R9909:9912 VST.msl.seplog <> ::logic:x_'&&'_x not
R9876:9879 VST.msl.seplog <> ::logic:'!!'_x not
R9908:9908 VST.msl.seplog <> ::logic:'!!'_x not
R9880:9890 VST.floyd.for_lemmas <> Int6432_val ind
R9907:9907 VST.floyd.for_lemmas <> n:178 var
R9904:9905 VST.floyd.for_lemmas <> n':183 var
R9893:9898 compcert.cfrontend.Clight <> typeof def
R9900:9901 VST.floyd.for_lemmas <> hi:177 var
R9913:9917 VST.veric.SeparationLogic <> local def
R9920:9922 VST.veric.lift LiftNotation :::'`'_x not
R9928:9943 VST.veric.lift LiftNotation :::'`'_x not
R9923:9924 Coq.Init.Logic <> eq ind
R9926:9927 VST.floyd.for_lemmas <> n':183 var
R9931:9939 VST.veric.expr <> eval_expr def
R9941:9942 VST.floyd.for_lemmas <> hi:177 var
R9992:9999 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R9953:9959 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R9965:9966 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R9971:9975 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R9960:9964 VST.floyd.for_lemmas <> Delta:174 var
R9967:9970 VST.floyd.for_lemmas <> inv0:180 var
R9976:9982 VST.veric.SeparationLogic <> tc_expr def
R9990:9991 VST.floyd.for_lemmas <> hi:177 var
R9984:9988 VST.floyd.for_lemmas <> Delta:174 var
R10000:10000 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R10062:10070 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
binder 10008:10008 <> v:184
binder 10010:10010 <> i:185
R10044:10046 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10013:10017 VST.veric.seplog <> subst def
R10028:10040 VST.floyd.for_lemmas <> assert_callee:179 var
R10042:10042 VST.floyd.for_lemmas <> i:185 var
R10023:10023 VST.veric.lift LiftNotation :::'`'_x not
R10024:10024 VST.floyd.for_lemmas <> v:184 var
R10019:10020 VST.floyd.for_lemmas <> _i:175 var
R10047:10059 VST.floyd.for_lemmas <> assert_callee:179 var
R10061:10061 VST.floyd.for_lemmas <> i:185 var
R10071:10071 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R10161:10169 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
binder 10079:10079 <> i:186
R10152:10154 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10133:10136 VST.msl.seplog <> ::logic:x_'&&'_x not
R10082:10086 VST.veric.SeparationLogic <> local def
R10089:10101 VST.floyd.canon <> locald_denote def
R10104:10107 VST.floyd.canon <> temp constr
R10113:10116 compcert.common.Values <> Vint constr
R10119:10126 compcert.lib.Integers Int repr def
R10128:10128 VST.floyd.for_lemmas <> i:186 var
R10109:10110 VST.floyd.for_lemmas <> _i:175 var
R10137:10149 VST.floyd.for_lemmas <> assert_callee:179 var
R10151:10151 VST.floyd.for_lemmas <> i:186 var
R10155:10158 VST.floyd.for_lemmas <> inv1:181 var
R10160:10160 VST.floyd.for_lemmas <> i:186 var
R10170:10170 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R10264:10273 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R10316:10316 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
binder 10178:10178 <> i:187
R10255:10257 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10232:10235 VST.msl.seplog <> ::logic:x_'&&'_x not
R10181:10185 VST.veric.SeparationLogic <> local def
R10188:10200 VST.floyd.canon <> locald_denote def
R10203:10206 VST.floyd.canon <> temp constr
R10212:10215 compcert.common.Values <> Vint constr
R10218:10225 compcert.lib.Integers Int repr def
R10227:10227 VST.floyd.for_lemmas <> i:187 var
R10208:10209 VST.floyd.for_lemmas <> _i:175 var
R10236:10248 VST.floyd.for_lemmas <> assert_callee:179 var
R10252:10252 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R10251:10251 VST.floyd.for_lemmas <> i:187 var
R10258:10261 VST.floyd.for_lemmas <> inv2:182 var
R10263:10263 VST.floyd.for_lemmas <> i:187 var
R10309:10311 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10274:10276 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R10281:10282 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R10280:10280 Coq.Numbers.BinNums <> Z ind
binder 10277:10277 <> i:188
R10299:10302 VST.msl.seplog <> ::logic:x_'&&'_x not
R10283:10286 VST.msl.seplog <> ::logic:'!!'_x not
R10298:10298 VST.msl.seplog <> ::logic:'!!'_x not
R10288:10291 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R10293:10296 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R10287:10287 VST.floyd.for_lemmas <> m:176 var
R10292:10292 VST.floyd.for_lemmas <> i:188 var
R10292:10292 VST.floyd.for_lemmas <> i:188 var
R10297:10297 VST.floyd.for_lemmas <> n:178 var
R10303:10306 VST.floyd.for_lemmas <> inv1:181 var
R10308:10308 VST.floyd.for_lemmas <> i:188 var
R10312:10315 VST.floyd.for_lemmas <> inv0:180 var
R9780:9787 VST.floyd.for_lemmas <> Sfor_inv ind
R9829:9832 VST.floyd.for_lemmas <> inv2:182 var
R9824:9827 VST.floyd.for_lemmas <> inv1:181 var
R9819:9822 VST.floyd.for_lemmas <> inv0:180 var
R9805:9817 VST.floyd.for_lemmas <> assert_callee:179 var
R9803:9803 VST.floyd.for_lemmas <> n:178 var
R9800:9801 VST.floyd.for_lemmas <> hi:177 var
R9798:9798 VST.floyd.for_lemmas <> m:176 var
R9795:9796 VST.floyd.for_lemmas <> _i:175 var
R9789:9793 VST.floyd.for_lemmas <> Delta:174 var
R10410:10410 Coq.Numbers.BinNums <> Z ind
binder 10403:10403 <> i:189
binder 10405:10406 <> i':190
R10426:10437 VST.floyd.for_lemmas <> Sfor_inv_rec ind
R10496:10497 VST.floyd.for_lemmas <> i':190 var
R10494:10494 VST.floyd.for_lemmas <> i:189 var
R10484:10485 VST.floyd.for_lemmas <> i':190 var
R10482:10482 VST.floyd.for_lemmas <> i:189 var
R10473:10473 VST.floyd.for_lemmas <> i:189 var
R10448:10449 VST.floyd.for_lemmas <> i':190 var
R10410:10410 Coq.Numbers.BinNums <> Z ind
binder 10403:10403 <> i:191
binder 10405:10406 <> i':192
R10426:10437 VST.floyd.for_lemmas <> Sfor_inv_rec ind
R10496:10497 VST.floyd.for_lemmas <> i':192 var
R10494:10494 VST.floyd.for_lemmas <> i:191 var
R10484:10485 VST.floyd.for_lemmas <> i':192 var
R10482:10482 VST.floyd.for_lemmas <> i:191 var
R10473:10473 VST.floyd.for_lemmas <> i:191 var
R10448:10449 VST.floyd.for_lemmas <> i':192 var
binder 10652:10652 <> i:193
binder 10654:10655 <> i':194
R10660:10676 VST.floyd.for_lemmas <> Sfor_inv_rec_spec thm
R10701:10702 VST.floyd.for_lemmas <> i':194 var
R10699:10699 VST.floyd.for_lemmas <> i:193 var
binder 10652:10652 <> i:195
binder 10654:10655 <> i':196
R10660:10676 VST.floyd.for_lemmas <> Sfor_inv_rec_spec thm
R10701:10702 VST.floyd.for_lemmas <> i':196 var
R10699:10699 VST.floyd.for_lemmas <> i:195 var
R10951:10966 VST.floyd.closed_lemmas <> closed_wrt_subst thm
R10951:10966 VST.floyd.closed_lemmas <> closed_wrt_subst thm
R11151:11153 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R11151:11153 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R11218:11226 VST.msl.log_normalize <> exp_congr thm
R11218:11226 VST.msl.log_normalize <> exp_congr thm
prf 11322:11336 <> Sfor_setup_spec
R11351:11359 VST.veric.mpred <> compspecs class
binder 11347:11348 <> cs:197
R11370:11379 VST.veric.juicy_extspec <> OracleKind class
binder 11363:11367 <> Espec:198
R11390:11398 VST.veric.seplog <> tycontext ind
binder 11383:11387 <> Delta:199
binder 11411:11412 <> _i:200
binder 11414:11416 <> Pre:201
binder 11418:11421 <> init:202
binder 11423:11428 <> type_i:203
binder 11430:11431 <> hi:204
binder 11433:11433 <> m:205
binder 11435:11435 <> n:206
binder 11437:11449 <> assert_callee:207
binder 11451:11454 <> inv0:208
binder 11456:11459 <> inv1:209
R11527:11534 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11576:11578 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11553:11553 compcert.lib.Maps <> :::x_'!'_x not
R11570:11573 compcert.lib.Maps <> :::x_'!'_x not
R11574:11575 VST.floyd.for_lemmas <> _i:200 var
R11554:11563 VST.veric.seplog <> temp_types def
R11565:11569 VST.floyd.for_lemmas <> Delta:199 var
R11579:11582 Coq.Init.Datatypes <> Some constr
R11584:11589 VST.floyd.for_lemmas <> type_i:203 var
binder 11549:11550 <> TI:210
R11597:11597 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11687:11695 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11696:11696 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11739:11747 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11748:11748 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11810:11818 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11874:11881 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R11820:11824 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R11851:11867 VST.veric.SeparationLogic <> normal_ret_assert def
R11869:11872 VST.floyd.for_lemmas <> inv0:208 var
R11845:11848 VST.floyd.for_lemmas <> init:202 var
R11841:11843 VST.floyd.for_lemmas <> Pre:201 var
R11835:11839 VST.floyd.for_lemmas <> Delta:199 var
R11829:11833 VST.floyd.for_lemmas <> Espec:198 var
R11826:11827 VST.floyd.for_lemmas <> cs:197 var
R11882:11888 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R11904:11909 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 11889:11895 <> int_min:211
binder 11897:11903 <> int_max:212
R11971:11978 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R11945:11947 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11910:11925 VST.floyd.for_lemmas <> int_type_min_max def
R11935:11940 compcert.cfrontend.Clight <> typeof def
R11942:11943 VST.floyd.for_lemmas <> hi:204 var
R11927:11932 VST.floyd.for_lemmas <> type_i:203 var
R11948:11951 Coq.Init.Datatypes <> Some constr
R11953:11953 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11961:11962 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11970:11970 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11954:11960 VST.floyd.for_lemmas <> int_min:211 var
R11963:11969 VST.floyd.for_lemmas <> int_max:212 var
R12006:12015 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R11999:12001 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11979:11991 VST.veric.expr <> is_int32_type def
R11993:11998 VST.floyd.for_lemmas <> type_i:203 var
R12002:12005 Coq.Init.Datatypes <> true constr
R12039:12046 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R12023:12026 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12028:12031 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12016:12022 VST.floyd.for_lemmas <> int_min:211 var
R12027:12027 VST.floyd.for_lemmas <> m:205 var
R12027:12027 VST.floyd.for_lemmas <> m:205 var
R12032:12038 VST.floyd.for_lemmas <> int_max:212 var
R12054:12057 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12059:12062 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R12047:12053 VST.floyd.for_lemmas <> int_min:211 var
R12058:12058 VST.floyd.for_lemmas <> n:206 var
R12058:12058 VST.floyd.for_lemmas <> n:206 var
R12063:12069 VST.floyd.for_lemmas <> int_max:212 var
binder 11756:11756 <> v:213
binder 11758:11758 <> i:214
R11792:11794 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11761:11765 VST.veric.seplog <> subst def
R11776:11788 VST.floyd.for_lemmas <> assert_callee:207 var
R11790:11790 VST.floyd.for_lemmas <> i:214 var
R11771:11771 VST.veric.lift LiftNotation :::'`'_x not
R11772:11772 VST.floyd.for_lemmas <> v:213 var
R11767:11768 VST.floyd.for_lemmas <> _i:200 var
R11795:11807 VST.floyd.for_lemmas <> assert_callee:207 var
R11809:11809 VST.floyd.for_lemmas <> i:214 var
R11732:11734 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11697:11699 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R11704:11705 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R11703:11703 Coq.Numbers.BinNums <> Z ind
binder 11700:11700 <> i:215
R11722:11725 VST.msl.seplog <> ::logic:x_'&&'_x not
R11706:11709 VST.msl.seplog <> ::logic:'!!'_x not
R11721:11721 VST.msl.seplog <> ::logic:'!!'_x not
R11711:11714 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R11716:11719 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R11710:11710 VST.floyd.for_lemmas <> m:205 var
R11715:11715 VST.floyd.for_lemmas <> i:215 var
R11715:11715 VST.floyd.for_lemmas <> i:215 var
R11720:11720 VST.floyd.for_lemmas <> n:206 var
R11726:11729 VST.floyd.for_lemmas <> inv1:209 var
R11731:11731 VST.floyd.for_lemmas <> i:215 var
R11735:11738 VST.floyd.for_lemmas <> inv0:208 var
binder 11605:11605 <> i:216
R11678:11680 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11659:11662 VST.msl.seplog <> ::logic:x_'&&'_x not
R11608:11612 VST.veric.SeparationLogic <> local def
R11615:11627 VST.floyd.canon <> locald_denote def
R11630:11633 VST.floyd.canon <> temp constr
R11639:11642 compcert.common.Values <> Vint constr
R11645:11652 compcert.lib.Integers Int repr def
R11654:11654 VST.floyd.for_lemmas <> i:216 var
R11635:11636 VST.floyd.for_lemmas <> _i:200 var
R11663:11675 VST.floyd.for_lemmas <> assert_callee:207 var
R11677:11677 VST.floyd.for_lemmas <> i:216 var
R11681:11684 VST.floyd.for_lemmas <> inv1:209 var
R11686:11686 VST.floyd.for_lemmas <> i:216 var
R11466:11475 VST.floyd.for_lemmas <> Sfor_setup ind
R11523:11526 VST.floyd.for_lemmas <> inv0:208 var
R11509:11521 VST.floyd.for_lemmas <> assert_callee:207 var
R11507:11507 VST.floyd.for_lemmas <> n:206 var
R11505:11505 VST.floyd.for_lemmas <> m:205 var
R11498:11503 VST.floyd.for_lemmas <> type_i:203 var
R11495:11496 VST.floyd.for_lemmas <> hi:204 var
R11490:11493 VST.floyd.for_lemmas <> init:202 var
R11486:11488 VST.floyd.for_lemmas <> Pre:201 var
R11483:11484 VST.floyd.for_lemmas <> _i:200 var
R11477:11481 VST.floyd.for_lemmas <> Delta:199 var
R12112:12117 compcert.cfrontend.Clight <> typeof def
R12112:12117 compcert.cfrontend.Clight <> typeof def
R12178:12186 VST.floyd.canon <> semax_pre thm
R12178:12186 VST.floyd.canon <> semax_pre thm
R12225:12235 VST.floyd.canon <> semax_post' thm
R12225:12235 VST.floyd.canon <> semax_post' thm
R12274:12283 VST.msl.seplog <> andp_left2 meth
R12287:12295 VST.msl.seplog <> exp_right meth
R12274:12283 VST.msl.seplog <> andp_left2 meth
R12287:12295 VST.msl.seplog <> exp_right meth
R12315:12324 VST.msl.seplog <> andp_right meth
R12334:12343 VST.msl.seplog <> prop_right meth
R12315:12324 VST.msl.seplog <> andp_right meth
R12334:12343 VST.msl.seplog <> prop_right meth
R12368:12380 VST.msl.log_normalize <> derives_refl' thm
R12368:12380 VST.msl.log_normalize <> derives_refl' thm
R12408:12422 VST.floyd.canon <> semax_pre_post' thm
R12436:12452 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_set_forward prfax
R12408:12422 VST.floyd.canon <> semax_pre_post' thm
R12436:12452 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_set_forward prfax
R12471:12483 VST.msl.seplog <> derives_trans meth
R12495:12503 VST.msl.seplog <> now_later meth
R12471:12483 VST.msl.seplog <> derives_trans meth
R12495:12503 VST.msl.seplog <> now_later meth
R12521:12530 VST.msl.seplog <> andp_right meth
R12542:12551 VST.msl.seplog <> andp_left2 meth
R12554:12565 VST.msl.seplog <> derives_refl meth
R12521:12530 VST.msl.seplog <> andp_right meth
R12542:12551 VST.msl.seplog <> andp_left2 meth
R12554:12565 VST.msl.seplog <> derives_refl meth
R12584:12590 VST.veric.SeparationLogic <> tc_expr def
R12593:12602 VST.veric.SeparationLogic <> tc_temp_id def
R12619:12628 VST.msl.seplog <> andp_right meth
R12639:12661 VST.floyd.const_only_eval <> const_only_eval_expr_tc thm
R12619:12628 VST.msl.seplog <> andp_right meth
R12639:12661 VST.floyd.const_only_eval <> const_only_eval_expr_tc thm
R12689:12705 VST.veric.expr <> typecheck_temp_id def
R12767:12781 VST.veric.expr <> is_neutral_cast def
R12784:12797 VST.veric.expr <> implicit_deref def
R12800:12805 compcert.cfrontend.Clight <> typeof def
R12825:12828 Coq.Init.Datatypes <> true constr
R12854:12859 compcert.cfrontend.Clight <> typeof def
R12767:12781 VST.veric.expr <> is_neutral_cast def
R12784:12797 VST.veric.expr <> implicit_deref def
R12800:12805 compcert.cfrontend.Clight <> typeof def
R12825:12828 Coq.Init.Datatypes <> true constr
R12854:12859 compcert.cfrontend.Clight <> typeof def
R13028:13043 VST.veric.expr <> isCastResultType def
R13133:13148 Coq.Init.Datatypes <> ::bool_scope:x_'||'_x not
R13085:13088 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R13063:13077 VST.veric.expr <> is_pointer_type def
R13089:13103 VST.veric.expr <> is_pointer_type def
R13106:13119 VST.veric.expr <> implicit_deref def
R13122:13127 compcert.cfrontend.Clight <> typeof def
R13167:13170 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R13149:13159 VST.veric.expr <> is_int_type def
R13171:13181 VST.veric.expr <> is_int_type def
R13184:13197 VST.veric.expr <> implicit_deref def
R13200:13205 compcert.cfrontend.Clight <> typeof def
R13223:13226 Coq.Init.Datatypes <> true constr
R13252:13257 compcert.cfrontend.Clight <> typeof def
R13133:13148 Coq.Init.Datatypes <> ::bool_scope:x_'||'_x not
R13085:13088 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R13063:13077 VST.veric.expr <> is_pointer_type def
R13089:13103 VST.veric.expr <> is_pointer_type def
R13106:13119 VST.veric.expr <> implicit_deref def
R13122:13127 compcert.cfrontend.Clight <> typeof def
R13167:13170 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R13149:13159 VST.veric.expr <> is_int_type def
R13171:13181 VST.veric.expr <> is_int_type def
R13184:13197 VST.veric.expr <> implicit_deref def
R13200:13205 compcert.cfrontend.Clight <> typeof def
R13223:13226 Coq.Init.Datatypes <> true constr
R13252:13257 compcert.cfrontend.Clight <> typeof def
R13400:13410 VST.floyd.typecheck_lemmas <> tc_andp_TT1 thm
R13400:13410 VST.floyd.typecheck_lemmas <> tc_andp_TT1 thm
R13400:13410 VST.floyd.typecheck_lemmas <> tc_andp_TT1 thm
R13431:13436 compcert.cfrontend.Clight <> typeof def
R13611:13621 compcert.x86_32.Archi <> ptr64 def
R13641:13648 VST.msl.log_normalize <> TT_right thm
R13431:13436 compcert.cfrontend.Clight <> typeof def
R13611:13621 compcert.x86_32.Archi <> ptr64 def
R13611:13621 compcert.x86_32.Archi <> ptr64 def
R13611:13621 compcert.x86_32.Archi <> ptr64 def
R13611:13621 compcert.x86_32.Archi <> ptr64 def
R13641:13648 VST.msl.log_normalize <> TT_right thm
R13641:13648 VST.msl.log_normalize <> TT_right thm
R13641:13648 VST.msl.log_normalize <> TT_right thm
R13641:13648 VST.msl.log_normalize <> TT_right thm
R13641:13648 VST.msl.log_normalize <> TT_right thm
R13641:13648 VST.msl.log_normalize <> TT_right thm
R13641:13648 VST.msl.log_normalize <> TT_right thm
R13641:13648 VST.msl.log_normalize <> TT_right thm
R13680:13687 VST.msl.log_normalize <> TT_right thm
R13680:13687 VST.msl.log_normalize <> TT_right thm
R13680:13687 VST.msl.log_normalize <> TT_right thm
R13704:13713 VST.msl.seplog <> andp_left2 meth
R13704:13713 VST.msl.seplog <> andp_left2 meth
R13750:13761 VST.msl.log_normalize <> andp_derives thm
R13750:13761 VST.msl.log_normalize <> andp_derives thm
R13828:13850 VST.floyd.const_only_eval <> const_only_eval_expr_eq thm
R13853:13859 VST.veric.mpred <> env_set def
R13828:13850 VST.floyd.const_only_eval <> const_only_eval_expr_eq thm
R13853:13859 VST.veric.mpred <> env_set def
R13896:13900 VST.veric.seplog <> subst def
R13903:13907 VST.veric.SeparationLogic <> local def
R13910:13914 VST.veric.mpred <> lift1 def
prf 14353:14370 <> typed_false_tint_e
binder 14382:14382 <> v:217
R14403:14406 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14408:14410 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14407:14407 VST.floyd.for_lemmas <> v:217 var
R14411:14414 compcert.common.Values <> Vint constr
R14416:14423 compcert.lib.Integers Int zero def
R14385:14395 VST.veric.SeparationLogic <> typed_false def
R14402:14402 VST.floyd.for_lemmas <> v:217 var
R14397:14400 compcert.exportclight.Clightdefs <> tint def
R14479:14489 compcert.lib.Integers Int eq_spec thm
R14493:14500 compcert.lib.Integers Int zero def
R14479:14489 compcert.lib.Integers Int eq_spec thm
R14493:14500 compcert.lib.Integers Int zero def
R14514:14519 compcert.lib.Integers Int eq def
R14523:14530 compcert.lib.Integers Int zero def
R14514:14519 compcert.lib.Integers Int eq def
R14523:14530 compcert.lib.Integers Int zero def
sec 14562:14565 <> Sfor
R14583:14591 VST.veric.mpred <> compspecs class
binder 14578:14579 <> cs:218
R14610:14618 VST.veric.seplog <> tycontext ind
binder 14603:14607 <> Delta:219
R14634:14638 compcert.common.AST <> ident def
binder 14630:14631 <> _i:220
R14655:14655 Coq.Numbers.BinNums <> Z ind
binder 14650:14650 <> m:221
binder 14652:14652 <> n:222
R14673:14681 compcert.cfrontend.Clight <> statement ind
binder 14667:14670 <> init:223
R14697:14700 compcert.cfrontend.Clight <> expr ind
binder 14693:14694 <> hi:224
R14725:14728 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14729:14733 VST.veric.mpred <> mpred def
R14718:14724 VST.veric.mpred <> environ ind
binder 14712:14715 <> inv0:225
R14771:14774 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14782:14785 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14786:14790 VST.veric.mpred <> mpred def
R14775:14781 VST.veric.mpred <> environ ind
R14770:14770 Coq.Numbers.BinNums <> Z ind
binder 14745:14757 <> assert_callee:226
binder 14759:14762 <> inv1:227
binder 14764:14767 <> inv2:228
R14810:14813 compcert.cfrontend.Ctypes <> type ind
binder 14802:14807 <> type_i:229
R14842:14842 Coq.Numbers.BinNums <> Z ind
binder 14825:14831 <> int_min:230
binder 14833:14839 <> int_max:231
var 14858:14864 Sfor EVAL_hi
R14867:14873 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R14879:14880 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R14885:14889 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R14874:14878 VST.floyd.for_lemmas <> Sfor.Delta var
R14881:14884 VST.floyd.for_lemmas <> Sfor.inv0 var
R14890:14892 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R14900:14901 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R14897:14899 compcert.common.Values <> val ind
binder 14893:14894 <> n':232
R14935:14938 VST.msl.seplog <> ::logic:x_'&&'_x not
R14902:14905 VST.msl.seplog <> ::logic:'!!'_x not
R14934:14934 VST.msl.seplog <> ::logic:'!!'_x not
R14906:14916 VST.floyd.for_lemmas <> Int6432_val ind
R14933:14933 VST.floyd.for_lemmas <> Sfor.n var
R14930:14931 VST.floyd.for_lemmas <> n':232 var
R14919:14924 compcert.cfrontend.Clight <> typeof def
R14926:14927 VST.floyd.for_lemmas <> Sfor.hi var
R14939:14943 VST.veric.SeparationLogic <> local def
R14946:14948 VST.veric.lift LiftNotation :::'`'_x not
R14954:14969 VST.veric.lift LiftNotation :::'`'_x not
R14949:14950 Coq.Init.Logic <> eq ind
R14952:14953 VST.floyd.for_lemmas <> n':232 var
R14957:14965 VST.veric.expr <> eval_expr def
R14967:14968 VST.floyd.for_lemmas <> Sfor.hi var
var 14984:14988 Sfor TC_hi
R14991:14997 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R15003:15004 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R15009:15013 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R14998:15002 VST.floyd.for_lemmas <> Sfor.Delta var
R15005:15008 VST.floyd.for_lemmas <> Sfor.inv0 var
R15014:15020 VST.veric.SeparationLogic <> tc_expr def
R15028:15029 VST.floyd.for_lemmas <> Sfor.hi var
R15022:15026 VST.floyd.for_lemmas <> Sfor.Delta var
var 15043:15047 Sfor I32_i
R15070:15072 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15050:15062 VST.veric.expr <> is_int32_type def
R15064:15069 VST.floyd.for_lemmas <> Sfor.type_i var
R15073:15076 Coq.Init.Datatypes <> true constr
var 15090:15092 Sfor IMM
R15130:15132 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15095:15110 VST.floyd.for_lemmas <> int_type_min_max def
R15120:15125 compcert.cfrontend.Clight <> typeof def
R15127:15128 VST.floyd.for_lemmas <> Sfor.hi var
R15112:15117 VST.floyd.for_lemmas <> Sfor.type_i var
R15133:15136 Coq.Init.Datatypes <> Some constr
R15138:15138 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15146:15147 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15155:15155 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15139:15145 VST.floyd.for_lemmas <> Sfor.int_min var
R15148:15154 VST.floyd.for_lemmas <> Sfor.int_max var
var 15169:15175 Sfor Range_m
R15185:15188 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R15190:15193 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R15178:15184 VST.floyd.for_lemmas <> Sfor.int_min var
R15189:15189 VST.floyd.for_lemmas <> Sfor.m var
R15189:15189 VST.floyd.for_lemmas <> Sfor.m var
R15194:15200 VST.floyd.for_lemmas <> Sfor.int_max var
var 15214:15220 Sfor Range_n
R15230:15233 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R15235:15238 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R15223:15229 VST.floyd.for_lemmas <> Sfor.int_min var
R15234:15234 VST.floyd.for_lemmas <> Sfor.n var
R15234:15234 VST.floyd.for_lemmas <> Sfor.n var
R15239:15245 VST.floyd.for_lemmas <> Sfor.int_max var
var 15259:15260 Sfor TI
R15286:15288 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15263:15263 compcert.lib.Maps <> :::x_'!'_x not
R15280:15283 compcert.lib.Maps <> :::x_'!'_x not
R15284:15285 VST.floyd.for_lemmas <> Sfor._i var
R15264:15273 VST.veric.seplog <> temp_types def
R15275:15279 VST.floyd.for_lemmas <> Sfor.Delta var
R15289:15292 Coq.Init.Datatypes <> Some constr
R15294:15299 VST.floyd.for_lemmas <> Sfor.type_i var
var 15313:15319 Sfor EQ_inv1
R15333:15333 Coq.Numbers.BinNums <> Z ind
binder 15329:15329 <> i:240
R15406:15408 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15387:15390 VST.msl.seplog <> ::logic:x_'&&'_x not
R15336:15340 VST.veric.SeparationLogic <> local def
R15343:15355 VST.floyd.canon <> locald_denote def
R15358:15361 VST.floyd.canon <> temp constr
R15367:15370 compcert.common.Values <> Vint constr
R15373:15380 compcert.lib.Integers Int repr def
R15382:15382 VST.floyd.for_lemmas <> i:240 var
R15363:15364 VST.floyd.for_lemmas <> Sfor._i var
R15391:15403 VST.floyd.for_lemmas <> Sfor.assert_callee var
R15405:15405 VST.floyd.for_lemmas <> i:240 var
R15409:15412 VST.floyd.for_lemmas <> Sfor.inv1 var
R15414:15414 VST.floyd.for_lemmas <> i:240 var
var 15428:15434 Sfor EQ_inv0
R15482:15484 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15438:15440 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R15446:15447 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R15445:15445 Coq.Numbers.BinNums <> Z ind
binder 15441:15441 <> i:242
R15464:15467 VST.msl.seplog <> ::logic:x_'&&'_x not
R15448:15451 VST.msl.seplog <> ::logic:'!!'_x not
R15463:15463 VST.msl.seplog <> ::logic:'!!'_x not
R15453:15456 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R15458:15461 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R15452:15452 VST.floyd.for_lemmas <> Sfor.m var
R15457:15457 VST.floyd.for_lemmas <> i:242 var
R15457:15457 VST.floyd.for_lemmas <> i:242 var
R15462:15462 VST.floyd.for_lemmas <> Sfor.n var
R15468:15471 VST.floyd.for_lemmas <> Sfor.inv1 var
R15473:15473 VST.floyd.for_lemmas <> i:242 var
R15485:15488 VST.floyd.for_lemmas <> Sfor.inv0 var
var 15502:15508 Sfor EQ_inv2
binder 15518:15518 <> i:244
R15595:15597 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15572:15575 VST.msl.seplog <> ::logic:x_'&&'_x not
R15521:15525 VST.veric.SeparationLogic <> local def
R15528:15540 VST.floyd.canon <> locald_denote def
R15543:15546 VST.floyd.canon <> temp constr
R15552:15555 compcert.common.Values <> Vint constr
R15558:15565 compcert.lib.Integers Int repr def
R15567:15567 VST.floyd.for_lemmas <> i:244 var
R15548:15549 VST.floyd.for_lemmas <> Sfor._i var
R15576:15588 VST.floyd.for_lemmas <> Sfor.assert_callee var
R15592:15592 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R15591:15591 VST.floyd.for_lemmas <> i:244 var
R15598:15601 VST.floyd.for_lemmas <> Sfor.inv2 var
R15603:15603 VST.floyd.for_lemmas <> i:244 var
var 15617:15628 Sfor SUBST_callee
binder 15638:15638 <> v:246
binder 15640:15640 <> i:247
R15674:15676 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15643:15647 VST.veric.seplog <> subst def
R15658:15670 VST.floyd.for_lemmas <> Sfor.assert_callee var
R15672:15672 VST.floyd.for_lemmas <> i:247 var
R15653:15653 VST.veric.lift LiftNotation :::'`'_x not
R15654:15654 VST.floyd.for_lemmas <> v:246 var
R15649:15650 VST.floyd.for_lemmas <> Sfor._i var
R15677:15689 VST.floyd.for_lemmas <> Sfor.assert_callee var
R15691:15691 VST.floyd.for_lemmas <> i:247 var
prf 15701:15712 <> CLASSIFY_CMP
R15746:15748 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15715:15726 compcert.cfrontend.Cop <> classify_cmp def
R15736:15741 compcert.cfrontend.Clight <> typeof def
R15743:15744 VST.floyd.for_lemmas <> Sfor.hi var
R15728:15733 VST.floyd.for_lemmas <> Sfor.type_i var
R15749:15759 compcert.cfrontend.Cop <> cmp_default constr
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15780:15785 VST.floyd.for_lemmas <> Sfor.type_i var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15834:15839 compcert.cfrontend.Clight <> typeof def
R15841:15842 VST.floyd.for_lemmas <> Sfor.hi var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
R15884:15886 VST.floyd.for_lemmas <> Sfor.IMM var
prf 15907:15923 <> Sfor_loop_cond_tc
R15928:15934 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R15940:15941 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R15946:15950 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R15935:15939 VST.floyd.for_lemmas <> Sfor.Delta var
R15942:15945 VST.floyd.for_lemmas <> Sfor.inv0 var
R15951:15957 VST.veric.SeparationLogic <> tc_expr def
R15966:15970 compcert.cfrontend.Clight <> Eunop constr
R16023:16026 compcert.exportclight.Clightdefs <> tint def
R15982:15987 compcert.cfrontend.Clight <> Ebinop constr
R16017:16020 compcert.exportclight.Clightdefs <> tint def
R16014:16015 VST.floyd.for_lemmas <> Sfor.hi var
R15994:16001 compcert.cfrontend.Clight <> Etempvar constr
R16006:16011 VST.floyd.for_lemmas <> Sfor.type_i var
R16003:16004 VST.floyd.for_lemmas <> Sfor._i var
R15989:15991 compcert.cfrontend.Cop <> Olt constr
R15972:15979 compcert.cfrontend.Cop <> Onotbool constr
R15959:15963 VST.floyd.for_lemmas <> Sfor.Delta var
R16059:16064 compcert.cfrontend.Clight <> Ebinop constr
R16094:16097 compcert.exportclight.Clightdefs <> tint def
R16091:16092 VST.floyd.for_lemmas <> Sfor.hi var
R16071:16078 compcert.cfrontend.Clight <> Etempvar constr
R16083:16088 VST.floyd.for_lemmas <> Sfor.type_i var
R16080:16081 VST.floyd.for_lemmas <> Sfor._i var
R16066:16068 compcert.cfrontend.Cop <> Olt constr
R16059:16064 compcert.cfrontend.Clight <> Ebinop constr
R16094:16097 compcert.exportclight.Clightdefs <> tint def
R16091:16092 VST.floyd.for_lemmas <> Sfor.hi var
R16071:16078 compcert.cfrontend.Clight <> Etempvar constr
R16083:16088 VST.floyd.for_lemmas <> Sfor.type_i var
R16080:16081 VST.floyd.for_lemmas <> Sfor._i var
R16066:16068 compcert.cfrontend.Cop <> Olt constr
R16110:16116 VST.veric.SeparationLogic <> tc_expr def
R16157:16162 compcert.cfrontend.Clight <> typeof def
R16172:16175 compcert.exportclight.Clightdefs <> tint def
R16157:16162 compcert.cfrontend.Clight <> typeof def
R16172:16175 compcert.exportclight.Clightdefs <> tint def
R16212:16222 VST.floyd.typecheck_lemmas <> tc_andp_TT1 thm
R16212:16222 VST.floyd.typecheck_lemmas <> tc_andp_TT1 thm
R16212:16222 VST.floyd.typecheck_lemmas <> tc_andp_TT1 thm
R16246:16262 VST.veric.expr <> isBinOpResultType def
R16303:16319 VST.veric.expr <> isBinOpResultType def
R16332:16333 VST.floyd.for_lemmas <> Sfor.TI var
R16332:16333 VST.floyd.for_lemmas <> Sfor.TI var
R16332:16333 VST.floyd.for_lemmas <> Sfor.TI var
R16403:16406 Coq.Init.Datatypes <> ::bool_scope:x_'||'_x not
R16374:16388 VST.veric.expr <> is_neutral_cast def
R16397:16402 VST.floyd.for_lemmas <> Sfor.type_i var
R16390:16395 VST.floyd.for_lemmas <> Sfor.type_i var
R16407:16420 VST.veric.expr <> same_base_type def
R16429:16434 VST.floyd.for_lemmas <> Sfor.type_i var
R16422:16427 VST.floyd.for_lemmas <> Sfor.type_i var
R16447:16450 Coq.Init.Datatypes <> true constr
R16403:16406 Coq.Init.Datatypes <> ::bool_scope:x_'||'_x not
R16374:16388 VST.veric.expr <> is_neutral_cast def
R16397:16402 VST.floyd.for_lemmas <> Sfor.type_i var
R16390:16395 VST.floyd.for_lemmas <> Sfor.type_i var
R16407:16420 VST.veric.expr <> same_base_type def
R16429:16434 VST.floyd.for_lemmas <> Sfor.type_i var
R16422:16427 VST.floyd.for_lemmas <> Sfor.type_i var
R16447:16450 Coq.Init.Datatypes <> true constr
R16469:16474 VST.floyd.for_lemmas <> Sfor.type_i var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16515:16517 VST.floyd.for_lemmas <> Sfor.IMM var
R16540:16560 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R16569:16578 VST.msl.seplog <> andp_right meth
R16540:16560 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R16540:16560 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R16569:16578 VST.msl.seplog <> andp_right meth
R16598:16605 VST.msl.log_normalize <> add_andp thm
R16611:16617 VST.floyd.for_lemmas <> Sfor.EVAL_hi var
R16598:16605 VST.msl.log_normalize <> add_andp thm
R16611:16617 VST.floyd.for_lemmas <> Sfor.EVAL_hi var
R16598:16605 VST.msl.log_normalize <> add_andp thm
R16611:16617 VST.floyd.for_lemmas <> Sfor.EVAL_hi var
R16642:16651 VST.msl.seplog <> andp_left1 meth
R16642:16651 VST.msl.seplog <> andp_left1 meth
R16667:16673 VST.floyd.for_lemmas <> Sfor.EQ_inv0 var
R16667:16673 VST.floyd.for_lemmas <> Sfor.EQ_inv0 var
R16667:16673 VST.floyd.for_lemmas <> Sfor.EQ_inv0 var
R16701:16707 VST.floyd.for_lemmas <> Sfor.EQ_inv1 var
R16701:16707 VST.floyd.for_lemmas <> Sfor.EQ_inv1 var
R16701:16707 VST.floyd.for_lemmas <> Sfor.EQ_inv1 var
R16720:16740 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R16749:16758 VST.msl.seplog <> andp_right meth
R16779:16788 VST.msl.log_normalize <> andp_assoc thm
R16797:16806 VST.msl.seplog <> andp_left1 meth
R16809:16827 VST.floyd.local2ptree_typecheck <> temp_tc_initialized thm
R16720:16740 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R16720:16740 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R16749:16758 VST.msl.seplog <> andp_right meth
R16779:16788 VST.msl.log_normalize <> andp_assoc thm
R16779:16788 VST.msl.log_normalize <> andp_assoc thm
R16797:16806 VST.msl.seplog <> andp_left1 meth
R16809:16827 VST.floyd.local2ptree_typecheck <> temp_tc_initialized thm
R16849:16865 VST.veric.expr <> isBinOpResultType def
R16892:16903 VST.floyd.for_lemmas <> CLASSIFY_CMP thm
R16892:16903 VST.floyd.for_lemmas <> CLASSIFY_CMP thm
R16892:16903 VST.floyd.for_lemmas <> CLASSIFY_CMP thm
R16917:16931 VST.veric.expr <> is_numeric_type def
R16933:16938 VST.floyd.for_lemmas <> Sfor.type_i var
R16946:16949 Coq.Init.Datatypes <> true constr
R16917:16931 VST.veric.expr <> is_numeric_type def
R16933:16938 VST.floyd.for_lemmas <> Sfor.type_i var
R16946:16949 Coq.Init.Datatypes <> true constr
R16968:16973 VST.floyd.for_lemmas <> Sfor.type_i var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17014:17016 VST.floyd.for_lemmas <> Sfor.IMM var
R17037:17051 VST.veric.expr <> is_numeric_type def
R17054:17059 compcert.cfrontend.Clight <> typeof def
R17061:17062 VST.floyd.for_lemmas <> Sfor.hi var
R17071:17074 Coq.Init.Datatypes <> true constr
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17037:17051 VST.veric.expr <> is_numeric_type def
R17054:17059 compcert.cfrontend.Clight <> typeof def
R17061:17062 VST.floyd.for_lemmas <> Sfor.hi var
R17071:17074 Coq.Init.Datatypes <> true constr
R17093:17098 VST.floyd.for_lemmas <> Sfor.type_i var
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17141:17146 compcert.cfrontend.Clight <> typeof def
R17148:17149 VST.floyd.for_lemmas <> Sfor.hi var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17191:17193 VST.floyd.for_lemmas <> Sfor.IMM var
R17228:17235 VST.msl.log_normalize <> TT_right thm
R17228:17235 VST.msl.log_normalize <> TT_right thm
R16246:16262 VST.veric.expr <> isBinOpResultType def
R16303:16319 VST.veric.expr <> isBinOpResultType def
prf 17250:17275 <> Sfor_comparison_Signed_I32
binder 17285:17285 <> i:249
binder 17287:17288 <> n':250
R17321:17326 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17383:17388 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17400:17405 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17495:17501 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R17479:17481 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17406:17414 VST.veric.val_lemmas <> force_val def
R17417:17431 VST.veric.Clight_Cop2 <> sem_cmp_default def
R17476:17477 VST.floyd.for_lemmas <> n':250 var
R17457:17460 compcert.common.Values <> Vint constr
R17463:17470 compcert.lib.Integers Int repr def
R17472:17472 VST.floyd.for_lemmas <> i:249 var
R17445:17450 compcert.cfrontend.Clight <> typeof def
R17452:17453 VST.floyd.for_lemmas <> Sfor.hi var
R17437:17442 VST.floyd.for_lemmas <> Sfor.type_i var
R17433:17435 compcert.lib.Integers <> Clt constr
R17482:17485 compcert.common.Values <> Vint constr
R17487:17494 compcert.lib.Integers Int zero def
R17503:17506 Coq.ZArith.BinInt <> ::Z_scope:x_'>='_x not
R17502:17502 VST.floyd.for_lemmas <> i:249 var
R17507:17507 VST.floyd.for_lemmas <> Sfor.n var
R17390:17393 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R17395:17398 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R17389:17389 VST.floyd.for_lemmas <> Sfor.m var
R17394:17394 VST.floyd.for_lemmas <> i:249 var
R17394:17394 VST.floyd.for_lemmas <> i:249 var
R17399:17399 VST.floyd.for_lemmas <> Sfor.n var
R17363:17365 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17327:17343 compcert.cfrontend.Cop <> classify_binarith def
R17353:17358 compcert.cfrontend.Clight <> typeof def
R17360:17361 VST.floyd.for_lemmas <> Sfor.hi var
R17345:17350 VST.floyd.for_lemmas <> Sfor.type_i var
R17366:17375 compcert.cfrontend.Cop <> bin_case_i constr
R17377:17382 compcert.cfrontend.Ctypes <> Signed constr
R17293:17303 VST.floyd.for_lemmas <> Int6432_val ind
R17320:17320 VST.floyd.for_lemmas <> Sfor.n var
R17317:17318 VST.floyd.for_lemmas <> n':250 var
R17306:17311 compcert.cfrontend.Clight <> typeof def
R17313:17314 VST.floyd.for_lemmas <> Sfor.hi var
R17536:17550 VST.veric.Clight_Cop2 <> sem_cmp_default def
R17553:17576 VST.veric.Clight_Cop2 <> sem_binarith def
R17579:17591 compcert.cfrontend.Cop <> binarith_type def
R17704:17709 compcert.cfrontend.Clight <> typeof def
R17711:17712 VST.floyd.for_lemmas <> Sfor.hi var
R17619:17624 VST.floyd.for_lemmas <> Sfor.type_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17672:17676 VST.floyd.for_lemmas <> Sfor.I32_i var
R17704:17709 compcert.cfrontend.Clight <> typeof def
R17711:17712 VST.floyd.for_lemmas <> Sfor.hi var
R17704:17709 compcert.cfrontend.Clight <> typeof def
R17711:17712 VST.floyd.for_lemmas <> Sfor.hi var
R17762:17767 compcert.cfrontend.Clight <> typeof def
R17769:17770 VST.floyd.for_lemmas <> Sfor.hi var
R17762:17767 compcert.cfrontend.Clight <> typeof def
R17769:17770 VST.floyd.for_lemmas <> Sfor.hi var
R17840:17842 VST.floyd.for_lemmas <> Sfor.IMM var
R18091:18096 compcert.lib.Integers Int lt def
R18108:18115 VST.veric.Clight_Cop2 <> both_int def
R18132:18151 VST.veric.Clight_Cop2 <> sem_cast def
R18154:18178 VST.veric.Clight_Cop2 <> classify_cast def
R18192:18202 compcert.x86_32.Archi <> ptr64 def
R18230:18244 compcert.lib.Integers Int signed_repr thm
R18192:18202 compcert.x86_32.Archi <> ptr64 def
R18230:18244 compcert.lib.Integers Int signed_repr thm
R18230:18244 compcert.lib.Integers Int signed_repr thm
R18230:18244 compcert.lib.Integers Int signed_repr thm
R18230:18244 compcert.lib.Integers Int signed_repr thm
R18230:18244 compcert.lib.Integers Int signed_repr thm
R18230:18244 compcert.lib.Integers Int signed_repr thm
R18230:18244 compcert.lib.Integers Int signed_repr thm
R18230:18244 compcert.lib.Integers Int signed_repr thm
prf 18363:18390 <> Sfor_comparison_Unsigned_I32
binder 18400:18400 <> i:251
binder 18402:18403 <> n':252
R18436:18441 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18500:18505 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18517:18522 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18612:18618 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R18596:18598 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18523:18531 VST.veric.val_lemmas <> force_val def
R18534:18548 VST.veric.Clight_Cop2 <> sem_cmp_default def
R18593:18594 VST.floyd.for_lemmas <> n':252 var
R18574:18577 compcert.common.Values <> Vint constr
R18580:18587 compcert.lib.Integers Int repr def
R18589:18589 VST.floyd.for_lemmas <> i:251 var
R18562:18567 compcert.cfrontend.Clight <> typeof def
R18569:18570 VST.floyd.for_lemmas <> Sfor.hi var
R18554:18559 VST.floyd.for_lemmas <> Sfor.type_i var
R18550:18552 compcert.lib.Integers <> Clt constr
R18599:18602 compcert.common.Values <> Vint constr
R18604:18611 compcert.lib.Integers Int zero def
R18620:18623 Coq.ZArith.BinInt <> ::Z_scope:x_'>='_x not
R18619:18619 VST.floyd.for_lemmas <> i:251 var
R18624:18624 VST.floyd.for_lemmas <> Sfor.n var
R18507:18510 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R18512:18515 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R18506:18506 VST.floyd.for_lemmas <> Sfor.m var
R18511:18511 VST.floyd.for_lemmas <> i:251 var
R18511:18511 VST.floyd.for_lemmas <> i:251 var
R18516:18516 VST.floyd.for_lemmas <> Sfor.n var
R18478:18480 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18442:18458 compcert.cfrontend.Cop <> classify_binarith def
R18468:18473 compcert.cfrontend.Clight <> typeof def
R18475:18476 VST.floyd.for_lemmas <> Sfor.hi var
R18460:18465 VST.floyd.for_lemmas <> Sfor.type_i var
R18481:18490 compcert.cfrontend.Cop <> bin_case_i constr
R18492:18499 compcert.cfrontend.Ctypes <> Unsigned constr
R18408:18418 VST.floyd.for_lemmas <> Int6432_val ind
R18435:18435 VST.floyd.for_lemmas <> Sfor.n var
R18432:18433 VST.floyd.for_lemmas <> n':252 var
R18421:18426 compcert.cfrontend.Clight <> typeof def
R18428:18429 VST.floyd.for_lemmas <> Sfor.hi var
R18653:18667 VST.veric.Clight_Cop2 <> sem_cmp_default def
R18670:18693 VST.veric.Clight_Cop2 <> sem_binarith def
R18696:18708 compcert.cfrontend.Cop <> binarith_type def
R18821:18826 compcert.cfrontend.Clight <> typeof def
R18828:18829 VST.floyd.for_lemmas <> Sfor.hi var
R18736:18741 VST.floyd.for_lemmas <> Sfor.type_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18789:18793 VST.floyd.for_lemmas <> Sfor.I32_i var
R18821:18826 compcert.cfrontend.Clight <> typeof def
R18828:18829 VST.floyd.for_lemmas <> Sfor.hi var
R18879:18884 compcert.cfrontend.Clight <> typeof def
R18886:18887 VST.floyd.for_lemmas <> Sfor.hi var
R18879:18884 compcert.cfrontend.Clight <> typeof def
R18886:18887 VST.floyd.for_lemmas <> Sfor.hi var
R19002:19008 compcert.lib.Integers Int ltu def
R19035:19038 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R19024:19026 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19027:19034 compcert.cfrontend.Ctypes <> Unsigned constr
R19051:19054 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19042:19044 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19045:19050 compcert.cfrontend.Ctypes <> Signed constr
R19070:19073 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19059:19061 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19062:19069 compcert.cfrontend.Ctypes <> Unsigned constr
R19078:19080 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19081:19083 compcert.cfrontend.Ctypes <> I32 constr
R19035:19038 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R19024:19026 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19027:19034 compcert.cfrontend.Ctypes <> Unsigned constr
R19051:19054 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19042:19044 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19045:19050 compcert.cfrontend.Ctypes <> Signed constr
R19070:19073 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19059:19061 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19062:19069 compcert.cfrontend.Ctypes <> Unsigned constr
R19078:19080 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19081:19083 compcert.cfrontend.Ctypes <> I32 constr
R19144:19151 VST.veric.Clight_Cop2 <> both_int def
R19168:19187 VST.veric.Clight_Cop2 <> sem_cast def
R19190:19214 VST.veric.Clight_Cop2 <> classify_cast def
R19228:19238 compcert.x86_32.Archi <> ptr64 def
R19266:19282 compcert.lib.Integers Int unsigned_repr thm
R19228:19238 compcert.x86_32.Archi <> ptr64 def
R19266:19282 compcert.lib.Integers Int unsigned_repr thm
R19334:19336 VST.floyd.for_lemmas <> Sfor.IMM var
R19334:19336 VST.floyd.for_lemmas <> Sfor.IMM var
R19266:19282 compcert.lib.Integers Int unsigned_repr thm
R19334:19336 VST.floyd.for_lemmas <> Sfor.IMM var
R19334:19336 VST.floyd.for_lemmas <> Sfor.IMM var
R19266:19282 compcert.lib.Integers Int unsigned_repr thm
R19266:19282 compcert.lib.Integers Int unsigned_repr thm
R19266:19282 compcert.lib.Integers Int unsigned_repr thm
R19334:19336 VST.floyd.for_lemmas <> Sfor.IMM var
R19334:19336 VST.floyd.for_lemmas <> Sfor.IMM var
R19266:19282 compcert.lib.Integers Int unsigned_repr thm
R19334:19336 VST.floyd.for_lemmas <> Sfor.IMM var
R19334:19336 VST.floyd.for_lemmas <> Sfor.IMM var
R19266:19282 compcert.lib.Integers Int unsigned_repr thm
R19266:19282 compcert.lib.Integers Int unsigned_repr thm
prf 19431:19456 <> Sfor_comparison_Signed_I64
binder 19466:19466 <> i:253
binder 19468:19469 <> n':254
R19502:19507 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19564:19569 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19581:19586 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19676:19682 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R19660:19662 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19587:19595 VST.veric.val_lemmas <> force_val def
R19598:19612 VST.veric.Clight_Cop2 <> sem_cmp_default def
R19657:19658 VST.floyd.for_lemmas <> n':254 var
R19638:19641 compcert.common.Values <> Vint constr
R19644:19651 compcert.lib.Integers Int repr def
R19653:19653 VST.floyd.for_lemmas <> i:253 var
R19626:19631 compcert.cfrontend.Clight <> typeof def
R19633:19634 VST.floyd.for_lemmas <> Sfor.hi var
R19618:19623 VST.floyd.for_lemmas <> Sfor.type_i var
R19614:19616 compcert.lib.Integers <> Clt constr
R19663:19666 compcert.common.Values <> Vint constr
R19668:19675 compcert.lib.Integers Int zero def
R19684:19687 Coq.ZArith.BinInt <> ::Z_scope:x_'>='_x not
R19683:19683 VST.floyd.for_lemmas <> i:253 var
R19688:19688 VST.floyd.for_lemmas <> Sfor.n var
R19571:19574 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R19576:19579 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R19570:19570 VST.floyd.for_lemmas <> Sfor.m var
R19575:19575 VST.floyd.for_lemmas <> i:253 var
R19575:19575 VST.floyd.for_lemmas <> i:253 var
R19580:19580 VST.floyd.for_lemmas <> Sfor.n var
R19544:19546 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19508:19524 compcert.cfrontend.Cop <> classify_binarith def
R19534:19539 compcert.cfrontend.Clight <> typeof def
R19541:19542 VST.floyd.for_lemmas <> Sfor.hi var
R19526:19531 VST.floyd.for_lemmas <> Sfor.type_i var
R19547:19556 compcert.cfrontend.Cop <> bin_case_l constr
R19558:19563 compcert.cfrontend.Ctypes <> Signed constr
R19474:19484 VST.floyd.for_lemmas <> Int6432_val ind
R19501:19501 VST.floyd.for_lemmas <> Sfor.n var
R19498:19499 VST.floyd.for_lemmas <> n':254 var
R19487:19492 compcert.cfrontend.Clight <> typeof def
R19494:19495 VST.floyd.for_lemmas <> Sfor.hi var
R19717:19731 VST.veric.Clight_Cop2 <> sem_cmp_default def
R19734:19757 VST.veric.Clight_Cop2 <> sem_binarith def
R19760:19772 compcert.cfrontend.Cop <> binarith_type def
R19800:19805 VST.floyd.for_lemmas <> Sfor.type_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19853:19857 VST.floyd.for_lemmas <> Sfor.I32_i var
R19872:19877 compcert.cfrontend.Clight <> typeof def
R19879:19880 VST.floyd.for_lemmas <> Sfor.hi var
R19872:19877 compcert.cfrontend.Clight <> typeof def
R19879:19880 VST.floyd.for_lemmas <> Sfor.hi var
R20179:20186 compcert.lib.Integers Int64 lt def
R20198:20206 VST.veric.Clight_Cop2 <> both_long def
R20209:20228 VST.veric.Clight_Cop2 <> sem_cast def
R20249:20261 compcert.cfrontend.Cop <> cast_int_long def
R20268:20275 compcert.lib.Integers Int repr def
R20287:20296 compcert.lib.Integers Int64 repr def
R20249:20261 compcert.cfrontend.Cop <> cast_int_long def
R20268:20275 compcert.lib.Integers Int repr def
R20287:20296 compcert.lib.Integers Int64 repr def
R20320:20332 compcert.cfrontend.Cop <> cast_int_long def
R20357:20359 VST.floyd.for_lemmas <> Sfor.IMM var
R20357:20359 VST.floyd.for_lemmas <> Sfor.IMM var
R20376:20390 compcert.lib.Integers Int signed_repr thm
R20376:20390 compcert.lib.Integers Int signed_repr thm
R20376:20390 compcert.lib.Integers Int signed_repr thm
R20420:20436 compcert.lib.Integers Int unsigned_repr thm
R20420:20436 compcert.lib.Integers Int unsigned_repr thm
R20420:20436 compcert.lib.Integers Int unsigned_repr thm
R20467:20477 compcert.x86_32.Archi <> ptr64 def
R20505:20521 compcert.lib.Integers Int64 signed_repr thm
R20467:20477 compcert.x86_32.Archi <> ptr64 def
R20505:20521 compcert.lib.Integers Int64 signed_repr thm
R20545:20547 VST.floyd.for_lemmas <> Sfor.IMM var
R20545:20547 VST.floyd.for_lemmas <> Sfor.IMM var
R20505:20521 compcert.lib.Integers Int64 signed_repr thm
R20545:20547 VST.floyd.for_lemmas <> Sfor.IMM var
R20545:20547 VST.floyd.for_lemmas <> Sfor.IMM var
R20505:20521 compcert.lib.Integers Int64 signed_repr thm
R20505:20521 compcert.lib.Integers Int64 signed_repr thm
R20505:20521 compcert.lib.Integers Int64 signed_repr thm
R20545:20547 VST.floyd.for_lemmas <> Sfor.IMM var
R20545:20547 VST.floyd.for_lemmas <> Sfor.IMM var
R20505:20521 compcert.lib.Integers Int64 signed_repr thm
R20545:20547 VST.floyd.for_lemmas <> Sfor.IMM var
R20545:20547 VST.floyd.for_lemmas <> Sfor.IMM var
R20505:20521 compcert.lib.Integers Int64 signed_repr thm
R20505:20521 compcert.lib.Integers Int64 signed_repr thm
prf 20641:20668 <> Sfor_comparison_Unsigned_I64
binder 20678:20678 <> i:255
binder 20680:20681 <> n':256
R20714:20719 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20778:20783 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20795:20800 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20890:20896 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R20874:20876 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20801:20809 VST.veric.val_lemmas <> force_val def
R20812:20826 VST.veric.Clight_Cop2 <> sem_cmp_default def
R20871:20872 VST.floyd.for_lemmas <> n':256 var
R20852:20855 compcert.common.Values <> Vint constr
R20858:20865 compcert.lib.Integers Int repr def
R20867:20867 VST.floyd.for_lemmas <> i:255 var
R20840:20845 compcert.cfrontend.Clight <> typeof def
R20847:20848 VST.floyd.for_lemmas <> Sfor.hi var
R20832:20837 VST.floyd.for_lemmas <> Sfor.type_i var
R20828:20830 compcert.lib.Integers <> Clt constr
R20877:20880 compcert.common.Values <> Vint constr
R20882:20889 compcert.lib.Integers Int zero def
R20898:20901 Coq.ZArith.BinInt <> ::Z_scope:x_'>='_x not
R20897:20897 VST.floyd.for_lemmas <> i:255 var
R20902:20902 VST.floyd.for_lemmas <> Sfor.n var
R20785:20788 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R20790:20793 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R20784:20784 VST.floyd.for_lemmas <> Sfor.m var
R20789:20789 VST.floyd.for_lemmas <> i:255 var
R20789:20789 VST.floyd.for_lemmas <> i:255 var
R20794:20794 VST.floyd.for_lemmas <> Sfor.n var
R20756:20758 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20720:20736 compcert.cfrontend.Cop <> classify_binarith def
R20746:20751 compcert.cfrontend.Clight <> typeof def
R20753:20754 VST.floyd.for_lemmas <> Sfor.hi var
R20738:20743 VST.floyd.for_lemmas <> Sfor.type_i var
R20759:20768 compcert.cfrontend.Cop <> bin_case_l constr
R20770:20777 compcert.cfrontend.Ctypes <> Unsigned constr
R20686:20696 VST.floyd.for_lemmas <> Int6432_val ind
R20713:20713 VST.floyd.for_lemmas <> Sfor.n var
R20710:20711 VST.floyd.for_lemmas <> n':256 var
R20699:20704 compcert.cfrontend.Clight <> typeof def
R20706:20707 VST.floyd.for_lemmas <> Sfor.hi var
R20931:20945 VST.veric.Clight_Cop2 <> sem_cmp_default def
R20948:20971 VST.veric.Clight_Cop2 <> sem_binarith def
R20974:20986 compcert.cfrontend.Cop <> binarith_type def
R21014:21019 VST.floyd.for_lemmas <> Sfor.type_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21067:21071 VST.floyd.for_lemmas <> Sfor.I32_i var
R21086:21091 compcert.cfrontend.Clight <> typeof def
R21093:21094 VST.floyd.for_lemmas <> Sfor.hi var
R21086:21091 compcert.cfrontend.Clight <> typeof def
R21093:21094 VST.floyd.for_lemmas <> Sfor.hi var
R21214:21222 compcert.lib.Integers Int64 ltu def
R21234:21242 VST.veric.Clight_Cop2 <> both_long def
R21245:21264 VST.veric.Clight_Cop2 <> sem_cast def
R21285:21297 compcert.cfrontend.Cop <> cast_int_long def
R21304:21311 compcert.lib.Integers Int repr def
R21323:21332 compcert.lib.Integers Int64 repr def
R21285:21297 compcert.cfrontend.Cop <> cast_int_long def
R21304:21311 compcert.lib.Integers Int repr def
R21323:21332 compcert.lib.Integers Int64 repr def
R21356:21368 compcert.cfrontend.Cop <> cast_int_long def
R21393:21395 VST.floyd.for_lemmas <> Sfor.IMM var
R21393:21395 VST.floyd.for_lemmas <> Sfor.IMM var
R21412:21426 compcert.lib.Integers Int signed_repr thm
R21412:21426 compcert.lib.Integers Int signed_repr thm
R21412:21426 compcert.lib.Integers Int signed_repr thm
R21460:21476 compcert.lib.Integers Int unsigned_repr thm
R21460:21476 compcert.lib.Integers Int unsigned_repr thm
R21460:21476 compcert.lib.Integers Int unsigned_repr thm
R21507:21517 compcert.x86_32.Archi <> ptr64 def
R21545:21563 compcert.lib.Integers Int64 unsigned_repr thm
R21507:21517 compcert.x86_32.Archi <> ptr64 def
R21545:21563 compcert.lib.Integers Int64 unsigned_repr thm
R21587:21589 VST.floyd.for_lemmas <> Sfor.IMM var
R21587:21589 VST.floyd.for_lemmas <> Sfor.IMM var
R21545:21563 compcert.lib.Integers Int64 unsigned_repr thm
R21587:21589 VST.floyd.for_lemmas <> Sfor.IMM var
R21587:21589 VST.floyd.for_lemmas <> Sfor.IMM var
R21545:21563 compcert.lib.Integers Int64 unsigned_repr thm
R21545:21563 compcert.lib.Integers Int64 unsigned_repr thm
R21545:21563 compcert.lib.Integers Int64 unsigned_repr thm
R21587:21589 VST.floyd.for_lemmas <> Sfor.IMM var
R21587:21589 VST.floyd.for_lemmas <> Sfor.IMM var
R21545:21563 compcert.lib.Integers Int64 unsigned_repr thm
R21587:21589 VST.floyd.for_lemmas <> Sfor.IMM var
R21587:21589 VST.floyd.for_lemmas <> Sfor.IMM var
R21545:21563 compcert.lib.Integers Int64 unsigned_repr thm
R21545:21563 compcert.lib.Integers Int64 unsigned_repr thm
prf 21683:21701 <> Sfor_loop_cond_true
R21706:21712 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R21718:21719 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R21868:21874 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R21713:21717 VST.floyd.for_lemmas <> Sfor.Delta var
R21724:21727 VST.msl.seplog <> ::logic:x_'&&'_x not
R21720:21723 VST.floyd.for_lemmas <> Sfor.inv0 var
R21728:21732 VST.veric.SeparationLogic <> local def
R21739:21742 VST.veric.lift LiftNotation :::'`'_x not
R21804:21866 VST.veric.lift LiftNotation :::'`'_x not
R21743:21752 VST.veric.SeparationLogic <> typed_true def
R21755:21760 compcert.cfrontend.Clight <> typeof def
R21763:21768 compcert.cfrontend.Clight <> Ebinop constr
R21798:21801 compcert.exportclight.Clightdefs <> tint def
R21795:21796 VST.floyd.for_lemmas <> Sfor.hi var
R21775:21782 compcert.cfrontend.Clight <> Etempvar constr
R21787:21792 VST.floyd.for_lemmas <> Sfor.type_i var
R21784:21785 VST.floyd.for_lemmas <> Sfor._i var
R21770:21772 compcert.cfrontend.Cop <> Olt constr
R21815:21823 VST.veric.expr <> eval_expr def
R21826:21831 compcert.cfrontend.Clight <> Ebinop constr
R21861:21864 compcert.exportclight.Clightdefs <> tint def
R21858:21859 VST.floyd.for_lemmas <> Sfor.hi var
R21838:21845 compcert.cfrontend.Clight <> Etempvar constr
R21850:21855 VST.floyd.for_lemmas <> Sfor.type_i var
R21847:21848 VST.floyd.for_lemmas <> Sfor._i var
R21833:21835 compcert.cfrontend.Cop <> Olt constr
R21875:21877 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R21882:21883 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R21881:21881 Coq.Numbers.BinNums <> Z ind
binder 21878:21878 <> i:257
R21899:21902 VST.msl.seplog <> ::logic:x_'&&'_x not
R21884:21887 VST.msl.seplog <> ::logic:'!!'_x not
R21898:21898 VST.msl.seplog <> ::logic:'!!'_x not
R21889:21892 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R21894:21896 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R21888:21888 VST.floyd.for_lemmas <> Sfor.m var
R21893:21893 VST.floyd.for_lemmas <> i:257 var
R21893:21893 VST.floyd.for_lemmas <> i:257 var
R21897:21897 VST.floyd.for_lemmas <> Sfor.n var
R21903:21906 VST.floyd.for_lemmas <> Sfor.inv1 var
R21908:21908 VST.floyd.for_lemmas <> i:257 var
R21941:21950 VST.msl.log_normalize <> andp_assoc thm
R21954:21961 VST.msl.log_normalize <> add_andp thm
R21967:21973 VST.floyd.for_lemmas <> Sfor.EVAL_hi var
R21980:21986 VST.floyd.for_lemmas <> Sfor.EQ_inv0 var
R21941:21950 VST.msl.log_normalize <> andp_assoc thm
R21941:21950 VST.msl.log_normalize <> andp_assoc thm
R21954:21961 VST.msl.log_normalize <> add_andp thm
R21967:21973 VST.floyd.for_lemmas <> Sfor.EVAL_hi var
R21954:21961 VST.msl.log_normalize <> add_andp thm
R21967:21973 VST.floyd.for_lemmas <> Sfor.EVAL_hi var
R21980:21986 VST.floyd.for_lemmas <> Sfor.EQ_inv0 var
R21980:21986 VST.floyd.for_lemmas <> Sfor.EQ_inv0 var
R22027:22033 VST.floyd.for_lemmas <> Sfor.EQ_inv1 var
R22027:22033 VST.floyd.for_lemmas <> Sfor.EQ_inv1 var
R22027:22033 VST.floyd.for_lemmas <> Sfor.EQ_inv1 var
R22044:22053 VST.msl.seplog <> andp_right meth
R22044:22053 VST.msl.seplog <> andp_right meth
R22100:22104 VST.veric.SeparationLogic <> local def
R22107:22111 VST.veric.mpred <> lift1 def
R22166:22175 VST.msl.seplog <> prop_right meth
R22166:22175 VST.msl.seplog <> prop_right meth
R22217:22225 VST.veric.expr <> eval_expr def
R22227:22228 VST.floyd.for_lemmas <> Sfor.hi var
R22217:22225 VST.veric.expr <> eval_expr def
R22227:22228 VST.floyd.for_lemmas <> Sfor.hi var
R22263:22272 VST.veric.val_lemmas <> force_val2 def
R22275:22293 VST.veric.Clight_Cop2 <> sem_cmp def
R22312:22323 VST.floyd.for_lemmas <> CLASSIFY_CMP thm
R22312:22323 VST.floyd.for_lemmas <> CLASSIFY_CMP thm
R22312:22323 VST.floyd.for_lemmas <> CLASSIFY_CMP thm
R22344:22360 compcert.cfrontend.Cop <> classify_binarith def
R22370:22375 compcert.cfrontend.Clight <> typeof def
R22377:22378 VST.floyd.for_lemmas <> Sfor.hi var
R22362:22367 VST.floyd.for_lemmas <> Sfor.type_i var
R22521:22526 compcert.cfrontend.Clight <> typeof def
R22528:22529 VST.floyd.for_lemmas <> Sfor.hi var
R22344:22360 compcert.cfrontend.Cop <> classify_binarith def
R22370:22375 compcert.cfrontend.Clight <> typeof def
R22377:22378 VST.floyd.for_lemmas <> Sfor.hi var
R22362:22367 VST.floyd.for_lemmas <> Sfor.type_i var
R22440:22445 VST.floyd.for_lemmas <> Sfor.type_i var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22521:22526 compcert.cfrontend.Clight <> typeof def
R22528:22529 VST.floyd.for_lemmas <> Sfor.hi var
R22521:22526 compcert.cfrontend.Clight <> typeof def
R22528:22529 VST.floyd.for_lemmas <> Sfor.hi var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22440:22445 VST.floyd.for_lemmas <> Sfor.type_i var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22521:22526 compcert.cfrontend.Clight <> typeof def
R22528:22529 VST.floyd.for_lemmas <> Sfor.hi var
R22521:22526 compcert.cfrontend.Clight <> typeof def
R22528:22529 VST.floyd.for_lemmas <> Sfor.hi var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22440:22445 VST.floyd.for_lemmas <> Sfor.type_i var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22500:22502 VST.floyd.for_lemmas <> Sfor.IMM var
R22521:22526 compcert.cfrontend.Clight <> typeof def
R22528:22529 VST.floyd.for_lemmas <> Sfor.hi var
R22521:22526 compcert.cfrontend.Clight <> typeof def
R22528:22529 VST.floyd.for_lemmas <> Sfor.hi var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22574:22576 VST.floyd.for_lemmas <> Sfor.IMM var
R22707:22710 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R22607:22615 VST.veric.val_lemmas <> force_val def
R22618:22632 VST.veric.Clight_Cop2 <> sem_cmp_default def
R22685:22688 compcert.common.Values <> Vint constr
R22691:22698 compcert.lib.Integers Int repr def
R22646:22651 compcert.cfrontend.Clight <> typeof def
R22653:22654 VST.floyd.for_lemmas <> Sfor.hi var
R22638:22643 VST.floyd.for_lemmas <> Sfor.type_i var
R22634:22636 compcert.lib.Integers <> Clt constr
R22711:22714 compcert.common.Values <> Vint constr
R22716:22723 compcert.lib.Integers Int zero def
R22707:22710 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R22607:22615 VST.veric.val_lemmas <> force_val def
R22618:22632 VST.veric.Clight_Cop2 <> sem_cmp_default def
R22685:22688 compcert.common.Values <> Vint constr
R22691:22698 compcert.lib.Integers Int repr def
R22646:22651 compcert.cfrontend.Clight <> typeof def
R22653:22654 VST.floyd.for_lemmas <> Sfor.hi var
R22638:22643 VST.floyd.for_lemmas <> Sfor.type_i var
R22634:22636 compcert.lib.Integers <> Clt constr
R22711:22714 compcert.common.Values <> Vint constr
R22716:22723 compcert.lib.Integers Int zero def
R22790:22815 VST.floyd.for_lemmas <> Sfor_comparison_Signed_I32 thm
R22790:22815 VST.floyd.for_lemmas <> Sfor_comparison_Signed_I32 thm
R22790:22815 VST.floyd.for_lemmas <> Sfor_comparison_Signed_I32 thm
R22959:22962 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R22859:22867 VST.veric.val_lemmas <> force_val def
R22870:22884 VST.veric.Clight_Cop2 <> sem_cmp_default def
R22937:22940 compcert.common.Values <> Vint constr
R22943:22950 compcert.lib.Integers Int repr def
R22898:22903 compcert.cfrontend.Clight <> typeof def
R22905:22906 VST.floyd.for_lemmas <> Sfor.hi var
R22890:22895 VST.floyd.for_lemmas <> Sfor.type_i var
R22886:22888 compcert.lib.Integers <> Clt constr
R22963:22966 compcert.common.Values <> Vint constr
R22968:22975 compcert.lib.Integers Int zero def
R22959:22962 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R22859:22867 VST.veric.val_lemmas <> force_val def
R22870:22884 VST.veric.Clight_Cop2 <> sem_cmp_default def
R22937:22940 compcert.common.Values <> Vint constr
R22943:22950 compcert.lib.Integers Int repr def
R22898:22903 compcert.cfrontend.Clight <> typeof def
R22905:22906 VST.floyd.for_lemmas <> Sfor.hi var
R22890:22895 VST.floyd.for_lemmas <> Sfor.type_i var
R22886:22888 compcert.lib.Integers <> Clt constr
R22963:22966 compcert.common.Values <> Vint constr
R22968:22975 compcert.lib.Integers Int zero def
R23042:23069 VST.floyd.for_lemmas <> Sfor_comparison_Unsigned_I32 thm
R23042:23069 VST.floyd.for_lemmas <> Sfor_comparison_Unsigned_I32 thm
R23042:23069 VST.floyd.for_lemmas <> Sfor_comparison_Unsigned_I32 thm
R23213:23216 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R23113:23121 VST.veric.val_lemmas <> force_val def
R23124:23138 VST.veric.Clight_Cop2 <> sem_cmp_default def
R23191:23194 compcert.common.Values <> Vint constr
R23197:23204 compcert.lib.Integers Int repr def
R23152:23157 compcert.cfrontend.Clight <> typeof def
R23159:23160 VST.floyd.for_lemmas <> Sfor.hi var
R23144:23149 VST.floyd.for_lemmas <> Sfor.type_i var
R23140:23142 compcert.lib.Integers <> Clt constr
R23217:23220 compcert.common.Values <> Vint constr
R23222:23229 compcert.lib.Integers Int zero def
R23213:23216 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R23113:23121 VST.veric.val_lemmas <> force_val def
R23124:23138 VST.veric.Clight_Cop2 <> sem_cmp_default def
R23191:23194 compcert.common.Values <> Vint constr
R23197:23204 compcert.lib.Integers Int repr def
R23152:23157 compcert.cfrontend.Clight <> typeof def
R23159:23160 VST.floyd.for_lemmas <> Sfor.hi var
R23144:23149 VST.floyd.for_lemmas <> Sfor.type_i var
R23140:23142 compcert.lib.Integers <> Clt constr
R23217:23220 compcert.common.Values <> Vint constr
R23222:23229 compcert.lib.Integers Int zero def
R23296:23321 VST.floyd.for_lemmas <> Sfor_comparison_Signed_I64 thm
R23296:23321 VST.floyd.for_lemmas <> Sfor_comparison_Signed_I64 thm
R23296:23321 VST.floyd.for_lemmas <> Sfor_comparison_Signed_I64 thm
R23465:23468 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R23365:23373 VST.veric.val_lemmas <> force_val def
R23376:23390 VST.veric.Clight_Cop2 <> sem_cmp_default def
R23443:23446 compcert.common.Values <> Vint constr
R23449:23456 compcert.lib.Integers Int repr def
R23404:23409 compcert.cfrontend.Clight <> typeof def
R23411:23412 VST.floyd.for_lemmas <> Sfor.hi var
R23396:23401 VST.floyd.for_lemmas <> Sfor.type_i var
R23392:23394 compcert.lib.Integers <> Clt constr
R23469:23472 compcert.common.Values <> Vint constr
R23474:23481 compcert.lib.Integers Int zero def
R23465:23468 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R23365:23373 VST.veric.val_lemmas <> force_val def
R23376:23390 VST.veric.Clight_Cop2 <> sem_cmp_default def
R23443:23446 compcert.common.Values <> Vint constr
R23449:23456 compcert.lib.Integers Int repr def
R23404:23409 compcert.cfrontend.Clight <> typeof def
R23411:23412 VST.floyd.for_lemmas <> Sfor.hi var
R23396:23401 VST.floyd.for_lemmas <> Sfor.type_i var
R23392:23394 compcert.lib.Integers <> Clt constr
R23469:23472 compcert.common.Values <> Vint constr
R23474:23481 compcert.lib.Integers Int zero def
R23548:23575 VST.floyd.for_lemmas <> Sfor_comparison_Unsigned_I64 thm
R23548:23575 VST.floyd.for_lemmas <> Sfor_comparison_Unsigned_I64 thm
R23548:23575 VST.floyd.for_lemmas <> Sfor_comparison_Unsigned_I64 thm
prf 23613:23632 <> Sfor_loop_cond_false
R23637:23643 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R23649:23650 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R23800:23806 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R23644:23648 VST.floyd.for_lemmas <> Sfor.Delta var
R23655:23658 VST.msl.seplog <> ::logic:x_'&&'_x not
R23651:23654 VST.floyd.for_lemmas <> Sfor.inv0 var
R23659:23663 VST.veric.SeparationLogic <> local def
R23670:23673 VST.veric.lift LiftNotation :::'`'_x not
R23736:23798 VST.veric.lift LiftNotation :::'`'_x not
R23674:23684 VST.veric.SeparationLogic <> typed_false def
R23687:23692 compcert.cfrontend.Clight <> typeof def
R23695:23700 compcert.cfrontend.Clight <> Ebinop constr
R23730:23733 compcert.exportclight.Clightdefs <> tint def
R23727:23728 VST.floyd.for_lemmas <> Sfor.hi var
R23707:23714 compcert.cfrontend.Clight <> Etempvar constr
R23719:23724 VST.floyd.for_lemmas <> Sfor.type_i var
R23716:23717 VST.floyd.for_lemmas <> Sfor._i var
R23702:23704 compcert.cfrontend.Cop <> Olt constr
R23747:23755 VST.veric.expr <> eval_expr def
R23758:23763 compcert.cfrontend.Clight <> Ebinop constr
R23793:23796 compcert.exportclight.Clightdefs <> tint def
R23790:23791 VST.floyd.for_lemmas <> Sfor.hi var
R23770:23777 compcert.cfrontend.Clight <> Etempvar constr
R23782:23787 VST.floyd.for_lemmas <> Sfor.type_i var
R23779:23780 VST.floyd.for_lemmas <> Sfor._i var
R23765:23767 compcert.cfrontend.Cop <> Olt constr
R23807:23810 VST.floyd.for_lemmas <> Sfor.inv1 var
R23812:23812 VST.floyd.for_lemmas <> Sfor.n var
R23845:23854 VST.msl.log_normalize <> andp_assoc thm
R23858:23865 VST.msl.log_normalize <> add_andp thm
R23871:23877 VST.floyd.for_lemmas <> Sfor.EVAL_hi var
R23884:23890 VST.floyd.for_lemmas <> Sfor.EQ_inv0 var
R23845:23854 VST.msl.log_normalize <> andp_assoc thm
R23845:23854 VST.msl.log_normalize <> andp_assoc thm
R23858:23865 VST.msl.log_normalize <> add_andp thm
R23871:23877 VST.floyd.for_lemmas <> Sfor.EVAL_hi var
R23858:23865 VST.msl.log_normalize <> add_andp thm
R23871:23877 VST.floyd.for_lemmas <> Sfor.EVAL_hi var
R23884:23890 VST.floyd.for_lemmas <> Sfor.EQ_inv0 var
R23884:23890 VST.floyd.for_lemmas <> Sfor.EQ_inv0 var
R23922:23924 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23925:23925 VST.floyd.for_lemmas <> Sfor.n var
R23922:23924 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23925:23925 VST.floyd.for_lemmas <> Sfor.n var
R23965:23971 VST.floyd.for_lemmas <> Sfor.EQ_inv1 var
R23965:23971 VST.floyd.for_lemmas <> Sfor.EQ_inv1 var
R23965:23971 VST.floyd.for_lemmas <> Sfor.EQ_inv1 var
R24002:24006 VST.veric.SeparationLogic <> local def
R24009:24013 VST.veric.mpred <> lift1 def
R24068:24077 VST.msl.seplog <> prop_right meth
R24068:24077 VST.msl.seplog <> prop_right meth
R24119:24127 VST.veric.expr <> eval_expr def
R24129:24130 VST.floyd.for_lemmas <> Sfor.hi var
R24119:24127 VST.veric.expr <> eval_expr def
R24129:24130 VST.floyd.for_lemmas <> Sfor.hi var
R24165:24174 VST.veric.val_lemmas <> force_val2 def
R24177:24195 VST.veric.Clight_Cop2 <> sem_cmp def
R24214:24225 VST.floyd.for_lemmas <> CLASSIFY_CMP thm
R24214:24225 VST.floyd.for_lemmas <> CLASSIFY_CMP thm
R24214:24225 VST.floyd.for_lemmas <> CLASSIFY_CMP thm
R24246:24262 compcert.cfrontend.Cop <> classify_binarith def
R24272:24277 compcert.cfrontend.Clight <> typeof def
R24279:24280 VST.floyd.for_lemmas <> Sfor.hi var
R24264:24269 VST.floyd.for_lemmas <> Sfor.type_i var
R24423:24428 compcert.cfrontend.Clight <> typeof def
R24430:24431 VST.floyd.for_lemmas <> Sfor.hi var
R24507:24524 VST.floyd.for_lemmas <> typed_false_tint_e thm
R24246:24262 compcert.cfrontend.Cop <> classify_binarith def
R24272:24277 compcert.cfrontend.Clight <> typeof def
R24279:24280 VST.floyd.for_lemmas <> Sfor.hi var
R24264:24269 VST.floyd.for_lemmas <> Sfor.type_i var
R24342:24347 VST.floyd.for_lemmas <> Sfor.type_i var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24423:24428 compcert.cfrontend.Clight <> typeof def
R24430:24431 VST.floyd.for_lemmas <> Sfor.hi var
R24423:24428 compcert.cfrontend.Clight <> typeof def
R24430:24431 VST.floyd.for_lemmas <> Sfor.hi var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24342:24347 VST.floyd.for_lemmas <> Sfor.type_i var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24423:24428 compcert.cfrontend.Clight <> typeof def
R24430:24431 VST.floyd.for_lemmas <> Sfor.hi var
R24423:24428 compcert.cfrontend.Clight <> typeof def
R24430:24431 VST.floyd.for_lemmas <> Sfor.hi var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24342:24347 VST.floyd.for_lemmas <> Sfor.type_i var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24402:24404 VST.floyd.for_lemmas <> Sfor.IMM var
R24423:24428 compcert.cfrontend.Clight <> typeof def
R24430:24431 VST.floyd.for_lemmas <> Sfor.hi var
R24423:24428 compcert.cfrontend.Clight <> typeof def
R24430:24431 VST.floyd.for_lemmas <> Sfor.hi var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24476:24478 VST.floyd.for_lemmas <> Sfor.IMM var
R24507:24524 VST.floyd.for_lemmas <> typed_false_tint_e thm
R24507:24524 VST.floyd.for_lemmas <> typed_false_tint_e thm
R24507:24524 VST.floyd.for_lemmas <> typed_false_tint_e thm
R24507:24524 VST.floyd.for_lemmas <> typed_false_tint_e thm
R24545:24570 VST.floyd.for_lemmas <> Sfor_comparison_Signed_I32 thm
R24545:24570 VST.floyd.for_lemmas <> Sfor_comparison_Signed_I32 thm
R24545:24570 VST.floyd.for_lemmas <> Sfor_comparison_Signed_I32 thm
R24608:24635 VST.floyd.for_lemmas <> Sfor_comparison_Unsigned_I32 thm
R24608:24635 VST.floyd.for_lemmas <> Sfor_comparison_Unsigned_I32 thm
R24608:24635 VST.floyd.for_lemmas <> Sfor_comparison_Unsigned_I32 thm
R24673:24698 VST.floyd.for_lemmas <> Sfor_comparison_Signed_I64 thm
R24673:24698 VST.floyd.for_lemmas <> Sfor_comparison_Signed_I64 thm
R24673:24698 VST.floyd.for_lemmas <> Sfor_comparison_Signed_I64 thm
R24736:24763 VST.floyd.for_lemmas <> Sfor_comparison_Unsigned_I64 thm
R24736:24763 VST.floyd.for_lemmas <> Sfor_comparison_Unsigned_I64 thm
R24736:24763 VST.floyd.for_lemmas <> Sfor_comparison_Unsigned_I64 thm
prf 24801:24811 <> Sfor_inc_tc
binder 24821:24821 <> i:258
binder 24823:24823 <> s:259
R24838:24843 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24844:24850 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R24856:24857 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R24864:24870 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R24851:24855 VST.floyd.for_lemmas <> Sfor.Delta var
R24858:24861 VST.floyd.for_lemmas <> Sfor.inv2 var
R24863:24863 VST.floyd.for_lemmas <> i:258 var
R24972:24981 VST.msl.seplog <> ::logic:x_'&&'_x not
R24871:24877 VST.veric.SeparationLogic <> tc_expr def
R24886:24891 compcert.cfrontend.Clight <> Ebinop constr
R24965:24970 VST.floyd.for_lemmas <> Sfor.type_i var
R24920:24929 compcert.cfrontend.Clight <> Econst_int constr
R24945:24948 compcert.cfrontend.Ctypes <> Tint constr
R24956:24961 compcert.cfrontend.Ctypes <> noattr def
R24954:24954 VST.floyd.for_lemmas <> s:259 var
R24950:24952 compcert.cfrontend.Ctypes <> I32 constr
R24932:24939 compcert.lib.Integers Int repr def
R24899:24906 compcert.cfrontend.Clight <> Etempvar constr
R24911:24916 VST.floyd.for_lemmas <> Sfor.type_i var
R24908:24909 VST.floyd.for_lemmas <> Sfor._i var
R24893:24896 compcert.cfrontend.Cop <> Oadd constr
R24879:24883 VST.floyd.for_lemmas <> Sfor.Delta var
R24982:24991 VST.veric.SeparationLogic <> tc_temp_id def
R25108:25113 compcert.cfrontend.Clight <> Ebinop constr
R25187:25192 VST.floyd.for_lemmas <> Sfor.type_i var
R25142:25151 compcert.cfrontend.Clight <> Econst_int constr
R25167:25170 compcert.cfrontend.Ctypes <> Tint constr
R25178:25183 compcert.cfrontend.Ctypes <> noattr def
R25176:25176 VST.floyd.for_lemmas <> s:259 var
R25172:25174 compcert.cfrontend.Ctypes <> I32 constr
R25154:25161 compcert.lib.Integers Int repr def
R25121:25128 compcert.cfrontend.Clight <> Etempvar constr
R25133:25138 VST.floyd.for_lemmas <> Sfor.type_i var
R25130:25131 VST.floyd.for_lemmas <> Sfor._i var
R25115:25118 compcert.cfrontend.Cop <> Oadd constr
R25101:25105 VST.floyd.for_lemmas <> Sfor.Delta var
R24997:25002 compcert.cfrontend.Clight <> typeof def
R25005:25010 compcert.cfrontend.Clight <> Ebinop constr
R25084:25089 VST.floyd.for_lemmas <> Sfor.type_i var
R25039:25048 compcert.cfrontend.Clight <> Econst_int constr
R25064:25067 compcert.cfrontend.Ctypes <> Tint constr
R25075:25080 compcert.cfrontend.Ctypes <> noattr def
R25073:25073 VST.floyd.for_lemmas <> s:259 var
R25069:25071 compcert.cfrontend.Ctypes <> I32 constr
R25051:25058 compcert.lib.Integers Int repr def
R25018:25025 compcert.cfrontend.Clight <> Etempvar constr
R25030:25035 VST.floyd.for_lemmas <> Sfor.type_i var
R25027:25028 VST.floyd.for_lemmas <> Sfor._i var
R25012:25015 compcert.cfrontend.Cop <> Oadd constr
R24993:24994 VST.floyd.for_lemmas <> Sfor._i var
R24829:24832 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R24834:24836 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R24828:24828 VST.floyd.for_lemmas <> Sfor.m var
R24833:24833 VST.floyd.for_lemmas <> i:258 var
R24833:24833 VST.floyd.for_lemmas <> i:258 var
R24837:24837 VST.floyd.for_lemmas <> Sfor.n var
R25222:25228 VST.veric.SeparationLogic <> tc_expr def
R25231:25240 VST.veric.SeparationLogic <> tc_temp_id def
R25337:25353 VST.veric.expr <> typecheck_temp_id def
R25254:25259 VST.floyd.for_lemmas <> Sfor.type_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25299:25303 VST.floyd.for_lemmas <> Sfor.I32_i var
R25368:25369 VST.floyd.for_lemmas <> Sfor.TI var
R25368:25369 VST.floyd.for_lemmas <> Sfor.TI var
R25368:25369 VST.floyd.for_lemmas <> Sfor.TI var
R25426:25437 VST.veric.expr <> binarithType def
R25426:25437 VST.veric.expr <> binarithType def
R25479:25490 VST.veric.expr <> binarithType def
R25508:25512 VST.veric.expr <> tc_TT constr
R25479:25490 VST.veric.expr <> binarithType def
R25508:25512 VST.veric.expr <> tc_TT constr
R25560:25566 VST.floyd.for_lemmas <> Sfor.EQ_inv2 var
R25572:25592 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R25595:25605 VST.floyd.typecheck_lemmas <> tc_andp_TT1 thm
R25609:25619 VST.floyd.typecheck_lemmas <> tc_andp_TT2 thm
R25560:25566 VST.floyd.for_lemmas <> Sfor.EQ_inv2 var
R25560:25566 VST.floyd.for_lemmas <> Sfor.EQ_inv2 var
R25572:25592 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R25572:25592 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R25595:25605 VST.floyd.typecheck_lemmas <> tc_andp_TT1 thm
R25595:25605 VST.floyd.typecheck_lemmas <> tc_andp_TT1 thm
R25609:25619 VST.floyd.typecheck_lemmas <> tc_andp_TT2 thm
R25609:25619 VST.floyd.typecheck_lemmas <> tc_andp_TT2 thm
R25609:25619 VST.floyd.typecheck_lemmas <> tc_andp_TT2 thm
R25655:25670 VST.veric.expr <> isCastResultType def
R25673:25697 VST.veric.Clight_Cop2 <> classify_cast def
R25713:25723 compcert.x86_32.Archi <> ptr64 def
R25778:25782 Coq.Init.Logic <> proj2 thm
R25805:25811 Coq.Init.Logic <> eq_refl constr
R25785:25797 VST.veric.Cop2 <> eqb_attr_spec thm
R25842:25846 VST.veric.SeparationLogic <> local def
R25849:25853 VST.veric.mpred <> lift1 def
R25713:25723 compcert.x86_32.Archi <> ptr64 def
R25778:25782 Coq.Init.Logic <> proj2 thm
R25805:25811 Coq.Init.Logic <> eq_refl constr
R25785:25797 VST.veric.Cop2 <> eqb_attr_spec thm
R25778:25782 Coq.Init.Logic <> proj2 thm
R25805:25811 Coq.Init.Logic <> eq_refl constr
R25785:25797 VST.veric.Cop2 <> eqb_attr_spec thm
R25778:25782 Coq.Init.Logic <> proj2 thm
R25805:25811 Coq.Init.Logic <> eq_refl constr
R25785:25797 VST.veric.Cop2 <> eqb_attr_spec thm
R25917:25926 VST.msl.seplog <> andp_right meth
R25935:25944 VST.msl.seplog <> prop_right meth
R25917:25926 VST.msl.seplog <> andp_right meth
R25935:25944 VST.msl.seplog <> prop_right meth
R25935:25944 VST.msl.seplog <> prop_right meth
R25959:25962 compcert.common.Values <> Vint constr
R25965:25972 compcert.lib.Integers Int repr def
R26005:26011 VST.veric.mpred <> eval_id def
R26036:26042 VST.veric.mpred Map get def
R26056:26057 VST.floyd.for_lemmas <> Sfor._i var
R26045:26049 VST.veric.mpred <> te_of def
R25959:25962 compcert.common.Values <> Vint constr
R25965:25972 compcert.lib.Integers Int repr def
R26036:26042 VST.veric.mpred Map get def
R26056:26057 VST.floyd.for_lemmas <> Sfor._i var
R26045:26049 VST.veric.mpred <> te_of def
R26131:26136 compcert.cfrontend.Clight <> typeof def
R26138:26139 VST.floyd.for_lemmas <> Sfor.hi var
R26101:26115 compcert.lib.Integers Int signed_repr thm
R26101:26115 compcert.lib.Integers Int signed_repr thm
R26131:26136 compcert.cfrontend.Clight <> typeof def
R26138:26139 VST.floyd.for_lemmas <> Sfor.hi var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26101:26115 compcert.lib.Integers Int signed_repr thm
R26131:26136 compcert.cfrontend.Clight <> typeof def
R26138:26139 VST.floyd.for_lemmas <> Sfor.hi var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26184:26186 VST.floyd.for_lemmas <> Sfor.IMM var
R26101:26115 compcert.lib.Integers Int signed_repr thm
R26101:26115 compcert.lib.Integers Int signed_repr thm
R26213:26218 compcert.cfrontend.Clight <> typeof def
R26220:26221 VST.floyd.for_lemmas <> Sfor.hi var
R26213:26218 compcert.cfrontend.Clight <> typeof def
R26220:26221 VST.floyd.for_lemmas <> Sfor.hi var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26266:26268 VST.floyd.for_lemmas <> Sfor.IMM var
R26337:26341 VST.veric.SeparationLogic <> local def
R26344:26348 VST.veric.mpred <> lift1 def
R26384:26392 VST.msl.log_normalize <> andp_comm thm
R26395:26398 VST.msl.seplog <> prop meth
R26384:26392 VST.msl.log_normalize <> andp_comm thm
R26395:26398 VST.msl.seplog <> prop meth
R26384:26392 VST.msl.log_normalize <> andp_comm thm
R26395:26398 VST.msl.seplog <> prop meth
R26426:26435 VST.msl.seplog <> andp_right meth
R26444:26453 VST.msl.seplog <> prop_right meth
R26426:26435 VST.msl.seplog <> andp_right meth
R26444:26453 VST.msl.seplog <> prop_right meth
R26444:26453 VST.msl.seplog <> prop_right meth
R26499:26504 compcert.cfrontend.Clight <> typeof def
R26506:26507 VST.floyd.for_lemmas <> Sfor.hi var
R26469:26483 compcert.lib.Integers Int signed_repr thm
R26469:26483 compcert.lib.Integers Int signed_repr thm
R26499:26504 compcert.cfrontend.Clight <> typeof def
R26506:26507 VST.floyd.for_lemmas <> Sfor.hi var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26469:26483 compcert.lib.Integers Int signed_repr thm
R26499:26504 compcert.cfrontend.Clight <> typeof def
R26506:26507 VST.floyd.for_lemmas <> Sfor.hi var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26552:26554 VST.floyd.for_lemmas <> Sfor.IMM var
R26469:26483 compcert.lib.Integers Int signed_repr thm
R26469:26483 compcert.lib.Integers Int signed_repr thm
R26581:26586 compcert.cfrontend.Clight <> typeof def
R26588:26589 VST.floyd.for_lemmas <> Sfor.hi var
R26581:26586 compcert.cfrontend.Clight <> typeof def
R26588:26589 VST.floyd.for_lemmas <> Sfor.hi var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26634:26636 VST.floyd.for_lemmas <> Sfor.IMM var
R26660:26663 compcert.common.Values <> Vint constr
R26666:26673 compcert.lib.Integers Int repr def
R26706:26712 VST.veric.mpred <> eval_id def
R26737:26743 VST.veric.mpred Map get def
R26757:26758 VST.floyd.for_lemmas <> Sfor._i var
R26746:26750 VST.veric.mpred <> te_of def
R26660:26663 compcert.common.Values <> Vint constr
R26666:26673 compcert.lib.Integers Int repr def
R26737:26743 VST.veric.mpred Map get def
R26757:26758 VST.floyd.for_lemmas <> Sfor._i var
R26746:26750 VST.veric.mpred <> te_of def
R26801:26802 VST.floyd.for_lemmas <> Sfor.TI var
R26801:26802 VST.floyd.for_lemmas <> Sfor.TI var
R26801:26802 VST.floyd.for_lemmas <> Sfor.TI var
R26861:26867 VST.floyd.for_lemmas <> Sfor.EQ_inv2 var
R26861:26867 VST.floyd.for_lemmas <> Sfor.EQ_inv2 var
R26861:26867 VST.floyd.for_lemmas <> Sfor.EQ_inv2 var
R26881:26896 VST.veric.expr <> isCastResultType def
R26930:26934 VST.veric.SeparationLogic <> local def
R26937:26941 VST.veric.mpred <> lift1 def
R26957:26967 compcert.x86_32.Archi <> ptr64 def
R26957:26967 compcert.x86_32.Archi <> ptr64 def
R27002:27011 VST.msl.seplog <> prop_right meth
R27002:27011 VST.msl.seplog <> prop_right meth
R27026:27029 compcert.common.Values <> Vint constr
R27032:27039 compcert.lib.Integers Int repr def
R27026:27029 compcert.common.Values <> Vint constr
R27032:27039 compcert.lib.Integers Int repr def
R27070:27076 VST.veric.mpred <> eval_id def
R27099:27105 VST.veric.mpred Map get def
R27119:27120 VST.floyd.for_lemmas <> Sfor._i var
R27108:27112 VST.veric.mpred <> te_of def
R27099:27105 VST.veric.mpred Map get def
R27119:27120 VST.floyd.for_lemmas <> Sfor._i var
R27108:27112 VST.veric.mpred <> te_of def
R27161:27170 VST.msl.seplog <> andp_right meth
R27161:27170 VST.msl.seplog <> andp_right meth
R27183:27192 VST.msl.seplog <> prop_right meth
R27183:27192 VST.msl.seplog <> prop_right meth
R27210:27213 compcert.common.Values <> Vint constr
R27216:27223 compcert.lib.Integers Int repr def
R27256:27262 VST.veric.mpred <> eval_id def
R27287:27293 VST.veric.mpred Map get def
R27307:27308 VST.floyd.for_lemmas <> Sfor._i var
R27296:27300 VST.veric.mpred <> te_of def
R27210:27213 compcert.common.Values <> Vint constr
R27216:27223 compcert.lib.Integers Int repr def
R27287:27293 VST.veric.mpred Map get def
R27307:27308 VST.floyd.for_lemmas <> Sfor._i var
R27296:27300 VST.veric.mpred <> te_of def
R27371:27378 VST.msl.log_normalize <> TT_right thm
R27371:27378 VST.msl.log_normalize <> TT_right thm
R27371:27378 VST.msl.log_normalize <> TT_right thm
prf 27394:27408 <> Sfor_inc_entail
binder 27418:27418 <> i:260
binder 27420:27420 <> s:261
R27435:27440 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27657:27663 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R27441:27443 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R27453:27456 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R27450:27452 compcert.common.Values <> val ind
binder 27444:27446 <> old:262
R27624:27631 VST.msl.seplog <> ::logic:x_'&&'_x not
R27457:27461 VST.veric.SeparationLogic <> local def
R27468:27470 VST.veric.lift LiftNotation :::'`'_x not
R27473:27622 VST.veric.lift LiftNotation :::'`'_x not
R27471:27472 Coq.Init.Logic <> eq ind
R27496:27500 VST.veric.seplog <> subst def
R27524:27532 VST.veric.expr <> eval_expr def
R27535:27540 compcert.cfrontend.Clight <> Ebinop constr
R27614:27619 VST.floyd.for_lemmas <> Sfor.type_i var
R27569:27578 compcert.cfrontend.Clight <> Econst_int constr
R27594:27597 compcert.cfrontend.Ctypes <> Tint constr
R27605:27610 compcert.cfrontend.Ctypes <> noattr def
R27603:27603 VST.floyd.for_lemmas <> s:261 var
R27599:27601 compcert.cfrontend.Ctypes <> I32 constr
R27581:27588 compcert.lib.Integers Int repr def
R27548:27555 compcert.cfrontend.Clight <> Etempvar constr
R27560:27565 VST.floyd.for_lemmas <> Sfor.type_i var
R27557:27558 VST.floyd.for_lemmas <> Sfor._i var
R27542:27545 compcert.cfrontend.Cop <> Oadd constr
R27506:27507 VST.veric.lift LiftNotation :::'`'_x not
R27508:27510 VST.floyd.for_lemmas <> old:262 var
R27502:27503 VST.floyd.for_lemmas <> Sfor._i var
R27476:27482 VST.veric.mpred <> eval_id def
R27484:27485 VST.floyd.for_lemmas <> Sfor._i var
R27632:27636 VST.veric.seplog <> subst def
R27650:27653 VST.floyd.for_lemmas <> Sfor.inv2 var
R27655:27655 VST.floyd.for_lemmas <> i:260 var
R27642:27643 VST.veric.lift LiftNotation :::'`'_x not
R27644:27646 VST.floyd.for_lemmas <> old:262 var
R27638:27639 VST.floyd.for_lemmas <> Sfor._i var
R27664:27667 VST.floyd.for_lemmas <> Sfor.inv0 var
R27426:27429 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R27431:27433 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R27425:27425 VST.floyd.for_lemmas <> Sfor.m var
R27430:27430 VST.floyd.for_lemmas <> i:260 var
R27430:27430 VST.floyd.for_lemmas <> i:260 var
R27434:27434 VST.floyd.for_lemmas <> Sfor.n var
R27714:27720 VST.floyd.for_lemmas <> Sfor.EQ_inv0 var
R27714:27720 VST.floyd.for_lemmas <> Sfor.EQ_inv0 var
R27714:27720 VST.floyd.for_lemmas <> Sfor.EQ_inv0 var
R27734:27736 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27734:27736 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27754:27760 VST.floyd.for_lemmas <> Sfor.EQ_inv1 var
R27766:27772 VST.floyd.for_lemmas <> Sfor.EQ_inv2 var
R27754:27760 VST.floyd.for_lemmas <> Sfor.EQ_inv1 var
R27754:27760 VST.floyd.for_lemmas <> Sfor.EQ_inv1 var
R27766:27772 VST.floyd.for_lemmas <> Sfor.EQ_inv2 var
R27766:27772 VST.floyd.for_lemmas <> Sfor.EQ_inv2 var
R27785:27794 VST.floyd.assert_lemmas <> subst_andp thm
R27797:27808 VST.floyd.for_lemmas <> Sfor.SUBST_callee var
R27785:27794 VST.floyd.assert_lemmas <> subst_andp thm
R27785:27794 VST.floyd.assert_lemmas <> subst_andp thm
R27797:27808 VST.floyd.for_lemmas <> Sfor.SUBST_callee var
R27797:27808 VST.floyd.for_lemmas <> Sfor.SUBST_callee var
R27840:27844 VST.veric.SeparationLogic <> local def
R27847:27851 VST.veric.mpred <> lift1 def
R27854:27858 VST.veric.seplog <> subst def
R27897:27908 VST.veric.mpred <> eval_id_same thm
R27897:27908 VST.veric.mpred <> eval_id_same thm
R27897:27908 VST.veric.mpred <> eval_id_same thm
R27950:27959 VST.msl.seplog <> andp_right meth
R27950:27959 VST.msl.seplog <> andp_right meth
R27976:27985 VST.msl.seplog <> prop_right meth
R27976:27985 VST.msl.seplog <> prop_right meth
R28041:28046 VST.floyd.for_lemmas <> Sfor.type_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28086:28090 VST.floyd.for_lemmas <> Sfor.I32_i var
R28123:28132 VST.veric.val_lemmas <> force_val2 def
R28222:28225 compcert.common.Values <> Vint constr
R28228:28235 compcert.lib.Integers Int repr def
R28202:28205 compcert.common.Values <> Vint constr
R28208:28215 compcert.lib.Integers Int repr def
R28135:28153 VST.veric.Clight_Cop2 <> sem_add def
R28176:28179 compcert.cfrontend.Ctypes <> Tint constr
R28192:28197 compcert.cfrontend.Ctypes <> noattr def
R28185:28190 compcert.cfrontend.Ctypes <> Signed constr
R28181:28183 compcert.cfrontend.Ctypes <> I32 constr
R28156:28159 compcert.cfrontend.Ctypes <> Tint constr
R28165:28170 compcert.cfrontend.Ctypes <> Signed constr
R28161:28163 compcert.cfrontend.Ctypes <> I32 constr
R28248:28251 compcert.common.Values <> Vint constr
R28254:28260 compcert.lib.Integers Int add def
R28276:28283 compcert.lib.Integers Int repr def
R28263:28270 compcert.lib.Integers Int repr def
R28123:28132 VST.veric.val_lemmas <> force_val2 def
R28222:28225 compcert.common.Values <> Vint constr
R28228:28235 compcert.lib.Integers Int repr def
R28202:28205 compcert.common.Values <> Vint constr
R28208:28215 compcert.lib.Integers Int repr def
R28135:28153 VST.veric.Clight_Cop2 <> sem_add def
R28176:28179 compcert.cfrontend.Ctypes <> Tint constr
R28192:28197 compcert.cfrontend.Ctypes <> noattr def
R28185:28190 compcert.cfrontend.Ctypes <> Signed constr
R28181:28183 compcert.cfrontend.Ctypes <> I32 constr
R28156:28159 compcert.cfrontend.Ctypes <> Tint constr
R28165:28170 compcert.cfrontend.Ctypes <> Signed constr
R28161:28163 compcert.cfrontend.Ctypes <> I32 constr
R28248:28251 compcert.common.Values <> Vint constr
R28254:28260 compcert.lib.Integers Int add def
R28276:28283 compcert.lib.Integers Int repr def
R28263:28270 compcert.lib.Integers Int repr def
R28305:28312 VST.floyd.coqlib3 <> add_repr thm
R28305:28312 VST.floyd.coqlib3 <> add_repr thm
R28305:28312 VST.floyd.coqlib3 <> add_repr thm
R28363:28372 VST.veric.val_lemmas <> force_val2 def
R28464:28467 compcert.common.Values <> Vint constr
R28470:28477 compcert.lib.Integers Int repr def
R28444:28447 compcert.common.Values <> Vint constr
R28450:28457 compcert.lib.Integers Int repr def
R28375:28393 VST.veric.Clight_Cop2 <> sem_add def
R28416:28419 compcert.cfrontend.Ctypes <> Tint constr
R28434:28439 compcert.cfrontend.Ctypes <> noattr def
R28425:28432 compcert.cfrontend.Ctypes <> Unsigned constr
R28421:28423 compcert.cfrontend.Ctypes <> I32 constr
R28396:28399 compcert.cfrontend.Ctypes <> Tint constr
R28405:28410 compcert.cfrontend.Ctypes <> Signed constr
R28401:28403 compcert.cfrontend.Ctypes <> I32 constr
R28490:28493 compcert.common.Values <> Vint constr
R28496:28502 compcert.lib.Integers Int add def
R28518:28525 compcert.lib.Integers Int repr def
R28505:28512 compcert.lib.Integers Int repr def
R28363:28372 VST.veric.val_lemmas <> force_val2 def
R28464:28467 compcert.common.Values <> Vint constr
R28470:28477 compcert.lib.Integers Int repr def
R28444:28447 compcert.common.Values <> Vint constr
R28450:28457 compcert.lib.Integers Int repr def
R28375:28393 VST.veric.Clight_Cop2 <> sem_add def
R28416:28419 compcert.cfrontend.Ctypes <> Tint constr
R28434:28439 compcert.cfrontend.Ctypes <> noattr def
R28425:28432 compcert.cfrontend.Ctypes <> Unsigned constr
R28421:28423 compcert.cfrontend.Ctypes <> I32 constr
R28396:28399 compcert.cfrontend.Ctypes <> Tint constr
R28405:28410 compcert.cfrontend.Ctypes <> Signed constr
R28401:28403 compcert.cfrontend.Ctypes <> I32 constr
R28490:28493 compcert.common.Values <> Vint constr
R28496:28502 compcert.lib.Integers Int add def
R28518:28525 compcert.lib.Integers Int repr def
R28505:28512 compcert.lib.Integers Int repr def
R28547:28554 VST.floyd.coqlib3 <> add_repr thm
R28547:28554 VST.floyd.coqlib3 <> add_repr thm
R28547:28554 VST.floyd.coqlib3 <> add_repr thm
R28621:28630 VST.veric.val_lemmas <> force_val2 def
R28722:28725 compcert.common.Values <> Vint constr
R28728:28735 compcert.lib.Integers Int repr def
R28702:28705 compcert.common.Values <> Vint constr
R28708:28715 compcert.lib.Integers Int repr def
R28633:28651 VST.veric.Clight_Cop2 <> sem_add def
R28676:28679 compcert.cfrontend.Ctypes <> Tint constr
R28692:28697 compcert.cfrontend.Ctypes <> noattr def
R28685:28690 compcert.cfrontend.Ctypes <> Signed constr
R28681:28683 compcert.cfrontend.Ctypes <> I32 constr
R28654:28657 compcert.cfrontend.Ctypes <> Tint constr
R28663:28670 compcert.cfrontend.Ctypes <> Unsigned constr
R28659:28661 compcert.cfrontend.Ctypes <> I32 constr
R28748:28751 compcert.common.Values <> Vint constr
R28754:28760 compcert.lib.Integers Int add def
R28776:28783 compcert.lib.Integers Int repr def
R28763:28770 compcert.lib.Integers Int repr def
R28621:28630 VST.veric.val_lemmas <> force_val2 def
R28722:28725 compcert.common.Values <> Vint constr
R28728:28735 compcert.lib.Integers Int repr def
R28702:28705 compcert.common.Values <> Vint constr
R28708:28715 compcert.lib.Integers Int repr def
R28633:28651 VST.veric.Clight_Cop2 <> sem_add def
R28676:28679 compcert.cfrontend.Ctypes <> Tint constr
R28692:28697 compcert.cfrontend.Ctypes <> noattr def
R28685:28690 compcert.cfrontend.Ctypes <> Signed constr
R28681:28683 compcert.cfrontend.Ctypes <> I32 constr
R28654:28657 compcert.cfrontend.Ctypes <> Tint constr
R28663:28670 compcert.cfrontend.Ctypes <> Unsigned constr
R28659:28661 compcert.cfrontend.Ctypes <> I32 constr
R28748:28751 compcert.common.Values <> Vint constr
R28754:28760 compcert.lib.Integers Int add def
R28776:28783 compcert.lib.Integers Int repr def
R28763:28770 compcert.lib.Integers Int repr def
R28805:28812 VST.floyd.coqlib3 <> add_repr thm
R28805:28812 VST.floyd.coqlib3 <> add_repr thm
R28805:28812 VST.floyd.coqlib3 <> add_repr thm
R28863:28872 VST.veric.val_lemmas <> force_val2 def
R28966:28969 compcert.common.Values <> Vint constr
R28972:28979 compcert.lib.Integers Int repr def
R28946:28949 compcert.common.Values <> Vint constr
R28952:28959 compcert.lib.Integers Int repr def
R28875:28893 VST.veric.Clight_Cop2 <> sem_add def
R28918:28921 compcert.cfrontend.Ctypes <> Tint constr
R28936:28941 compcert.cfrontend.Ctypes <> noattr def
R28927:28934 compcert.cfrontend.Ctypes <> Unsigned constr
R28923:28925 compcert.cfrontend.Ctypes <> I32 constr
R28896:28899 compcert.cfrontend.Ctypes <> Tint constr
R28905:28912 compcert.cfrontend.Ctypes <> Unsigned constr
R28901:28903 compcert.cfrontend.Ctypes <> I32 constr
R28992:28995 compcert.common.Values <> Vint constr
R28998:29004 compcert.lib.Integers Int add def
R29020:29027 compcert.lib.Integers Int repr def
R29007:29014 compcert.lib.Integers Int repr def
R28863:28872 VST.veric.val_lemmas <> force_val2 def
R28966:28969 compcert.common.Values <> Vint constr
R28972:28979 compcert.lib.Integers Int repr def
R28946:28949 compcert.common.Values <> Vint constr
R28952:28959 compcert.lib.Integers Int repr def
R28875:28893 VST.veric.Clight_Cop2 <> sem_add def
R28918:28921 compcert.cfrontend.Ctypes <> Tint constr
R28936:28941 compcert.cfrontend.Ctypes <> noattr def
R28927:28934 compcert.cfrontend.Ctypes <> Unsigned constr
R28923:28925 compcert.cfrontend.Ctypes <> I32 constr
R28896:28899 compcert.cfrontend.Ctypes <> Tint constr
R28905:28912 compcert.cfrontend.Ctypes <> Unsigned constr
R28901:28903 compcert.cfrontend.Ctypes <> I32 constr
R28992:28995 compcert.common.Values <> Vint constr
R28998:29004 compcert.lib.Integers Int add def
R29020:29027 compcert.lib.Integers Int repr def
R29007:29014 compcert.lib.Integers Int repr def
R29049:29056 VST.floyd.coqlib3 <> add_repr thm
R29049:29056 VST.floyd.coqlib3 <> add_repr thm
R29049:29056 VST.floyd.coqlib3 <> add_repr thm
R29103:29106 VST.floyd.for_lemmas Sfor <> sec
prf 29116:29124 <> semax_for
R29149:29150 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29151:29155 VST.veric.mpred <> mpred def
R29142:29148 VST.veric.mpred <> environ ind
binder 29137:29139 <> Inv:263
R29162:29162 Coq.Numbers.BinNums <> Z ind
binder 29159:29159 <> n:264
binder 29165:29169 <> Espec:265
R29176:29184 VST.veric.mpred <> compspecs class
binder 29172:29173 <> cs:266
binder 29187:29191 <> Delta:267
R29217:29218 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29219:29223 VST.veric.mpred <> mpred def
R29210:29216 VST.veric.mpred <> environ ind
binder 29205:29207 <> Pre:268
R29242:29246 compcert.common.AST <> ident def
binder 29238:29239 <> _i:269
R29256:29264 compcert.cfrontend.Clight <> statement ind
binder 29250:29253 <> init:270
R29271:29271 Coq.Numbers.BinNums <> Z ind
binder 29268:29268 <> m:271
R29279:29282 compcert.cfrontend.Clight <> expr ind
binder 29275:29276 <> hi:272
R29305:29313 compcert.cfrontend.Clight <> statement ind
binder 29286:29289 <> body:273
binder 29291:29302 <> MORE_COMMAND:274
R29323:29332 VST.veric.tycontext <> ret_assert rec
binder 29317:29320 <> Post:275
R29355:29358 compcert.cfrontend.Ctypes <> type ind
binder 29347:29352 <> type_i:276
R29389:29392 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29400:29403 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29404:29408 VST.veric.mpred <> mpred def
R29393:29399 VST.veric.mpred <> environ ind
R29388:29388 Coq.Numbers.BinNums <> Z ind
binder 29373:29385 <> assert_callee:277
R29436:29439 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29440:29444 VST.veric.mpred <> mpred def
R29429:29435 VST.veric.mpred <> environ ind
binder 29423:29426 <> inv0:278
R29471:29474 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29482:29485 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29486:29490 VST.veric.mpred <> mpred def
R29475:29481 VST.veric.mpred <> environ ind
R29470:29470 Coq.Numbers.BinNums <> Z ind
binder 29459:29462 <> inv1:279
binder 29464:29467 <> inv2:280
binder 29493:29493 <> s:281
R29528:29530 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29505:29505 compcert.lib.Maps <> :::x_'!'_x not
R29522:29525 compcert.lib.Maps <> :::x_'!'_x not
R29526:29527 VST.floyd.for_lemmas <> _i:269 var
R29506:29515 VST.veric.seplog <> temp_types def
R29517:29521 VST.floyd.for_lemmas <> Delta:267 var
R29531:29534 Coq.Init.Datatypes <> Some constr
R29536:29541 VST.floyd.for_lemmas <> type_i:276 var
binder 29501:29502 <> TI:282
R29561:29563 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29558:29560 VST.floyd.for_lemmas <> Inv:263 var
R29564:29566 VST.msl.seplog <> exp meth
R29568:29580 VST.floyd.for_lemmas <> assert_callee:277 var
binder 29550:29555 <> CALLEE:283
R29594:29601 VST.floyd.for_lemmas <> Sfor_inv ind
R29643:29646 VST.floyd.for_lemmas <> inv2:280 var
R29638:29641 VST.floyd.for_lemmas <> inv1:279 var
R29633:29636 VST.floyd.for_lemmas <> inv0:278 var
R29619:29631 VST.floyd.for_lemmas <> assert_callee:277 var
R29617:29617 VST.floyd.for_lemmas <> n:264 var
R29614:29615 VST.floyd.for_lemmas <> hi:272 var
R29612:29612 VST.floyd.for_lemmas <> m:271 var
R29609:29610 VST.floyd.for_lemmas <> _i:269 var
R29603:29607 VST.floyd.for_lemmas <> Delta:267 var
binder 29589:29591 <> INV:284
R29662:29671 VST.floyd.for_lemmas <> Sfor_setup ind
R29719:29722 VST.floyd.for_lemmas <> inv0:278 var
R29705:29717 VST.floyd.for_lemmas <> assert_callee:277 var
R29703:29703 VST.floyd.for_lemmas <> n:264 var
R29701:29701 VST.floyd.for_lemmas <> m:271 var
R29694:29699 VST.floyd.for_lemmas <> type_i:276 var
R29691:29692 VST.floyd.for_lemmas <> hi:272 var
R29686:29689 VST.floyd.for_lemmas <> init:270 var
R29682:29684 VST.floyd.for_lemmas <> Pre:268 var
R29679:29680 VST.floyd.for_lemmas <> _i:269 var
R29673:29677 VST.floyd.for_lemmas <> Delta:267 var
binder 29655:29659 <> SETUP:285
R29731:29731 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29843:29852 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29909:29917 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29919:29923 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R30219:30222 VST.floyd.for_lemmas <> Post:275 var
R29952:29960 compcert.cfrontend.Clight <> Ssequence constr
R30205:30216 VST.floyd.for_lemmas <> MORE_COMMAND:274 var
R29972:29975 compcert.cfrontend.Clight <> Sfor def
R30098:30101 compcert.cfrontend.Clight <> Sset constr
R30107:30112 compcert.cfrontend.Clight <> Ebinop constr
R30186:30191 VST.floyd.for_lemmas <> type_i:276 var
R30141:30150 compcert.cfrontend.Clight <> Econst_int constr
R30166:30169 compcert.cfrontend.Ctypes <> Tint constr
R30177:30182 compcert.cfrontend.Ctypes <> noattr def
R30175:30175 VST.floyd.for_lemmas <> s:281 var
R30171:30173 compcert.cfrontend.Ctypes <> I32 constr
R30153:30160 compcert.lib.Integers Int repr def
R30120:30127 compcert.cfrontend.Clight <> Etempvar constr
R30132:30137 VST.floyd.for_lemmas <> type_i:276 var
R30129:30130 VST.floyd.for_lemmas <> _i:269 var
R30114:30117 compcert.cfrontend.Cop <> Oadd constr
R30103:30104 VST.floyd.for_lemmas <> _i:269 var
R30076:30079 VST.floyd.for_lemmas <> body:273 var
R29999:30004 compcert.cfrontend.Clight <> Ebinop constr
R30035:30038 compcert.cfrontend.Ctypes <> Tint constr
R30051:30056 compcert.cfrontend.Ctypes <> noattr def
R30044:30049 compcert.cfrontend.Ctypes <> Signed constr
R30040:30042 compcert.cfrontend.Ctypes <> I32 constr
R30031:30032 VST.floyd.for_lemmas <> hi:272 var
R30011:30018 compcert.cfrontend.Clight <> Etempvar constr
R30023:30028 VST.floyd.for_lemmas <> type_i:276 var
R30020:30021 VST.floyd.for_lemmas <> _i:269 var
R30006:30008 compcert.cfrontend.Cop <> Olt constr
R29977:29980 VST.floyd.for_lemmas <> init:270 var
R29940:29942 VST.floyd.for_lemmas <> Pre:268 var
R29934:29938 VST.floyd.for_lemmas <> Delta:267 var
R29928:29932 VST.floyd.for_lemmas <> Espec:265 var
R29925:29926 VST.floyd.for_lemmas <> cs:266 var
R29854:29858 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R29905:29908 VST.floyd.for_lemmas <> Post:275 var
R29892:29903 VST.floyd.for_lemmas <> MORE_COMMAND:274 var
R29884:29887 VST.floyd.for_lemmas <> inv1:279 var
R29889:29889 VST.floyd.for_lemmas <> n:264 var
R29869:29873 VST.floyd.for_lemmas <> Delta:267 var
R29863:29867 VST.floyd.for_lemmas <> Espec:265 var
R29860:29861 VST.floyd.for_lemmas <> cs:266 var
binder 29739:29739 <> i:286
R29752:29760 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29762:29766 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R29814:29827 VST.floyd.assert_lemmas <> for_ret_assert def
R29838:29841 VST.floyd.for_lemmas <> Post:275 var
R29830:29833 VST.floyd.for_lemmas <> inv2:280 var
R29835:29835 VST.floyd.for_lemmas <> i:286 var
R29800:29803 VST.floyd.for_lemmas <> body:273 var
R29784:29787 VST.floyd.for_lemmas <> inv1:279 var
R29789:29789 VST.floyd.for_lemmas <> i:286 var
R29777:29781 VST.floyd.for_lemmas <> Delta:267 var
R29771:29775 VST.floyd.for_lemmas <> Espec:265 var
R29768:29769 VST.floyd.for_lemmas <> cs:266 var
R29743:29746 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R29748:29750 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R29742:29742 VST.floyd.for_lemmas <> m:271 var
R29747:29747 VST.floyd.for_lemmas <> i:286 var
R29747:29747 VST.floyd.for_lemmas <> i:286 var
R29751:29751 VST.floyd.for_lemmas <> n:264 var
R30296:30304 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R30296:30304 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R30371:30379 VST.veric.tycontext <> RA_normal proj
R30371:30379 VST.veric.tycontext <> RA_normal proj
R30392:30399 VST.veric.tycontext <> RA_break proj
R30408:30418 VST.veric.tycontext <> RA_continue proj
R30427:30435 VST.veric.tycontext <> RA_return proj
R30423:30424 VST.msl.seplog <> FF meth
R30404:30405 VST.msl.seplog <> FF meth
R30352:30361 VST.floyd.canon <> semax_post thm
R30461:30470 VST.msl.seplog <> andp_left2 meth
R30473:30484 VST.msl.seplog <> derives_refl meth
R30494:30503 VST.msl.seplog <> andp_left2 meth
R30506:30512 VST.msl.log_normalize <> FF_left thm
R30522:30531 VST.msl.seplog <> andp_left2 meth
R30534:30540 VST.msl.log_normalize <> FF_left thm
R30371:30379 VST.veric.tycontext <> RA_normal proj
R30371:30379 VST.veric.tycontext <> RA_normal proj
R30392:30399 VST.veric.tycontext <> RA_break proj
R30408:30418 VST.veric.tycontext <> RA_continue proj
R30427:30435 VST.veric.tycontext <> RA_return proj
R30423:30424 VST.msl.seplog <> FF meth
R30404:30405 VST.msl.seplog <> FF meth
R30352:30361 VST.floyd.canon <> semax_post thm
R30461:30470 VST.msl.seplog <> andp_left2 meth
R30473:30484 VST.msl.seplog <> derives_refl meth
R30494:30503 VST.msl.seplog <> andp_left2 meth
R30506:30512 VST.msl.log_normalize <> FF_left thm
R30522:30531 VST.msl.seplog <> andp_left2 meth
R30534:30540 VST.msl.log_normalize <> FF_left thm
R30643:30646 compcert.cfrontend.Clight <> Sfor def
R30658:30670 VST.floyd.for_lemmas <> Sfor_inv_spec thm
R30658:30670 VST.floyd.for_lemmas <> Sfor_inv_spec thm
R30730:30744 VST.floyd.for_lemmas <> Sfor_setup_spec thm
R30730:30744 VST.floyd.for_lemmas <> Sfor_setup_spec thm
R30871:30880 VST.floyd.canon <> semax_seq' thm
R30871:30880 VST.floyd.canon <> semax_seq' thm
R30929:30938 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_loop prfax
R30948:30950 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R30955:30956 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R30954:30954 Coq.Numbers.BinNums <> Z ind
binder 30951:30951 <> i:287
R30972:30975 VST.msl.seplog <> ::logic:x_'&&'_x not
R30957:30960 VST.msl.seplog <> ::logic:'!!'_x not
R30971:30971 VST.msl.seplog <> ::logic:'!!'_x not
R30962:30965 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R30967:30969 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R30966:30966 VST.floyd.for_lemmas <> i:287 var
R30966:30966 VST.floyd.for_lemmas <> i:287 var
R30981:30981 VST.floyd.for_lemmas <> i:287 var
R31013:31015 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R31021:31022 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R31020:31020 Coq.Numbers.BinNums <> Z ind
binder 31016:31016 <> i:288
R31038:31041 VST.msl.seplog <> ::logic:x_'&&'_x not
R31023:31026 VST.msl.seplog <> ::logic:'!!'_x not
R31037:31037 VST.msl.seplog <> ::logic:'!!'_x not
R31028:31031 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R31033:31035 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R31032:31032 VST.floyd.for_lemmas <> i:288 var
R31032:31032 VST.floyd.for_lemmas <> i:288 var
R31047:31047 VST.floyd.for_lemmas <> i:288 var
R30997:31005 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R30929:30938 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_loop prfax
R30948:30950 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R30955:30956 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R30954:30954 Coq.Numbers.BinNums <> Z ind
binder 30951:30951 <> i:289
R30972:30975 VST.msl.seplog <> ::logic:x_'&&'_x not
R30957:30960 VST.msl.seplog <> ::logic:'!!'_x not
R30971:30971 VST.msl.seplog <> ::logic:'!!'_x not
R30962:30965 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R30967:30969 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R30966:30966 VST.floyd.for_lemmas <> i:289 var
R30966:30966 VST.floyd.for_lemmas <> i:289 var
R30981:30981 VST.floyd.for_lemmas <> i:289 var
R31013:31015 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R31021:31022 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R31020:31020 Coq.Numbers.BinNums <> Z ind
binder 31016:31016 <> i:290
R31038:31041 VST.msl.seplog <> ::logic:x_'&&'_x not
R31023:31026 VST.msl.seplog <> ::logic:'!!'_x not
R31037:31037 VST.msl.seplog <> ::logic:'!!'_x not
R31028:31031 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R31033:31035 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R31032:31032 VST.floyd.for_lemmas <> i:290 var
R31032:31032 VST.floyd.for_lemmas <> i:290 var
R31047:31047 VST.floyd.for_lemmas <> i:290 var
R30997:31005 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R31177:31180 VST.msl.seplog <> ::logic:x_'&&'_x not
R31080:31086 VST.veric.SeparationLogic <> tc_expr def
R31095:31099 compcert.cfrontend.Clight <> Eunop constr
R31153:31156 compcert.cfrontend.Ctypes <> Tint constr
R31169:31174 compcert.cfrontend.Ctypes <> noattr def
R31162:31167 compcert.cfrontend.Ctypes <> Signed constr
R31158:31160 compcert.cfrontend.Ctypes <> I32 constr
R31111:31116 compcert.cfrontend.Clight <> Ebinop constr
R31146:31149 compcert.exportclight.Clightdefs <> tint def
R31123:31130 compcert.cfrontend.Clight <> Etempvar constr
R31118:31120 compcert.cfrontend.Cop <> Olt constr
R31101:31108 compcert.cfrontend.Cop <> Onotbool constr
R31064:31072 VST.floyd.canon <> semax_pre thm
R31177:31180 VST.msl.seplog <> ::logic:x_'&&'_x not
R31080:31086 VST.veric.SeparationLogic <> tc_expr def
R31095:31099 compcert.cfrontend.Clight <> Eunop constr
R31153:31156 compcert.cfrontend.Ctypes <> Tint constr
R31169:31174 compcert.cfrontend.Ctypes <> noattr def
R31162:31167 compcert.cfrontend.Ctypes <> Signed constr
R31158:31160 compcert.cfrontend.Ctypes <> I32 constr
R31111:31116 compcert.cfrontend.Clight <> Ebinop constr
R31146:31149 compcert.exportclight.Clightdefs <> tint def
R31123:31130 compcert.cfrontend.Clight <> Etempvar constr
R31118:31120 compcert.cfrontend.Cop <> Olt constr
R31101:31108 compcert.cfrontend.Cop <> Onotbool constr
R31064:31072 VST.floyd.canon <> semax_pre thm
R31206:31215 VST.msl.seplog <> andp_right meth
R31206:31215 VST.msl.seplog <> andp_right meth
R31247:31263 VST.floyd.for_lemmas <> Sfor_loop_cond_tc thm
R31247:31263 VST.floyd.for_lemmas <> Sfor_loop_cond_tc thm
R31289:31304 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_ifthenelse prfax
R31289:31304 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_ifthenelse prfax
R31326:31335 VST.floyd.canon <> semax_post thm
R31350:31359 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_skip prfax
R31326:31335 VST.floyd.canon <> semax_post thm
R31350:31359 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_skip prfax
R31378:31386 VST.veric.tycontext <> RA_normal proj
R31389:31405 VST.veric.SeparationLogic <> normal_ret_assert def
R31408:31419 VST.veric.SeparationLogic <> overridePost def
R31422:31437 VST.veric.SeparationLogic <> loop1_ret_assert def
R31455:31473 VST.floyd.for_lemmas <> Sfor_loop_cond_true thm
R31455:31473 VST.floyd.for_lemmas <> Sfor_loop_cond_true thm
R31497:31506 VST.msl.seplog <> andp_left2 meth
R31509:31515 VST.msl.log_normalize <> FF_left thm
R31497:31506 VST.msl.seplog <> andp_left2 meth
R31509:31515 VST.msl.log_normalize <> FF_left thm
R31532:31541 VST.msl.seplog <> andp_left2 meth
R31544:31550 VST.msl.log_normalize <> FF_left thm
R31532:31541 VST.msl.seplog <> andp_left2 meth
R31544:31550 VST.msl.log_normalize <> FF_left thm
R31575:31584 VST.msl.seplog <> andp_left2 meth
R31587:31593 VST.msl.log_normalize <> FF_left thm
R31575:31584 VST.msl.seplog <> andp_left2 meth
R31587:31593 VST.msl.log_normalize <> FF_left thm
R31609:31617 VST.floyd.canon <> semax_pre thm
R31629:31639 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_break prfax
R31609:31617 VST.floyd.canon <> semax_pre thm
R31629:31639 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_break prfax
R31656:31663 VST.veric.tycontext <> RA_break proj
R31666:31677 VST.veric.SeparationLogic <> overridePost def
R31680:31695 VST.veric.SeparationLogic <> loop1_ret_assert def
R31711:31730 VST.floyd.for_lemmas <> Sfor_loop_cond_false thm
R31711:31730 VST.floyd.for_lemmas <> Sfor_loop_cond_false thm
R31764:31781 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R31764:31781 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R31803:31818 VST.veric.SeparationLogic <> loop1_ret_assert def
R31832:31841 VST.floyd.canon <> semax_post thm
R31832:31841 VST.floyd.canon <> semax_post thm
R31879:31887 VST.veric.tycontext <> RA_normal proj
R31903:31911 VST.msl.seplog <> exp_right meth
R31903:31911 VST.msl.seplog <> exp_right meth
R31929:31938 VST.msl.seplog <> andp_right meth
R31948:31957 VST.msl.seplog <> prop_right meth
R31967:31976 VST.msl.seplog <> andp_left2 meth
R31929:31938 VST.msl.seplog <> andp_right meth
R31948:31957 VST.msl.seplog <> prop_right meth
R31967:31976 VST.msl.seplog <> andp_left2 meth
R31999:32006 VST.veric.tycontext <> RA_break proj
R32041:32050 VST.msl.seplog <> andp_left2 meth
R32053:32059 VST.msl.log_normalize <> FF_left thm
R32041:32050 VST.msl.seplog <> andp_left2 meth
R32053:32059 VST.msl.log_normalize <> FF_left thm
R32075:32085 VST.veric.tycontext <> RA_continue proj
R32101:32109 VST.msl.seplog <> exp_right meth
R32101:32109 VST.msl.seplog <> exp_right meth
R32127:32136 VST.msl.seplog <> andp_right meth
R32146:32155 VST.msl.seplog <> prop_right meth
R32165:32174 VST.msl.seplog <> andp_left2 meth
R32127:32136 VST.msl.seplog <> andp_right meth
R32146:32155 VST.msl.seplog <> prop_right meth
R32165:32174 VST.msl.seplog <> andp_left2 meth
R32210:32219 VST.msl.seplog <> andp_left2 meth
R32222:32233 VST.msl.seplog <> derives_refl meth
R32210:32219 VST.msl.seplog <> andp_left2 meth
R32222:32233 VST.msl.seplog <> derives_refl meth
R32260:32277 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R32260:32277 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R32299:32312 VST.floyd.canon <> semax_pre_post thm
R32327:32343 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_set_forward prfax
R32299:32312 VST.floyd.canon <> semax_pre_post thm
R32327:32343 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_set_forward prfax
R32360:32372 VST.msl.seplog <> derives_trans meth
R32384:32392 VST.msl.seplog <> now_later meth
R32360:32372 VST.msl.seplog <> derives_trans meth
R32384:32392 VST.msl.seplog <> now_later meth
R32408:32417 VST.msl.seplog <> andp_right meth
R32429:32438 VST.msl.seplog <> andp_left2 meth
R32441:32452 VST.msl.seplog <> derives_refl meth
R32408:32417 VST.msl.seplog <> andp_right meth
R32429:32438 VST.msl.seplog <> andp_left2 meth
R32441:32452 VST.msl.seplog <> derives_refl meth
R32470:32480 VST.floyd.for_lemmas <> Sfor_inc_tc thm
R32470:32480 VST.floyd.for_lemmas <> Sfor_inc_tc thm
R32512:32520 VST.veric.tycontext <> RA_normal proj
R32523:32538 VST.veric.SeparationLogic <> loop2_ret_assert def
R32541:32557 VST.veric.SeparationLogic <> normal_ret_assert def
R32573:32582 VST.msl.seplog <> andp_left2 meth
R32586:32600 VST.floyd.for_lemmas <> Sfor_inc_entail thm
R32573:32582 VST.msl.seplog <> andp_left2 meth
R32586:32600 VST.floyd.for_lemmas <> Sfor_inc_entail thm
R32631:32640 VST.msl.seplog <> andp_left2 meth
R32643:32649 VST.msl.log_normalize <> FF_left thm
R32631:32640 VST.msl.seplog <> andp_left2 meth
R32643:32649 VST.msl.log_normalize <> FF_left thm
R32664:32673 VST.msl.seplog <> andp_left2 meth
R32676:32682 VST.msl.log_normalize <> FF_left thm
R32664:32673 VST.msl.seplog <> andp_left2 meth
R32676:32682 VST.msl.log_normalize <> FF_left thm
R32705:32714 VST.msl.seplog <> andp_left2 meth
R32717:32723 VST.msl.log_normalize <> FF_left thm
R32705:32714 VST.msl.seplog <> andp_left2 meth
R32717:32723 VST.msl.log_normalize <> FF_left thm
prf 32738:32748 <> semax_for_x
R32773:32774 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32775:32779 VST.veric.mpred <> mpred def
R32766:32772 VST.veric.mpred <> environ ind
binder 32761:32763 <> Inv:291
R32786:32786 Coq.Numbers.BinNums <> Z ind
binder 32783:32783 <> n:292
binder 32789:32793 <> Espec:293
R32800:32808 VST.veric.mpred <> compspecs class
binder 32796:32797 <> cs:294
binder 32811:32815 <> Delta:295
R32841:32842 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32843:32847 VST.veric.mpred <> mpred def
R32834:32840 VST.veric.mpred <> environ ind
binder 32829:32831 <> Pre:296
R32866:32870 compcert.common.AST <> ident def
binder 32862:32863 <> _i:297
R32880:32888 compcert.cfrontend.Clight <> statement ind
binder 32874:32877 <> init:298
R32895:32895 Coq.Numbers.BinNums <> Z ind
binder 32892:32892 <> m:299
R32903:32906 compcert.cfrontend.Clight <> expr ind
binder 32899:32900 <> hi:300
R32929:32937 compcert.cfrontend.Clight <> statement ind
binder 32910:32913 <> body:301
binder 32915:32926 <> MORE_COMMAND:302
R32947:32956 VST.veric.tycontext <> ret_assert rec
binder 32941:32944 <> Post:303
R32979:32982 compcert.cfrontend.Ctypes <> type ind
binder 32971:32976 <> type_i:304
R33013:33016 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33024:33027 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33028:33032 VST.veric.mpred <> mpred def
R33017:33023 VST.veric.mpred <> environ ind
R33012:33012 Coq.Numbers.BinNums <> Z ind
binder 32997:33009 <> assert_callee:305
R33060:33063 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33064:33068 VST.veric.mpred <> mpred def
R33053:33059 VST.veric.mpred <> environ ind
binder 33047:33050 <> inv0:306
R33095:33098 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33106:33109 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33110:33114 VST.veric.mpred <> mpred def
R33099:33105 VST.veric.mpred <> environ ind
R33094:33094 Coq.Numbers.BinNums <> Z ind
binder 33083:33086 <> inv1:307
binder 33088:33091 <> inv2:308
binder 33117:33117 <> s:309
binder 33130:33133 <> test:310
binder 33135:33138 <> incr:311
R33212:33220 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33323:33331 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33372:33374 Coq.Init.Logic <> ::type_scope:x_'='_x not
R33349:33349 compcert.lib.Maps <> :::x_'!'_x not
R33366:33369 compcert.lib.Maps <> :::x_'!'_x not
R33370:33371 VST.floyd.for_lemmas <> _i:297 var
R33350:33359 VST.veric.seplog <> temp_types def
R33361:33365 VST.floyd.for_lemmas <> Delta:295 var
R33375:33378 Coq.Init.Datatypes <> Some constr
R33380:33385 VST.floyd.for_lemmas <> type_i:304 var
binder 33345:33346 <> TI:312
R33405:33407 Coq.Init.Logic <> ::type_scope:x_'='_x not
R33402:33404 VST.floyd.for_lemmas <> Inv:291 var
R33408:33410 VST.msl.seplog <> exp meth
R33412:33424 VST.floyd.for_lemmas <> assert_callee:305 var
binder 33394:33399 <> CALLEE:313
R33438:33445 VST.floyd.for_lemmas <> Sfor_inv ind
R33487:33490 VST.floyd.for_lemmas <> inv2:308 var
R33482:33485 VST.floyd.for_lemmas <> inv1:307 var
R33477:33480 VST.floyd.for_lemmas <> inv0:306 var
R33463:33475 VST.floyd.for_lemmas <> assert_callee:305 var
R33461:33461 VST.floyd.for_lemmas <> n:292 var
R33458:33459 VST.floyd.for_lemmas <> hi:300 var
R33456:33456 VST.floyd.for_lemmas <> m:299 var
R33453:33454 VST.floyd.for_lemmas <> _i:297 var
R33447:33451 VST.floyd.for_lemmas <> Delta:295 var
binder 33433:33435 <> INV:314
R33506:33515 VST.floyd.for_lemmas <> Sfor_setup ind
R33563:33566 VST.floyd.for_lemmas <> inv0:306 var
R33549:33561 VST.floyd.for_lemmas <> assert_callee:305 var
R33547:33547 VST.floyd.for_lemmas <> n:292 var
R33545:33545 VST.floyd.for_lemmas <> m:299 var
R33538:33543 VST.floyd.for_lemmas <> type_i:304 var
R33535:33536 VST.floyd.for_lemmas <> hi:300 var
R33530:33533 VST.floyd.for_lemmas <> init:298 var
R33526:33528 VST.floyd.for_lemmas <> Pre:296 var
R33523:33524 VST.floyd.for_lemmas <> _i:297 var
R33517:33521 VST.floyd.for_lemmas <> Delta:295 var
binder 33499:33503 <> SETUP:315
R33575:33575 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33687:33696 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33753:33761 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33763:33767 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R33856:33859 VST.floyd.for_lemmas <> Post:303 var
R33796:33804 compcert.cfrontend.Clight <> Ssequence constr
R33842:33853 VST.floyd.for_lemmas <> MORE_COMMAND:302 var
R33807:33810 compcert.cfrontend.Clight <> Sfor def
R33827:33830 VST.floyd.for_lemmas <> incr:311 var
R33822:33825 VST.floyd.for_lemmas <> body:301 var
R33817:33820 VST.floyd.for_lemmas <> test:310 var
R33812:33815 VST.floyd.for_lemmas <> init:298 var
R33784:33786 VST.floyd.for_lemmas <> Pre:296 var
R33778:33782 VST.floyd.for_lemmas <> Delta:295 var
R33772:33776 VST.floyd.for_lemmas <> Espec:293 var
R33769:33770 VST.floyd.for_lemmas <> cs:294 var
R33698:33702 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R33749:33752 VST.floyd.for_lemmas <> Post:303 var
R33736:33747 VST.floyd.for_lemmas <> MORE_COMMAND:302 var
R33728:33731 VST.floyd.for_lemmas <> inv1:307 var
R33733:33733 VST.floyd.for_lemmas <> n:292 var
R33713:33717 VST.floyd.for_lemmas <> Delta:295 var
R33707:33711 VST.floyd.for_lemmas <> Espec:293 var
R33704:33705 VST.floyd.for_lemmas <> cs:294 var
binder 33583:33583 <> i:316
R33596:33604 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33606:33610 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R33658:33671 VST.floyd.assert_lemmas <> for_ret_assert def
R33682:33685 VST.floyd.for_lemmas <> Post:303 var
R33674:33677 VST.floyd.for_lemmas <> inv2:308 var
R33679:33679 VST.floyd.for_lemmas <> i:316 var
R33644:33647 VST.floyd.for_lemmas <> body:301 var
R33628:33631 VST.floyd.for_lemmas <> inv1:307 var
R33633:33633 VST.floyd.for_lemmas <> i:316 var
R33621:33625 VST.floyd.for_lemmas <> Delta:295 var
R33615:33619 VST.floyd.for_lemmas <> Espec:293 var
R33612:33613 VST.floyd.for_lemmas <> cs:294 var
R33587:33590 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R33592:33594 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R33586:33586 VST.floyd.for_lemmas <> m:299 var
R33591:33591 VST.floyd.for_lemmas <> i:316 var
R33591:33591 VST.floyd.for_lemmas <> i:316 var
R33595:33595 VST.floyd.for_lemmas <> n:292 var
R33225:33227 Coq.Init.Logic <> ::type_scope:x_'='_x not
R33221:33224 VST.floyd.for_lemmas <> incr:311 var
R33228:33231 compcert.cfrontend.Clight <> Sset constr
R33237:33242 compcert.cfrontend.Clight <> Ebinop constr
R33316:33321 VST.floyd.for_lemmas <> type_i:304 var
R33271:33280 compcert.cfrontend.Clight <> Econst_int constr
R33296:33299 compcert.cfrontend.Ctypes <> Tint constr
R33307:33312 compcert.cfrontend.Ctypes <> noattr def
R33305:33305 VST.floyd.for_lemmas <> s:309 var
R33301:33303 compcert.cfrontend.Ctypes <> I32 constr
R33283:33290 compcert.lib.Integers Int repr def
R33250:33257 compcert.cfrontend.Clight <> Etempvar constr
R33262:33267 VST.floyd.for_lemmas <> type_i:304 var
R33259:33260 VST.floyd.for_lemmas <> _i:297 var
R33244:33247 compcert.cfrontend.Cop <> Oadd constr
R33233:33234 VST.floyd.for_lemmas <> _i:297 var
R33150:33152 Coq.Init.Logic <> ::type_scope:x_'='_x not
R33146:33149 VST.floyd.for_lemmas <> test:310 var
R33153:33158 compcert.cfrontend.Clight <> Ebinop constr
R33189:33192 compcert.cfrontend.Ctypes <> Tint constr
R33205:33210 compcert.cfrontend.Ctypes <> noattr def
R33198:33203 compcert.cfrontend.Ctypes <> Signed constr
R33194:33196 compcert.cfrontend.Ctypes <> I32 constr
R33185:33186 VST.floyd.for_lemmas <> hi:300 var
R33165:33172 compcert.cfrontend.Clight <> Etempvar constr
R33177:33182 VST.floyd.for_lemmas <> type_i:304 var
R33174:33175 VST.floyd.for_lemmas <> _i:297 var
R33160:33162 compcert.cfrontend.Cop <> Olt constr
R33901:33909 VST.floyd.for_lemmas <> semax_for thm
R33901:33909 VST.floyd.for_lemmas <> semax_for thm
prf 33931:33949 <> quick_derives_right
R33974:33977 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33978:33982 VST.veric.mpred <> mpred def
R33967:33973 VST.veric.mpred <> environ ind
binder 33961:33961 <> P:317
binder 33963:33963 <> Q:318
R33996:33999 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34001:34005 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R34000:34000 VST.floyd.for_lemmas <> P:317 var
R34006:34006 VST.floyd.for_lemmas <> Q:318 var
R33990:33994 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R33988:33989 VST.msl.seplog <> TT meth
R33995:33995 VST.floyd.for_lemmas <> Q:318 var
R34031:34043 VST.msl.seplog <> derives_trans meth
R34031:34043 VST.msl.seplog <> derives_trans meth
R34196:34214 VST.floyd.for_lemmas <> quick_derives_right thm
R34264:34273 VST.msl.seplog <> andp_right meth
R34415:34421 VST.veric.SeparationLogic <> tc_expr def
R34551:34566 VST.floyd.for_lemmas <> Int_eqm_unsigned ind
R34551:34566 VST.floyd.for_lemmas <> Int_eqm_unsigned ind
R34603:34610 compcert.lib.Integers Int repr def
R34603:34610 compcert.lib.Integers Int repr def
R34631:34637 compcert.lib.Integers Int sub def
R34631:34637 compcert.lib.Integers Int sub def
R34674:34680 compcert.lib.Integers Int add def
R34674:34680 compcert.lib.Integers Int add def
R34717:34723 compcert.lib.Integers Int mul def
R34717:34723 compcert.lib.Integers Int mul def
R34760:34766 compcert.lib.Integers Int and def
R34760:34766 compcert.lib.Integers Int and def
R34803:34808 compcert.lib.Integers Int or def
R34803:34808 compcert.lib.Integers Int or def
R34951:34967 compcert.lib.Integers Int repr_unsigned thm
R34824:34829 compcert.lib.Integers Int or def
R34782:34788 compcert.lib.Integers Int and def
R34739:34745 compcert.lib.Integers Int mul def
R34696:34702 compcert.lib.Integers Int add def
R34653:34659 compcert.lib.Integers Int sub def
R35013:35033 VST.floyd.for_lemmas <> Int_eqm_unsigned_repr constr
R35043:35064 VST.floyd.for_lemmas <> Int_eqm_unsigned_repr' thm
R35158:35175 VST.floyd.for_lemmas <> Int64_eqm_unsigned ind
R35158:35175 VST.floyd.for_lemmas <> Int64_eqm_unsigned ind
R35212:35221 compcert.lib.Integers Int64 repr def
R35212:35221 compcert.lib.Integers Int64 repr def
R35242:35250 compcert.lib.Integers Int64 sub def
R35242:35250 compcert.lib.Integers Int64 sub def
R35289:35297 compcert.lib.Integers Int64 add def
R35289:35297 compcert.lib.Integers Int64 add def
R35336:35344 compcert.lib.Integers Int64 mul def
R35336:35344 compcert.lib.Integers Int64 mul def
R35383:35391 compcert.lib.Integers Int64 and def
R35383:35391 compcert.lib.Integers Int64 and def
R35430:35437 compcert.lib.Integers Int64 or def
R35430:35437 compcert.lib.Integers Int64 or def
R35492:35510 compcert.lib.Integers Int64 repr_unsigned thm
R35453:35460 compcert.lib.Integers Int64 or def
R35407:35415 compcert.lib.Integers Int64 and def
R35360:35368 compcert.lib.Integers Int64 mul def
R35313:35321 compcert.lib.Integers Int64 add def
R35266:35274 compcert.lib.Integers Int64 sub def
R35556:35578 VST.floyd.for_lemmas <> Int64_eqm_unsigned_repr constr
R35588:35611 VST.floyd.for_lemmas <> Int64_eqm_unsigned_repr' thm
R35658:35681 VST.floyd.for_lemmas <> Int_64_eqm_unsigned_repr constr
R35725:35748 VST.floyd.for_lemmas <> Int_32_eqm_unsigned_repr constr
R35829:35840 VST.floyd.for_lemmas <> Sfor_inv_rec ind
R35829:35840 VST.floyd.for_lemmas <> Sfor_inv_rec ind
R35915:35917 VST.msl.seplog <> exp meth
binder 35924:35924 <> x:319
R35915:35917 VST.msl.seplog <> exp meth
binder 35924:35924 <> x:320
R36131:36146 VST.floyd.for_lemmas <> Sfor_inv_rec_end constr
R35979:35995 VST.floyd.for_lemmas <> Sfor_inv_rec_step thm
R36350:36367 VST.floyd.for_lemmas <> construct_Sfor_inv constr
R36534:36542 Coq.ZArith.BinInt Z compare def
R36562:36566 Coq.ZArith.BinInt Z max def
R36562:36566 Coq.ZArith.BinInt Z max def
R36594:36595 Coq.Init.Datatypes <> Lt constr
R36683:36691 Coq.ZArith.BinInt Z compare def
R36711:36715 Coq.ZArith.BinInt Z min def
R36711:36715 Coq.ZArith.BinInt Z min def
R36743:36744 Coq.Init.Datatypes <> Gt constr
R36819:36841 VST.floyd.for_lemmas <> construct_range_init_hl constr
R36894:36915 VST.floyd.for_lemmas <> construct_range_init_h constr
R36986:37006 VST.floyd.for_lemmas <> Sfor_setup_const_init constr
R37146:37149 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R37151:37154 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R37146:37149 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R37151:37154 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R37184:37187 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R37184:37187 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R37261:37276 VST.floyd.for_lemmas <> Sfor_setup_other constr
R37412:37414 Coq.Init.Logic <> ::type_scope:x_'='_x not
R37412:37414 Coq.Init.Logic <> ::type_scope:x_'='_x not
R37691:37693 Coq.Init.Logic <> ::type_scope:x_'='_x not
R37691:37693 Coq.Init.Logic <> ::type_scope:x_'='_x not
R37919:37929 VST.floyd.for_lemmas <> semax_for_x thm
R38230:38234 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R38239:38241 VST.msl.seplog <> exp meth
binder 38248:38248 <> x:323
R38230:38234 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R38239:38241 VST.msl.seplog <> exp meth
binder 38248:38248 <> x:324
R38311:38328 VST.floyd.base <> extract_exists_pre def
