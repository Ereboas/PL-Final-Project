DIGEST f710f33a0e63bcf00c1039d8efccf372
FVST.floyd.SeparationLogicAsLogic
R29:38 compcert.exportclight.Clightdefs <> <> lib
R56:69 VST.veric.base <> <> lib
R87:111 VST.veric.SeparationLogic <> <> lib
R129:150 VST.msl.Extensionality <> <> lib
R168:186 compcert.lib.Coqlib <> <> lib
R204:218 VST.msl.Coqlib2 <> <> lib
R220:236 VST.veric.coqlib4 <> <> lib
R238:254 VST.floyd.coqlib3 <> <> lib
R272:292 VST.floyd.jmeq_lemmas <> <> lib
R310:334 VST.floyd.find_nth_tactic <> <> lib
R352:374 VST.veric.juicy_extspec <> <> lib
R392:414 VST.veric.NullExtension <> <> lib
R432:454 VST.floyd.assert_lemmas <> <> lib
R472:501 VST.floyd.SeparationLogicFacts <> <> lib
def 566:594 <> all_suf_of_labeled_statements
R618:621 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R600:617 compcert.cfrontend.Clight <> labeled_statements ind
binder 597:597 <> P:1
R632:649 compcert.cfrontend.Clight <> labeled_statements ind
binder 629:629 <> L:2
R669:669 VST.floyd.SeparationLogicAsLogic <> L:2 var
R680:684 compcert.cfrontend.Clight <> LSnil constr
R689:689 VST.floyd.SeparationLogicAsLogic <> P:1 var
R691:691 VST.floyd.SeparationLogicAsLogic <> L:2 var
R697:702 compcert.cfrontend.Clight <> LScons constr
R717:720 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R714:714 VST.floyd.SeparationLogicAsLogic <> P:1 var
R716:716 VST.floyd.SeparationLogicAsLogic <> L:2 var
R721:749 VST.floyd.SeparationLogicAsLogic <> all_suf_of_labeled_statements:3 def
R751:751 VST.floyd.SeparationLogicAsLogic <> P:1 var
prf 770:781 <> all_suf_self
binder 791:791 <> P:5
binder 793:793 <> L:6
R831:834 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R835:835 VST.floyd.SeparationLogicAsLogic <> P:5 var
R837:837 VST.floyd.SeparationLogicAsLogic <> L:6 var
R798:826 VST.floyd.SeparationLogicAsLogic <> all_suf_of_labeled_statements def
R830:830 VST.floyd.SeparationLogicAsLogic <> L:6 var
R828:828 VST.floyd.SeparationLogicAsLogic <> P:5 var
prf 902:914 <> all_suf_LSnil
binder 924:924 <> P:7
binder 926:926 <> L:8
R964:967 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R968:968 VST.floyd.SeparationLogicAsLogic <> P:7 var
R970:974 compcert.cfrontend.Clight <> LSnil constr
R931:959 VST.floyd.SeparationLogicAsLogic <> all_suf_of_labeled_statements def
R963:963 VST.floyd.SeparationLogicAsLogic <> L:8 var
R961:961 VST.floyd.SeparationLogicAsLogic <> P:7 var
prf 1040:1060 <> all_suf_select_switch
binder 1070:1070 <> P:9
binder 1072:1072 <> L:10
R1110:1115 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 1123:1123 <> n:11
R1126:1126 VST.floyd.SeparationLogicAsLogic <> P:9 var
R1129:1141 compcert.cfrontend.Clight <> select_switch def
R1145:1145 VST.floyd.SeparationLogicAsLogic <> L:10 var
R1143:1143 VST.floyd.SeparationLogicAsLogic <> n:11 var
R1077:1105 VST.floyd.SeparationLogicAsLogic <> all_suf_of_labeled_statements def
R1109:1109 VST.floyd.SeparationLogicAsLogic <> L:10 var
R1107:1107 VST.floyd.SeparationLogicAsLogic <> P:9 var
R1175:1187 compcert.cfrontend.Clight <> select_switch def
R1202:1219 compcert.cfrontend.Clight <> select_switch_case def
R1560:1572 VST.floyd.SeparationLogicAsLogic <> all_suf_LSnil thm
R1560:1572 VST.floyd.SeparationLogicAsLogic <> all_suf_LSnil thm
sec 1734:1746 <> statement_ind
var 1763:1763 statement_ind P
var 1788:1792 statement_ind Hskip
var 1807:1813 statement_ind Hassign
var 1850:1853 statement_ind Hset
var 1905:1909 statement_ind Hcall
var 1987:1994 statement_ind Hbuiltin
var 2039:2047 statement_ind Hsequence
var 2134:2144 statement_ind Hifthenelse
var 2213:2217 statement_ind Hloop
var 2300:2305 statement_ind Hbreak
var 2322:2330 statement_ind Hcontinue
var 2350:2356 statement_ind Hreturn
var 2402:2408 statement_ind Hswitch
var 2521:2526 statement_ind Hlabel
var 2592:2596 statement_ind Hgoto
R1775:1778 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1766:1774 compcert.cfrontend.Clight <> statement ind
R1795:1795 VST.floyd.SeparationLogicAsLogic <> P:12 var
R1797:1801 compcert.cfrontend.Clight <> Sskip constr
binder 1823:1823 <> e:14
binder 1825:1826 <> e0:15
R1829:1829 VST.floyd.SeparationLogicAsLogic <> P:12 var
R1832:1838 compcert.cfrontend.Clight <> Sassign constr
R1842:1843 VST.floyd.SeparationLogicAsLogic <> e0:15 var
R1840:1840 VST.floyd.SeparationLogicAsLogic <> e:14 var
R1869:1873 compcert.common.AST <> ident def
binder 1865:1865 <> i:17
R1881:1884 compcert.cfrontend.Clight <> expr ind
binder 1877:1877 <> e:18
R1888:1888 VST.floyd.SeparationLogicAsLogic <> P:12 var
R1891:1894 compcert.cfrontend.Clight <> Sset constr
R1898:1898 VST.floyd.SeparationLogicAsLogic <> e:18 var
R1896:1896 VST.floyd.SeparationLogicAsLogic <> i:17 var
R1925:1930 Coq.Init.Datatypes <> option ind
R1932:1936 compcert.common.AST <> ident def
binder 1921:1921 <> o:20
R1944:1947 compcert.cfrontend.Clight <> expr ind
binder 1940:1940 <> e:21
R1955:1958 Coq.Init.Datatypes <> list ind
R1960:1963 compcert.cfrontend.Clight <> expr ind
binder 1951:1951 <> l:22
R1967:1967 VST.floyd.SeparationLogicAsLogic <> P:12 var
R1970:1974 compcert.cfrontend.Clight <> Scall constr
R1980:1980 VST.floyd.SeparationLogicAsLogic <> l:22 var
R1978:1978 VST.floyd.SeparationLogicAsLogic <> e:21 var
R1976:1976 VST.floyd.SeparationLogicAsLogic <> o:20 var
binder 2005:2005 <> o:24
binder 2007:2007 <> e:25
binder 2009:2009 <> t:26
binder 2011:2011 <> l:27
R2014:2014 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2017:2024 compcert.cfrontend.Clight <> Sbuiltin constr
R2032:2032 VST.floyd.SeparationLogicAsLogic <> l:27 var
R2030:2030 VST.floyd.SeparationLogicAsLogic <> t:26 var
R2028:2028 VST.floyd.SeparationLogicAsLogic <> e:25 var
R2026:2026 VST.floyd.SeparationLogicAsLogic <> o:24 var
R2062:2070 compcert.cfrontend.Clight <> statement ind
binder 2058:2058 <> s:29
R2076:2079 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2092:2100 compcert.cfrontend.Clight <> statement ind
binder 2087:2088 <> s0:30
R2107:2110 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2111:2111 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2114:2122 compcert.cfrontend.Clight <> Ssequence constr
R2126:2127 VST.floyd.SeparationLogicAsLogic <> s0:30 var
R2124:2124 VST.floyd.SeparationLogicAsLogic <> s:29 var
R2103:2103 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2105:2106 VST.floyd.SeparationLogicAsLogic <> s0:30 var
R2073:2073 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2075:2075 VST.floyd.SeparationLogicAsLogic <> s:29 var
binder 2155:2155 <> e:32
binder 2157:2157 <> s:33
R2163:2166 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 2174:2175 <> s0:34
R2182:2185 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2186:2186 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2189:2199 compcert.cfrontend.Clight <> Sifthenelse constr
R2205:2206 VST.floyd.SeparationLogicAsLogic <> s0:34 var
R2203:2203 VST.floyd.SeparationLogicAsLogic <> s:33 var
R2201:2201 VST.floyd.SeparationLogicAsLogic <> e:32 var
R2178:2178 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2180:2181 VST.floyd.SeparationLogicAsLogic <> s0:34 var
R2160:2160 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2162:2162 VST.floyd.SeparationLogicAsLogic <> s:33 var
R2232:2240 compcert.cfrontend.Clight <> statement ind
binder 2228:2228 <> s:36
R2246:2249 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2262:2270 compcert.cfrontend.Clight <> statement ind
binder 2257:2258 <> s0:37
R2277:2280 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2281:2281 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2284:2288 compcert.cfrontend.Clight <> Sloop constr
R2292:2293 VST.floyd.SeparationLogicAsLogic <> s0:37 var
R2290:2290 VST.floyd.SeparationLogicAsLogic <> s:36 var
R2273:2273 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2275:2276 VST.floyd.SeparationLogicAsLogic <> s0:37 var
R2243:2243 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2245:2245 VST.floyd.SeparationLogicAsLogic <> s:36 var
R2309:2309 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2311:2316 compcert.cfrontend.Clight <> Sbreak constr
R2334:2334 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2336:2344 compcert.cfrontend.Clight <> Scontinue constr
R2371:2376 Coq.Init.Datatypes <> option ind
R2378:2381 compcert.cfrontend.Clight <> expr ind
binder 2367:2367 <> o:41
R2384:2384 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2387:2393 compcert.cfrontend.Clight <> Sreturn constr
R2395:2395 VST.floyd.SeparationLogicAsLogic <> o:41 var
binder 2419:2419 <> e:43
binder 2421:2421 <> L:44
R2497:2500 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2501:2501 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2504:2510 compcert.cfrontend.Clight <> Sswitch constr
R2514:2514 VST.floyd.SeparationLogicAsLogic <> L:44 var
R2512:2512 VST.floyd.SeparationLogicAsLogic <> e:43 var
R2424:2452 VST.floyd.SeparationLogicAsLogic <> all_suf_of_labeled_statements def
R2496:2496 VST.floyd.SeparationLogicAsLogic <> L:44 var
binder 2459:2459 <> L:45
R2464:2464 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2467:2490 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R2492:2492 VST.floyd.SeparationLogicAsLogic <> L:45 var
R2542:2546 compcert.cfrontend.Clight <> label def
binder 2538:2538 <> l:47
R2554:2562 compcert.cfrontend.Clight <> statement ind
binder 2550:2550 <> s:48
R2569:2572 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2573:2573 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2576:2581 compcert.cfrontend.Clight <> Slabel constr
R2585:2585 VST.floyd.SeparationLogicAsLogic <> s:48 var
R2583:2583 VST.floyd.SeparationLogicAsLogic <> l:47 var
R2566:2566 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2568:2568 VST.floyd.SeparationLogicAsLogic <> s:48 var
R2611:2615 compcert.cfrontend.Clight <> label def
binder 2607:2607 <> l:50
R2618:2618 VST.floyd.SeparationLogicAsLogic <> P:12 var
R2621:2625 compcert.cfrontend.Clight <> Sgoto constr
R2627:2627 VST.floyd.SeparationLogicAsLogic <> l:50 var
def 2642:2654 <> statement_ind
def 3311:3332 <> labeled_statements_ind
R2660:2668 compcert.cfrontend.Clight <> statement ind
binder 2657:2657 <> s:52
R3338:3355 compcert.cfrontend.Clight <> labeled_statements ind
binder 3335:3335 <> L:53
R2672:2672 VST.floyd.SeparationLogicAsLogic <> statement_ind.P var
R2674:2674 VST.floyd.SeparationLogicAsLogic <> s:52 var
R3359:3387 VST.floyd.SeparationLogicAsLogic <> all_suf_of_labeled_statements def
R3431:3431 VST.floyd.SeparationLogicAsLogic <> L:53 var
binder 3394:3394 <> L:54
R3399:3399 VST.floyd.SeparationLogicAsLogic <> statement_ind.P var
R3402:3425 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R3427:3427 VST.floyd.SeparationLogicAsLogic <> L:54 var
R2687:2687 VST.floyd.SeparationLogicAsLogic <> s:52 var
R2703:2703 VST.floyd.SeparationLogicAsLogic <> statement_ind.P var
R2705:2706 VST.floyd.SeparationLogicAsLogic <> s0:57 var
R2718:2722 compcert.cfrontend.Clight <> Sskip constr
R2727:2731 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hskip var
R2737:2743 compcert.cfrontend.Clight <> Sassign constr
R2753:2759 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hassign var
R2770:2773 compcert.cfrontend.Clight <> Sset constr
R2782:2785 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hset var
R2795:2799 compcert.cfrontend.Clight <> Scall constr
R2810:2814 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hcall var
R2826:2833 compcert.cfrontend.Clight <> Sbuiltin constr
R2846:2853 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hbuiltin var
R2867:2875 compcert.cfrontend.Clight <> Ssequence constr
R2886:2894 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hsequence var
R2922:2934 VST.floyd.SeparationLogicAsLogic <> statement_ind:55 def
R2900:2912 VST.floyd.SeparationLogicAsLogic <> statement_ind:55 def
R2944:2954 compcert.cfrontend.Clight <> Sifthenelse constr
R2967:2977 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hifthenelse var
R3007:3019 VST.floyd.SeparationLogicAsLogic <> statement_ind:55 def
R2985:2997 VST.floyd.SeparationLogicAsLogic <> statement_ind:55 def
R3029:3033 compcert.cfrontend.Clight <> Sloop constr
R3044:3048 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hloop var
R3076:3088 VST.floyd.SeparationLogicAsLogic <> statement_ind:55 def
R3054:3066 VST.floyd.SeparationLogicAsLogic <> statement_ind:55 def
R3098:3103 compcert.cfrontend.Clight <> Sbreak constr
R3108:3113 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hbreak var
R3119:3127 compcert.cfrontend.Clight <> Scontinue constr
R3132:3140 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hcontinue var
R3146:3152 compcert.cfrontend.Clight <> Sreturn constr
R3159:3165 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hreturn var
R3173:3179 compcert.cfrontend.Clight <> Sswitch constr
R3188:3194 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hswitch var
R3201:3222 VST.floyd.SeparationLogicAsLogic <> labeled_statements_ind:56 def
R3231:3236 compcert.cfrontend.Clight <> Slabel constr
R3246:3251 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hlabel var
R3259:3271 VST.floyd.SeparationLogicAsLogic <> statement_ind:55 def
R3281:3285 compcert.cfrontend.Clight <> Sgoto constr
R3292:3296 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hgoto var
R3444:3444 VST.floyd.SeparationLogicAsLogic <> L:53 var
R3455:3459 compcert.cfrontend.Clight <> LSnil constr
R3464:3468 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hskip var
R3474:3479 compcert.cfrontend.Clight <> LScons constr
R3491:3494 Coq.Init.Logic <> conj constr
R3578:3599 VST.floyd.SeparationLogicAsLogic <> labeled_statements_ind:56 def
R3497:3505 VST.floyd.SeparationLogicAsLogic <> statement_ind.Hsequence var
R3530:3541 VST.floyd.SeparationLogicAsLogic <> all_suf_self thm
R3548:3569 VST.floyd.SeparationLogicAsLogic <> labeled_statements_ind:56 def
R3510:3522 VST.floyd.SeparationLogicAsLogic <> statement_ind:55 def
R3617:3629 VST.floyd.SeparationLogicAsLogic statement_ind <> sec
R3835:3847 VST.floyd.SeparationLogicAsLogic <> statement_ind def
R4102:4122 VST.floyd.SeparationLogicAsLogic <> all_suf_select_switch thm
mod 4213:4219 <> AuxDefs
sec 4231:4237 AuxDefs AuxDefs
var 4250:4263 AuxDefs.AuxDefs semax_external
R4281:4290 VST.veric.juicy_extspec <> OracleKind class
binder 4274:4278 <> Hspec:59
R4298:4314 compcert.common.AST <> external_function ind
binder 4294:4295 <> ef:60
R4322:4335 VST.veric.rmaps <> TypeTree ind
binder 4318:4318 <> A:61
R4361:4364 Coq.Init.Datatypes <> list ind
binder 4356:4357 <> ts:62
R4372:4406 VST.msl.functors MixVariantFunctor _functor proj
R4457:4461 VST.veric.mpred <> mpred def
R4409:4440 VST.veric.rmaps <> dependent_type_functor_rec def
R4446:4451 VST.veric.mpred <> ArgsTT def
R4453:4453 VST.floyd.SeparationLogicAsLogic <> A:61 var
R4442:4443 VST.floyd.SeparationLogicAsLogic <> ts:62 var
binder 4346:4346 <> P:63
R4487:4490 Coq.Init.Datatypes <> list ind
binder 4482:4483 <> ts:64
R4498:4532 VST.msl.functors MixVariantFunctor _functor proj
R4585:4589 VST.veric.mpred <> mpred def
R4535:4566 VST.veric.rmaps <> dependent_type_functor_rec def
R4572:4579 VST.veric.mpred <> AssertTT def
R4581:4581 VST.floyd.SeparationLogicAsLogic <> A:61 var
R4568:4569 VST.floyd.SeparationLogicAsLogic <> ts:64 var
binder 4472:4472 <> Q:65
ind 4610:4614 AuxDefs semax
constr 4731:4746 AuxDefs semax_ifthenelse
constr 5112:5120 AuxDefs semax_seq
constr 5278:5288 AuxDefs semax_break
constr 5351:5364 AuxDefs semax_continue
constr 5433:5442 AuxDefs semax_loop
constr 5644:5655 AuxDefs semax_switch
constr 6857:6875 AuxDefs semax_call_backward
constr 7608:7619 AuxDefs semax_return
constr 7905:7949 AuxDefs semax_set_ptr_compare_load_cast_load_backward
constr 9866:9902 AuxDefs semax_store_store_union_hack_backward
constr 11181:11190 AuxDefs semax_skip
constr 11257:11269 AuxDefs semax_builtin
constr 11350:11360 AuxDefs semax_label
constr 11499:11508 AuxDefs semax_goto
constr 11562:11573 AuxDefs semax_conseq
R4621:4629 VST.veric.mpred <> compspecs class
binder 4617:4618 <> CS:67
R4640:4649 VST.veric.juicy_extspec <> OracleKind class
binder 4633:4637 <> Espec:68
R4660:4668 VST.veric.seplog <> tycontext ind
binder 4653:4657 <> Delta:69
R4672:4672 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4689:4693 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4703:4706 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4717:4720 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4707:4716 VST.veric.tycontext <> ret_assert rec
R4694:4702 compcert.cfrontend.Clight <> statement ind
R4680:4683 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4684:4688 VST.veric.mpred <> mpred def
R4673:4679 VST.veric.mpred <> environ ind
binder 4760:4760 <> P:72
R4766:4769 compcert.cfrontend.Clight <> expr ind
binder 4763:4763 <> b:73
binder 4772:4772 <> c:74
binder 4774:4774 <> d:75
binder 4776:4776 <> R:76
R4863:4871 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4952:4960 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4962:4966 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R5108:5108 VST.floyd.SeparationLogicAsLogic <> R:76 var
R5089:5099 compcert.cfrontend.Clight <> Sifthenelse constr
R5105:5105 VST.floyd.SeparationLogicAsLogic <> d:75 var
R5103:5103 VST.floyd.SeparationLogicAsLogic <> c:74 var
R5101:5101 VST.floyd.SeparationLogicAsLogic <> b:73 var
R5081:5084 VST.msl.seplog <> ::logic:x_'&&'_x not
R5016:5019 VST.msl.seplog <> ::logic:x_'&&'_x not
R4984:4987 VST.msl.seplog <> ::logic:'!!'_x not
R5015:5015 VST.msl.seplog <> ::logic:'!!'_x not
R5008:5010 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4988:4996 VST.veric.expr <> bool_type def
R4999:5004 compcert.cfrontend.Clight <> typeof def
R5006:5006 VST.floyd.SeparationLogicAsLogic <> b:73 var
R5011:5014 Coq.Init.Datatypes <> true constr
R5020:5026 VST.veric.SeparationLogic <> tc_expr def
R5035:5039 compcert.cfrontend.Clight <> Eunop constr
R5057:5060 compcert.cfrontend.Ctypes <> Tint constr
R5073:5078 compcert.cfrontend.Ctypes <> noattr def
R5066:5071 compcert.cfrontend.Ctypes <> Signed constr
R5062:5064 compcert.cfrontend.Ctypes <> I32 constr
R5054:5054 VST.floyd.SeparationLogicAsLogic <> b:73 var
R5041:5052 compcert.cfrontend.Cop <> Onotbool constr
R5028:5032 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R5085:5085 VST.floyd.SeparationLogicAsLogic <> P:72 var
R4977:4981 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R4971:4975 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R4968:4969 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R4873:4877 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R4951:4951 VST.floyd.SeparationLogicAsLogic <> R:76 var
R4949:4949 VST.floyd.SeparationLogicAsLogic <> d:75 var
R4896:4899 VST.msl.seplog <> ::logic:x_'&&'_x not
R4895:4895 VST.floyd.SeparationLogicAsLogic <> P:72 var
R4900:4904 VST.veric.SeparationLogic <> local def
R4907:4908 VST.veric.lift LiftNotation :::'`('_x_')' not
R4931:4945 VST.veric.lift LiftNotation :::'`('_x_')' not
R4909:4919 VST.veric.SeparationLogic <> typed_false def
R4922:4927 compcert.cfrontend.Clight <> typeof def
R4929:4929 VST.floyd.SeparationLogicAsLogic <> b:73 var
R4934:4942 VST.veric.expr <> eval_expr def
R4944:4944 VST.floyd.SeparationLogicAsLogic <> b:73 var
R4888:4892 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R4882:4886 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R4879:4880 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R4785:4789 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R4862:4862 VST.floyd.SeparationLogicAsLogic <> R:76 var
R4860:4860 VST.floyd.SeparationLogicAsLogic <> c:74 var
R4808:4811 VST.msl.seplog <> ::logic:x_'&&'_x not
R4807:4807 VST.floyd.SeparationLogicAsLogic <> P:72 var
R4812:4816 VST.veric.SeparationLogic <> local def
R4819:4820 VST.veric.lift LiftNotation :::'`('_x_')' not
R4842:4856 VST.veric.lift LiftNotation :::'`('_x_')' not
R4821:4830 VST.veric.SeparationLogic <> typed_true def
R4833:4838 compcert.cfrontend.Clight <> typeof def
R4840:4840 VST.floyd.SeparationLogicAsLogic <> b:73 var
R4845:4853 VST.veric.expr <> eval_expr def
R4855:4855 VST.floyd.SeparationLogicAsLogic <> b:73 var
R4800:4804 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R4794:4798 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R4791:4792 VST.floyd.SeparationLogicAsLogic <> CS:67 var
binder 5132:5132 <> R:77
binder 5134:5134 <> P:78
binder 5136:5136 <> Q:79
binder 5138:5138 <> h:80
binder 5140:5140 <> t:81
R5191:5198 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5226:5233 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5235:5239 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R5274:5274 VST.floyd.SeparationLogicAsLogic <> R:77 var
R5259:5267 compcert.cfrontend.Clight <> Ssequence constr
R5271:5271 VST.floyd.SeparationLogicAsLogic <> t:81 var
R5269:5269 VST.floyd.SeparationLogicAsLogic <> h:80 var
R5256:5256 VST.floyd.SeparationLogicAsLogic <> P:78 var
R5250:5254 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R5244:5248 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R5241:5242 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R5200:5204 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R5225:5225 VST.floyd.SeparationLogicAsLogic <> R:77 var
R5223:5223 VST.floyd.SeparationLogicAsLogic <> t:81 var
R5221:5221 VST.floyd.SeparationLogicAsLogic <> Q:79 var
R5215:5219 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R5209:5213 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R5206:5207 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R5148:5152 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R5174:5185 VST.veric.SeparationLogic <> overridePost def
R5189:5189 VST.floyd.SeparationLogicAsLogic <> R:77 var
R5187:5187 VST.floyd.SeparationLogicAsLogic <> Q:79 var
R5171:5171 VST.floyd.SeparationLogicAsLogic <> h:80 var
R5169:5169 VST.floyd.SeparationLogicAsLogic <> P:78 var
R5163:5167 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R5157:5161 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R5154:5155 VST.floyd.SeparationLogicAsLogic <> CS:67 var
binder 5298:5298 <> Q:82
R5306:5310 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R5347:5347 VST.floyd.SeparationLogicAsLogic <> Q:82 var
R5340:5345 compcert.cfrontend.Clight <> Sbreak constr
R5328:5335 VST.veric.tycontext <> RA_break proj
R5337:5337 VST.floyd.SeparationLogicAsLogic <> Q:82 var
R5321:5325 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R5315:5319 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R5312:5313 VST.floyd.SeparationLogicAsLogic <> CS:67 var
binder 5374:5374 <> Q:83
R5382:5386 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R5429:5429 VST.floyd.SeparationLogicAsLogic <> Q:83 var
R5419:5427 compcert.cfrontend.Clight <> Scontinue constr
R5404:5414 VST.veric.tycontext <> RA_continue proj
R5416:5416 VST.floyd.SeparationLogicAsLogic <> Q:83 var
R5397:5401 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R5391:5395 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R5388:5389 VST.floyd.SeparationLogicAsLogic <> CS:67 var
binder 5452:5452 <> Q:84
binder 5454:5455 <> Q':85
binder 5457:5460 <> incr:86
binder 5462:5465 <> body:87
binder 5467:5467 <> R:88
R5528:5536 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5589:5597 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5599:5603 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R5640:5640 VST.floyd.SeparationLogicAsLogic <> R:88 var
R5623:5627 compcert.cfrontend.Clight <> Sloop constr
R5634:5637 VST.floyd.SeparationLogicAsLogic <> incr:86 var
R5629:5632 VST.floyd.SeparationLogicAsLogic <> body:87 var
R5620:5620 VST.floyd.SeparationLogicAsLogic <> Q:84 var
R5614:5618 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R5608:5612 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R5605:5606 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R5538:5542 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R5568:5583 VST.veric.SeparationLogic <> loop2_ret_assert def
R5587:5587 VST.floyd.SeparationLogicAsLogic <> R:88 var
R5585:5585 VST.floyd.SeparationLogicAsLogic <> Q:84 var
R5562:5565 VST.floyd.SeparationLogicAsLogic <> incr:86 var
R5559:5560 VST.floyd.SeparationLogicAsLogic <> Q':85 var
R5553:5557 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R5547:5551 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R5544:5545 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R5476:5480 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R5506:5521 VST.veric.SeparationLogic <> loop1_ret_assert def
R5526:5526 VST.floyd.SeparationLogicAsLogic <> R:88 var
R5523:5524 VST.floyd.SeparationLogicAsLogic <> Q':85 var
R5500:5503 VST.floyd.SeparationLogicAsLogic <> body:87 var
R5498:5498 VST.floyd.SeparationLogicAsLogic <> Q:84 var
R5491:5495 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R5485:5489 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R5482:5483 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R5676:5677 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5678:5682 VST.veric.mpred <> mpred def
R5669:5675 VST.veric.mpred <> environ ind
binder 5666:5666 <> Q:89
binder 5685:5685 <> a:90
binder 5687:5688 <> sl:91
binder 5690:5690 <> R:92
R5698:5698 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5740:5749 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5750:5750 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5962:5971 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5973:5977 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R6051:6051 VST.floyd.SeparationLogicAsLogic <> R:92 var
R6037:6043 compcert.cfrontend.Clight <> Sswitch constr
R6047:6048 VST.floyd.SeparationLogicAsLogic <> sl:91 var
R6045:6045 VST.floyd.SeparationLogicAsLogic <> a:90 var
R6029:6032 VST.msl.seplog <> ::logic:x_'&&'_x not
R5995:5998 VST.msl.seplog <> ::logic:'!!'_x not
R6028:6028 VST.msl.seplog <> ::logic:'!!'_x not
R6021:6023 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5999:6009 VST.veric.expr <> is_int_type def
R6012:6017 compcert.cfrontend.Clight <> typeof def
R6019:6019 VST.floyd.SeparationLogicAsLogic <> a:90 var
R6024:6027 Coq.Init.Datatypes <> true constr
R6033:6033 VST.floyd.SeparationLogicAsLogic <> Q:89 var
R5988:5992 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R5982:5986 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R5979:5980 VST.floyd.SeparationLogicAsLogic <> CS:67 var
binder 5758:5758 <> n:93
R5767:5771 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R5942:5958 VST.veric.SeparationLogic <> switch_ret_assert def
R5960:5960 VST.floyd.SeparationLogicAsLogic <> R:92 var
R5864:5887 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R5890:5902 compcert.cfrontend.Clight <> select_switch def
R5921:5922 VST.floyd.SeparationLogicAsLogic <> sl:91 var
R5905:5916 compcert.lib.Integers Int unsigned def
R5918:5918 VST.floyd.SeparationLogicAsLogic <> n:93 var
R5840:5844 VST.msl.seplog <> ::logic:x_'&&'_x not
R5805:5809 VST.veric.SeparationLogic <> local def
R5812:5812 VST.veric.lift LiftNotation :::'`'_x not
R5815:5838 VST.veric.lift LiftNotation :::'`'_x not
R5813:5814 Coq.Init.Logic <> eq ind
R5830:5831 VST.veric.lift LiftNotation :::'`('_x_')' not
R5838:5838 VST.veric.lift LiftNotation :::'`('_x_')' not
R5832:5835 compcert.common.Values <> Vint constr
R5837:5837 VST.floyd.SeparationLogicAsLogic <> n:93 var
R5817:5825 VST.veric.expr <> eval_expr def
R5827:5827 VST.floyd.SeparationLogicAsLogic <> a:90 var
R5845:5845 VST.floyd.SeparationLogicAsLogic <> Q:89 var
R5782:5786 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R5776:5780 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R5773:5774 VST.floyd.SeparationLogicAsLogic <> CS:67 var
binder 5706:5708 <> rho:94
R5716:5720 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R5711:5711 VST.floyd.SeparationLogicAsLogic <> Q:89 var
R5713:5715 VST.floyd.SeparationLogicAsLogic <> rho:94 var
R5721:5727 VST.veric.SeparationLogic <> tc_expr def
R5737:5739 VST.floyd.SeparationLogicAsLogic <> rho:94 var
R5735:5735 VST.floyd.SeparationLogicAsLogic <> a:90 var
R5729:5733 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
binder 6885:6887 <> ret:95
binder 6889:6889 <> a:96
binder 6891:6892 <> bl:97
binder 6894:6894 <> R:98
R6903:6907 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R7585:7601 VST.veric.SeparationLogic <> normal_ret_assert def
R7603:7603 VST.floyd.SeparationLogicAsLogic <> R:98 var
R7559:7563 compcert.cfrontend.Clight <> Scall constr
R7571:7572 VST.floyd.SeparationLogicAsLogic <> bl:97 var
R7569:7569 VST.floyd.SeparationLogicAsLogic <> a:96 var
R7565:7567 VST.floyd.SeparationLogicAsLogic <> ret:95 var
R6934:6936 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6946:6947 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 6937:6942 <> argsig:99
R6948:6950 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6960:6961 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 6951:6956 <> retsig:100
R6962:6964 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6970:6981 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 6965:6966 <> cc:101
R6982:6984 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6989:6990 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 6985:6985 <> A:102
R6991:6993 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6998:6999 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 6994:6994 <> P:103
R7000:7002 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R7007:7008 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 7003:7003 <> Q:104
R7009:7011 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R7018:7019 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 7012:7014 <> NEP:105
R7020:7022 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R7029:7030 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 7023:7025 <> NEQ:106
R7031:7033 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R7039:7040 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 7034:7035 <> ts:107
R7041:7043 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R7048:7058 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 7044:7044 <> x:108
R7409:7422 VST.msl.seplog <> ::logic:x_'&&'_x not
R7323:7336 VST.msl.seplog <> ::logic:x_'&&'_x not
R7255:7270 VST.msl.seplog <> ::logic:x_'&&'_x not
R7321:7322 VST.msl.seplog <> ::logic:x_'&&'_x not
R7059:7062 VST.msl.seplog <> ::logic:'!!'_x not
R7254:7254 VST.msl.seplog <> ::logic:'!!'_x not
R7161:7177 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R7090:7105 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7063:7078 compcert.cfrontend.Cop <> classify_fun def
R7081:7086 compcert.cfrontend.Clight <> typeof def
R7088:7088 VST.floyd.SeparationLogicAsLogic <> a:96 var
R7106:7119 compcert.cfrontend.Cop <> fun_case_f constr
R7159:7160 VST.floyd.SeparationLogicAsLogic <> cc:101 var
R7152:7157 VST.floyd.SeparationLogicAsLogic <> retsig:100 var
R7122:7142 VST.veric.mpred <> typelist_of_type_list def
R7144:7149 VST.floyd.SeparationLogicAsLogic <> argsig:99 var
R7178:7178 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R7207:7224 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R7193:7196 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7200:7202 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7197:7199 VST.floyd.SeparationLogicAsLogic <> ret:95 var
R7203:7206 Coq.Init.Datatypes <> None constr
R7185:7187 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7179:7184 VST.floyd.SeparationLogicAsLogic <> retsig:100 var
R7188:7192 compcert.cfrontend.Ctypes <> Tvoid constr
R7225:7236 VST.veric.SeparationLogic <> tc_fn_return def
R7248:7253 VST.floyd.SeparationLogicAsLogic <> retsig:100 var
R7244:7246 VST.floyd.SeparationLogicAsLogic <> ret:95 var
R7238:7242 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R7271:7271 VST.msl.seplog <> ::logic:x_'&&'_x not
R7287:7292 VST.msl.seplog <> ::logic:x_'&&'_x not
R7320:7320 VST.msl.seplog <> ::logic:x_'&&'_x not
R7272:7278 VST.veric.SeparationLogic <> tc_expr def
R7286:7286 VST.floyd.SeparationLogicAsLogic <> a:96 var
R7280:7284 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R7293:7303 VST.veric.SeparationLogic <> tc_exprlist def
R7318:7319 VST.floyd.SeparationLogicAsLogic <> bl:97 var
R7311:7316 VST.floyd.SeparationLogicAsLogic <> argsig:99 var
R7305:7309 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R7337:7338 VST.veric.lift LiftNotation :::'`('_x_')' not
R7394:7408 VST.veric.lift LiftNotation :::'`('_x_')' not
R7339:7346 VST.veric.SeparationLogic <> func_ptr def
R7349:7358 VST.veric.mpred <> mk_funspec constr
R7390:7392 VST.floyd.SeparationLogicAsLogic <> NEQ:106 var
R7386:7388 VST.floyd.SeparationLogicAsLogic <> NEP:105 var
R7384:7384 VST.floyd.SeparationLogicAsLogic <> Q:104 var
R7382:7382 VST.floyd.SeparationLogicAsLogic <> P:103 var
R7380:7380 VST.floyd.SeparationLogicAsLogic <> A:102 var
R7377:7378 VST.floyd.SeparationLogicAsLogic <> cc:101 var
R7361:7361 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7368:7368 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7375:7375 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7362:7367 VST.floyd.SeparationLogicAsLogic <> argsig:99 var
R7369:7374 VST.floyd.SeparationLogicAsLogic <> retsig:100 var
R7397:7405 VST.veric.expr <> eval_expr def
R7407:7407 VST.floyd.SeparationLogicAsLogic <> a:96 var
R7423:7425 VST.msl.seplog <> ::logic:'|>'_x not
R7546:7546 VST.msl.seplog <> ::logic:'|>'_x not
R7426:7426 VST.msl.seplog <> ::logic:x_'*'_x not
R7485:7488 VST.msl.seplog <> ::logic:x_'*'_x not
binder 7431:7433 <> rho:109
R7438:7438 VST.floyd.SeparationLogicAsLogic <> P:103 var
R7445:7445 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7455:7456 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7484:7484 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7446:7450 VST.veric.mpred <> ge_of def
R7452:7454 VST.floyd.SeparationLogicAsLogic <> rho:109 var
R7457:7469 VST.veric.expr <> eval_exprlist def
R7481:7483 VST.floyd.SeparationLogicAsLogic <> rho:109 var
R7478:7479 VST.floyd.SeparationLogicAsLogic <> bl:97 var
R7471:7476 VST.floyd.SeparationLogicAsLogic <> argsig:99 var
R7443:7443 VST.floyd.SeparationLogicAsLogic <> x:108 var
R7440:7441 VST.floyd.SeparationLogicAsLogic <> ts:107 var
R7489:7495 VST.floyd.SeparationLogicFacts <> oboxopt def
R7540:7543 VST.msl.seplog <> ::logic:x_'-*'_x not
R7508:7519 VST.veric.SeparationLogic <> maybe_retval def
R7537:7539 VST.floyd.SeparationLogicAsLogic <> ret:95 var
R7530:7535 VST.floyd.SeparationLogicAsLogic <> retsig:100 var
R7522:7522 VST.floyd.SeparationLogicAsLogic <> Q:104 var
R7527:7527 VST.floyd.SeparationLogicAsLogic <> x:108 var
R7524:7525 VST.floyd.SeparationLogicAsLogic <> ts:107 var
R7544:7544 VST.floyd.SeparationLogicAsLogic <> R:98 var
R7503:7505 VST.floyd.SeparationLogicAsLogic <> ret:95 var
R7497:7501 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R6918:6922 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R6912:6916 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R6909:6910 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R7633:7642 VST.veric.tycontext <> ret_assert rec
binder 7630:7630 <> R:110
binder 7645:7647 <> ret:111
R7658:7662 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R7901:7901 VST.floyd.SeparationLogicAsLogic <> R:110 var
R7872:7878 compcert.cfrontend.Clight <> Sreturn constr
R7880:7882 VST.floyd.SeparationLogicAsLogic <> ret:111 var
R7697:7697 VST.msl.seplog <> ::logic:x_'&&'_x not
R7735:7755 VST.msl.seplog <> ::logic:x_'&&'_x not
R7698:7707 VST.veric.SeparationLogic <> tc_expropt def
R7720:7727 VST.veric.seplog <> ret_type def
R7729:7733 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R7715:7717 VST.floyd.SeparationLogicAsLogic <> ret:111 var
R7709:7713 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R7756:7757 VST.veric.lift LiftNotation :::'`('_x_')' not
R7802:7852 VST.veric.lift LiftNotation :::'`('_x_')' not
R7782:7785 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7793:7796 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7797:7801 VST.veric.mpred <> mpred def
R7786:7792 VST.veric.mpred <> environ ind
R7772:7777 Coq.Init.Datatypes <> option ind
R7779:7781 compcert.common.Values <> val ind
R7758:7766 VST.veric.tycontext <> RA_return proj
R7768:7768 VST.floyd.SeparationLogicAsLogic <> R:110 var
R7842:7843 Coq.Init.Datatypes <> id def
R7845:7851 VST.veric.mpred <> environ ind
R7805:7816 VST.veric.SeparationLogic <> cast_expropt def
R7823:7830 VST.veric.seplog <> ret_type def
R7832:7836 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R7818:7820 VST.floyd.SeparationLogicAsLogic <> ret:111 var
R7673:7677 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R7667:7671 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R7664:7665 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R7970:7971 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7972:7976 VST.veric.mpred <> mpred def
R7963:7969 VST.veric.mpred <> environ ind
binder 7960:7960 <> P:112
binder 7979:7980 <> id:113
binder 7982:7982 <> e:114
R7990:7994 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R9843:9859 VST.veric.SeparationLogic <> normal_ret_assert def
R9861:9861 VST.floyd.SeparationLogicAsLogic <> P:112 var
R9831:9834 compcert.cfrontend.Clight <> Sset constr
R9839:9839 VST.floyd.SeparationLogicAsLogic <> e:114 var
R9836:9837 VST.floyd.SeparationLogicAsLogic <> id:113 var
R9310:9322 VST.msl.seplog <> ::logic:x_'||'_x not
R9819:9819 VST.msl.seplog <> ::logic:x_'||'_x not
R8920:8932 VST.msl.seplog <> ::logic:x_'||'_x not
R9309:9309 VST.msl.seplog <> ::logic:x_'||'_x not
R8019:8019 VST.msl.seplog <> ::logic:x_'||'_x not
R8135:8148 VST.msl.seplog <> ::logic:x_'||'_x not
R8919:8919 VST.msl.seplog <> ::logic:x_'||'_x not
R8020:8024 VST.msl.seplog <> ::logic:'|>'_x not
R8134:8134 VST.msl.seplog <> ::logic:'|>'_x not
R8093:8109 VST.msl.seplog <> ::logic:x_'&&'_x not
R8025:8025 VST.msl.seplog <> ::logic:x_'&&'_x not
R8041:8059 VST.msl.seplog <> ::logic:x_'&&'_x not
R8092:8092 VST.msl.seplog <> ::logic:x_'&&'_x not
R8026:8032 VST.veric.SeparationLogic <> tc_expr def
R8040:8040 VST.floyd.SeparationLogicAsLogic <> e:114 var
R8034:8038 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R8060:8069 VST.veric.SeparationLogic <> tc_temp_id def
R8091:8091 VST.floyd.SeparationLogicAsLogic <> e:114 var
R8085:8089 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R8075:8080 compcert.cfrontend.Clight <> typeof def
R8082:8082 VST.floyd.SeparationLogicAsLogic <> e:114 var
R8071:8072 VST.floyd.SeparationLogicAsLogic <> id:113 var
R8110:8114 VST.veric.seplog <> subst def
R8133:8133 VST.floyd.SeparationLogicAsLogic <> P:112 var
R8120:8128 VST.veric.expr <> eval_expr def
R8130:8130 VST.floyd.SeparationLogicAsLogic <> e:114 var
R8116:8117 VST.floyd.SeparationLogicAsLogic <> id:113 var
R8149:8151 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8177:8178 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8157:8176 compcert.cfrontend.Cop <> binary_operation ind
binder 8152:8154 <> cmp:115
R8179:8181 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8190:8191 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8186:8189 compcert.cfrontend.Clight <> expr ind
binder 8182:8183 <> e1:116
R8192:8194 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8203:8213 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8199:8202 compcert.cfrontend.Clight <> expr ind
binder 8195:8196 <> e2:117
R8214:8216 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8225:8226 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8221:8224 compcert.cfrontend.Ctypes <> type ind
binder 8217:8218 <> ty:118
R8227:8229 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8240:8241 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8235:8239 VST.msl.shares <> share def
binder 8230:8232 <> sh1:119
R8242:8244 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8255:8266 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8250:8254 VST.msl.shares <> share def
binder 8245:8247 <> sh2:120
R8586:8603 VST.msl.seplog <> ::logic:x_'&&'_x not
R8918:8918 VST.msl.seplog <> ::logic:x_'&&'_x not
R8267:8270 VST.msl.seplog <> ::logic:'!!'_x not
R8585:8585 VST.msl.seplog <> ::logic:'!!'_x not
R8294:8311 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R8272:8274 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8271:8271 VST.floyd.SeparationLogicAsLogic <> e:114 var
R8275:8280 compcert.cfrontend.Clight <> Ebinop constr
R8292:8293 VST.floyd.SeparationLogicAsLogic <> ty:118 var
R8289:8290 VST.floyd.SeparationLogicAsLogic <> e2:117 var
R8286:8287 VST.floyd.SeparationLogicAsLogic <> e1:116 var
R8282:8284 VST.floyd.SeparationLogicAsLogic <> cmp:115 var
R8334:8337 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R8312:8329 VST.msl.sepalg <> nonidentity def
R8331:8333 VST.floyd.SeparationLogicAsLogic <> sh1:119 var
R8360:8377 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R8338:8355 VST.msl.sepalg <> nonidentity def
R8357:8359 VST.floyd.SeparationLogicAsLogic <> sh2:120 var
R8402:8419 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R8395:8397 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8378:8390 VST.veric.SeparationLogic <> is_comparison def
R8392:8394 VST.floyd.SeparationLogicAsLogic <> cmp:115 var
R8398:8401 Coq.Init.Datatypes <> true constr
R8464:8481 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R8456:8458 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8420:8427 VST.veric.Cop2 <> eqb_type def
R8441:8455 VST.veric.Cop2 <> int_or_ptr_type def
R8430:8435 compcert.cfrontend.Clight <> typeof def
R8437:8438 VST.floyd.SeparationLogicAsLogic <> e1:116 var
R8459:8463 Coq.Init.Datatypes <> false constr
R8526:8543 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R8518:8520 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8482:8489 VST.veric.Cop2 <> eqb_type def
R8503:8517 VST.veric.Cop2 <> int_or_ptr_type def
R8492:8497 compcert.cfrontend.Clight <> typeof def
R8499:8500 VST.floyd.SeparationLogicAsLogic <> e2:117 var
R8521:8525 Coq.Init.Datatypes <> false constr
R8578:8580 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8544:8568 VST.veric.SeparationLogic <> typecheck_tid_ptr_compare def
R8576:8577 VST.floyd.SeparationLogicAsLogic <> id:113 var
R8570:8574 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R8581:8584 Coq.Init.Datatypes <> true constr
R8604:8608 VST.msl.seplog <> ::logic:'|>'_x not
R8917:8917 VST.msl.seplog <> ::logic:'|>'_x not
R8859:8872 VST.msl.seplog <> ::logic:x_'&&'_x not
R8797:8811 VST.msl.seplog <> ::logic:x_'&&'_x not
R8858:8858 VST.msl.seplog <> ::logic:x_'&&'_x not
R8735:8749 VST.msl.seplog <> ::logic:x_'&&'_x not
R8796:8796 VST.msl.seplog <> ::logic:x_'&&'_x not
R8663:8677 VST.msl.seplog <> ::logic:x_'&&'_x not
R8609:8609 VST.msl.seplog <> ::logic:x_'&&'_x not
R8626:8645 VST.msl.seplog <> ::logic:x_'&&'_x not
R8662:8662 VST.msl.seplog <> ::logic:x_'&&'_x not
R8610:8616 VST.veric.SeparationLogic <> tc_expr def
R8624:8625 VST.floyd.SeparationLogicAsLogic <> e1:116 var
R8618:8622 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R8646:8652 VST.veric.SeparationLogic <> tc_expr def
R8660:8661 VST.floyd.SeparationLogicAsLogic <> e2:117 var
R8654:8658 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R8678:8682 VST.veric.SeparationLogic <> local def
R8685:8686 VST.veric.lift LiftNotation :::'`('_x_')' not
R8703:8733 VST.veric.lift LiftNotation :::'`('_x_')' not
R8687:8698 VST.veric.SeparationLogic <> blocks_match def
R8700:8702 VST.floyd.SeparationLogicAsLogic <> cmp:115 var
R8721:8729 VST.veric.expr <> eval_expr def
R8731:8732 VST.floyd.SeparationLogicAsLogic <> e2:117 var
R8706:8714 VST.veric.expr <> eval_expr def
R8716:8717 VST.floyd.SeparationLogicAsLogic <> e1:116 var
R8791:8793 VST.msl.seplog <> ::logic:x_'*'_x not
R8750:8751 VST.veric.lift LiftNotation :::'`('_x_')' not
R8775:8790 VST.veric.lift LiftNotation :::'`('_x_')' not
R8752:8758 VST.veric.SeparationLogic <> mapsto_ def
R8765:8770 compcert.cfrontend.Clight <> typeof def
R8772:8773 VST.floyd.SeparationLogicAsLogic <> e1:116 var
R8760:8762 VST.floyd.SeparationLogicAsLogic <> sh1:119 var
R8778:8786 VST.veric.expr <> eval_expr def
R8788:8789 VST.floyd.SeparationLogicAsLogic <> e1:116 var
R8794:8795 VST.msl.seplog <> TT meth
R8853:8855 VST.msl.seplog <> ::logic:x_'*'_x not
R8812:8813 VST.veric.lift LiftNotation :::'`('_x_')' not
R8837:8852 VST.veric.lift LiftNotation :::'`('_x_')' not
R8814:8820 VST.veric.SeparationLogic <> mapsto_ def
R8827:8832 compcert.cfrontend.Clight <> typeof def
R8834:8835 VST.floyd.SeparationLogicAsLogic <> e2:117 var
R8822:8824 VST.floyd.SeparationLogicAsLogic <> sh2:120 var
R8840:8848 VST.veric.expr <> eval_expr def
R8850:8851 VST.floyd.SeparationLogicAsLogic <> e2:117 var
R8856:8857 VST.msl.seplog <> TT meth
R8873:8877 VST.veric.seplog <> subst def
R8916:8916 VST.floyd.SeparationLogicAsLogic <> P:112 var
R8883:8891 VST.veric.expr <> eval_expr def
R8894:8899 compcert.cfrontend.Clight <> Ebinop constr
R8911:8912 VST.floyd.SeparationLogicAsLogic <> ty:118 var
R8908:8909 VST.floyd.SeparationLogicAsLogic <> e2:117 var
R8905:8906 VST.floyd.SeparationLogicAsLogic <> e1:116 var
R8901:8903 VST.floyd.SeparationLogicAsLogic <> cmp:115 var
R8879:8880 VST.floyd.SeparationLogicAsLogic <> id:113 var
R8933:8935 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8945:8946 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8940:8944 VST.msl.shares <> share def
binder 8936:8937 <> sh:121
R8947:8949 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8958:8959 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8954:8957 compcert.cfrontend.Ctypes <> type ind
binder 8950:8951 <> t2:122
R8960:8962 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8970:8985 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R8967:8969 compcert.common.Values <> val ind
binder 8963:8964 <> v2:123
R9118:9130 VST.msl.seplog <> ::logic:x_'&&'_x not
R8986:8989 VST.msl.seplog <> ::logic:'!!'_x not
R9117:9117 VST.msl.seplog <> ::logic:'!!'_x not
R9020:9041 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R9010:9012 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8990:9000 VST.veric.SeparationLogic <> typeof_temp def
R9008:9009 VST.floyd.SeparationLogicAsLogic <> id:113 var
R9002:9006 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R9013:9016 Coq.Init.Datatypes <> Some constr
R9018:9019 VST.floyd.SeparationLogicAsLogic <> t2:122 var
R9078:9099 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R9071:9073 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9042:9056 VST.veric.expr <> is_neutral_cast def
R9069:9070 VST.floyd.SeparationLogicAsLogic <> t2:122 var
R9059:9064 compcert.cfrontend.Clight <> typeof def
R9066:9066 VST.floyd.SeparationLogicAsLogic <> e:114 var
R9074:9077 Coq.Init.Datatypes <> true constr
R9100:9113 VST.veric.shares <> readable_share def
R9115:9116 VST.floyd.SeparationLogicAsLogic <> sh:121 var
R9131:9135 VST.msl.seplog <> ::logic:'|>'_x not
R9308:9308 VST.msl.seplog <> ::logic:'|>'_x not
R9274:9291 VST.msl.seplog <> ::logic:x_'&&'_x not
R9204:9222 VST.msl.seplog <> ::logic:x_'&&'_x not
R9273:9273 VST.msl.seplog <> ::logic:x_'&&'_x not
R9136:9136 VST.msl.seplog <> ::logic:x_'&&'_x not
R9154:9172 VST.msl.seplog <> ::logic:x_'&&'_x not
R9137:9145 VST.veric.SeparationLogic <> tc_lvalue def
R9153:9153 VST.floyd.SeparationLogicAsLogic <> e:114 var
R9147:9151 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R9173:9177 VST.veric.SeparationLogic <> local def
R9180:9181 VST.veric.lift LiftNotation :::'`('_x_')' not
R9202:9202 VST.veric.lift LiftNotation :::'`('_x_')' not
R9182:9187 VST.veric.Cop2 <> tc_val def
R9200:9201 VST.floyd.SeparationLogicAsLogic <> v2:123 var
R9190:9195 compcert.cfrontend.Clight <> typeof def
R9197:9197 VST.floyd.SeparationLogicAsLogic <> e:114 var
R9268:9270 VST.msl.seplog <> ::logic:x_'*'_x not
R9223:9224 VST.veric.lift LiftNotation :::'`('_x_')' not
R9245:9267 VST.veric.lift LiftNotation :::'`('_x_')' not
R9225:9230 VST.veric.SeparationLogic <> mapsto def
R9236:9241 compcert.cfrontend.Clight <> typeof def
R9243:9243 VST.floyd.SeparationLogicAsLogic <> e:114 var
R9232:9233 VST.floyd.SeparationLogicAsLogic <> sh:121 var
R9264:9264 VST.veric.lift LiftNotation :::'`'_x not
R9265:9266 VST.floyd.SeparationLogicAsLogic <> v2:123 var
R9248:9258 VST.veric.expr <> eval_lvalue def
R9260:9260 VST.floyd.SeparationLogicAsLogic <> e:114 var
R9271:9272 VST.msl.seplog <> TT meth
R9292:9296 VST.veric.seplog <> subst def
R9307:9307 VST.floyd.SeparationLogicAsLogic <> P:112 var
R9302:9302 VST.veric.lift LiftNotation :::'`'_x not
R9303:9304 VST.floyd.SeparationLogicAsLogic <> v2:123 var
R9298:9299 VST.floyd.SeparationLogicAsLogic <> id:113 var
R9323:9325 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R9335:9336 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R9330:9334 VST.msl.shares <> share def
binder 9326:9327 <> sh:124
R9337:9339 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R9348:9349 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R9344:9347 compcert.cfrontend.Clight <> expr ind
binder 9340:9341 <> e1:125
R9350:9352 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R9361:9362 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R9357:9360 compcert.cfrontend.Ctypes <> type ind
binder 9353:9354 <> t1:126
R9363:9365 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R9373:9388 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R9370:9372 compcert.common.Values <> val ind
binder 9366:9367 <> v2:127
R9565:9577 VST.msl.seplog <> ::logic:x_'&&'_x not
R9389:9392 VST.msl.seplog <> ::logic:'!!'_x not
R9564:9564 VST.msl.seplog <> ::logic:'!!'_x not
R9408:9429 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R9394:9396 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9393:9393 VST.floyd.SeparationLogicAsLogic <> e:114 var
R9397:9401 compcert.cfrontend.Clight <> Ecast constr
R9406:9407 VST.floyd.SeparationLogicAsLogic <> t1:126 var
R9403:9404 VST.floyd.SeparationLogicAsLogic <> e1:125 var
R9460:9481 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R9450:9452 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9430:9440 VST.veric.SeparationLogic <> typeof_temp def
R9448:9449 VST.floyd.SeparationLogicAsLogic <> id:113 var
R9442:9446 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R9453:9456 Coq.Init.Datatypes <> Some constr
R9458:9459 VST.floyd.SeparationLogicAsLogic <> t1:126 var
R9525:9546 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R9517:9519 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9482:9501 VST.veric.SeparationLogic <> cast_pointer_to_bool def
R9515:9516 VST.floyd.SeparationLogicAsLogic <> t1:126 var
R9504:9509 compcert.cfrontend.Clight <> typeof def
R9511:9512 VST.floyd.SeparationLogicAsLogic <> e1:125 var
R9520:9524 Coq.Init.Datatypes <> false constr
R9547:9560 VST.veric.shares <> readable_share def
R9562:9563 VST.floyd.SeparationLogicAsLogic <> sh:124 var
R9578:9582 VST.msl.seplog <> ::logic:'|>'_x not
R9818:9818 VST.msl.seplog <> ::logic:'|>'_x not
R9746:9763 VST.msl.seplog <> ::logic:x_'&&'_x not
R9674:9692 VST.msl.seplog <> ::logic:x_'&&'_x not
R9745:9745 VST.msl.seplog <> ::logic:x_'&&'_x not
R9583:9583 VST.msl.seplog <> ::logic:x_'&&'_x not
R9602:9620 VST.msl.seplog <> ::logic:x_'&&'_x not
R9584:9592 VST.veric.SeparationLogic <> tc_lvalue def
R9600:9601 VST.floyd.SeparationLogicAsLogic <> e1:125 var
R9594:9598 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R9621:9625 VST.veric.SeparationLogic <> local def
R9628:9629 VST.veric.lift LiftNotation :::'`('_x_')' not
R9639:9672 VST.veric.lift LiftNotation :::'`('_x_')' not
R9630:9635 VST.veric.Cop2 <> tc_val def
R9637:9638 VST.floyd.SeparationLogicAsLogic <> t1:126 var
R9642:9643 VST.veric.lift LiftNotation :::'`('_x_')' not
R9671:9671 VST.veric.lift LiftNotation :::'`('_x_')' not
R9644:9652 VST.veric.expr <> eval_cast def
R9669:9670 VST.floyd.SeparationLogicAsLogic <> v2:127 var
R9666:9667 VST.floyd.SeparationLogicAsLogic <> t1:126 var
R9655:9660 compcert.cfrontend.Clight <> typeof def
R9662:9663 VST.floyd.SeparationLogicAsLogic <> e1:125 var
R9740:9742 VST.msl.seplog <> ::logic:x_'*'_x not
R9693:9694 VST.veric.lift LiftNotation :::'`('_x_')' not
R9716:9739 VST.veric.lift LiftNotation :::'`('_x_')' not
R9695:9700 VST.veric.SeparationLogic <> mapsto def
R9706:9711 compcert.cfrontend.Clight <> typeof def
R9713:9714 VST.floyd.SeparationLogicAsLogic <> e1:125 var
R9702:9703 VST.floyd.SeparationLogicAsLogic <> sh:124 var
R9736:9736 VST.veric.lift LiftNotation :::'`'_x not
R9737:9738 VST.floyd.SeparationLogicAsLogic <> v2:127 var
R9719:9729 VST.veric.expr <> eval_lvalue def
R9731:9732 VST.floyd.SeparationLogicAsLogic <> e1:125 var
R9743:9744 VST.msl.seplog <> TT meth
R9764:9768 VST.veric.seplog <> subst def
R9817:9817 VST.floyd.SeparationLogicAsLogic <> P:112 var
R9774:9775 VST.veric.lift LiftNotation :::'`('_x_')' not
R9814:9814 VST.veric.lift LiftNotation :::'`('_x_')' not
R9776:9784 VST.veric.val_lemmas <> force_val def
R9787:9794 VST.veric.Clight_Cop2 <> sem_cast def
R9811:9812 VST.floyd.SeparationLogicAsLogic <> v2:127 var
R9808:9809 VST.floyd.SeparationLogicAsLogic <> t1:126 var
R9797:9802 compcert.cfrontend.Clight <> typeof def
R9804:9805 VST.floyd.SeparationLogicAsLogic <> e1:125 var
R9770:9771 VST.floyd.SeparationLogicAsLogic <> id:113 var
R8005:8009 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R7999:8003 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R7996:7997 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R9923:9924 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9925:9929 VST.veric.mpred <> mpred def
R9916:9922 VST.veric.mpred <> environ ind
binder 9913:9913 <> P:128
binder 9932:9933 <> e1:129
binder 9935:9936 <> e2:130
R9944:9948 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R11158:11174 VST.veric.SeparationLogic <> normal_ret_assert def
R11176:11176 VST.floyd.SeparationLogicAsLogic <> P:128 var
R11142:11148 compcert.cfrontend.Clight <> Sassign constr
R11153:11154 VST.floyd.SeparationLogicAsLogic <> e2:130 var
R11150:11151 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R9973:9973 VST.msl.seplog <> ::logic:x_'||'_x not
R10289:10304 VST.msl.seplog <> ::logic:x_'||'_x not
R11122:11122 VST.msl.seplog <> ::logic:x_'||'_x not
R9974:9976 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R9986:9987 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R9981:9985 VST.msl.shares <> share def
binder 9977:9978 <> sh:131
R10008:10024 VST.msl.seplog <> ::logic:x_'&&'_x not
R9988:9990 VST.msl.seplog <> ::logic:'!!'_x not
R9991:10004 VST.veric.shares <> writable_share def
R10006:10007 VST.floyd.SeparationLogicAsLogic <> sh:131 var
R10025:10029 VST.msl.seplog <> ::logic:'|>'_x not
R10288:10288 VST.msl.seplog <> ::logic:'|>'_x not
R10093:10111 VST.msl.seplog <> ::logic:x_'&&'_x not
R10287:10287 VST.msl.seplog <> ::logic:x_'&&'_x not
R10030:10030 VST.msl.seplog <> ::logic:x_'&&'_x not
R10049:10055 VST.msl.seplog <> ::logic:x_'&&'_x not
R10092:10092 VST.msl.seplog <> ::logic:x_'&&'_x not
R10031:10039 VST.veric.SeparationLogic <> tc_lvalue def
R10047:10048 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10041:10045 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R10056:10062 VST.veric.SeparationLogic <> tc_expr def
R10071:10075 compcert.cfrontend.Clight <> Ecast constr
R10081:10086 compcert.cfrontend.Clight <> typeof def
R10088:10089 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10077:10078 VST.floyd.SeparationLogicAsLogic <> e2:130 var
R10064:10068 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R10112:10112 VST.msl.seplog <> ::logic:x_'*'_x not
R10155:10173 VST.msl.seplog <> ::logic:x_'*'_x not
R10286:10286 VST.msl.seplog <> ::logic:x_'*'_x not
R10113:10114 VST.veric.lift LiftNotation :::'`('_x_')' not
R10137:10154 VST.veric.lift LiftNotation :::'`('_x_')' not
R10115:10121 VST.veric.SeparationLogic <> mapsto_ def
R10127:10132 compcert.cfrontend.Clight <> typeof def
R10134:10135 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10123:10124 VST.floyd.SeparationLogicAsLogic <> sh:131 var
R10140:10150 VST.veric.expr <> eval_lvalue def
R10152:10153 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10281:10284 VST.msl.seplog <> ::logic:x_'-*'_x not
R10174:10175 VST.veric.lift LiftNotation :::'`('_x_')' not
R10197:10280 VST.veric.lift LiftNotation :::'`('_x_')' not
R10176:10181 VST.veric.SeparationLogic <> mapsto def
R10187:10192 compcert.cfrontend.Clight <> typeof def
R10194:10195 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10183:10184 VST.floyd.SeparationLogicAsLogic <> sh:131 var
R10217:10217 VST.veric.lift LiftNotation :::'`'_x not
R10227:10279 VST.veric.lift LiftNotation :::'`'_x not
R10218:10226 VST.veric.val_lemmas <> force_val def
R10229:10230 VST.veric.lift LiftNotation :::'`('_x_')' not
R10263:10278 VST.veric.lift LiftNotation :::'`('_x_')' not
R10231:10238 VST.veric.Clight_Cop2 <> sem_cast def
R10253:10258 compcert.cfrontend.Clight <> typeof def
R10260:10261 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10241:10246 compcert.cfrontend.Clight <> typeof def
R10248:10249 VST.floyd.SeparationLogicAsLogic <> e2:130 var
R10266:10274 VST.veric.expr <> eval_expr def
R10276:10277 VST.floyd.SeparationLogicAsLogic <> e2:130 var
R10200:10210 VST.veric.expr <> eval_lvalue def
R10212:10213 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10285:10285 VST.floyd.SeparationLogicAsLogic <> P:128 var
R10305:10308 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R10351:10366 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R10312:10315 compcert.cfrontend.Ctypes <> type ind
binder 10309:10310 <> t2:132
R10327:10338 compcert.common.AST <> memory_chunk ind
binder 10319:10320 <> ch:133
R10327:10338 compcert.common.AST <> memory_chunk ind
binder 10322:10324 <> ch':134
R10346:10350 VST.msl.shares <> share def
binder 10342:10343 <> sh:135
R10623:10639 VST.msl.seplog <> ::logic:x_'&&'_x not
R10367:10370 VST.msl.seplog <> ::logic:'!!'_x not
R10622:10622 VST.msl.seplog <> ::logic:'!!'_x not
R10428:10448 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R10421:10423 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10396:10399 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R10372:10383 VST.veric.SeparationLogic <> numeric_type def
R10386:10391 compcert.cfrontend.Clight <> typeof def
R10393:10394 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10400:10411 VST.veric.SeparationLogic <> numeric_type def
R10413:10414 VST.floyd.SeparationLogicAsLogic <> t2:132 var
R10424:10427 Coq.Init.Datatypes <> true constr
R10486:10506 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R10472:10474 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10449:10459 compcert.cfrontend.Ctypes <> access_mode def
R10462:10467 compcert.cfrontend.Clight <> typeof def
R10469:10470 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10475:10482 compcert.cfrontend.Ctypes <> By_value constr
R10484:10485 VST.floyd.SeparationLogicAsLogic <> ch:133 var
R10536:10556 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R10521:10523 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10507:10517 compcert.cfrontend.Ctypes <> access_mode def
R10519:10520 VST.floyd.SeparationLogicAsLogic <> t2:132 var
R10524:10531 compcert.cfrontend.Ctypes <> By_value constr
R10533:10535 VST.floyd.SeparationLogicAsLogic <> ch':134 var
R10584:10604 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R10557:10576 VST.veric.SeparationLogic <> decode_encode_val_ok def
R10581:10583 VST.floyd.SeparationLogicAsLogic <> ch':134 var
R10578:10579 VST.floyd.SeparationLogicAsLogic <> ch:133 var
R10605:10618 VST.veric.shares <> writable_share def
R10620:10621 VST.floyd.SeparationLogicAsLogic <> sh:135 var
R10640:10644 VST.msl.seplog <> ::logic:'|>'_x not
R11121:11121 VST.msl.seplog <> ::logic:'|>'_x not
R10708:10726 VST.msl.seplog <> ::logic:x_'&&'_x not
R11120:11120 VST.msl.seplog <> ::logic:x_'&&'_x not
R10645:10645 VST.msl.seplog <> ::logic:x_'&&'_x not
R10664:10670 VST.msl.seplog <> ::logic:x_'&&'_x not
R10707:10707 VST.msl.seplog <> ::logic:x_'&&'_x not
R10646:10654 VST.veric.SeparationLogic <> tc_lvalue def
R10662:10663 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10656:10660 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R10671:10677 VST.veric.SeparationLogic <> tc_expr def
R10686:10690 compcert.cfrontend.Clight <> Ecast constr
R10696:10701 compcert.cfrontend.Clight <> typeof def
R10703:10704 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10692:10693 VST.floyd.SeparationLogicAsLogic <> e2:130 var
R10679:10683 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R10727:10727 VST.msl.seplog <> ::logic:x_'*'_x not
R10830:10848 VST.msl.seplog <> ::logic:x_'*'_x not
R11119:11119 VST.msl.seplog <> ::logic:x_'*'_x not
R10770:10796 VST.msl.seplog <> ::logic:x_'&&'_x not
R10728:10729 VST.veric.lift LiftNotation :::'`('_x_')' not
R10752:10769 VST.veric.lift LiftNotation :::'`('_x_')' not
R10730:10736 VST.veric.SeparationLogic <> mapsto_ def
R10742:10747 compcert.cfrontend.Clight <> typeof def
R10749:10750 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10738:10739 VST.floyd.SeparationLogicAsLogic <> sh:135 var
R10755:10765 VST.veric.expr <> eval_lvalue def
R10767:10768 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10797:10798 VST.veric.lift LiftNotation :::'`('_x_')' not
R10812:10829 VST.veric.lift LiftNotation :::'`('_x_')' not
R10799:10805 VST.veric.SeparationLogic <> mapsto_ def
R10810:10811 VST.floyd.SeparationLogicAsLogic <> t2:132 var
R10807:10808 VST.floyd.SeparationLogicAsLogic <> sh:135 var
R10815:10825 VST.veric.expr <> eval_lvalue def
R10827:10828 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10849:10852 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R10860:10878 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R10857:10859 compcert.common.Values <> val ind
binder 10853:10854 <> v':136
R10917:10940 VST.msl.seplog <> ::logic:x_'-*'_x not
R10879:10880 VST.veric.lift LiftNotation :::'`('_x_')' not
R10893:10916 VST.veric.lift LiftNotation :::'`('_x_')' not
R10881:10886 VST.veric.SeparationLogic <> mapsto def
R10891:10892 VST.floyd.SeparationLogicAsLogic <> t2:132 var
R10888:10889 VST.floyd.SeparationLogicAsLogic <> sh:135 var
R10913:10913 VST.veric.lift LiftNotation :::'`'_x not
R10914:10915 VST.floyd.SeparationLogicAsLogic <> v':136 var
R10896:10906 VST.veric.expr <> eval_lvalue def
R10908:10909 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R10941:10943 VST.msl.seplog <> imp meth
R11117:11117 VST.floyd.SeparationLogicAsLogic <> P:128 var
R10946:10950 VST.veric.SeparationLogic <> local def
R10954:10955 VST.veric.lift LiftNotation :::'`'_x not
R10973:11089 VST.veric.lift LiftNotation :::'`'_x not
R10956:10972 compcert.common.Memdata <> decode_encode_val def
R11086:11086 VST.veric.lift LiftNotation :::'`'_x not
R11087:11088 VST.floyd.SeparationLogicAsLogic <> v':136 var
R11079:11079 VST.veric.lift LiftNotation :::'`'_x not
R11080:11082 VST.floyd.SeparationLogicAsLogic <> ch':134 var
R11073:11073 VST.veric.lift LiftNotation :::'`'_x not
R11074:11075 VST.floyd.SeparationLogicAsLogic <> ch:133 var
R11002:11004 VST.veric.lift LiftNotation :::'`'_x not
R11014:11069 VST.veric.lift LiftNotation :::'`'_x not
R11005:11013 VST.veric.val_lemmas <> force_val def
R11017:11019 VST.veric.lift LiftNotation :::'`('_x_')' not
R11052:11068 VST.veric.lift LiftNotation :::'`('_x_')' not
R11020:11027 VST.veric.Clight_Cop2 <> sem_cast def
R11042:11047 compcert.cfrontend.Clight <> typeof def
R11049:11050 VST.floyd.SeparationLogicAsLogic <> e1:129 var
R11030:11035 compcert.cfrontend.Clight <> typeof def
R11037:11038 VST.floyd.SeparationLogicAsLogic <> e2:130 var
R11056:11064 VST.veric.expr <> eval_expr def
R11066:11067 VST.floyd.SeparationLogicAsLogic <> e2:130 var
R9959:9963 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R9953:9957 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R9950:9951 VST.floyd.SeparationLogicAsLogic <> CS:67 var
binder 11200:11200 <> P:137
R11204:11208 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R11234:11250 VST.veric.SeparationLogic <> normal_ret_assert def
R11252:11252 VST.floyd.SeparationLogicAsLogic <> P:137 var
R11227:11231 compcert.cfrontend.Clight <> Sskip constr
R11225:11225 VST.floyd.SeparationLogicAsLogic <> P:137 var
R11219:11223 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11213:11217 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R11210:11211 VST.floyd.SeparationLogicAsLogic <> CS:67 var
binder 11279:11279 <> P:138
binder 11281:11283 <> opt:139
binder 11285:11287 <> ext:140
binder 11289:11290 <> tl:141
binder 11292:11293 <> el:142
R11297:11301 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R11346:11346 VST.floyd.SeparationLogicAsLogic <> P:138 var
R11322:11329 compcert.cfrontend.Clight <> Sbuiltin constr
R11342:11343 VST.floyd.SeparationLogicAsLogic <> el:142 var
R11339:11340 VST.floyd.SeparationLogicAsLogic <> tl:141 var
R11335:11337 VST.floyd.SeparationLogicAsLogic <> ext:140 var
R11331:11333 VST.floyd.SeparationLogicAsLogic <> opt:139 var
R11318:11319 VST.msl.seplog <> FF meth
R11312:11316 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11306:11310 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R11303:11304 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R11380:11383 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11384:11388 VST.veric.mpred <> mpred def
R11373:11379 VST.veric.mpred <> environ ind
binder 11371:11371 <> P:143
R11394:11402 compcert.cfrontend.Clight <> statement ind
binder 11392:11392 <> c:144
R11408:11417 VST.veric.tycontext <> ret_assert rec
binder 11406:11406 <> Q:145
binder 11420:11420 <> l:146
R11454:11457 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11459:11463 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R11495:11495 VST.floyd.SeparationLogicAsLogic <> Q:145 var
R11483:11488 compcert.cfrontend.Clight <> Slabel constr
R11492:11492 VST.floyd.SeparationLogicAsLogic <> c:144 var
R11490:11490 VST.floyd.SeparationLogicAsLogic <> l:146 var
R11480:11480 VST.floyd.SeparationLogicAsLogic <> P:143 var
R11474:11478 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11468:11472 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R11465:11466 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R11428:11432 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R11453:11453 VST.floyd.SeparationLogicAsLogic <> Q:145 var
R11451:11451 VST.floyd.SeparationLogicAsLogic <> c:144 var
R11449:11449 VST.floyd.SeparationLogicAsLogic <> P:143 var
R11443:11447 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11437:11441 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R11434:11435 VST.floyd.SeparationLogicAsLogic <> CS:67 var
binder 11518:11518 <> P:147
binder 11520:11520 <> l:148
R11524:11528 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R11558:11558 VST.floyd.SeparationLogicAsLogic <> P:147 var
R11549:11553 compcert.cfrontend.Clight <> Sgoto constr
R11555:11555 VST.floyd.SeparationLogicAsLogic <> l:148 var
R11545:11546 VST.msl.seplog <> FF meth
R11539:11543 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11533:11537 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R11530:11531 VST.floyd.SeparationLogicAsLogic <> CS:67 var
binder 11583:11584 <> P':149
R11591:11600 VST.veric.tycontext <> ret_assert rec
binder 11587:11588 <> R':150
binder 11603:11603 <> P:151
binder 11605:11605 <> c:152
R11611:11620 VST.veric.tycontext <> ret_assert rec
binder 11608:11608 <> R:153
R11704:11711 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11807:11814 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11908:11915 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12015:12022 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12023:12023 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12136:12144 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12174:12177 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12179:12183 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R12204:12204 VST.floyd.SeparationLogicAsLogic <> R:153 var
R12202:12202 VST.floyd.SeparationLogicAsLogic <> c:152 var
R12200:12200 VST.floyd.SeparationLogicAsLogic <> P:151 var
R12194:12198 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R12188:12192 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R12185:12186 VST.floyd.SeparationLogicAsLogic <> CS:67 var
R12146:12150 VST.floyd.SeparationLogicAsLogic <> semax:70 ind
R12172:12173 VST.floyd.SeparationLogicAsLogic <> R':150 var
R12170:12170 VST.floyd.SeparationLogicAsLogic <> c:152 var
R12167:12168 VST.floyd.SeparationLogicAsLogic <> P':149 var
R12161:12165 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R12155:12159 VST.floyd.SeparationLogicAsLogic <> Espec:68 var
R12152:12153 VST.floyd.SeparationLogicAsLogic <> CS:67 var
binder 12031:12032 <> vl:154
R12103:12107 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R12059:12063 VST.msl.seplog <> ::logic:x_'&&'_x not
R12102:12102 VST.msl.seplog <> ::logic:x_'&&'_x not
R12035:12039 VST.veric.SeparationLogic <> local def
R12042:12051 VST.veric.SeparationLogic <> tc_environ def
R12053:12057 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R12064:12064 VST.msl.seplog <> ::logic:x_'&&'_x not
R12082:12086 VST.msl.seplog <> ::logic:x_'&&'_x not
R12065:12075 VST.veric.SeparationLogic <> allp_fun_id def
R12077:12081 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R12087:12095 VST.veric.tycontext <> RA_return proj
R12100:12101 VST.floyd.SeparationLogicAsLogic <> vl:154 var
R12097:12098 VST.floyd.SeparationLogicAsLogic <> R':150 var
R12108:12112 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R12118:12121 VST.msl.seplog <> ::logic:x_'||'_x not
R12113:12115 VST.msl.seplog <> ::logic:'|>'_x not
R12116:12117 VST.msl.seplog <> FF meth
R12122:12130 VST.veric.tycontext <> RA_return proj
R12134:12135 VST.floyd.SeparationLogicAsLogic <> vl:154 var
R12132:12132 VST.floyd.SeparationLogicAsLogic <> R:153 var
R11983:11987 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R11940:11944 VST.msl.seplog <> ::logic:x_'&&'_x not
R11982:11982 VST.msl.seplog <> ::logic:x_'&&'_x not
R11916:11920 VST.veric.SeparationLogic <> local def
R11923:11932 VST.veric.SeparationLogic <> tc_environ def
R11934:11938 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11945:11945 VST.msl.seplog <> ::logic:x_'&&'_x not
R11963:11967 VST.msl.seplog <> ::logic:x_'&&'_x not
R11946:11956 VST.veric.SeparationLogic <> allp_fun_id def
R11958:11962 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11968:11978 VST.veric.tycontext <> RA_continue proj
R11980:11981 VST.floyd.SeparationLogicAsLogic <> R':150 var
R11988:11992 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R11998:12001 VST.msl.seplog <> ::logic:x_'||'_x not
R11993:11995 VST.msl.seplog <> ::logic:'|>'_x not
R11996:11997 VST.msl.seplog <> FF meth
R12002:12012 VST.veric.tycontext <> RA_continue proj
R12014:12014 VST.floyd.SeparationLogicAsLogic <> R:153 var
R11879:11883 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R11839:11843 VST.msl.seplog <> ::logic:x_'&&'_x not
R11878:11878 VST.msl.seplog <> ::logic:x_'&&'_x not
R11815:11819 VST.veric.SeparationLogic <> local def
R11822:11831 VST.veric.SeparationLogic <> tc_environ def
R11833:11837 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11844:11844 VST.msl.seplog <> ::logic:x_'&&'_x not
R11862:11866 VST.msl.seplog <> ::logic:x_'&&'_x not
R11845:11855 VST.veric.SeparationLogic <> allp_fun_id def
R11857:11861 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11867:11874 VST.veric.tycontext <> RA_break proj
R11876:11877 VST.floyd.SeparationLogicAsLogic <> R':150 var
R11884:11888 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R11894:11897 VST.msl.seplog <> ::logic:x_'||'_x not
R11889:11891 VST.msl.seplog <> ::logic:'|>'_x not
R11892:11893 VST.msl.seplog <> FF meth
R11898:11905 VST.veric.tycontext <> RA_break proj
R11907:11907 VST.floyd.SeparationLogicAsLogic <> R:153 var
R11777:11781 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R11736:11740 VST.msl.seplog <> ::logic:x_'&&'_x not
R11776:11776 VST.msl.seplog <> ::logic:x_'&&'_x not
R11712:11716 VST.veric.SeparationLogic <> local def
R11719:11728 VST.veric.SeparationLogic <> tc_environ def
R11730:11734 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11741:11741 VST.msl.seplog <> ::logic:x_'&&'_x not
R11759:11763 VST.msl.seplog <> ::logic:x_'&&'_x not
R11742:11752 VST.veric.SeparationLogic <> allp_fun_id def
R11754:11758 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11764:11772 VST.veric.tycontext <> RA_normal proj
R11774:11775 VST.floyd.SeparationLogicAsLogic <> R':150 var
R11782:11786 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R11792:11795 VST.msl.seplog <> ::logic:x_'||'_x not
R11787:11789 VST.msl.seplog <> ::logic:'|>'_x not
R11790:11791 VST.msl.seplog <> FF meth
R11796:11804 VST.veric.tycontext <> RA_normal proj
R11806:11806 VST.floyd.SeparationLogicAsLogic <> R:153 var
R11683:11687 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R11653:11657 VST.msl.seplog <> ::logic:x_'&&'_x not
R11682:11682 VST.msl.seplog <> ::logic:x_'&&'_x not
R11629:11633 VST.veric.SeparationLogic <> local def
R11636:11645 VST.veric.SeparationLogic <> tc_environ def
R11647:11651 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11658:11658 VST.msl.seplog <> ::logic:x_'&&'_x not
R11676:11680 VST.msl.seplog <> ::logic:x_'&&'_x not
R11659:11669 VST.veric.SeparationLogic <> allp_fun_id def
R11671:11675 VST.floyd.SeparationLogicAsLogic <> Delta:69 var
R11681:11681 VST.floyd.SeparationLogicAsLogic <> P:151 var
R11688:11692 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R11698:11701 VST.msl.seplog <> ::logic:x_'||'_x not
R11693:11695 VST.msl.seplog <> ::logic:'|>'_x not
R11696:11697 VST.msl.seplog <> FF meth
R11702:11703 VST.floyd.SeparationLogicAsLogic <> P':149 var
def 12219:12228 AuxDefs semax_body
R12237:12244 VST.veric.mpred <> varspecs def
binder 12234:12234 <> V:155
R12251:12258 VST.veric.mpred <> funspecs def
binder 12248:12248 <> G:156
R12265:12273 VST.veric.mpred <> compspecs class
binder 12262:12262 <> C:157
R12280:12287 compcert.cfrontend.Clight <> function rec
binder 12277:12277 <> f:158
R12302:12304 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R12297:12301 compcert.common.AST <> ident def
R12305:12311 VST.veric.mpred <> funspec ind
binder 12291:12294 <> spec:159
R12329:12332 VST.floyd.SeparationLogicAsLogic <> spec:159 var
R12339:12339 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12341:12342 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12371:12371 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12343:12352 VST.veric.mpred <> mk_funspec constr
R12417:12423 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R12387:12389 Coq.Init.Logic <> ::type_scope:x_'='_x not
R12379:12381 Coq.Init.Datatypes <> fst def
R12390:12392 Coq.Lists.List <> map def
R12399:12401 Coq.Init.Datatypes <> fst def
R12404:12412 VST.veric.SeparationLogic <> fn_funsig def
R12414:12414 VST.floyd.SeparationLogicAsLogic <> f:158 var
R12394:12396 Coq.Init.Datatypes <> snd def
R12452:12455 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R12432:12434 Coq.Init.Logic <> ::type_scope:x_'='_x not
R12424:12426 Coq.Init.Datatypes <> snd def
R12435:12437 Coq.Init.Datatypes <> snd def
R12440:12448 VST.veric.SeparationLogic <> fn_funsig def
R12450:12450 VST.floyd.SeparationLogicAsLogic <> f:158 var
binder 12463:12467 <> Espec:161
binder 12469:12470 <> ts:162
binder 12472:12472 <> x:163
R12479:12483 VST.floyd.SeparationLogicAsLogic AuxDefs semax ind
R12657:12672 VST.veric.SeparationLogic <> frame_ret_assert def
R12725:12737 VST.veric.SeparationLogic <> stackframe_of def
R12739:12739 VST.floyd.SeparationLogicAsLogic <> f:158 var
R12675:12698 VST.veric.SeparationLogic <> function_body_ret_assert def
R12720:12720 VST.floyd.SeparationLogicAsLogic <> x:163 var
R12717:12718 VST.floyd.SeparationLogicAsLogic <> ts:162 var
R12701:12709 compcert.cfrontend.Clight <> fn_return proj
R12711:12711 VST.floyd.SeparationLogicAsLogic <> f:158 var
R12641:12647 compcert.cfrontend.Clight <> fn_body proj
R12638:12638 VST.floyd.SeparationLogicAsLogic <> f:158 var
binder 12531:12533 <> rho:164
R12607:12609 VST.msl.seplog <> ::logic:x_'*'_x not
R12538:12569 VST.veric.Clight_seplog <> close_precondition def
R12604:12606 VST.floyd.SeparationLogicAsLogic <> rho:164 var
R12601:12601 VST.floyd.SeparationLogicAsLogic <> x:163 var
R12598:12599 VST.floyd.SeparationLogicAsLogic <> ts:162 var
R12572:12574 Coq.Lists.List <> map def
R12583:12591 compcert.cfrontend.Clight <> fn_params proj
R12580:12580 VST.floyd.SeparationLogicAsLogic <> f:158 var
R12576:12578 Coq.Init.Datatypes <> fst def
R12610:12622 VST.veric.SeparationLogic <> stackframe_of def
R12626:12628 VST.floyd.SeparationLogicAsLogic <> rho:164 var
R12624:12624 VST.floyd.SeparationLogicAsLogic <> f:158 var
R12494:12507 VST.veric.tycontext <> func_tycontext def
R12515:12517 Coq.Init.Datatypes <> nil constr
R12513:12513 VST.floyd.SeparationLogicAsLogic <> G:156 var
R12511:12511 VST.floyd.SeparationLogicAsLogic <> V:155 var
R12509:12509 VST.floyd.SeparationLogicAsLogic <> f:158 var
R12487:12491 VST.floyd.SeparationLogicAsLogic <> Espec:161 var
R12485:12485 VST.floyd.SeparationLogicAsLogic <> C:157 var
ind 12759:12768 AuxDefs semax_func
constr 12936:12949 AuxDefs semax_func_nil
constr 13040:13054 AuxDefs semax_func_cons
constr 13834:13852 AuxDefs semax_func_cons_ext
constr 14905:14919 AuxDefs semax_func_mono
constr 15314:15327 AuxDefs semax_func_app
constr 15586:15607 AuxDefs semax_func_subsumption
constr 15984:15998 AuxDefs semax_func_join
constr 16742:16758 AuxDefs semax_func_firstn
constr 16919:16934 AuxDefs semax_func_skipn
R12786:12795 VST.veric.juicy_extspec <> OracleKind class
binder 12779:12783 <> Espec:165
R12802:12809 VST.veric.mpred <> varspecs def
binder 12799:12799 <> V:166
R12816:12823 VST.veric.mpred <> funspecs def
binder 12813:12813 <> G:167
R12830:12838 VST.veric.mpred <> compspecs class
binder 12827:12827 <> C:168
R12846:12851 compcert.common.Globalenvs Genv t rec
R12867:12870 compcert.cfrontend.Ctypes <> type ind
R12853:12865 compcert.cfrontend.Clight <> fundef def
binder 12842:12843 <> ge:169
R12880:12883 Coq.Init.Datatypes <> list ind
R12891:12893 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R12886:12890 compcert.common.AST <> ident def
R12894:12906 compcert.cfrontend.Clight <> fundef def
binder 12873:12877 <> fdecs:170
R12915:12922 VST.veric.mpred <> funspecs def
binder 12911:12912 <> G1:171
R12969:12978 VST.veric.juicy_extspec <> OracleKind class
binder 12962:12966 <> Espec:174
binder 12993:12993 <> V:175
binder 12995:12995 <> G:176
binder 12997:12997 <> C:177
binder 12999:13000 <> ge:178
R13004:13013 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R13034:13036 Coq.Init.Datatypes <> nil constr
R13030:13032 Coq.Init.Datatypes <> nil constr
R13027:13028 VST.floyd.SeparationLogicAsLogic <> ge:178 var
R13025:13025 VST.floyd.SeparationLogicAsLogic <> C:177 var
R13023:13023 VST.floyd.SeparationLogicAsLogic <> G:176 var
R13021:13021 VST.floyd.SeparationLogicAsLogic <> V:175 var
R13015:13019 VST.floyd.SeparationLogicAsLogic <> Espec:174 var
R13074:13083 VST.veric.juicy_extspec <> OracleKind class
binder 13067:13071 <> Espec:179
binder 13099:13100 <> fs:180
binder 13102:13103 <> id:181
binder 13105:13105 <> f:182
binder 13107:13110 <> fsig:183
binder 13112:13113 <> cc:184
binder 13115:13115 <> A:185
binder 13117:13117 <> P:186
binder 13119:13119 <> Q:187
binder 13121:13123 <> NEP:188
binder 13125:13127 <> NEQ:189
R13133:13140 VST.veric.mpred <> varspecs def
binder 13130:13130 <> V:190
R13150:13157 VST.veric.mpred <> funspecs def
binder 13144:13144 <> G:191
binder 13146:13147 <> G':192
R13164:13172 VST.veric.mpred <> compspecs class
binder 13161:13161 <> C:193
binder 13175:13176 <> ge:194
binder 13178:13178 <> b:195
R13338:13347 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13460:13470 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13497:13507 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13528:13538 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13570:13573 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13618:13628 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13684:13692 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13716:13725 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13726:13735 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R13823:13827 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R13785:13785 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13788:13789 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13822:13822 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13786:13787 VST.floyd.SeparationLogicAsLogic <> id:181 var
R13790:13799 VST.veric.mpred <> mk_funspec constr
R13819:13821 VST.floyd.SeparationLogicAsLogic <> NEQ:189 var
R13815:13817 VST.floyd.SeparationLogicAsLogic <> NEP:188 var
R13813:13813 VST.floyd.SeparationLogicAsLogic <> Q:187 var
R13811:13811 VST.floyd.SeparationLogicAsLogic <> P:186 var
R13809:13809 VST.floyd.SeparationLogicAsLogic <> A:185 var
R13806:13807 VST.floyd.SeparationLogicAsLogic <> cc:184 var
R13801:13804 VST.floyd.SeparationLogicAsLogic <> fsig:183 var
R13828:13829 VST.floyd.SeparationLogicAsLogic <> G':192 var
R13761:13762 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R13745:13745 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13748:13749 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13760:13760 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13746:13747 VST.floyd.SeparationLogicAsLogic <> id:181 var
R13750:13757 compcert.cfrontend.Ctypes <> Internal constr
R13759:13759 VST.floyd.SeparationLogicAsLogic <> f:182 var
R13763:13764 VST.floyd.SeparationLogicAsLogic <> fs:180 var
R13741:13742 VST.floyd.SeparationLogicAsLogic <> ge:194 var
R13739:13739 VST.floyd.SeparationLogicAsLogic <> G:191 var
R13737:13737 VST.floyd.SeparationLogicAsLogic <> V:190 var
R13693:13702 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R13714:13715 VST.floyd.SeparationLogicAsLogic <> G':192 var
R13711:13712 VST.floyd.SeparationLogicAsLogic <> fs:180 var
R13708:13709 VST.floyd.SeparationLogicAsLogic <> ge:194 var
R13706:13706 VST.floyd.SeparationLogicAsLogic <> G:191 var
R13704:13704 VST.floyd.SeparationLogicAsLogic <> V:190 var
R13629:13638 VST.floyd.SeparationLogicAsLogic AuxDefs semax_body def
R13646:13646 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13649:13650 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13683:13683 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13647:13648 VST.floyd.SeparationLogicAsLogic <> id:181 var
R13651:13660 VST.veric.mpred <> mk_funspec constr
R13680:13682 VST.floyd.SeparationLogicAsLogic <> NEQ:189 var
R13676:13678 VST.floyd.SeparationLogicAsLogic <> NEP:188 var
R13674:13674 VST.floyd.SeparationLogicAsLogic <> Q:187 var
R13672:13672 VST.floyd.SeparationLogicAsLogic <> P:186 var
R13670:13670 VST.floyd.SeparationLogicAsLogic <> A:185 var
R13667:13668 VST.floyd.SeparationLogicAsLogic <> cc:184 var
R13662:13665 VST.floyd.SeparationLogicAsLogic <> fsig:183 var
R13644:13644 VST.floyd.SeparationLogicAsLogic <> f:182 var
R13642:13642 VST.floyd.SeparationLogicAsLogic <> G:191 var
R13640:13640 VST.floyd.SeparationLogicAsLogic <> V:190 var
R13598:13600 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13574:13592 compcert.common.Globalenvs Genv find_funct_ptr def
R13597:13597 VST.floyd.SeparationLogicAsLogic <> b:195 var
R13594:13595 VST.floyd.SeparationLogicAsLogic <> ge:194 var
R13601:13604 Coq.Init.Datatypes <> Some constr
R13607:13614 compcert.cfrontend.Ctypes <> Internal constr
R13616:13616 VST.floyd.SeparationLogicAsLogic <> f:182 var
R13561:13563 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13539:13554 compcert.common.Globalenvs Genv find_symbol def
R13559:13560 VST.floyd.SeparationLogicAsLogic <> id:181 var
R13556:13557 VST.floyd.SeparationLogicAsLogic <> ge:194 var
R13564:13567 Coq.Init.Datatypes <> Some constr
R13569:13569 VST.floyd.SeparationLogicAsLogic <> b:195 var
R13523:13525 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13511:13521 compcert.cfrontend.Clight <> fn_callconv proj
R13508:13508 VST.floyd.SeparationLogicAsLogic <> f:182 var
R13526:13527 VST.floyd.SeparationLogicAsLogic <> cc:184 var
R13471:13482 VST.veric.SeparationLogic <> var_sizes_ok def
R13488:13494 compcert.cfrontend.Clight <> fn_vars proj
R13485:13485 VST.floyd.SeparationLogicAsLogic <> f:182 var
R13348:13353 Coq.Lists.List <> Forall ind
R13450:13456 compcert.cfrontend.Clight <> fn_vars proj
R13458:13458 VST.floyd.SeparationLogicAsLogic <> f:182 var
R13379:13381 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R13374:13378 compcert.common.AST <> ident def
R13382:13385 compcert.cfrontend.Ctypes <> type ind
binder 13369:13370 <> it:196
R13430:13442 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13400:13412 compcert.cfrontend.Ctypes <> complete_type def
R13423:13425 Coq.Init.Datatypes <> snd def
R13427:13428 VST.floyd.SeparationLogicAsLogic <> it:196 var
R13414:13420 VST.veric.mpred <> cenv_cs meth
R13443:13446 Coq.Init.Datatypes <> true constr
R13331:13333 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13187:13190 Coq.Init.Datatypes <> andb def
R13234:13237 Coq.Init.Datatypes <> andb def
R13307:13326 VST.veric.SeparationLogic <> semax_body_params_ok def
R13328:13328 VST.floyd.SeparationLogicAsLogic <> f:182 var
R13240:13243 Coq.Init.Datatypes <> negb def
R13246:13255 VST.veric.base <> id_in_list def
R13261:13263 Coq.Lists.List <> map def
R13292:13293 VST.floyd.SeparationLogicAsLogic <> fs:180 var
R13267:13269 Coq.Init.Datatypes <> fst def
R13277:13289 compcert.cfrontend.Clight <> fundef def
R13271:13275 compcert.common.AST <> ident def
R13257:13258 VST.floyd.SeparationLogicAsLogic <> id:181 var
R13193:13202 VST.veric.base <> id_in_list def
R13208:13210 Coq.Lists.List <> map def
R13223:13223 VST.floyd.SeparationLogicAsLogic <> G:191 var
R13214:13216 Coq.Init.Datatypes <> fst def
R13204:13205 VST.floyd.SeparationLogicAsLogic <> id:181 var
R13334:13337 Coq.Init.Datatypes <> true constr
R13872:13881 VST.veric.juicy_extspec <> OracleKind class
binder 13865:13869 <> Espec:197
R13899:13906 VST.veric.mpred <> varspecs def
binder 13896:13896 <> V:198
R13913:13920 VST.veric.mpred <> funspecs def
binder 13910:13910 <> G:199
R13927:13935 VST.veric.mpred <> compspecs class
binder 13924:13924 <> C:200
binder 13938:13939 <> ge:201
binder 13941:13942 <> fs:202
binder 13944:13945 <> id:203
binder 13947:13948 <> ef:204
binder 13950:13955 <> argsig:205
binder 13957:13962 <> retsig:206
binder 13964:13964 <> A:207
binder 13966:13966 <> P:208
binder 13968:13968 <> Q:209
binder 13970:13972 <> NEP:210
binder 13974:13976 <> NEQ:211
binder 13988:13994 <> argsig':212
R14011:14018 VST.veric.mpred <> funspecs def
binder 14007:14008 <> G':213
binder 14021:14022 <> cc:214
binder 14046:14046 <> b:215
R14206:14211 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14292:14297 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14339:14344 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14345:14345 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14386:14392 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14393:14393 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14601:14607 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14639:14642 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14705:14710 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14741:14746 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14770:14775 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14776:14785 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R14894:14898 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R14843:14843 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14846:14847 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14893:14893 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14844:14845 VST.floyd.SeparationLogicAsLogic <> id:203 var
R14848:14857 VST.veric.mpred <> mk_funspec constr
R14890:14892 VST.floyd.SeparationLogicAsLogic <> NEQ:211 var
R14886:14888 VST.floyd.SeparationLogicAsLogic <> NEP:210 var
R14884:14884 VST.floyd.SeparationLogicAsLogic <> Q:209 var
R14882:14882 VST.floyd.SeparationLogicAsLogic <> P:208 var
R14880:14880 VST.floyd.SeparationLogicAsLogic <> A:207 var
R14877:14878 VST.floyd.SeparationLogicAsLogic <> cc:214 var
R14859:14859 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14867:14868 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14875:14875 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14860:14866 VST.floyd.SeparationLogicAsLogic <> argsig':212 var
R14869:14874 VST.floyd.SeparationLogicAsLogic <> retsig:206 var
R14899:14900 VST.floyd.SeparationLogicAsLogic <> G':213 var
R14829:14830 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R14795:14795 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14798:14799 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14828:14828 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14796:14797 VST.floyd.SeparationLogicAsLogic <> id:203 var
R14800:14807 compcert.cfrontend.Ctypes <> External constr
R14826:14827 VST.floyd.SeparationLogicAsLogic <> cc:214 var
R14819:14824 VST.floyd.SeparationLogicAsLogic <> retsig:206 var
R14812:14817 VST.floyd.SeparationLogicAsLogic <> argsig:205 var
R14809:14810 VST.floyd.SeparationLogicAsLogic <> ef:204 var
R14831:14832 VST.floyd.SeparationLogicAsLogic <> fs:202 var
R14791:14792 VST.floyd.SeparationLogicAsLogic <> ge:201 var
R14789:14789 VST.floyd.SeparationLogicAsLogic <> G:199 var
R14787:14787 VST.floyd.SeparationLogicAsLogic <> V:198 var
R14747:14756 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R14768:14769 VST.floyd.SeparationLogicAsLogic <> G':213 var
R14765:14766 VST.floyd.SeparationLogicAsLogic <> fs:202 var
R14762:14763 VST.floyd.SeparationLogicAsLogic <> ge:201 var
R14760:14760 VST.floyd.SeparationLogicAsLogic <> G:199 var
R14758:14758 VST.floyd.SeparationLogicAsLogic <> V:198 var
R14712:14725 VST.floyd.SeparationLogicAsLogic <> AuxDefs.AuxDefs.semax_external var
R14740:14740 VST.floyd.SeparationLogicAsLogic <> Q:209 var
R14738:14738 VST.floyd.SeparationLogicAsLogic <> P:208 var
R14736:14736 VST.floyd.SeparationLogicAsLogic <> A:207 var
R14733:14734 VST.floyd.SeparationLogicAsLogic <> ef:204 var
R14727:14731 VST.floyd.SeparationLogicAsLogic <> Espec:197 var
R14667:14669 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14643:14661 compcert.common.Globalenvs Genv find_funct_ptr def
R14666:14666 VST.floyd.SeparationLogicAsLogic <> b:215 var
R14663:14664 VST.floyd.SeparationLogicAsLogic <> ge:201 var
R14670:14673 Coq.Init.Datatypes <> Some constr
R14676:14683 compcert.cfrontend.Ctypes <> External constr
R14702:14703 VST.floyd.SeparationLogicAsLogic <> cc:214 var
R14695:14700 VST.floyd.SeparationLogicAsLogic <> retsig:206 var
R14688:14693 VST.floyd.SeparationLogicAsLogic <> argsig:205 var
R14685:14686 VST.floyd.SeparationLogicAsLogic <> ef:204 var
R14630:14632 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14608:14623 compcert.common.Globalenvs Genv find_symbol def
R14628:14629 VST.floyd.SeparationLogicAsLogic <> id:203 var
R14625:14626 VST.floyd.SeparationLogicAsLogic <> ge:201 var
R14633:14636 Coq.Init.Datatypes <> Some constr
R14638:14638 VST.floyd.SeparationLogicAsLogic <> b:215 var
binder 14401:14402 <> gx:216
binder 14404:14405 <> ts:217
binder 14407:14407 <> x:218
R14416:14421 Coq.Init.Datatypes <> option ind
R14423:14425 compcert.common.Values <> val ind
binder 14410:14412 <> ret:219
R14561:14573 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R14489:14500 VST.msl.seplog <> ::logic:x_'&&'_x not
R14435:14435 VST.floyd.SeparationLogicAsLogic <> Q:209 var
R14443:14455 VST.veric.SeparationLogic <> make_ext_rval def
R14485:14487 VST.floyd.SeparationLogicAsLogic <> ret:219 var
R14461:14475 compcert.cfrontend.Ctypes <> rettype_of_type def
R14477:14482 VST.floyd.SeparationLogicAsLogic <> retsig:206 var
R14457:14458 VST.floyd.SeparationLogicAsLogic <> gx:216 var
R14440:14440 VST.floyd.SeparationLogicAsLogic <> x:218 var
R14437:14438 VST.floyd.SeparationLogicAsLogic <> ts:217 var
R14501:14502 VST.msl.seplog <> ::logic:'!!'_x not
R14503:14531 compcert.common.Builtins0 <> val_opt_has_rettype def
R14538:14552 compcert.cfrontend.Ctypes <> rettype_of_type def
R14554:14559 VST.floyd.SeparationLogicAsLogic <> retsig:206 var
R14533:14535 VST.floyd.SeparationLogicAsLogic <> ret:219 var
R14574:14575 VST.msl.seplog <> ::logic:'!!'_x not
R14576:14588 VST.veric.SeparationLogic <> tc_option_val def
R14597:14599 VST.floyd.SeparationLogicAsLogic <> ret:219 var
R14590:14595 VST.floyd.SeparationLogicAsLogic <> retsig:206 var
R14366:14369 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R14358:14360 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14346:14354 compcert.common.AST <> ef_inline def
R14356:14357 VST.floyd.SeparationLogicAsLogic <> ef:204 var
R14361:14365 Coq.Init.Datatypes <> false constr
R14370:14383 VST.veric.SeparationLogic <> withtype_empty def
R14385:14385 VST.floyd.SeparationLogicAsLogic <> A:207 var
R14331:14333 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14298:14307 VST.veric.base <> id_in_list def
R14313:14315 Coq.Lists.List <> map def
R14328:14329 VST.floyd.SeparationLogicAsLogic <> fs:202 var
R14319:14321 Coq.Init.Datatypes <> fst def
R14309:14310 VST.floyd.SeparationLogicAsLogic <> id:203 var
R14334:14338 Coq.Init.Datatypes <> false constr
R14221:14223 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14212:14217 compcert.common.AST <> ef_sig def
R14219:14220 VST.floyd.SeparationLogicAsLogic <> ef:204 var
R14224:14234 compcert.common.AST <> mksignature constr
R14290:14291 VST.floyd.SeparationLogicAsLogic <> cc:214 var
R14266:14280 compcert.cfrontend.Ctypes <> rettype_of_type def
R14282:14287 VST.floyd.SeparationLogicAsLogic <> retsig:206 var
R14237:14255 compcert.cfrontend.Ctypes <> typlist_of_typelist def
R14257:14262 VST.floyd.SeparationLogicAsLogic <> argsig:205 var
R14183:14185 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14176:14182 VST.floyd.SeparationLogicAsLogic <> argsig':212 var
R14186:14198 VST.veric.mpred <> typelist2list def
R14200:14205 VST.floyd.SeparationLogicAsLogic <> argsig:205 var
binder 14931:14935 <> Espec:220
binder 14937:14938 <> CS:221
binder 14940:14942 <> CS':222
R14952:14961 VST.veric.expr <> cspecs_sub def
R14966:14968 VST.floyd.SeparationLogicAsLogic <> CS':222 var
R14963:14964 VST.floyd.SeparationLogicAsLogic <> CS:221 var
binder 14946:14949 <> CSUB:223
binder 14971:14972 <> ge:224
binder 14974:14976 <> ge':225
binder 14993:14993 <> i:226
R14997:15006 VST.veric.tycontext <> sub_option def
R15033:15048 compcert.common.Globalenvs Genv find_symbol def
R15054:15054 VST.floyd.SeparationLogicAsLogic <> i:226 var
R15050:15052 VST.floyd.SeparationLogicAsLogic <> ge':225 var
R15009:15024 compcert.common.Globalenvs Genv find_symbol def
R15029:15029 VST.floyd.SeparationLogicAsLogic <> i:226 var
R15026:15027 VST.floyd.SeparationLogicAsLogic <> ge:224 var
binder 14981:14983 <> Gfs:227
binder 15074:15074 <> b:228
R15077:15086 VST.veric.tycontext <> sub_option def
R15116:15134 compcert.common.Globalenvs Genv find_funct_ptr def
R15140:15140 VST.floyd.SeparationLogicAsLogic <> b:228 var
R15136:15138 VST.floyd.SeparationLogicAsLogic <> ge':225 var
R15089:15107 compcert.common.Globalenvs Genv find_funct_ptr def
R15112:15112 VST.floyd.SeparationLogicAsLogic <> b:228 var
R15109:15110 VST.floyd.SeparationLogicAsLogic <> ge:224 var
binder 15061:15064 <> Gffp:229
binder 15146:15146 <> V:230
binder 15148:15148 <> G:231
binder 15150:15154 <> fdecs:232
binder 15156:15157 <> G1:233
R15164:15173 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R15197:15198 VST.floyd.SeparationLogicAsLogic <> G1:233 var
R15191:15195 VST.floyd.SeparationLogicAsLogic <> fdecs:232 var
R15188:15189 VST.floyd.SeparationLogicAsLogic <> ge:224 var
R15185:15186 VST.floyd.SeparationLogicAsLogic <> CS:221 var
R15183:15183 VST.floyd.SeparationLogicAsLogic <> G:231 var
R15181:15181 VST.floyd.SeparationLogicAsLogic <> V:230 var
R15175:15179 VST.floyd.SeparationLogicAsLogic <> Espec:220 var
binder 15160:15160 <> H:234
R15203:15212 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R15238:15239 VST.floyd.SeparationLogicAsLogic <> G1:233 var
R15232:15236 VST.floyd.SeparationLogicAsLogic <> fdecs:232 var
R15228:15230 VST.floyd.SeparationLogicAsLogic <> ge':225 var
R15224:15226 VST.floyd.SeparationLogicAsLogic <> CS':222 var
R15222:15222 VST.floyd.SeparationLogicAsLogic <> G:231 var
R15220:15220 VST.floyd.SeparationLogicAsLogic <> V:230 var
R15214:15218 VST.floyd.SeparationLogicAsLogic <> Espec:220 var
binder 15339:15343 <> Espec:235
binder 15345:15346 <> ge:236
binder 15348:15349 <> cs:237
binder 15351:15351 <> V:238
binder 15353:15353 <> H:239
binder 15355:15359 <> funs1:240
binder 15361:15365 <> funs2:241
binder 15367:15368 <> G1:242
binder 15370:15371 <> G2:243
R15389:15398 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R15422:15423 VST.floyd.SeparationLogicAsLogic <> G1:242 var
R15416:15420 VST.floyd.SeparationLogicAsLogic <> funs1:240 var
R15413:15414 VST.floyd.SeparationLogicAsLogic <> ge:236 var
R15410:15411 VST.floyd.SeparationLogicAsLogic <> cs:237 var
R15408:15408 VST.floyd.SeparationLogicAsLogic <> H:239 var
R15406:15406 VST.floyd.SeparationLogicAsLogic <> V:238 var
R15400:15404 VST.floyd.SeparationLogicAsLogic <> Espec:235 var
binder 15383:15385 <> SF1:244
R15433:15442 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R15466:15467 VST.floyd.SeparationLogicAsLogic <> G2:243 var
R15460:15464 VST.floyd.SeparationLogicAsLogic <> funs2:241 var
R15457:15458 VST.floyd.SeparationLogicAsLogic <> ge:236 var
R15454:15455 VST.floyd.SeparationLogicAsLogic <> cs:237 var
R15452:15452 VST.floyd.SeparationLogicAsLogic <> H:239 var
R15450:15450 VST.floyd.SeparationLogicAsLogic <> V:238 var
R15444:15448 VST.floyd.SeparationLogicAsLogic <> Espec:235 var
binder 15427:15429 <> SF2:245
R15494:15496 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15482:15487 Coq.Lists.List <> length syndef
R15489:15493 VST.floyd.SeparationLogicAsLogic <> funs1:240 var
R15497:15502 Coq.Lists.List <> length syndef
R15504:15505 VST.floyd.SeparationLogicAsLogic <> G1:242 var
binder 15480:15480 <> L:246
R15514:15523 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R15561:15562 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R15559:15560 VST.floyd.SeparationLogicAsLogic <> G1:242 var
R15563:15564 VST.floyd.SeparationLogicAsLogic <> G2:243 var
R15547:15550 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R15542:15546 VST.floyd.SeparationLogicAsLogic <> funs1:240 var
R15551:15555 VST.floyd.SeparationLogicAsLogic <> funs2:241 var
R15538:15539 VST.floyd.SeparationLogicAsLogic <> ge:236 var
R15535:15536 VST.floyd.SeparationLogicAsLogic <> cs:237 var
R15533:15533 VST.floyd.SeparationLogicAsLogic <> H:239 var
R15531:15531 VST.floyd.SeparationLogicAsLogic <> V:238 var
R15525:15529 VST.floyd.SeparationLogicAsLogic <> Espec:235 var
binder 15619:15623 <> Espec:247
binder 15625:15626 <> ge:248
binder 15628:15629 <> cs:249
binder 15631:15631 <> V:250
binder 15633:15634 <> V':251
binder 15636:15636 <> F:252
binder 15638:15639 <> F':253
R15656:15668 VST.veric.expr <> tycontext_sub def
R15694:15709 VST.veric.tycontext <> nofunc_tycontext def
R15713:15714 VST.floyd.SeparationLogicAsLogic <> F':253 var
R15711:15711 VST.floyd.SeparationLogicAsLogic <> V:250 var
R15671:15686 VST.veric.tycontext <> nofunc_tycontext def
R15690:15690 VST.floyd.SeparationLogicAsLogic <> F:252 var
R15688:15688 VST.floyd.SeparationLogicAsLogic <> V:250 var
binder 15651:15653 <> SUB:254
binder 15739:15740 <> id:255
R15743:15752 VST.veric.tycontext <> sub_option def
R15782:15782 compcert.lib.Maps <> :::x_'!'_x not
R15805:15808 compcert.lib.Maps <> :::x_'!'_x not
R15809:15810 VST.floyd.SeparationLogicAsLogic <> id:255 var
R15783:15798 VST.veric.seplog <> make_tycontext_g def
R15803:15804 VST.floyd.SeparationLogicAsLogic <> F':253 var
R15800:15801 VST.floyd.SeparationLogicAsLogic <> V':251 var
R15754:15754 compcert.lib.Maps <> :::x_'!'_x not
R15775:15778 compcert.lib.Maps <> :::x_'!'_x not
R15779:15780 VST.floyd.SeparationLogicAsLogic <> id:255 var
R15755:15770 VST.veric.seplog <> make_tycontext_g def
R15774:15774 VST.floyd.SeparationLogicAsLogic <> F:252 var
R15772:15772 VST.floyd.SeparationLogicAsLogic <> V:250 var
binder 15728:15729 <> HV:256
binder 15823:15826 <> funs:257
binder 15828:15828 <> G:258
R15836:15845 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R15868:15868 VST.floyd.SeparationLogicAsLogic <> G:258 var
R15863:15866 VST.floyd.SeparationLogicAsLogic <> funs:257 var
R15860:15861 VST.floyd.SeparationLogicAsLogic <> ge:248 var
R15857:15858 VST.floyd.SeparationLogicAsLogic <> cs:249 var
R15855:15855 VST.floyd.SeparationLogicAsLogic <> F:252 var
R15853:15853 VST.floyd.SeparationLogicAsLogic <> V:250 var
R15847:15851 VST.floyd.SeparationLogicAsLogic <> Espec:247 var
binder 15831:15832 <> SF:259
R15874:15883 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R15908:15908 VST.floyd.SeparationLogicAsLogic <> G:258 var
R15903:15906 VST.floyd.SeparationLogicAsLogic <> funs:257 var
R15900:15901 VST.floyd.SeparationLogicAsLogic <> ge:248 var
R15897:15898 VST.floyd.SeparationLogicAsLogic <> cs:249 var
R15894:15895 VST.floyd.SeparationLogicAsLogic <> F':253 var
R15891:15892 VST.floyd.SeparationLogicAsLogic <> V':251 var
R15885:15889 VST.floyd.SeparationLogicAsLogic <> Espec:247 var
binder 16011:16015 <> Espec:260
binder 16017:16018 <> cs:261
binder 16020:16021 <> ge:262
binder 16023:16024 <> V1:263
binder 16026:16027 <> H1:264
binder 16029:16030 <> V2:265
binder 16032:16033 <> H2:266
binder 16035:16035 <> V:267
binder 16037:16041 <> funs1:268
binder 16043:16047 <> funs2:269
binder 16049:16050 <> G1:270
binder 16052:16053 <> G2:271
binder 16055:16055 <> H:272
R16067:16076 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R16102:16103 VST.floyd.SeparationLogicAsLogic <> G1:270 var
R16096:16100 VST.floyd.SeparationLogicAsLogic <> funs1:268 var
R16093:16094 VST.floyd.SeparationLogicAsLogic <> ge:262 var
R16090:16091 VST.floyd.SeparationLogicAsLogic <> cs:261 var
R16087:16088 VST.floyd.SeparationLogicAsLogic <> H1:264 var
R16084:16085 VST.floyd.SeparationLogicAsLogic <> V1:263 var
R16078:16082 VST.floyd.SeparationLogicAsLogic <> Espec:260 var
binder 16061:16063 <> SF1:273
R16113:16122 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R16148:16149 VST.floyd.SeparationLogicAsLogic <> G2:271 var
R16142:16146 VST.floyd.SeparationLogicAsLogic <> funs2:269 var
R16139:16140 VST.floyd.SeparationLogicAsLogic <> ge:262 var
R16136:16137 VST.floyd.SeparationLogicAsLogic <> cs:261 var
R16133:16134 VST.floyd.SeparationLogicAsLogic <> H2:266 var
R16130:16131 VST.floyd.SeparationLogicAsLogic <> V2:265 var
R16124:16128 VST.floyd.SeparationLogicAsLogic <> Espec:260 var
binder 16107:16109 <> SF2:274
binder 16167:16167 <> i:275
R16170:16179 VST.veric.tycontext <> sub_option def
R16213:16213 compcert.lib.Maps <> :::x_'!'_x not
R16235:16238 compcert.lib.Maps <> :::x_'!'_x not
R16239:16239 VST.floyd.SeparationLogicAsLogic <> i:275 var
R16214:16229 VST.veric.seplog <> make_tycontext_g def
R16234:16234 VST.floyd.SeparationLogicAsLogic <> H:272 var
R16231:16232 VST.floyd.SeparationLogicAsLogic <> V1:263 var
R16182:16182 compcert.lib.Maps <> :::x_'!'_x not
R16205:16208 compcert.lib.Maps <> :::x_'!'_x not
R16209:16209 VST.floyd.SeparationLogicAsLogic <> i:275 var
R16183:16198 VST.veric.seplog <> make_tycontext_g def
R16203:16204 VST.floyd.SeparationLogicAsLogic <> H1:264 var
R16200:16201 VST.floyd.SeparationLogicAsLogic <> V1:263 var
binder 16156:16157 <> K1:276
binder 16257:16257 <> i:277
R16260:16270 VST.veric.expr <> subsumespec def
R16301:16301 compcert.lib.Maps <> :::x_'!'_x not
R16320:16323 compcert.lib.Maps <> :::x_'!'_x not
R16324:16324 VST.floyd.SeparationLogicAsLogic <> i:277 var
R16302:16317 VST.veric.mpred <> make_tycontext_s def
R16319:16319 VST.floyd.SeparationLogicAsLogic <> H:272 var
R16273:16273 compcert.lib.Maps <> :::x_'!'_x not
R16293:16296 compcert.lib.Maps <> :::x_'!'_x not
R16297:16297 VST.floyd.SeparationLogicAsLogic <> i:277 var
R16274:16289 VST.veric.mpred <> make_tycontext_s def
R16291:16292 VST.floyd.SeparationLogicAsLogic <> H1:264 var
binder 16246:16247 <> K2:278
binder 16342:16342 <> i:279
R16345:16354 VST.veric.tycontext <> sub_option def
R16387:16387 compcert.lib.Maps <> :::x_'!'_x not
R16408:16411 compcert.lib.Maps <> :::x_'!'_x not
R16412:16412 VST.floyd.SeparationLogicAsLogic <> i:279 var
R16388:16403 VST.veric.seplog <> make_tycontext_g def
R16407:16407 VST.floyd.SeparationLogicAsLogic <> H:272 var
R16405:16405 VST.floyd.SeparationLogicAsLogic <> V:267 var
R16357:16357 compcert.lib.Maps <> :::x_'!'_x not
R16379:16382 compcert.lib.Maps <> :::x_'!'_x not
R16383:16383 VST.floyd.SeparationLogicAsLogic <> i:279 var
R16358:16373 VST.veric.seplog <> make_tycontext_g def
R16378:16378 VST.floyd.SeparationLogicAsLogic <> H:272 var
R16375:16376 VST.floyd.SeparationLogicAsLogic <> V1:263 var
binder 16331:16332 <> K3:280
binder 16431:16431 <> i:281
R16434:16443 VST.veric.tycontext <> sub_option def
R16477:16477 compcert.lib.Maps <> :::x_'!'_x not
R16499:16502 compcert.lib.Maps <> :::x_'!'_x not
R16503:16503 VST.floyd.SeparationLogicAsLogic <> i:281 var
R16478:16493 VST.veric.seplog <> make_tycontext_g def
R16498:16498 VST.floyd.SeparationLogicAsLogic <> H:272 var
R16495:16496 VST.floyd.SeparationLogicAsLogic <> V2:265 var
R16446:16446 compcert.lib.Maps <> :::x_'!'_x not
R16469:16472 compcert.lib.Maps <> :::x_'!'_x not
R16473:16473 VST.floyd.SeparationLogicAsLogic <> i:281 var
R16447:16462 VST.veric.seplog <> make_tycontext_g def
R16467:16468 VST.floyd.SeparationLogicAsLogic <> H2:266 var
R16464:16465 VST.floyd.SeparationLogicAsLogic <> V2:265 var
binder 16420:16421 <> N1:282
binder 16521:16521 <> i:283
R16524:16534 VST.veric.expr <> subsumespec def
R16565:16565 compcert.lib.Maps <> :::x_'!'_x not
R16584:16587 compcert.lib.Maps <> :::x_'!'_x not
R16588:16588 VST.floyd.SeparationLogicAsLogic <> i:283 var
R16566:16581 VST.veric.mpred <> make_tycontext_s def
R16583:16583 VST.floyd.SeparationLogicAsLogic <> H:272 var
R16537:16537 compcert.lib.Maps <> :::x_'!'_x not
R16557:16560 compcert.lib.Maps <> :::x_'!'_x not
R16561:16561 VST.floyd.SeparationLogicAsLogic <> i:283 var
R16538:16553 VST.veric.mpred <> make_tycontext_s def
R16555:16556 VST.floyd.SeparationLogicAsLogic <> H2:266 var
binder 16510:16511 <> N2:284
binder 16606:16606 <> i:285
R16609:16618 VST.veric.tycontext <> sub_option def
R16651:16651 compcert.lib.Maps <> :::x_'!'_x not
R16672:16675 compcert.lib.Maps <> :::x_'!'_x not
R16676:16676 VST.floyd.SeparationLogicAsLogic <> i:285 var
R16652:16667 VST.veric.seplog <> make_tycontext_g def
R16671:16671 VST.floyd.SeparationLogicAsLogic <> H:272 var
R16669:16669 VST.floyd.SeparationLogicAsLogic <> V:267 var
R16621:16621 compcert.lib.Maps <> :::x_'!'_x not
R16643:16646 compcert.lib.Maps <> :::x_'!'_x not
R16647:16647 VST.floyd.SeparationLogicAsLogic <> i:285 var
R16622:16637 VST.veric.seplog <> make_tycontext_g def
R16642:16642 VST.floyd.SeparationLogicAsLogic <> H:272 var
R16639:16640 VST.floyd.SeparationLogicAsLogic <> V2:265 var
binder 16595:16596 <> N3:286
R16684:16693 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R16731:16732 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R16729:16730 VST.floyd.SeparationLogicAsLogic <> G1:270 var
R16733:16734 VST.floyd.SeparationLogicAsLogic <> G2:271 var
R16717:16720 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R16712:16716 VST.floyd.SeparationLogicAsLogic <> funs1:268 var
R16721:16725 VST.floyd.SeparationLogicAsLogic <> funs2:269 var
R16708:16709 VST.floyd.SeparationLogicAsLogic <> ge:262 var
R16705:16706 VST.floyd.SeparationLogicAsLogic <> cs:261 var
R16703:16703 VST.floyd.SeparationLogicAsLogic <> H:272 var
R16701:16701 VST.floyd.SeparationLogicAsLogic <> V:267 var
R16695:16699 VST.floyd.SeparationLogicAsLogic <> Espec:260 var
binder 16771:16775 <> Espec:287
binder 16777:16778 <> cs:288
binder 16780:16781 <> ge:289
binder 16783:16783 <> H:290
binder 16785:16785 <> V:291
binder 16787:16787 <> n:292
binder 16789:16792 <> funs:293
binder 16794:16794 <> G:294
R16803:16812 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R16835:16835 VST.floyd.SeparationLogicAsLogic <> G:294 var
R16830:16833 VST.floyd.SeparationLogicAsLogic <> funs:293 var
R16827:16828 VST.floyd.SeparationLogicAsLogic <> ge:289 var
R16824:16825 VST.floyd.SeparationLogicAsLogic <> cs:288 var
R16822:16822 VST.floyd.SeparationLogicAsLogic <> H:290 var
R16820:16820 VST.floyd.SeparationLogicAsLogic <> V:291 var
R16814:16818 VST.floyd.SeparationLogicAsLogic <> Espec:287 var
binder 16798:16799 <> SF:295
R16844:16853 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R16888:16893 Coq.Lists.List <> firstn def
R16897:16897 VST.floyd.SeparationLogicAsLogic <> G:294 var
R16895:16895 VST.floyd.SeparationLogicAsLogic <> n:292 var
R16872:16877 Coq.Lists.List <> firstn def
R16881:16884 VST.floyd.SeparationLogicAsLogic <> funs:293 var
R16879:16879 VST.floyd.SeparationLogicAsLogic <> n:292 var
R16868:16869 VST.floyd.SeparationLogicAsLogic <> ge:289 var
R16865:16866 VST.floyd.SeparationLogicAsLogic <> cs:288 var
R16863:16863 VST.floyd.SeparationLogicAsLogic <> H:290 var
R16861:16861 VST.floyd.SeparationLogicAsLogic <> V:291 var
R16855:16859 VST.floyd.SeparationLogicAsLogic <> Espec:287 var
binder 16947:16951 <> Espec:296
binder 16953:16954 <> cs:297
binder 16956:16957 <> ge:298
binder 16959:16959 <> H:299
binder 16961:16961 <> V:300
binder 16963:16966 <> funs:301
binder 16968:16968 <> G:302
R16975:16986 compcert.lib.Coqlib <> list_norepet ind
R16989:16991 Coq.Lists.List <> map def
R16997:17000 VST.floyd.SeparationLogicAsLogic <> funs:301 var
R16993:16995 Coq.Init.Datatypes <> fst def
binder 16972:16973 <> HV:303
R17019:17028 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R17051:17051 VST.floyd.SeparationLogicAsLogic <> G:302 var
R17046:17049 VST.floyd.SeparationLogicAsLogic <> funs:301 var
R17043:17044 VST.floyd.SeparationLogicAsLogic <> ge:298 var
R17040:17041 VST.floyd.SeparationLogicAsLogic <> cs:297 var
R17038:17038 VST.floyd.SeparationLogicAsLogic <> H:299 var
R17036:17036 VST.floyd.SeparationLogicAsLogic <> V:300 var
R17030:17034 VST.floyd.SeparationLogicAsLogic <> Espec:296 var
binder 17014:17015 <> SF:304
binder 17054:17054 <> n:305
R17062:17071 VST.floyd.SeparationLogicAsLogic <> semax_func:172 ind
R17105:17109 Coq.Lists.List <> skipn def
R17113:17113 VST.floyd.SeparationLogicAsLogic <> G:302 var
R17111:17111 VST.floyd.SeparationLogicAsLogic <> n:305 var
R17090:17094 Coq.Lists.List <> skipn def
R17098:17101 VST.floyd.SeparationLogicAsLogic <> funs:301 var
R17096:17096 VST.floyd.SeparationLogicAsLogic <> n:305 var
R17086:17087 VST.floyd.SeparationLogicAsLogic <> ge:298 var
R17083:17084 VST.floyd.SeparationLogicAsLogic <> cs:297 var
R17081:17081 VST.floyd.SeparationLogicAsLogic <> H:299 var
R17079:17079 VST.floyd.SeparationLogicAsLogic <> V:300 var
R17073:17077 VST.floyd.SeparationLogicAsLogic <> Espec:296 var
R17122:17128 VST.floyd.SeparationLogicAsLogic AuxDefs.AuxDefs <> sec
R17136:17142 VST.floyd.SeparationLogicAsLogic AuxDefs <> mod
R17179:17211 VST.veric.SeparationLogic CLIGHT_SEPARATION_HOARE_LOGIC_DEF <> mod
R17236:17272 VST.veric.SeparationLogic MINIMUM_CLIGHT_SEPARATION_HOARE_LOGIC <> mod
R17298:17300 VST.floyd.SeparationLogicAsLogic Def <> modtype
mod 17153:17164 <> DeepEmbedded
R17331:17363 VST.veric.SeparationLogic CLIGHT_SEPARATION_HOARE_LOGIC_DEF <> mod
mod 17312:17326 <> DeepEmbedded.DeepEmbeddedDef
def 17378:17382 DeepEmbedded.DeepEmbeddedDef semax
R17388:17400 VST.floyd.SeparationLogicAsLogic AuxDefs semax ind
def 17415:17424 DeepEmbedded.DeepEmbeddedDef semax_func
R17430:17447 VST.floyd.SeparationLogicAsLogic AuxDefs semax_func ind
R17451:17468 VST.floyd.SeparationLogicAsLogic Def semax_external defax
def 17484:17497 DeepEmbedded.DeepEmbeddedDef semax_external
R17503:17520 VST.floyd.SeparationLogicAsLogic Def semax_external defax
R17528:17542 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> mod
R17573:17583 VST.veric.SeparationLogic DerivedDefs <> modtype
R17586:17600 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
mod 17553:17568 <> DeepEmbedded.DeepEmbeddedDefs
R17663:17712 VST.floyd.SeparationLogicFacts CLIGHT_SEPARATION_HOARE_LOGIC_COMPLETE_CONSEQUENCE <> mod
R17738:17752 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
mod 17654:17660 <> DeepEmbedded.CConseq
R17775:17789 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
mod 17763:17770 <> DeepEmbedded.CConseq.CSHL_Def
def 17804:17815 DeepEmbedded.CConseq semax_conseq
R17821:17840 VST.floyd.SeparationLogicAsLogic AuxDefs semax_conseq constr
R17848:17854 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq <> mod
R17881:17895 VST.floyd.SeparationLogicFacts GenCConseqFacts <> modtype
R17898:17912 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R17916:17922 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq <> modtype
mod 17865:17876 <> DeepEmbedded.CConseqFacts
R17944:17952 VST.floyd.SeparationLogicFacts GenConseq <> modtype
R17955:17969 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R17973:17979 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq <> modtype
mod 17934:17939 <> DeepEmbedded.Conseq
R18006:18019 VST.floyd.SeparationLogicFacts GenConseqFacts <> modtype
R18022:18036 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R18040:18045 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Conseq <> modtype
mod 17991:18001 <> DeepEmbedded.ConseqFacts
prf 18105:18118 DeepEmbedded semax_skip_inv
R18133:18141 VST.veric.mpred <> compspecs class
binder 18129:18130 <> CS:306
R18152:18161 VST.veric.juicy_extspec <> OracleKind class
binder 18145:18149 <> Espec:307
binder 18164:18168 <> Delta:308
binder 18170:18170 <> P:309
binder 18172:18172 <> R:310
R18210:18217 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18270:18274 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R18242:18246 VST.msl.seplog <> ::logic:x_'&&'_x not
R18269:18269 VST.msl.seplog <> ::logic:x_'&&'_x not
R18218:18222 VST.veric.SeparationLogic <> local def
R18225:18234 VST.veric.SeparationLogic <> tc_environ def
R18236:18240 VST.floyd.SeparationLogicAsLogic <> Delta:308 var
R18264:18267 VST.msl.seplog <> ::logic:x_'&&'_x not
R18247:18257 VST.veric.SeparationLogic <> allp_fun_id def
R18259:18263 VST.floyd.SeparationLogicAsLogic <> Delta:308 var
R18268:18268 VST.floyd.SeparationLogicAsLogic <> P:309 var
R18275:18279 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R18285:18288 VST.msl.seplog <> ::logic:x_'||'_x not
R18280:18282 VST.msl.seplog <> ::logic:'|>'_x not
R18283:18284 VST.msl.seplog <> FF meth
R18289:18297 VST.veric.tycontext <> RA_normal proj
R18299:18299 VST.floyd.SeparationLogicAsLogic <> R:310 var
R18180:18184 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R18209:18209 VST.floyd.SeparationLogicAsLogic <> R:310 var
R18203:18207 compcert.cfrontend.Clight <> Sskip constr
R18201:18201 VST.floyd.SeparationLogicAsLogic <> P:309 var
R18195:18199 VST.floyd.SeparationLogicAsLogic <> Delta:308 var
R18189:18193 VST.floyd.SeparationLogicAsLogic <> Espec:307 var
R18186:18187 VST.floyd.SeparationLogicAsLogic <> CS:306 var
R18330:18334 compcert.cfrontend.Clight <> Sskip constr
R18330:18334 compcert.cfrontend.Clight <> Sskip constr
R18394:18410 VST.floyd.assert_lemmas <> derives_full_refl thm
R18394:18410 VST.floyd.assert_lemmas <> derives_full_refl thm
prf 18479:18493 DeepEmbedded semax_break_inv
R18508:18516 VST.veric.mpred <> compspecs class
binder 18504:18505 <> CS:311
R18527:18536 VST.veric.juicy_extspec <> OracleKind class
binder 18520:18524 <> Espec:312
binder 18539:18543 <> Delta:313
binder 18545:18545 <> P:314
binder 18547:18547 <> R:315
R18586:18593 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18646:18650 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R18618:18622 VST.msl.seplog <> ::logic:x_'&&'_x not
R18645:18645 VST.msl.seplog <> ::logic:x_'&&'_x not
R18594:18598 VST.veric.SeparationLogic <> local def
R18601:18610 VST.veric.SeparationLogic <> tc_environ def
R18612:18616 VST.floyd.SeparationLogicAsLogic <> Delta:313 var
R18640:18643 VST.msl.seplog <> ::logic:x_'&&'_x not
R18623:18633 VST.veric.SeparationLogic <> allp_fun_id def
R18635:18639 VST.floyd.SeparationLogicAsLogic <> Delta:313 var
R18644:18644 VST.floyd.SeparationLogicAsLogic <> P:314 var
R18651:18655 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R18661:18664 VST.msl.seplog <> ::logic:x_'||'_x not
R18656:18658 VST.msl.seplog <> ::logic:'|>'_x not
R18659:18660 VST.msl.seplog <> FF meth
R18665:18672 VST.veric.tycontext <> RA_break proj
R18674:18674 VST.floyd.SeparationLogicAsLogic <> R:315 var
R18555:18559 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R18585:18585 VST.floyd.SeparationLogicAsLogic <> R:315 var
R18578:18583 compcert.cfrontend.Clight <> Sbreak constr
R18576:18576 VST.floyd.SeparationLogicAsLogic <> P:314 var
R18570:18574 VST.floyd.SeparationLogicAsLogic <> Delta:313 var
R18564:18568 VST.floyd.SeparationLogicAsLogic <> Espec:312 var
R18561:18562 VST.floyd.SeparationLogicAsLogic <> CS:311 var
R18705:18710 compcert.cfrontend.Clight <> Sbreak constr
R18705:18710 compcert.cfrontend.Clight <> Sbreak constr
R18770:18786 VST.floyd.assert_lemmas <> derives_full_refl thm
R18770:18786 VST.floyd.assert_lemmas <> derives_full_refl thm
prf 18855:18872 DeepEmbedded semax_continue_inv
R18887:18895 VST.veric.mpred <> compspecs class
binder 18883:18884 <> CS:316
R18906:18915 VST.veric.juicy_extspec <> OracleKind class
binder 18899:18903 <> Espec:317
binder 18918:18922 <> Delta:318
binder 18924:18924 <> P:319
binder 18926:18926 <> R:320
R18968:18975 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19028:19032 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R19000:19004 VST.msl.seplog <> ::logic:x_'&&'_x not
R19027:19027 VST.msl.seplog <> ::logic:x_'&&'_x not
R18976:18980 VST.veric.SeparationLogic <> local def
R18983:18992 VST.veric.SeparationLogic <> tc_environ def
R18994:18998 VST.floyd.SeparationLogicAsLogic <> Delta:318 var
R19022:19025 VST.msl.seplog <> ::logic:x_'&&'_x not
R19005:19015 VST.veric.SeparationLogic <> allp_fun_id def
R19017:19021 VST.floyd.SeparationLogicAsLogic <> Delta:318 var
R19026:19026 VST.floyd.SeparationLogicAsLogic <> P:319 var
R19033:19037 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R19043:19046 VST.msl.seplog <> ::logic:x_'||'_x not
R19038:19040 VST.msl.seplog <> ::logic:'|>'_x not
R19041:19042 VST.msl.seplog <> FF meth
R19047:19057 VST.veric.tycontext <> RA_continue proj
R19059:19059 VST.floyd.SeparationLogicAsLogic <> R:320 var
R18934:18938 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R18967:18967 VST.floyd.SeparationLogicAsLogic <> R:320 var
R18957:18965 compcert.cfrontend.Clight <> Scontinue constr
R18955:18955 VST.floyd.SeparationLogicAsLogic <> P:319 var
R18949:18953 VST.floyd.SeparationLogicAsLogic <> Delta:318 var
R18943:18947 VST.floyd.SeparationLogicAsLogic <> Espec:317 var
R18940:18941 VST.floyd.SeparationLogicAsLogic <> CS:316 var
R19090:19098 compcert.cfrontend.Clight <> Scontinue constr
R19090:19098 compcert.cfrontend.Clight <> Scontinue constr
R19158:19174 VST.floyd.assert_lemmas <> derives_full_refl thm
R19158:19174 VST.floyd.assert_lemmas <> derives_full_refl thm
prf 19243:19258 DeepEmbedded semax_return_inv
R19273:19281 VST.veric.mpred <> compspecs class
binder 19269:19270 <> CS:321
R19292:19301 VST.veric.juicy_extspec <> OracleKind class
binder 19285:19289 <> Espec:322
binder 19304:19308 <> Delta:323
binder 19310:19310 <> P:324
binder 19312:19314 <> ret:325
binder 19316:19316 <> R:326
R19360:19365 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19418:19422 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R19390:19394 VST.msl.seplog <> ::logic:x_'&&'_x not
R19417:19417 VST.msl.seplog <> ::logic:x_'&&'_x not
R19366:19370 VST.veric.SeparationLogic <> local def
R19373:19382 VST.veric.SeparationLogic <> tc_environ def
R19384:19388 VST.floyd.SeparationLogicAsLogic <> Delta:323 var
R19412:19415 VST.msl.seplog <> ::logic:x_'&&'_x not
R19395:19405 VST.veric.SeparationLogic <> allp_fun_id def
R19407:19411 VST.floyd.SeparationLogicAsLogic <> Delta:323 var
R19416:19416 VST.floyd.SeparationLogicAsLogic <> P:324 var
R19423:19427 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R19433:19437 VST.msl.seplog <> ::logic:x_'||'_x not
R19592:19592 VST.msl.seplog <> ::logic:x_'||'_x not
R19428:19430 VST.msl.seplog <> ::logic:'|>'_x not
R19431:19432 VST.msl.seplog <> FF meth
R19438:19438 VST.msl.seplog <> ::logic:x_'&&'_x not
R19476:19480 VST.msl.seplog <> ::logic:x_'&&'_x not
R19439:19448 VST.veric.SeparationLogic <> tc_expropt def
R19461:19468 VST.veric.seplog <> ret_type def
R19470:19474 VST.floyd.SeparationLogicAsLogic <> Delta:323 var
R19456:19458 VST.floyd.SeparationLogicAsLogic <> ret:325 var
R19450:19454 VST.floyd.SeparationLogicAsLogic <> Delta:323 var
R19481:19482 VST.veric.lift LiftNotation :::'`('_x_')' not
R19541:19591 VST.veric.lift LiftNotation :::'`('_x_')' not
R19521:19524 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19532:19535 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19536:19540 VST.veric.mpred <> mpred def
R19525:19531 VST.veric.mpred <> environ ind
R19511:19516 Coq.Init.Datatypes <> option ind
R19518:19520 compcert.common.Values <> val ind
R19483:19487 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R19493:19496 VST.msl.seplog <> ::logic:x_'||'_x not
R19488:19490 VST.msl.seplog <> ::logic:'|>'_x not
R19491:19492 VST.msl.seplog <> FF meth
R19497:19505 VST.veric.tycontext <> RA_return proj
R19507:19507 VST.floyd.SeparationLogicAsLogic <> R:326 var
R19581:19582 Coq.Init.Datatypes <> id def
R19584:19590 VST.veric.mpred <> environ ind
R19544:19555 VST.veric.SeparationLogic <> cast_expropt def
R19562:19569 VST.veric.seplog <> ret_type def
R19571:19575 VST.floyd.SeparationLogicAsLogic <> Delta:323 var
R19557:19559 VST.floyd.SeparationLogicAsLogic <> ret:325 var
R19322:19326 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R19359:19359 VST.floyd.SeparationLogicAsLogic <> R:326 var
R19346:19352 compcert.cfrontend.Clight <> Sreturn constr
R19354:19356 VST.floyd.SeparationLogicAsLogic <> ret:325 var
R19343:19343 VST.floyd.SeparationLogicAsLogic <> P:324 var
R19337:19341 VST.floyd.SeparationLogicAsLogic <> Delta:323 var
R19331:19335 VST.floyd.SeparationLogicAsLogic <> Espec:322 var
R19328:19329 VST.floyd.SeparationLogicAsLogic <> CS:321 var
R19624:19630 compcert.cfrontend.Clight <> Sreturn constr
R19624:19630 compcert.cfrontend.Clight <> Sreturn constr
R19726:19736 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R19746:19756 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R19726:19736 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R19746:19756 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R19836:19848 VST.msl.seplog <> derives_trans meth
R19860:19869 VST.msl.ghost_seplog <> bupd_intro meth
R19836:19848 VST.msl.seplog <> derives_trans meth
R19860:19869 VST.msl.ghost_seplog <> bupd_intro meth
R19883:19892 VST.msl.seplog <> orp_right2 meth
R19883:19892 VST.msl.seplog <> orp_right2 meth
R19998:20023 VST.floyd.assert_lemmas <> derives_bupd_derives_bupd0 thm
R19998:20023 VST.floyd.assert_lemmas <> derives_bupd_derives_bupd0 thm
R20049:20060 VST.floyd.assert_lemmas <> andp_ENTAILL thm
R20049:20060 VST.floyd.assert_lemmas <> andp_ENTAILL thm
R20134:20145 VST.veric.SeparationLogic <> cast_expropt def
R20152:20159 VST.veric.seplog <> ret_type def
R20134:20145 VST.veric.SeparationLogic <> cast_expropt def
R20152:20159 VST.veric.seplog <> ret_type def
R20290:20294 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R20232:20236 VST.msl.seplog <> ::logic:x_'&&'_x not
R20289:20289 VST.msl.seplog <> ::logic:x_'&&'_x not
R20208:20212 VST.veric.SeparationLogic <> local def
R20215:20224 VST.veric.SeparationLogic <> tc_environ def
R20254:20258 VST.msl.seplog <> ::logic:x_'&&'_x not
R20288:20288 VST.msl.seplog <> ::logic:x_'&&'_x not
R20237:20247 VST.veric.SeparationLogic <> allp_fun_id def
R20259:20263 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R20269:20272 VST.msl.seplog <> ::logic:x_'||'_x not
R20264:20266 VST.msl.seplog <> ::logic:'|>'_x not
R20267:20268 VST.msl.seplog <> FF meth
R20273:20281 VST.veric.tycontext <> RA_return proj
R20295:20299 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R20305:20308 VST.msl.seplog <> ::logic:x_'||'_x not
R20300:20302 VST.msl.seplog <> ::logic:'|>'_x not
R20303:20304 VST.msl.seplog <> FF meth
R20309:20317 VST.veric.tycontext <> RA_return proj
R20290:20294 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R20232:20236 VST.msl.seplog <> ::logic:x_'&&'_x not
R20289:20289 VST.msl.seplog <> ::logic:x_'&&'_x not
R20208:20212 VST.veric.SeparationLogic <> local def
R20215:20224 VST.veric.SeparationLogic <> tc_environ def
R20254:20258 VST.msl.seplog <> ::logic:x_'&&'_x not
R20288:20288 VST.msl.seplog <> ::logic:x_'&&'_x not
R20237:20247 VST.veric.SeparationLogic <> allp_fun_id def
R20259:20263 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R20269:20272 VST.msl.seplog <> ::logic:x_'||'_x not
R20264:20266 VST.msl.seplog <> ::logic:'|>'_x not
R20267:20268 VST.msl.seplog <> FF meth
R20273:20281 VST.veric.tycontext <> RA_return proj
R20295:20299 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R20305:20308 VST.msl.seplog <> ::logic:x_'||'_x not
R20300:20302 VST.msl.seplog <> ::logic:'|>'_x not
R20303:20304 VST.msl.seplog <> FF meth
R20309:20317 VST.veric.tycontext <> RA_return proj
R20336:20358 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R20336:20358 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
prf 20377:20389 DeepEmbedded semax_seq_inv
R20404:20412 VST.veric.mpred <> compspecs class
binder 20400:20401 <> CS:327
R20423:20432 VST.veric.juicy_extspec <> OracleKind class
binder 20416:20420 <> Espec:328
binder 20435:20439 <> Delta:329
binder 20441:20441 <> P:330
binder 20443:20443 <> R:331
binder 20445:20445 <> h:332
binder 20447:20447 <> t:333
R20495:20502 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20503:20509 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R20511:20512 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 20510:20510 <> Q:334
R20557:20574 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R20514:20518 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R20540:20551 VST.veric.SeparationLogic <> overridePost def
R20555:20555 VST.floyd.SeparationLogicAsLogic <> R:331 var
R20553:20553 VST.floyd.SeparationLogicAsLogic <> Q:334 var
R20537:20537 VST.floyd.SeparationLogicAsLogic <> h:332 var
R20535:20535 VST.floyd.SeparationLogicAsLogic <> P:330 var
R20529:20533 VST.floyd.SeparationLogicAsLogic <> Delta:329 var
R20523:20527 VST.floyd.SeparationLogicAsLogic <> Espec:328 var
R20520:20521 VST.floyd.SeparationLogicAsLogic <> CS:327 var
R20576:20580 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R20601:20601 VST.floyd.SeparationLogicAsLogic <> R:331 var
R20599:20599 VST.floyd.SeparationLogicAsLogic <> t:333 var
R20597:20597 VST.floyd.SeparationLogicAsLogic <> Q:334 var
R20591:20595 VST.floyd.SeparationLogicAsLogic <> Delta:329 var
R20585:20589 VST.floyd.SeparationLogicAsLogic <> Espec:328 var
R20582:20583 VST.floyd.SeparationLogicAsLogic <> CS:327 var
R20455:20459 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R20494:20494 VST.floyd.SeparationLogicAsLogic <> R:331 var
R20479:20487 compcert.cfrontend.Clight <> Ssequence constr
R20491:20491 VST.floyd.SeparationLogicAsLogic <> t:333 var
R20489:20489 VST.floyd.SeparationLogicAsLogic <> h:332 var
R20476:20476 VST.floyd.SeparationLogicAsLogic <> P:330 var
R20470:20474 VST.floyd.SeparationLogicAsLogic <> Delta:329 var
R20464:20468 VST.floyd.SeparationLogicAsLogic <> Espec:328 var
R20461:20462 VST.floyd.SeparationLogicAsLogic <> CS:327 var
R20633:20641 compcert.cfrontend.Clight <> Ssequence constr
R20633:20641 compcert.cfrontend.Clight <> Ssequence constr
R20764:20770 Coq.Init.Logic <> eq_refl constr
R20764:20770 Coq.Init.Logic <> eq_refl constr
R20856:20875 VST.floyd.SeparationLogicAsLogic AuxDefs semax_conseq constr
R20883:20894 VST.veric.SeparationLogic <> overridePost def
R20856:20875 VST.floyd.SeparationLogicAsLogic AuxDefs semax_conseq constr
R20883:20894 VST.veric.SeparationLogic <> overridePost def
R20963:20979 VST.floyd.assert_lemmas <> derives_full_refl thm
R20963:20979 VST.floyd.assert_lemmas <> derives_full_refl thm
R21085:21096 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R21085:21096 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R21118:21134 VST.floyd.assert_lemmas <> derives_full_refl thm
R21118:21134 VST.floyd.assert_lemmas <> derives_full_refl thm
prf 21149:21162 DeepEmbedded semax_seq_inv'
R21177:21185 VST.veric.mpred <> compspecs class
binder 21173:21174 <> CS:335
R21196:21205 VST.veric.juicy_extspec <> OracleKind class
binder 21189:21193 <> Espec:336
binder 21208:21212 <> Delta:337
binder 21214:21214 <> P:338
binder 21216:21216 <> R:339
binder 21218:21218 <> h:340
binder 21220:21220 <> t:341
R21268:21275 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21277:21281 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R21303:21314 VST.veric.SeparationLogic <> overridePost def
R21380:21380 VST.floyd.SeparationLogicAsLogic <> R:339 var
R21317:21319 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R21339:21340 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R21330:21333 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21334:21338 VST.veric.mpred <> mpred def
R21323:21329 VST.veric.mpred <> environ ind
binder 21320:21320 <> Q:342
R21373:21376 VST.msl.seplog <> ::logic:x_'&&'_x not
R21341:21344 VST.msl.seplog <> ::logic:'!!'_x not
R21372:21372 VST.msl.seplog <> ::logic:'!!'_x not
R21346:21350 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R21371:21371 VST.floyd.SeparationLogicAsLogic <> R:339 var
R21369:21369 VST.floyd.SeparationLogicAsLogic <> t:341 var
R21367:21367 VST.floyd.SeparationLogicAsLogic <> Q:342 var
R21361:21365 VST.floyd.SeparationLogicAsLogic <> Delta:337 var
R21355:21359 VST.floyd.SeparationLogicAsLogic <> Espec:336 var
R21352:21353 VST.floyd.SeparationLogicAsLogic <> CS:335 var
R21377:21377 VST.floyd.SeparationLogicAsLogic <> Q:342 var
R21300:21300 VST.floyd.SeparationLogicAsLogic <> h:340 var
R21298:21298 VST.floyd.SeparationLogicAsLogic <> P:338 var
R21292:21296 VST.floyd.SeparationLogicAsLogic <> Delta:337 var
R21286:21290 VST.floyd.SeparationLogicAsLogic <> Espec:336 var
R21283:21284 VST.floyd.SeparationLogicAsLogic <> CS:335 var
R21228:21232 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R21267:21267 VST.floyd.SeparationLogicAsLogic <> R:339 var
R21252:21260 compcert.cfrontend.Clight <> Ssequence constr
R21264:21264 VST.floyd.SeparationLogicAsLogic <> t:341 var
R21262:21262 VST.floyd.SeparationLogicAsLogic <> h:340 var
R21249:21249 VST.floyd.SeparationLogicAsLogic <> P:338 var
R21243:21247 VST.floyd.SeparationLogicAsLogic <> Delta:337 var
R21237:21241 VST.floyd.SeparationLogicAsLogic <> Espec:336 var
R21234:21235 VST.floyd.SeparationLogicAsLogic <> CS:335 var
R21413:21421 compcert.cfrontend.Clight <> Ssequence constr
R21413:21421 compcert.cfrontend.Clight <> Ssequence constr
R21528:21544 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_post_simple thm
R21528:21544 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_post_simple thm
R21588:21599 VST.veric.SeparationLogic <> overridePost def
R21602:21620 VST.veric.tycontext <> RA_normal proj
R21636:21644 VST.msl.seplog <> exp_right meth
R21636:21644 VST.msl.seplog <> exp_right meth
R21662:21671 VST.msl.seplog <> andp_right meth
R21681:21690 VST.msl.seplog <> prop_right meth
R21662:21671 VST.msl.seplog <> andp_right meth
R21681:21690 VST.msl.seplog <> prop_right meth
R21726:21737 VST.msl.seplog <> derives_refl meth
R21726:21737 VST.msl.seplog <> derives_refl meth
R21764:21775 VST.msl.seplog <> derives_refl meth
R21764:21775 VST.msl.seplog <> derives_refl meth
R21809:21820 VST.msl.seplog <> derives_refl meth
R21809:21820 VST.msl.seplog <> derives_refl meth
R21859:21865 Coq.Init.Logic <> eq_refl constr
R21859:21865 Coq.Init.Logic <> eq_refl constr
R21894:21913 VST.floyd.SeparationLogicAsLogic AuxDefs semax_conseq constr
R21894:21913 VST.floyd.SeparationLogicAsLogic AuxDefs semax_conseq constr
R21952:21963 VST.veric.SeparationLogic <> overridePost def
R21966:21984 VST.veric.tycontext <> RA_normal proj
R22148:22158 VST.floyd.SeparationLogicFacts <> exp_derives thm
R22148:22158 VST.floyd.SeparationLogicFacts <> exp_derives thm
R22206:22215 VST.msl.seplog <> andp_right meth
R22225:22234 VST.msl.seplog <> prop_right meth
R22206:22215 VST.msl.seplog <> andp_right meth
R22225:22234 VST.msl.seplog <> prop_right meth
R22258:22269 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R22258:22269 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R22307:22323 VST.floyd.assert_lemmas <> derives_full_refl thm
R22307:22323 VST.floyd.assert_lemmas <> derives_full_refl thm
prf 22422:22437 DeepEmbedded semax_assign_inv
R22452:22460 VST.veric.mpred <> compspecs class
binder 22448:22449 <> CS:343
R22471:22480 VST.veric.juicy_extspec <> OracleKind class
binder 22464:22468 <> Espec:344
binder 22483:22487 <> Delta:345
binder 22489:22490 <> e1:346
binder 22492:22493 <> e2:347
binder 22495:22495 <> P:348
binder 22497:22497 <> Q:349
R22543:22548 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22601:22610 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R22573:22577 VST.msl.seplog <> ::logic:x_'&&'_x not
R22600:22600 VST.msl.seplog <> ::logic:x_'&&'_x not
R22549:22553 VST.veric.SeparationLogic <> local def
R22556:22565 VST.veric.SeparationLogic <> tc_environ def
R22567:22571 VST.floyd.SeparationLogicAsLogic <> Delta:345 var
R22595:22598 VST.msl.seplog <> ::logic:x_'&&'_x not
R22578:22588 VST.veric.SeparationLogic <> allp_fun_id def
R22590:22594 VST.floyd.SeparationLogicAsLogic <> Delta:345 var
R22599:22599 VST.floyd.SeparationLogicAsLogic <> P:348 var
R22611:22615 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R22621:22632 VST.msl.seplog <> ::logic:x_'||'_x not
R23831:23839 VST.msl.seplog <> ::logic:x_'||'_x not
R22616:22618 VST.msl.seplog <> ::logic:'|>'_x not
R22619:22620 VST.msl.seplog <> FF meth
R22633:22633 VST.msl.seplog <> ::logic:x_'||'_x not
R22973:22988 VST.msl.seplog <> ::logic:x_'||'_x not
R23830:23830 VST.msl.seplog <> ::logic:x_'||'_x not
R22634:22636 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R22646:22647 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R22641:22645 VST.msl.shares <> share def
binder 22637:22638 <> sh:350
R22668:22684 VST.msl.seplog <> ::logic:x_'&&'_x not
R22648:22650 VST.msl.seplog <> ::logic:'!!'_x not
R22651:22664 VST.veric.shares <> writable_share def
R22666:22667 VST.floyd.SeparationLogicAsLogic <> sh:350 var
R22685:22689 VST.msl.seplog <> ::logic:'|>'_x not
R22972:22972 VST.msl.seplog <> ::logic:'|>'_x not
R22753:22771 VST.msl.seplog <> ::logic:x_'&&'_x not
R22971:22971 VST.msl.seplog <> ::logic:x_'&&'_x not
R22690:22690 VST.msl.seplog <> ::logic:x_'&&'_x not
R22709:22715 VST.msl.seplog <> ::logic:x_'&&'_x not
R22752:22752 VST.msl.seplog <> ::logic:x_'&&'_x not
R22691:22699 VST.veric.SeparationLogic <> tc_lvalue def
R22707:22708 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R22701:22705 VST.floyd.SeparationLogicAsLogic <> Delta:345 var
R22716:22722 VST.veric.SeparationLogic <> tc_expr def
R22731:22735 compcert.cfrontend.Clight <> Ecast constr
R22741:22746 compcert.cfrontend.Clight <> typeof def
R22748:22749 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R22737:22738 VST.floyd.SeparationLogicAsLogic <> e2:347 var
R22724:22728 VST.floyd.SeparationLogicAsLogic <> Delta:345 var
R22772:22772 VST.msl.seplog <> ::logic:x_'*'_x not
R22815:22833 VST.msl.seplog <> ::logic:x_'*'_x not
R22970:22970 VST.msl.seplog <> ::logic:x_'*'_x not
R22773:22774 VST.veric.lift LiftNotation :::'`('_x_')' not
R22797:22814 VST.veric.lift LiftNotation :::'`('_x_')' not
R22775:22781 VST.veric.SeparationLogic <> mapsto_ def
R22787:22792 compcert.cfrontend.Clight <> typeof def
R22794:22795 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R22783:22784 VST.floyd.SeparationLogicAsLogic <> sh:350 var
R22800:22810 VST.veric.expr <> eval_lvalue def
R22812:22813 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R22941:22944 VST.msl.seplog <> ::logic:x_'-*'_x not
R22834:22835 VST.veric.lift LiftNotation :::'`('_x_')' not
R22857:22940 VST.veric.lift LiftNotation :::'`('_x_')' not
R22836:22841 VST.veric.SeparationLogic <> mapsto def
R22847:22852 compcert.cfrontend.Clight <> typeof def
R22854:22855 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R22843:22844 VST.floyd.SeparationLogicAsLogic <> sh:350 var
R22877:22877 VST.veric.lift LiftNotation :::'`'_x not
R22887:22939 VST.veric.lift LiftNotation :::'`'_x not
R22878:22886 VST.veric.val_lemmas <> force_val def
R22889:22890 VST.veric.lift LiftNotation :::'`('_x_')' not
R22923:22938 VST.veric.lift LiftNotation :::'`('_x_')' not
R22891:22898 VST.veric.Clight_Cop2 <> sem_cast def
R22913:22918 compcert.cfrontend.Clight <> typeof def
R22920:22921 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R22901:22906 compcert.cfrontend.Clight <> typeof def
R22908:22909 VST.floyd.SeparationLogicAsLogic <> e2:347 var
R22926:22934 VST.veric.expr <> eval_expr def
R22936:22937 VST.floyd.SeparationLogicAsLogic <> e2:347 var
R22860:22870 VST.veric.expr <> eval_lvalue def
R22872:22873 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R22945:22949 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R22955:22958 VST.msl.seplog <> ::logic:x_'||'_x not
R22950:22952 VST.msl.seplog <> ::logic:'|>'_x not
R22953:22954 VST.msl.seplog <> FF meth
R22959:22967 VST.veric.tycontext <> RA_normal proj
R22969:22969 VST.floyd.SeparationLogicAsLogic <> Q:349 var
R22989:22992 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R23035:23050 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R22996:22999 compcert.cfrontend.Ctypes <> type ind
binder 22993:22994 <> t2:351
R23011:23022 compcert.common.AST <> memory_chunk ind
binder 23003:23004 <> ch:352
R23011:23022 compcert.common.AST <> memory_chunk ind
binder 23006:23008 <> ch':353
R23030:23034 VST.msl.shares <> share def
binder 23026:23027 <> sh:354
R23307:23323 VST.msl.seplog <> ::logic:x_'&&'_x not
R23051:23054 VST.msl.seplog <> ::logic:'!!'_x not
R23306:23306 VST.msl.seplog <> ::logic:'!!'_x not
R23112:23132 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R23105:23107 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23080:23083 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R23056:23067 VST.veric.SeparationLogic <> numeric_type def
R23070:23075 compcert.cfrontend.Clight <> typeof def
R23077:23078 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R23084:23095 VST.veric.SeparationLogic <> numeric_type def
R23097:23098 VST.floyd.SeparationLogicAsLogic <> t2:351 var
R23108:23111 Coq.Init.Datatypes <> true constr
R23170:23190 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R23156:23158 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23133:23143 compcert.cfrontend.Ctypes <> access_mode def
R23146:23151 compcert.cfrontend.Clight <> typeof def
R23153:23154 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R23159:23166 compcert.cfrontend.Ctypes <> By_value constr
R23168:23169 VST.floyd.SeparationLogicAsLogic <> ch:352 var
R23220:23240 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R23205:23207 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23191:23201 compcert.cfrontend.Ctypes <> access_mode def
R23203:23204 VST.floyd.SeparationLogicAsLogic <> t2:351 var
R23208:23215 compcert.cfrontend.Ctypes <> By_value constr
R23217:23219 VST.floyd.SeparationLogicAsLogic <> ch':353 var
R23268:23288 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R23241:23260 VST.veric.SeparationLogic <> decode_encode_val_ok def
R23265:23267 VST.floyd.SeparationLogicAsLogic <> ch':353 var
R23262:23263 VST.floyd.SeparationLogicAsLogic <> ch:352 var
R23289:23302 VST.veric.shares <> writable_share def
R23304:23305 VST.floyd.SeparationLogicAsLogic <> sh:354 var
R23324:23328 VST.msl.seplog <> ::logic:'|>'_x not
R23829:23829 VST.msl.seplog <> ::logic:'|>'_x not
R23392:23410 VST.msl.seplog <> ::logic:x_'&&'_x not
R23828:23828 VST.msl.seplog <> ::logic:x_'&&'_x not
R23329:23329 VST.msl.seplog <> ::logic:x_'&&'_x not
R23348:23354 VST.msl.seplog <> ::logic:x_'&&'_x not
R23391:23391 VST.msl.seplog <> ::logic:x_'&&'_x not
R23330:23338 VST.veric.SeparationLogic <> tc_lvalue def
R23346:23347 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R23340:23344 VST.floyd.SeparationLogicAsLogic <> Delta:345 var
R23355:23361 VST.veric.SeparationLogic <> tc_expr def
R23370:23374 compcert.cfrontend.Clight <> Ecast constr
R23380:23385 compcert.cfrontend.Clight <> typeof def
R23387:23388 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R23376:23377 VST.floyd.SeparationLogicAsLogic <> e2:347 var
R23363:23367 VST.floyd.SeparationLogicAsLogic <> Delta:345 var
R23411:23411 VST.msl.seplog <> ::logic:x_'*'_x not
R23514:23532 VST.msl.seplog <> ::logic:x_'*'_x not
R23827:23827 VST.msl.seplog <> ::logic:x_'*'_x not
R23454:23480 VST.msl.seplog <> ::logic:x_'&&'_x not
R23412:23413 VST.veric.lift LiftNotation :::'`('_x_')' not
R23436:23453 VST.veric.lift LiftNotation :::'`('_x_')' not
R23414:23420 VST.veric.SeparationLogic <> mapsto_ def
R23426:23431 compcert.cfrontend.Clight <> typeof def
R23433:23434 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R23422:23423 VST.floyd.SeparationLogicAsLogic <> sh:354 var
R23439:23449 VST.veric.expr <> eval_lvalue def
R23451:23452 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R23481:23482 VST.veric.lift LiftNotation :::'`('_x_')' not
R23496:23513 VST.veric.lift LiftNotation :::'`('_x_')' not
R23483:23489 VST.veric.SeparationLogic <> mapsto_ def
R23494:23495 VST.floyd.SeparationLogicAsLogic <> t2:351 var
R23491:23492 VST.floyd.SeparationLogicAsLogic <> sh:354 var
R23499:23509 VST.veric.expr <> eval_lvalue def
R23511:23512 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R23533:23536 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R23544:23562 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R23541:23543 compcert.common.Values <> val ind
binder 23537:23538 <> v':355
R23601:23624 VST.msl.seplog <> ::logic:x_'-*'_x not
R23563:23564 VST.veric.lift LiftNotation :::'`('_x_')' not
R23577:23600 VST.veric.lift LiftNotation :::'`('_x_')' not
R23565:23570 VST.veric.SeparationLogic <> mapsto def
R23575:23576 VST.floyd.SeparationLogicAsLogic <> t2:351 var
R23572:23573 VST.floyd.SeparationLogicAsLogic <> sh:354 var
R23597:23597 VST.veric.lift LiftNotation :::'`'_x not
R23598:23599 VST.floyd.SeparationLogicAsLogic <> v':355 var
R23580:23590 VST.veric.expr <> eval_lvalue def
R23592:23593 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R23625:23627 VST.msl.seplog <> imp meth
R23801:23805 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R23811:23814 VST.msl.seplog <> ::logic:x_'||'_x not
R23806:23808 VST.msl.seplog <> ::logic:'|>'_x not
R23809:23810 VST.msl.seplog <> FF meth
R23815:23823 VST.veric.tycontext <> RA_normal proj
R23825:23825 VST.floyd.SeparationLogicAsLogic <> Q:349 var
R23630:23634 VST.veric.SeparationLogic <> local def
R23638:23639 VST.veric.lift LiftNotation :::'`'_x not
R23657:23773 VST.veric.lift LiftNotation :::'`'_x not
R23640:23656 compcert.common.Memdata <> decode_encode_val def
R23770:23770 VST.veric.lift LiftNotation :::'`'_x not
R23771:23772 VST.floyd.SeparationLogicAsLogic <> v':355 var
R23763:23763 VST.veric.lift LiftNotation :::'`'_x not
R23764:23766 VST.floyd.SeparationLogicAsLogic <> ch':353 var
R23757:23757 VST.veric.lift LiftNotation :::'`'_x not
R23758:23759 VST.floyd.SeparationLogicAsLogic <> ch:352 var
R23686:23688 VST.veric.lift LiftNotation :::'`'_x not
R23698:23753 VST.veric.lift LiftNotation :::'`'_x not
R23689:23697 VST.veric.val_lemmas <> force_val def
R23701:23703 VST.veric.lift LiftNotation :::'`('_x_')' not
R23736:23752 VST.veric.lift LiftNotation :::'`('_x_')' not
R23704:23711 VST.veric.Clight_Cop2 <> sem_cast def
R23726:23731 compcert.cfrontend.Clight <> typeof def
R23733:23734 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R23714:23719 compcert.cfrontend.Clight <> typeof def
R23721:23722 VST.floyd.SeparationLogicAsLogic <> e2:347 var
R23740:23748 VST.veric.expr <> eval_expr def
R23750:23751 VST.floyd.SeparationLogicAsLogic <> e2:347 var
R22503:22507 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R22542:22542 VST.floyd.SeparationLogicAsLogic <> Q:349 var
R22527:22533 compcert.cfrontend.Clight <> Sassign constr
R22538:22539 VST.floyd.SeparationLogicAsLogic <> e2:347 var
R22535:22536 VST.floyd.SeparationLogicAsLogic <> e1:346 var
R22524:22524 VST.floyd.SeparationLogicAsLogic <> P:348 var
R22518:22522 VST.floyd.SeparationLogicAsLogic <> Delta:345 var
R22512:22516 VST.floyd.SeparationLogicAsLogic <> Espec:344 var
R22509:22510 VST.floyd.SeparationLogicAsLogic <> CS:343 var
R23871:23877 compcert.cfrontend.Clight <> Sassign constr
R23871:23877 compcert.cfrontend.Clight <> Sassign constr
R23976:23986 VST.msl.log_normalize <> orp_derives thm
R23976:23986 VST.msl.log_normalize <> orp_derives thm
R24001:24011 VST.floyd.SeparationLogicFacts <> exp_derives thm
R24001:24011 VST.floyd.SeparationLogicFacts <> exp_derives thm
R24036:24047 VST.msl.log_normalize <> andp_derives thm
R24036:24047 VST.msl.log_normalize <> andp_derives thm
R24068:24080 VST.msl.log_normalize <> later_derives thm
R24068:24080 VST.msl.log_normalize <> later_derives thm
R24101:24112 VST.msl.log_normalize <> andp_derives thm
R24101:24112 VST.msl.log_normalize <> andp_derives thm
R24133:24146 VST.msl.seplog <> sepcon_derives meth
R24133:24146 VST.msl.seplog <> sepcon_derives meth
R24167:24178 VST.msl.log_normalize <> wand_derives thm
R24167:24178 VST.msl.log_normalize <> wand_derives thm
R24200:24212 VST.msl.seplog <> derives_trans meth
R24224:24233 VST.msl.ghost_seplog <> bupd_intro meth
R24200:24212 VST.msl.seplog <> derives_trans meth
R24224:24233 VST.msl.ghost_seplog <> bupd_intro meth
R24249:24258 VST.msl.seplog <> orp_right2 meth
R24261:24272 VST.msl.seplog <> derives_refl meth
R24249:24258 VST.msl.seplog <> orp_right2 meth
R24261:24272 VST.msl.seplog <> derives_refl meth
R24287:24297 VST.floyd.SeparationLogicFacts <> exp_derives thm
R24287:24297 VST.floyd.SeparationLogicFacts <> exp_derives thm
R24322:24332 VST.floyd.SeparationLogicFacts <> exp_derives thm
R24322:24332 VST.floyd.SeparationLogicFacts <> exp_derives thm
R24357:24367 VST.floyd.SeparationLogicFacts <> exp_derives thm
R24357:24367 VST.floyd.SeparationLogicFacts <> exp_derives thm
R24393:24403 VST.floyd.SeparationLogicFacts <> exp_derives thm
R24393:24403 VST.floyd.SeparationLogicFacts <> exp_derives thm
R24428:24439 VST.msl.log_normalize <> andp_derives thm
R24428:24439 VST.msl.log_normalize <> andp_derives thm
R24460:24472 VST.msl.log_normalize <> later_derives thm
R24460:24472 VST.msl.log_normalize <> later_derives thm
R24493:24504 VST.msl.log_normalize <> andp_derives thm
R24493:24504 VST.msl.log_normalize <> andp_derives thm
R24525:24538 VST.msl.seplog <> sepcon_derives meth
R24525:24538 VST.msl.seplog <> sepcon_derives meth
R24559:24570 VST.msl.log_normalize <> allp_derives thm
R24559:24570 VST.msl.log_normalize <> allp_derives thm
R24596:24607 VST.msl.log_normalize <> wand_derives thm
R24596:24607 VST.msl.log_normalize <> wand_derives thm
R24628:24638 VST.msl.log_normalize <> imp_derives thm
R24628:24638 VST.msl.log_normalize <> imp_derives thm
R24660:24672 VST.msl.seplog <> derives_trans meth
R24684:24693 VST.msl.ghost_seplog <> bupd_intro meth
R24660:24672 VST.msl.seplog <> derives_trans meth
R24684:24693 VST.msl.ghost_seplog <> bupd_intro meth
R24709:24718 VST.msl.seplog <> orp_right2 meth
R24721:24732 VST.msl.seplog <> derives_refl meth
R24709:24718 VST.msl.seplog <> orp_right2 meth
R24721:24732 VST.msl.seplog <> derives_refl meth
R24806:24812 Coq.Init.Logic <> eq_refl constr
R24806:24812 Coq.Init.Logic <> eq_refl constr
R24839:24849 VST.floyd.assert_lemmas <> orp_ENTAILL thm
R24839:24849 VST.floyd.assert_lemmas <> orp_ENTAILL thm
R24864:24874 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R24864:24874 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R24899:24910 VST.floyd.assert_lemmas <> andp_ENTAILL thm
R24930:24940 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R24899:24910 VST.floyd.assert_lemmas <> andp_ENTAILL thm
R24930:24940 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R24958:24970 VST.floyd.assert_lemmas <> later_ENTAILL thm
R24958:24970 VST.floyd.assert_lemmas <> later_ENTAILL thm
R24985:24996 VST.floyd.assert_lemmas <> andp_ENTAILL thm
R25016:25026 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R24985:24996 VST.floyd.assert_lemmas <> andp_ENTAILL thm
R25016:25026 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25044:25057 VST.floyd.assert_lemmas <> sepcon_ENTAILL thm
R25077:25087 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25044:25057 VST.floyd.assert_lemmas <> sepcon_ENTAILL thm
R25077:25087 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25105:25116 VST.floyd.assert_lemmas <> wand_ENTAILL thm
R25136:25146 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25105:25116 VST.floyd.assert_lemmas <> wand_ENTAILL thm
R25136:25146 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25164:25186 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R25164:25186 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R25205:25215 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R25205:25215 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R25240:25250 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R25240:25250 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R25275:25285 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R25275:25285 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R25311:25321 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R25311:25321 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R25346:25357 VST.floyd.assert_lemmas <> andp_ENTAILL thm
R25377:25387 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25346:25357 VST.floyd.assert_lemmas <> andp_ENTAILL thm
R25377:25387 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25405:25417 VST.floyd.assert_lemmas <> later_ENTAILL thm
R25405:25417 VST.floyd.assert_lemmas <> later_ENTAILL thm
R25432:25443 VST.floyd.assert_lemmas <> andp_ENTAILL thm
R25463:25473 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25432:25443 VST.floyd.assert_lemmas <> andp_ENTAILL thm
R25463:25473 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25491:25504 VST.floyd.assert_lemmas <> sepcon_ENTAILL thm
R25524:25534 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25491:25504 VST.floyd.assert_lemmas <> sepcon_ENTAILL thm
R25524:25534 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25552:25563 VST.floyd.assert_lemmas <> allp_ENTAILL thm
R25552:25563 VST.floyd.assert_lemmas <> allp_ENTAILL thm
R25588:25599 VST.floyd.assert_lemmas <> wand_ENTAILL thm
R25619:25629 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25588:25599 VST.floyd.assert_lemmas <> wand_ENTAILL thm
R25619:25629 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25647:25657 VST.floyd.assert_lemmas <> imp_ENTAILL thm
R25677:25687 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25647:25657 VST.floyd.assert_lemmas <> imp_ENTAILL thm
R25677:25687 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R25705:25727 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R25705:25727 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
prf 25746:25772 DeepEmbedded tc_fn_return_temp_guard_opt
binder 25782:25784 <> ret:356
binder 25786:25791 <> retsig:357
binder 25793:25797 <> Delta:358
R25831:25836 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25837:25850 VST.floyd.SeparationLogicFacts <> temp_guard_opt def
R25858:25860 VST.floyd.SeparationLogicAsLogic <> ret:356 var
R25852:25856 VST.floyd.SeparationLogicAsLogic <> Delta:358 var
R25802:25813 VST.veric.SeparationLogic <> tc_fn_return def
R25825:25830 VST.floyd.SeparationLogicAsLogic <> retsig:357 var
R25821:25823 VST.floyd.SeparationLogicAsLogic <> ret:356 var
R25815:25819 VST.floyd.SeparationLogicAsLogic <> Delta:358 var
R25922:25922 compcert.lib.Maps <> :::x_'!'_x not
R25939:25942 compcert.lib.Maps <> :::x_'!'_x not
R25923:25932 VST.veric.seplog <> temp_types def
R25922:25922 compcert.lib.Maps <> :::x_'!'_x not
R25939:25942 compcert.lib.Maps <> :::x_'!'_x not
R25923:25932 VST.veric.seplog <> temp_types def
prf 25980:25994 DeepEmbedded oboxopt_ENTAILL
binder 26004:26008 <> Delta:359
binder 26010:26012 <> ret:360
binder 26014:26019 <> retsig:361
binder 26021:26021 <> P:362
binder 26023:26023 <> Q:363
R26057:26062 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26121:26126 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26197:26201 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R26151:26155 VST.msl.seplog <> ::logic:x_'&&'_x not
R26196:26196 VST.msl.seplog <> ::logic:x_'&&'_x not
R26127:26131 VST.veric.SeparationLogic <> local def
R26134:26143 VST.veric.SeparationLogic <> tc_environ def
R26145:26149 VST.floyd.SeparationLogicAsLogic <> Delta:359 var
R26173:26176 VST.msl.seplog <> ::logic:x_'&&'_x not
R26156:26166 VST.veric.SeparationLogic <> allp_fun_id def
R26168:26172 VST.floyd.SeparationLogicAsLogic <> Delta:359 var
R26177:26183 VST.floyd.SeparationLogicFacts <> oboxopt def
R26195:26195 VST.floyd.SeparationLogicAsLogic <> P:362 var
R26191:26193 VST.floyd.SeparationLogicAsLogic <> ret:360 var
R26185:26189 VST.floyd.SeparationLogicAsLogic <> Delta:359 var
R26202:26208 VST.floyd.SeparationLogicFacts <> oboxopt def
R26220:26220 VST.floyd.SeparationLogicAsLogic <> Q:363 var
R26216:26218 VST.floyd.SeparationLogicAsLogic <> ret:360 var
R26210:26214 VST.floyd.SeparationLogicAsLogic <> Delta:359 var
R26115:26119 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R26087:26091 VST.msl.seplog <> ::logic:x_'&&'_x not
R26114:26114 VST.msl.seplog <> ::logic:x_'&&'_x not
R26063:26067 VST.veric.SeparationLogic <> local def
R26070:26079 VST.veric.SeparationLogic <> tc_environ def
R26081:26085 VST.floyd.SeparationLogicAsLogic <> Delta:359 var
R26109:26112 VST.msl.seplog <> ::logic:x_'&&'_x not
R26092:26102 VST.veric.SeparationLogic <> allp_fun_id def
R26104:26108 VST.floyd.SeparationLogicAsLogic <> Delta:359 var
R26113:26113 VST.floyd.SeparationLogicAsLogic <> P:362 var
R26120:26120 VST.floyd.SeparationLogicAsLogic <> Q:363 var
R26028:26039 VST.veric.SeparationLogic <> tc_fn_return def
R26051:26056 VST.floyd.SeparationLogicAsLogic <> retsig:361 var
R26047:26049 VST.floyd.SeparationLogicAsLogic <> ret:360 var
R26041:26045 VST.floyd.SeparationLogicAsLogic <> Delta:359 var
R26248:26261 VST.floyd.SeparationLogicFacts <> oboxopt_left2' thm
R26248:26261 VST.floyd.SeparationLogicFacts <> oboxopt_left2' thm
R26279:26305 VST.floyd.SeparationLogicAsLogic DeepEmbedded tc_fn_return_temp_guard_opt thm
R26279:26305 VST.floyd.SeparationLogicAsLogic DeepEmbedded tc_fn_return_temp_guard_opt thm
prf 26327:26340 DeepEmbedded semax_call_inv
R26355:26363 VST.veric.mpred <> compspecs class
binder 26351:26352 <> CS:364
R26374:26383 VST.veric.juicy_extspec <> OracleKind class
binder 26367:26371 <> Espec:365
binder 26386:26390 <> Delta:366
binder 26392:26394 <> ret:367
binder 26396:26396 <> a:368
binder 26398:26399 <> bl:369
binder 26401:26403 <> Pre:370
binder 26405:26408 <> Post:371
R26460:26465 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26520:26524 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R26490:26494 VST.msl.seplog <> ::logic:x_'&&'_x not
R26519:26519 VST.msl.seplog <> ::logic:x_'&&'_x not
R26466:26470 VST.veric.SeparationLogic <> local def
R26473:26482 VST.veric.SeparationLogic <> tc_environ def
R26484:26488 VST.floyd.SeparationLogicAsLogic <> Delta:366 var
R26512:26515 VST.msl.seplog <> ::logic:x_'&&'_x not
R26495:26505 VST.veric.SeparationLogic <> allp_fun_id def
R26507:26511 VST.floyd.SeparationLogicAsLogic <> Delta:366 var
R26516:26518 VST.floyd.SeparationLogicAsLogic <> Pre:370 var
R26525:26529 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R26535:26548 VST.msl.seplog <> ::logic:x_'||'_x not
R27195:27195 VST.msl.seplog <> ::logic:x_'||'_x not
R26530:26532 VST.msl.seplog <> ::logic:'|>'_x not
R26533:26534 VST.msl.seplog <> FF meth
R26549:26551 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R26561:26562 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 26552:26557 <> argsig:372
R26563:26565 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R26575:26576 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 26566:26571 <> retsig:373
R26577:26579 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R26585:26596 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 26580:26581 <> cc:374
R26597:26599 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R26604:26605 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 26600:26600 <> A:375
R26606:26608 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R26613:26614 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 26609:26609 <> P:376
R26615:26617 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R26622:26623 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 26618:26618 <> Q:377
R26624:26626 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R26633:26634 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 26627:26629 <> NEP:378
R26635:26637 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R26644:26645 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 26638:26640 <> NEQ:379
R26646:26648 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R26654:26655 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 26649:26650 <> ts:380
R26656:26658 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R26663:26673 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 26659:26659 <> x:381
R27030:27043 VST.msl.seplog <> ::logic:x_'&&'_x not
R26944:26957 VST.msl.seplog <> ::logic:x_'&&'_x not
R26870:26891 VST.msl.seplog <> ::logic:x_'&&'_x not
R26942:26943 VST.msl.seplog <> ::logic:x_'&&'_x not
R26674:26677 VST.msl.seplog <> ::logic:'!!'_x not
R26869:26869 VST.msl.seplog <> ::logic:'!!'_x not
R26776:26792 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R26705:26720 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26678:26693 compcert.cfrontend.Cop <> classify_fun def
R26696:26701 compcert.cfrontend.Clight <> typeof def
R26703:26703 VST.floyd.SeparationLogicAsLogic <> a:368 var
R26721:26734 compcert.cfrontend.Cop <> fun_case_f constr
R26774:26775 VST.floyd.SeparationLogicAsLogic <> cc:374 var
R26767:26772 VST.floyd.SeparationLogicAsLogic <> retsig:373 var
R26737:26757 VST.veric.mpred <> typelist_of_type_list def
R26759:26764 VST.floyd.SeparationLogicAsLogic <> argsig:372 var
R26793:26793 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R26822:26839 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R26808:26811 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26815:26817 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26812:26814 VST.floyd.SeparationLogicAsLogic <> ret:367 var
R26818:26821 Coq.Init.Datatypes <> None constr
R26800:26802 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26794:26799 VST.floyd.SeparationLogicAsLogic <> retsig:373 var
R26803:26807 compcert.cfrontend.Ctypes <> Tvoid constr
R26840:26851 VST.veric.SeparationLogic <> tc_fn_return def
R26863:26868 VST.floyd.SeparationLogicAsLogic <> retsig:373 var
R26859:26861 VST.floyd.SeparationLogicAsLogic <> ret:367 var
R26853:26857 VST.floyd.SeparationLogicAsLogic <> Delta:366 var
R26892:26892 VST.msl.seplog <> ::logic:x_'&&'_x not
R26908:26913 VST.msl.seplog <> ::logic:x_'&&'_x not
R26941:26941 VST.msl.seplog <> ::logic:x_'&&'_x not
R26893:26899 VST.veric.SeparationLogic <> tc_expr def
R26907:26907 VST.floyd.SeparationLogicAsLogic <> a:368 var
R26901:26905 VST.floyd.SeparationLogicAsLogic <> Delta:366 var
R26914:26924 VST.veric.SeparationLogic <> tc_exprlist def
R26939:26940 VST.floyd.SeparationLogicAsLogic <> bl:369 var
R26932:26937 VST.floyd.SeparationLogicAsLogic <> argsig:372 var
R26926:26930 VST.floyd.SeparationLogicAsLogic <> Delta:366 var
R26958:26959 VST.veric.lift LiftNotation :::'`('_x_')' not
R27015:27029 VST.veric.lift LiftNotation :::'`('_x_')' not
R26960:26967 VST.veric.SeparationLogic <> func_ptr def
R26970:26979 VST.veric.mpred <> mk_funspec constr
R27011:27013 VST.floyd.SeparationLogicAsLogic <> NEQ:379 var
R27007:27009 VST.floyd.SeparationLogicAsLogic <> NEP:378 var
R27005:27005 VST.floyd.SeparationLogicAsLogic <> Q:377 var
R27003:27003 VST.floyd.SeparationLogicAsLogic <> P:376 var
R27001:27001 VST.floyd.SeparationLogicAsLogic <> A:375 var
R26998:26999 VST.floyd.SeparationLogicAsLogic <> cc:374 var
R26982:26982 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26989:26989 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26996:26996 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26983:26988 VST.floyd.SeparationLogicAsLogic <> argsig:372 var
R26990:26995 VST.floyd.SeparationLogicAsLogic <> retsig:373 var
R27018:27026 VST.veric.expr <> eval_expr def
R27028:27028 VST.floyd.SeparationLogicAsLogic <> a:368 var
R27044:27046 VST.msl.seplog <> ::logic:'|>'_x not
R27194:27194 VST.msl.seplog <> ::logic:'|>'_x not
R27047:27047 VST.msl.seplog <> ::logic:x_'*'_x not
R27106:27109 VST.msl.seplog <> ::logic:x_'*'_x not
binder 27052:27054 <> rho:382
R27059:27059 VST.floyd.SeparationLogicAsLogic <> P:376 var
R27066:27066 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27076:27077 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27105:27105 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27067:27071 VST.veric.mpred <> ge_of def
R27073:27075 VST.floyd.SeparationLogicAsLogic <> rho:382 var
R27078:27090 VST.veric.expr <> eval_exprlist def
R27102:27104 VST.floyd.SeparationLogicAsLogic <> rho:382 var
R27099:27100 VST.floyd.SeparationLogicAsLogic <> bl:369 var
R27092:27097 VST.floyd.SeparationLogicAsLogic <> argsig:372 var
R27064:27064 VST.floyd.SeparationLogicAsLogic <> x:381 var
R27061:27062 VST.floyd.SeparationLogicAsLogic <> ts:380 var
R27110:27116 VST.floyd.SeparationLogicFacts <> oboxopt def
R27161:27164 VST.msl.seplog <> ::logic:x_'-*'_x not
R27129:27140 VST.veric.SeparationLogic <> maybe_retval def
R27158:27160 VST.floyd.SeparationLogicAsLogic <> ret:367 var
R27151:27156 VST.floyd.SeparationLogicAsLogic <> retsig:373 var
R27143:27143 VST.floyd.SeparationLogicAsLogic <> Q:377 var
R27148:27148 VST.floyd.SeparationLogicAsLogic <> x:381 var
R27145:27146 VST.floyd.SeparationLogicAsLogic <> ts:380 var
R27165:27169 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R27175:27178 VST.msl.seplog <> ::logic:x_'||'_x not
R27170:27172 VST.msl.seplog <> ::logic:'|>'_x not
R27173:27174 VST.msl.seplog <> FF meth
R27179:27187 VST.veric.tycontext <> RA_normal proj
R27189:27192 VST.floyd.SeparationLogicAsLogic <> Post:371 var
R27124:27126 VST.floyd.SeparationLogicAsLogic <> ret:367 var
R27118:27122 VST.floyd.SeparationLogicAsLogic <> Delta:366 var
R26414:26418 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R26456:26459 VST.floyd.SeparationLogicAsLogic <> Post:371 var
R26440:26444 compcert.cfrontend.Clight <> Scall constr
R26452:26453 VST.floyd.SeparationLogicAsLogic <> bl:369 var
R26450:26450 VST.floyd.SeparationLogicAsLogic <> a:368 var
R26446:26448 VST.floyd.SeparationLogicAsLogic <> ret:367 var
R26435:26437 VST.floyd.SeparationLogicAsLogic <> Pre:370 var
R26429:26433 VST.floyd.SeparationLogicAsLogic <> Delta:366 var
R26423:26427 VST.floyd.SeparationLogicAsLogic <> Espec:365 var
R26420:26421 VST.floyd.SeparationLogicAsLogic <> CS:364 var
R27227:27231 compcert.cfrontend.Clight <> Scall constr
R27227:27231 compcert.cfrontend.Clight <> Scall constr
R27333:27343 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27333:27343 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27370:27380 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27370:27380 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27407:27417 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27407:27417 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27440:27450 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27440:27450 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27472:27482 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27472:27482 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27504:27514 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27504:27514 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27536:27546 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27536:27546 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27570:27580 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27570:27580 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27604:27614 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27604:27614 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27637:27647 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27637:27647 VST.floyd.SeparationLogicFacts <> exp_derives thm
R27669:27680 VST.msl.log_normalize <> andp_derives thm
R27669:27680 VST.msl.log_normalize <> andp_derives thm
R27699:27711 VST.msl.log_normalize <> later_derives thm
R27699:27711 VST.msl.log_normalize <> later_derives thm
R27730:27743 VST.msl.seplog <> sepcon_derives meth
R27730:27743 VST.msl.seplog <> sepcon_derives meth
R27762:27770 VST.floyd.SeparationLogicFacts <> oboxopt_K thm
R27762:27770 VST.floyd.SeparationLogicFacts <> oboxopt_K thm
R27789:27800 VST.msl.log_normalize <> wand_derives thm
R27789:27800 VST.msl.log_normalize <> wand_derives thm
R27820:27832 VST.msl.seplog <> derives_trans meth
R27844:27853 VST.msl.ghost_seplog <> bupd_intro meth
R27820:27832 VST.msl.seplog <> derives_trans meth
R27844:27853 VST.msl.ghost_seplog <> bupd_intro meth
R27867:27876 VST.msl.seplog <> orp_right2 meth
R27879:27890 VST.msl.seplog <> derives_refl meth
R27867:27876 VST.msl.seplog <> orp_right2 meth
R27879:27890 VST.msl.seplog <> derives_refl meth
R28000:28006 Coq.Init.Logic <> eq_refl constr
R28000:28006 Coq.Init.Logic <> eq_refl constr
R28048:28058 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28048:28058 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28085:28095 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28085:28095 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28122:28132 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28122:28132 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28155:28165 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28155:28165 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28187:28197 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28187:28197 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28219:28229 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28219:28229 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28251:28261 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28251:28261 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28285:28295 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28285:28295 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28319:28329 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28319:28329 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28352:28362 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28352:28362 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R28430:28441 VST.floyd.assert_lemmas <> andp_ENTAILL thm
R28461:28471 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R28430:28441 VST.floyd.assert_lemmas <> andp_ENTAILL thm
R28461:28471 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R28487:28499 VST.floyd.assert_lemmas <> later_ENTAILL thm
R28487:28499 VST.floyd.assert_lemmas <> later_ENTAILL thm
R28512:28525 VST.floyd.assert_lemmas <> sepcon_ENTAILL thm
R28545:28555 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R28512:28525 VST.floyd.assert_lemmas <> sepcon_ENTAILL thm
R28545:28555 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R28572:28586 VST.floyd.SeparationLogicAsLogic DeepEmbedded oboxopt_ENTAILL thm
R28572:28586 VST.floyd.SeparationLogicAsLogic DeepEmbedded oboxopt_ENTAILL thm
R28606:28617 VST.floyd.assert_lemmas <> wand_ENTAILL thm
R28637:28647 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R28606:28617 VST.floyd.assert_lemmas <> wand_ENTAILL thm
R28637:28647 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R28663:28685 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R28663:28685 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
prf 28704:28717 DeepEmbedded semax_Sset_inv
R28732:28740 VST.veric.mpred <> compspecs class
binder 28728:28729 <> CS:383
R28751:28760 VST.veric.juicy_extspec <> OracleKind class
binder 28744:28748 <> Espec:384
binder 28763:28767 <> Delta:385
binder 28769:28769 <> P:386
binder 28771:28771 <> R:387
binder 28773:28774 <> id:388
binder 28776:28776 <> e:389
R28818:28823 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R28876:28880 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R28848:28852 VST.msl.seplog <> ::logic:x_'&&'_x not
R28875:28875 VST.msl.seplog <> ::logic:x_'&&'_x not
R28824:28828 VST.veric.SeparationLogic <> local def
R28831:28840 VST.veric.SeparationLogic <> tc_environ def
R28842:28846 VST.floyd.SeparationLogicAsLogic <> Delta:385 var
R28870:28873 VST.msl.seplog <> ::logic:x_'&&'_x not
R28853:28863 VST.veric.SeparationLogic <> allp_fun_id def
R28865:28869 VST.floyd.SeparationLogicAsLogic <> Delta:385 var
R28874:28874 VST.floyd.SeparationLogicAsLogic <> P:386 var
R28881:28885 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R28891:28900 VST.msl.seplog <> ::logic:x_'||'_x not
R30800:30800 VST.msl.seplog <> ::logic:x_'||'_x not
R28886:28888 VST.msl.seplog <> ::logic:'|>'_x not
R28889:28890 VST.msl.seplog <> FF meth
R30266:30276 VST.msl.seplog <> ::logic:x_'||'_x not
R30799:30799 VST.msl.seplog <> ::logic:x_'||'_x not
R29852:29862 VST.msl.seplog <> ::logic:x_'||'_x not
R30265:30265 VST.msl.seplog <> ::logic:x_'||'_x not
R28901:28901 VST.msl.seplog <> ::logic:x_'||'_x not
R29043:29054 VST.msl.seplog <> ::logic:x_'||'_x not
R29851:29851 VST.msl.seplog <> ::logic:x_'||'_x not
R28902:28906 VST.msl.seplog <> ::logic:'|>'_x not
R29042:29042 VST.msl.seplog <> ::logic:'|>'_x not
R28975:28991 VST.msl.seplog <> ::logic:x_'&&'_x not
R28907:28907 VST.msl.seplog <> ::logic:x_'&&'_x not
R28923:28941 VST.msl.seplog <> ::logic:x_'&&'_x not
R28974:28974 VST.msl.seplog <> ::logic:x_'&&'_x not
R28908:28914 VST.veric.SeparationLogic <> tc_expr def
R28922:28922 VST.floyd.SeparationLogicAsLogic <> e:389 var
R28916:28920 VST.floyd.SeparationLogicAsLogic <> Delta:385 var
R28942:28951 VST.veric.SeparationLogic <> tc_temp_id def
R28973:28973 VST.floyd.SeparationLogicAsLogic <> e:389 var
R28967:28971 VST.floyd.SeparationLogicAsLogic <> Delta:385 var
R28957:28962 compcert.cfrontend.Clight <> typeof def
R28964:28964 VST.floyd.SeparationLogicAsLogic <> e:389 var
R28953:28954 VST.floyd.SeparationLogicAsLogic <> id:388 var
R28992:28996 VST.veric.seplog <> subst def
R29016:29020 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R29026:29029 VST.msl.seplog <> ::logic:x_'||'_x not
R29021:29023 VST.msl.seplog <> ::logic:'|>'_x not
R29024:29025 VST.msl.seplog <> FF meth
R29030:29038 VST.veric.tycontext <> RA_normal proj
R29040:29040 VST.floyd.SeparationLogicAsLogic <> R:387 var
R29002:29010 VST.veric.expr <> eval_expr def
R29012:29012 VST.floyd.SeparationLogicAsLogic <> e:389 var
R28998:28999 VST.floyd.SeparationLogicAsLogic <> id:388 var
R29055:29057 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29083:29084 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29063:29082 compcert.cfrontend.Cop <> binary_operation ind
binder 29058:29060 <> cmp:390
R29085:29087 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29096:29097 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29092:29095 compcert.cfrontend.Clight <> expr ind
binder 29088:29089 <> e1:391
R29098:29100 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29109:29119 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29105:29108 compcert.cfrontend.Clight <> expr ind
binder 29101:29102 <> e2:392
R29120:29122 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29131:29132 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29127:29130 compcert.cfrontend.Ctypes <> type ind
binder 29123:29124 <> ty:393
R29133:29135 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29146:29147 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29141:29145 VST.msl.shares <> share def
binder 29136:29138 <> sh1:394
R29148:29150 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29161:29172 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29156:29160 VST.msl.shares <> share def
binder 29151:29153 <> sh2:395
R29492:29509 VST.msl.seplog <> ::logic:x_'&&'_x not
R29850:29850 VST.msl.seplog <> ::logic:x_'&&'_x not
R29173:29176 VST.msl.seplog <> ::logic:'!!'_x not
R29491:29491 VST.msl.seplog <> ::logic:'!!'_x not
R29200:29217 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29178:29180 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29177:29177 VST.floyd.SeparationLogicAsLogic <> e:389 var
R29181:29186 compcert.cfrontend.Clight <> Ebinop constr
R29198:29199 VST.floyd.SeparationLogicAsLogic <> ty:393 var
R29195:29196 VST.floyd.SeparationLogicAsLogic <> e2:392 var
R29192:29193 VST.floyd.SeparationLogicAsLogic <> e1:391 var
R29188:29190 VST.floyd.SeparationLogicAsLogic <> cmp:390 var
R29240:29243 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29218:29235 VST.msl.sepalg <> nonidentity def
R29237:29239 VST.floyd.SeparationLogicAsLogic <> sh1:394 var
R29266:29283 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29244:29261 VST.msl.sepalg <> nonidentity def
R29263:29265 VST.floyd.SeparationLogicAsLogic <> sh2:395 var
R29308:29325 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29301:29303 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29284:29296 VST.veric.SeparationLogic <> is_comparison def
R29298:29300 VST.floyd.SeparationLogicAsLogic <> cmp:390 var
R29304:29307 Coq.Init.Datatypes <> true constr
R29370:29387 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29362:29364 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29326:29333 VST.veric.Cop2 <> eqb_type def
R29347:29361 VST.veric.Cop2 <> int_or_ptr_type def
R29336:29341 compcert.cfrontend.Clight <> typeof def
R29343:29344 VST.floyd.SeparationLogicAsLogic <> e1:391 var
R29365:29369 Coq.Init.Datatypes <> false constr
R29432:29449 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29424:29426 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29388:29395 VST.veric.Cop2 <> eqb_type def
R29409:29423 VST.veric.Cop2 <> int_or_ptr_type def
R29398:29403 compcert.cfrontend.Clight <> typeof def
R29405:29406 VST.floyd.SeparationLogicAsLogic <> e2:392 var
R29427:29431 Coq.Init.Datatypes <> false constr
R29484:29486 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29450:29474 VST.veric.SeparationLogic <> typecheck_tid_ptr_compare def
R29482:29483 VST.floyd.SeparationLogicAsLogic <> id:388 var
R29476:29480 VST.floyd.SeparationLogicAsLogic <> Delta:385 var
R29487:29490 Coq.Init.Datatypes <> true constr
R29510:29514 VST.msl.seplog <> ::logic:'|>'_x not
R29849:29849 VST.msl.seplog <> ::logic:'|>'_x not
R29765:29778 VST.msl.seplog <> ::logic:x_'&&'_x not
R29703:29717 VST.msl.seplog <> ::logic:x_'&&'_x not
R29764:29764 VST.msl.seplog <> ::logic:x_'&&'_x not
R29641:29655 VST.msl.seplog <> ::logic:x_'&&'_x not
R29702:29702 VST.msl.seplog <> ::logic:x_'&&'_x not
R29569:29583 VST.msl.seplog <> ::logic:x_'&&'_x not
R29515:29515 VST.msl.seplog <> ::logic:x_'&&'_x not
R29532:29551 VST.msl.seplog <> ::logic:x_'&&'_x not
R29568:29568 VST.msl.seplog <> ::logic:x_'&&'_x not
R29516:29522 VST.veric.SeparationLogic <> tc_expr def
R29530:29531 VST.floyd.SeparationLogicAsLogic <> e1:391 var
R29524:29528 VST.floyd.SeparationLogicAsLogic <> Delta:385 var
R29552:29558 VST.veric.SeparationLogic <> tc_expr def
R29566:29567 VST.floyd.SeparationLogicAsLogic <> e2:392 var
R29560:29564 VST.floyd.SeparationLogicAsLogic <> Delta:385 var
R29584:29588 VST.veric.SeparationLogic <> local def
R29591:29592 VST.veric.lift LiftNotation :::'`('_x_')' not
R29609:29639 VST.veric.lift LiftNotation :::'`('_x_')' not
R29593:29604 VST.veric.SeparationLogic <> blocks_match def
R29606:29608 VST.floyd.SeparationLogicAsLogic <> cmp:390 var
R29627:29635 VST.veric.expr <> eval_expr def
R29637:29638 VST.floyd.SeparationLogicAsLogic <> e2:392 var
R29612:29620 VST.veric.expr <> eval_expr def
R29622:29623 VST.floyd.SeparationLogicAsLogic <> e1:391 var
R29697:29699 VST.msl.seplog <> ::logic:x_'*'_x not
R29656:29657 VST.veric.lift LiftNotation :::'`('_x_')' not
R29681:29696 VST.veric.lift LiftNotation :::'`('_x_')' not
R29658:29664 VST.veric.SeparationLogic <> mapsto_ def
R29671:29676 compcert.cfrontend.Clight <> typeof def
R29678:29679 VST.floyd.SeparationLogicAsLogic <> e1:391 var
R29666:29668 VST.floyd.SeparationLogicAsLogic <> sh1:394 var
R29684:29692 VST.veric.expr <> eval_expr def
R29694:29695 VST.floyd.SeparationLogicAsLogic <> e1:391 var
R29700:29701 VST.msl.seplog <> TT meth
R29759:29761 VST.msl.seplog <> ::logic:x_'*'_x not
R29718:29719 VST.veric.lift LiftNotation :::'`('_x_')' not
R29743:29758 VST.veric.lift LiftNotation :::'`('_x_')' not
R29720:29726 VST.veric.SeparationLogic <> mapsto_ def
R29733:29738 compcert.cfrontend.Clight <> typeof def
R29740:29741 VST.floyd.SeparationLogicAsLogic <> e2:392 var
R29728:29730 VST.floyd.SeparationLogicAsLogic <> sh2:395 var
R29746:29754 VST.veric.expr <> eval_expr def
R29756:29757 VST.floyd.SeparationLogicAsLogic <> e2:392 var
R29762:29763 VST.msl.seplog <> TT meth
R29779:29783 VST.veric.seplog <> subst def
R29823:29827 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R29833:29836 VST.msl.seplog <> ::logic:x_'||'_x not
R29828:29830 VST.msl.seplog <> ::logic:'|>'_x not
R29831:29832 VST.msl.seplog <> FF meth
R29837:29845 VST.veric.tycontext <> RA_normal proj
R29847:29847 VST.floyd.SeparationLogicAsLogic <> R:387 var
R29789:29797 VST.veric.expr <> eval_expr def
R29800:29805 compcert.cfrontend.Clight <> Ebinop constr
R29817:29818 VST.floyd.SeparationLogicAsLogic <> ty:393 var
R29814:29815 VST.floyd.SeparationLogicAsLogic <> e2:392 var
R29811:29812 VST.floyd.SeparationLogicAsLogic <> e1:391 var
R29807:29809 VST.floyd.SeparationLogicAsLogic <> cmp:390 var
R29785:29786 VST.floyd.SeparationLogicAsLogic <> id:388 var
R29863:29865 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29875:29876 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29870:29874 VST.msl.shares <> share def
binder 29866:29867 <> sh:396
R29877:29879 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29888:29889 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29884:29887 compcert.cfrontend.Ctypes <> type ind
binder 29880:29881 <> t2:397
R29890:29892 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29900:29915 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R29897:29899 compcert.common.Values <> val ind
binder 29893:29894 <> v2:398
R30048:30060 VST.msl.seplog <> ::logic:x_'&&'_x not
R29916:29919 VST.msl.seplog <> ::logic:'!!'_x not
R30047:30047 VST.msl.seplog <> ::logic:'!!'_x not
R29950:29971 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29940:29942 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29920:29930 VST.veric.SeparationLogic <> typeof_temp def
R29938:29939 VST.floyd.SeparationLogicAsLogic <> id:388 var
R29932:29936 VST.floyd.SeparationLogicAsLogic <> Delta:385 var
R29943:29946 Coq.Init.Datatypes <> Some constr
R29948:29949 VST.floyd.SeparationLogicAsLogic <> t2:397 var
R30008:30029 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R30001:30003 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29972:29986 VST.veric.expr <> is_neutral_cast def
R29999:30000 VST.floyd.SeparationLogicAsLogic <> t2:397 var
R29989:29994 compcert.cfrontend.Clight <> typeof def
R29996:29996 VST.floyd.SeparationLogicAsLogic <> e:389 var
R30004:30007 Coq.Init.Datatypes <> true constr
R30030:30043 VST.veric.shares <> readable_share def
R30045:30046 VST.floyd.SeparationLogicAsLogic <> sh:396 var
R30061:30065 VST.msl.seplog <> ::logic:'|>'_x not
R30264:30264 VST.msl.seplog <> ::logic:'|>'_x not
R30204:30221 VST.msl.seplog <> ::logic:x_'&&'_x not
R30134:30152 VST.msl.seplog <> ::logic:x_'&&'_x not
R30203:30203 VST.msl.seplog <> ::logic:x_'&&'_x not
R30066:30066 VST.msl.seplog <> ::logic:x_'&&'_x not
R30084:30102 VST.msl.seplog <> ::logic:x_'&&'_x not
R30067:30075 VST.veric.SeparationLogic <> tc_lvalue def
R30083:30083 VST.floyd.SeparationLogicAsLogic <> e:389 var
R30077:30081 VST.floyd.SeparationLogicAsLogic <> Delta:385 var
R30103:30107 VST.veric.SeparationLogic <> local def
R30110:30111 VST.veric.lift LiftNotation :::'`('_x_')' not
R30132:30132 VST.veric.lift LiftNotation :::'`('_x_')' not
R30112:30117 VST.veric.Cop2 <> tc_val def
R30130:30131 VST.floyd.SeparationLogicAsLogic <> v2:398 var
R30120:30125 compcert.cfrontend.Clight <> typeof def
R30127:30127 VST.floyd.SeparationLogicAsLogic <> e:389 var
R30198:30200 VST.msl.seplog <> ::logic:x_'*'_x not
R30153:30154 VST.veric.lift LiftNotation :::'`('_x_')' not
R30175:30197 VST.veric.lift LiftNotation :::'`('_x_')' not
R30155:30160 VST.veric.SeparationLogic <> mapsto def
R30166:30171 compcert.cfrontend.Clight <> typeof def
R30173:30173 VST.floyd.SeparationLogicAsLogic <> e:389 var
R30162:30163 VST.floyd.SeparationLogicAsLogic <> sh:396 var
R30194:30194 VST.veric.lift LiftNotation :::'`'_x not
R30195:30196 VST.floyd.SeparationLogicAsLogic <> v2:398 var
R30178:30188 VST.veric.expr <> eval_lvalue def
R30190:30190 VST.floyd.SeparationLogicAsLogic <> e:389 var
R30201:30202 VST.msl.seplog <> TT meth
R30222:30226 VST.veric.seplog <> subst def
R30238:30242 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R30248:30251 VST.msl.seplog <> ::logic:x_'||'_x not
R30243:30245 VST.msl.seplog <> ::logic:'|>'_x not
R30246:30247 VST.msl.seplog <> FF meth
R30252:30260 VST.veric.tycontext <> RA_normal proj
R30262:30262 VST.floyd.SeparationLogicAsLogic <> R:387 var
R30232:30232 VST.veric.lift LiftNotation :::'`'_x not
R30233:30234 VST.floyd.SeparationLogicAsLogic <> v2:398 var
R30228:30229 VST.floyd.SeparationLogicAsLogic <> id:388 var
R30277:30279 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R30289:30290 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R30284:30288 VST.msl.shares <> share def
binder 30280:30281 <> sh:399
R30291:30293 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R30302:30303 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R30298:30301 compcert.cfrontend.Clight <> expr ind
binder 30294:30295 <> e1:400
R30304:30306 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R30315:30316 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R30311:30314 compcert.cfrontend.Ctypes <> type ind
binder 30307:30308 <> t1:401
R30317:30319 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R30327:30342 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R30324:30326 compcert.common.Values <> val ind
binder 30320:30321 <> v2:402
R30519:30531 VST.msl.seplog <> ::logic:x_'&&'_x not
R30343:30346 VST.msl.seplog <> ::logic:'!!'_x not
R30518:30518 VST.msl.seplog <> ::logic:'!!'_x not
R30362:30383 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R30348:30350 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30347:30347 VST.floyd.SeparationLogicAsLogic <> e:389 var
R30351:30355 compcert.cfrontend.Clight <> Ecast constr
R30360:30361 VST.floyd.SeparationLogicAsLogic <> t1:401 var
R30357:30358 VST.floyd.SeparationLogicAsLogic <> e1:400 var
R30414:30435 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R30404:30406 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30384:30394 VST.veric.SeparationLogic <> typeof_temp def
R30402:30403 VST.floyd.SeparationLogicAsLogic <> id:388 var
R30396:30400 VST.floyd.SeparationLogicAsLogic <> Delta:385 var
R30407:30410 Coq.Init.Datatypes <> Some constr
R30412:30413 VST.floyd.SeparationLogicAsLogic <> t1:401 var
R30479:30500 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R30471:30473 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30436:30455 VST.veric.SeparationLogic <> cast_pointer_to_bool def
R30469:30470 VST.floyd.SeparationLogicAsLogic <> t1:401 var
R30458:30463 compcert.cfrontend.Clight <> typeof def
R30465:30466 VST.floyd.SeparationLogicAsLogic <> e1:400 var
R30474:30478 Coq.Init.Datatypes <> false constr
R30501:30514 VST.veric.shares <> readable_share def
R30516:30517 VST.floyd.SeparationLogicAsLogic <> sh:399 var
R30532:30536 VST.msl.seplog <> ::logic:'|>'_x not
R30798:30798 VST.msl.seplog <> ::logic:'|>'_x not
R30700:30717 VST.msl.seplog <> ::logic:x_'&&'_x not
R30628:30646 VST.msl.seplog <> ::logic:x_'&&'_x not
R30699:30699 VST.msl.seplog <> ::logic:x_'&&'_x not
R30537:30537 VST.msl.seplog <> ::logic:x_'&&'_x not
R30556:30574 VST.msl.seplog <> ::logic:x_'&&'_x not
R30538:30546 VST.veric.SeparationLogic <> tc_lvalue def
R30554:30555 VST.floyd.SeparationLogicAsLogic <> e1:400 var
R30548:30552 VST.floyd.SeparationLogicAsLogic <> Delta:385 var
R30575:30579 VST.veric.SeparationLogic <> local def
R30582:30583 VST.veric.lift LiftNotation :::'`('_x_')' not
R30593:30626 VST.veric.lift LiftNotation :::'`('_x_')' not
R30584:30589 VST.veric.Cop2 <> tc_val def
R30591:30592 VST.floyd.SeparationLogicAsLogic <> t1:401 var
R30596:30597 VST.veric.lift LiftNotation :::'`('_x_')' not
R30625:30625 VST.veric.lift LiftNotation :::'`('_x_')' not
R30598:30606 VST.veric.expr <> eval_cast def
R30623:30624 VST.floyd.SeparationLogicAsLogic <> v2:402 var
R30620:30621 VST.floyd.SeparationLogicAsLogic <> t1:401 var
R30609:30614 compcert.cfrontend.Clight <> typeof def
R30616:30617 VST.floyd.SeparationLogicAsLogic <> e1:400 var
R30694:30696 VST.msl.seplog <> ::logic:x_'*'_x not
R30647:30648 VST.veric.lift LiftNotation :::'`('_x_')' not
R30670:30693 VST.veric.lift LiftNotation :::'`('_x_')' not
R30649:30654 VST.veric.SeparationLogic <> mapsto def
R30660:30665 compcert.cfrontend.Clight <> typeof def
R30667:30668 VST.floyd.SeparationLogicAsLogic <> e1:400 var
R30656:30657 VST.floyd.SeparationLogicAsLogic <> sh:399 var
R30690:30690 VST.veric.lift LiftNotation :::'`'_x not
R30691:30692 VST.floyd.SeparationLogicAsLogic <> v2:402 var
R30673:30683 VST.veric.expr <> eval_lvalue def
R30685:30686 VST.floyd.SeparationLogicAsLogic <> e1:400 var
R30697:30698 VST.msl.seplog <> TT meth
R30718:30722 VST.veric.seplog <> subst def
R30772:30776 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R30782:30785 VST.msl.seplog <> ::logic:x_'||'_x not
R30777:30779 VST.msl.seplog <> ::logic:'|>'_x not
R30780:30781 VST.msl.seplog <> FF meth
R30786:30794 VST.veric.tycontext <> RA_normal proj
R30796:30796 VST.floyd.SeparationLogicAsLogic <> R:387 var
R30728:30729 VST.veric.lift LiftNotation :::'`('_x_')' not
R30768:30768 VST.veric.lift LiftNotation :::'`('_x_')' not
R30730:30738 VST.veric.val_lemmas <> force_val def
R30741:30748 VST.veric.Clight_Cop2 <> sem_cast def
R30765:30766 VST.floyd.SeparationLogicAsLogic <> v2:402 var
R30762:30763 VST.floyd.SeparationLogicAsLogic <> t1:401 var
R30751:30756 compcert.cfrontend.Clight <> typeof def
R30758:30759 VST.floyd.SeparationLogicAsLogic <> e1:400 var
R30724:30725 VST.floyd.SeparationLogicAsLogic <> id:388 var
R28782:28786 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R28817:28817 VST.floyd.SeparationLogicAsLogic <> R:387 var
R28806:28809 compcert.cfrontend.Clight <> Sset constr
R28814:28814 VST.floyd.SeparationLogicAsLogic <> e:389 var
R28811:28812 VST.floyd.SeparationLogicAsLogic <> id:388 var
R28803:28803 VST.floyd.SeparationLogicAsLogic <> P:386 var
R28797:28801 VST.floyd.SeparationLogicAsLogic <> Delta:385 var
R28791:28795 VST.floyd.SeparationLogicAsLogic <> Espec:384 var
R28788:28789 VST.floyd.SeparationLogicAsLogic <> CS:383 var
R30832:30835 compcert.cfrontend.Clight <> Sset constr
R30832:30835 compcert.cfrontend.Clight <> Sset constr
R30933:30943 VST.msl.log_normalize <> orp_derives thm
R30953:30963 VST.msl.log_normalize <> orp_derives thm
R30973:30983 VST.msl.log_normalize <> orp_derives thm
R30933:30943 VST.msl.log_normalize <> orp_derives thm
R30953:30963 VST.msl.log_normalize <> orp_derives thm
R30973:30983 VST.msl.log_normalize <> orp_derives thm
R31004:31016 VST.msl.log_normalize <> later_derives thm
R31004:31016 VST.msl.log_normalize <> later_derives thm
R31031:31042 VST.msl.log_normalize <> andp_derives thm
R31031:31042 VST.msl.log_normalize <> andp_derives thm
R31063:31075 VST.veric.SeparationLogic <> subst_derives thm
R31063:31075 VST.veric.SeparationLogic <> subst_derives thm
R31091:31103 VST.msl.seplog <> derives_trans meth
R31115:31124 VST.msl.ghost_seplog <> bupd_intro meth
R31091:31103 VST.msl.seplog <> derives_trans meth
R31115:31124 VST.msl.ghost_seplog <> bupd_intro meth
R31140:31149 VST.msl.seplog <> orp_right2 meth
R31152:31163 VST.msl.seplog <> derives_refl meth
R31140:31149 VST.msl.seplog <> orp_right2 meth
R31152:31163 VST.msl.seplog <> derives_refl meth
R31178:31188 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31178:31188 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31215:31225 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31215:31225 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31251:31261 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31251:31261 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31287:31297 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31287:31297 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31323:31333 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31323:31333 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31360:31370 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31360:31370 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31397:31408 VST.msl.log_normalize <> andp_derives thm
R31397:31408 VST.msl.log_normalize <> andp_derives thm
R31429:31441 VST.msl.log_normalize <> later_derives thm
R31429:31441 VST.msl.log_normalize <> later_derives thm
R31462:31473 VST.msl.log_normalize <> andp_derives thm
R31462:31473 VST.msl.log_normalize <> andp_derives thm
R31494:31506 VST.veric.SeparationLogic <> subst_derives thm
R31494:31506 VST.veric.SeparationLogic <> subst_derives thm
R31522:31534 VST.msl.seplog <> derives_trans meth
R31546:31555 VST.msl.ghost_seplog <> bupd_intro meth
R31522:31534 VST.msl.seplog <> derives_trans meth
R31546:31555 VST.msl.ghost_seplog <> bupd_intro meth
R31571:31580 VST.msl.seplog <> orp_right2 meth
R31583:31594 VST.msl.seplog <> derives_refl meth
R31571:31580 VST.msl.seplog <> orp_right2 meth
R31583:31594 VST.msl.seplog <> derives_refl meth
R31609:31619 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31609:31619 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31645:31655 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31645:31655 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31681:31691 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31681:31691 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31717:31728 VST.msl.log_normalize <> andp_derives thm
R31717:31728 VST.msl.log_normalize <> andp_derives thm
R31749:31761 VST.msl.log_normalize <> later_derives thm
R31749:31761 VST.msl.log_normalize <> later_derives thm
R31776:31787 VST.msl.log_normalize <> andp_derives thm
R31776:31787 VST.msl.log_normalize <> andp_derives thm
R31808:31820 VST.veric.SeparationLogic <> subst_derives thm
R31808:31820 VST.veric.SeparationLogic <> subst_derives thm
R31836:31848 VST.msl.seplog <> derives_trans meth
R31860:31869 VST.msl.ghost_seplog <> bupd_intro meth
R31836:31848 VST.msl.seplog <> derives_trans meth
R31860:31869 VST.msl.ghost_seplog <> bupd_intro meth
R31885:31894 VST.msl.seplog <> orp_right2 meth
R31897:31908 VST.msl.seplog <> derives_refl meth
R31885:31894 VST.msl.seplog <> orp_right2 meth
R31897:31908 VST.msl.seplog <> derives_refl meth
R31923:31933 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31923:31933 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31959:31969 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31959:31969 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31995:32005 VST.floyd.SeparationLogicFacts <> exp_derives thm
R31995:32005 VST.floyd.SeparationLogicFacts <> exp_derives thm
R32031:32041 VST.floyd.SeparationLogicFacts <> exp_derives thm
R32031:32041 VST.floyd.SeparationLogicFacts <> exp_derives thm
R32067:32078 VST.msl.log_normalize <> andp_derives thm
R32067:32078 VST.msl.log_normalize <> andp_derives thm
R32099:32111 VST.msl.log_normalize <> later_derives thm
R32099:32111 VST.msl.log_normalize <> later_derives thm
R32126:32137 VST.msl.log_normalize <> andp_derives thm
R32126:32137 VST.msl.log_normalize <> andp_derives thm
R32158:32170 VST.veric.SeparationLogic <> subst_derives thm
R32158:32170 VST.veric.SeparationLogic <> subst_derives thm
R32186:32198 VST.msl.seplog <> derives_trans meth
R32210:32219 VST.msl.ghost_seplog <> bupd_intro meth
R32186:32198 VST.msl.seplog <> derives_trans meth
R32210:32219 VST.msl.ghost_seplog <> bupd_intro meth
R32235:32244 VST.msl.seplog <> orp_right2 meth
R32247:32258 VST.msl.seplog <> derives_refl meth
R32235:32244 VST.msl.seplog <> orp_right2 meth
R32247:32258 VST.msl.seplog <> derives_refl meth
R32368:32374 Coq.Init.Logic <> eq_refl constr
R32368:32374 Coq.Init.Logic <> eq_refl constr
R32416:32426 VST.floyd.assert_lemmas <> orp_ENTAILL thm
R32436:32446 VST.floyd.assert_lemmas <> orp_ENTAILL thm
R32456:32466 VST.floyd.assert_lemmas <> orp_ENTAILL thm
R32416:32426 VST.floyd.assert_lemmas <> orp_ENTAILL thm
R32436:32446 VST.floyd.assert_lemmas <> orp_ENTAILL thm
R32456:32466 VST.floyd.assert_lemmas <> orp_ENTAILL thm
R32487:32499 VST.floyd.assert_lemmas <> later_ENTAILL thm
R32487:32499 VST.floyd.assert_lemmas <> later_ENTAILL thm
R32515:32524 VST.veric.SeparationLogic <> tc_temp_id def
R32527:32543 VST.veric.expr <> typecheck_temp_id def
R32562:32562 compcert.lib.Maps <> :::x_'!'_x not
R32579:32582 compcert.lib.Maps <> :::x_'!'_x not
R32563:32572 VST.veric.seplog <> temp_types def
R32562:32562 compcert.lib.Maps <> :::x_'!'_x not
R32579:32582 compcert.lib.Maps <> :::x_'!'_x not
R32563:32572 VST.veric.seplog <> temp_types def
R32623:32640 VST.floyd.assert_lemmas <> andp_subst_ENTAILL thm
R32670:32680 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R32623:32640 VST.floyd.assert_lemmas <> andp_subst_ENTAILL thm
R32670:32680 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R32704:32718 VST.veric.expr <> is_neutral_cast def
R32721:32734 VST.veric.expr <> implicit_deref def
R32737:32742 compcert.cfrontend.Clight <> typeof def
R32704:32718 VST.veric.expr <> is_neutral_cast def
R32721:32734 VST.veric.expr <> implicit_deref def
R32737:32742 compcert.cfrontend.Clight <> typeof def
R32813:32817 VST.veric.SeparationLogic <> local def
R32820:32824 VST.veric.mpred <> lift1 def
R32867:32876 VST.msl.seplog <> andp_left2 meth
R32879:32888 VST.msl.seplog <> andp_left1 meth
R32867:32876 VST.msl.seplog <> andp_left2 meth
R32879:32888 VST.msl.seplog <> andp_left1 meth
R32906:32918 VST.msl.seplog <> derives_trans meth
R32928:32947 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R32906:32918 VST.msl.seplog <> derives_trans meth
R32928:32947 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R33011:33041 VST.veric.expr2 <> neutral_cast_subsumption' thm
R33011:33041 VST.veric.expr2 <> neutral_cast_subsumption' thm
R33065:33087 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R33065:33087 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R33116:33126 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R33116:33126 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R33152:33162 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R33152:33162 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R33187:33197 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R33187:33197 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R33222:33232 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R33222:33232 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R33257:33267 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R33257:33267 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R33293:33303 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R33293:33303 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R33395:33407 VST.floyd.assert_lemmas <> later_ENTAILL thm
R33395:33407 VST.floyd.assert_lemmas <> later_ENTAILL thm
R33423:33447 VST.veric.SeparationLogic <> typecheck_tid_ptr_compare def
R33473:33473 compcert.lib.Maps <> :::x_'!'_x not
R33490:33493 compcert.lib.Maps <> :::x_'!'_x not
R33474:33483 VST.veric.seplog <> temp_types def
R33473:33473 compcert.lib.Maps <> :::x_'!'_x not
R33490:33493 compcert.lib.Maps <> :::x_'!'_x not
R33474:33483 VST.veric.seplog <> temp_types def
R33532:33549 VST.floyd.assert_lemmas <> andp_subst_ENTAILL thm
R33579:33589 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R33532:33549 VST.floyd.assert_lemmas <> andp_subst_ENTAILL thm
R33579:33589 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R33623:33627 VST.veric.SeparationLogic <> local def
R33630:33634 VST.veric.mpred <> lift1 def
R33711:33720 VST.msl.seplog <> andp_left2 meth
R33723:33732 VST.msl.seplog <> andp_left1 meth
R33735:33744 VST.msl.seplog <> andp_left1 meth
R33711:33720 VST.msl.seplog <> andp_left2 meth
R33723:33732 VST.msl.seplog <> andp_left1 meth
R33735:33744 VST.msl.seplog <> andp_left1 meth
R33762:33774 VST.msl.seplog <> derives_trans meth
R33784:33795 VST.msl.log_normalize <> andp_derives thm
R33807:33818 VST.msl.seplog <> derives_refl meth
R33828:33839 VST.msl.log_normalize <> andp_derives thm
R33848:33867 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R33762:33774 VST.msl.seplog <> derives_trans meth
R33784:33795 VST.msl.log_normalize <> andp_derives thm
R33807:33818 VST.msl.seplog <> derives_refl meth
R33828:33839 VST.msl.log_normalize <> andp_derives thm
R33848:33867 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R33848:33867 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R33968:33988 VST.veric.Clight_Cop2 <> sem_binary_operation' def
R34001:34007 VST.veric.Clight_Cop2 <> sem_cmp def
R34010:34023 VST.veric.expr <> op_to_cmp def
R33968:33988 VST.veric.Clight_Cop2 <> sem_binary_operation' def
R34001:34007 VST.veric.Clight_Cop2 <> sem_cmp def
R34010:34023 VST.veric.expr <> op_to_cmp def
R34078:34106 VST.veric.binop_lemmas2 <> tc_val'_sem_cmp thm
R34078:34106 VST.veric.binop_lemmas2 <> tc_val'_sem_cmp thm
R34129:34151 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R34129:34151 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R34180:34190 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34180:34190 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34215:34225 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34215:34225 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34250:34260 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34250:34260 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34334:34346 VST.floyd.assert_lemmas <> later_ENTAILL thm
R34334:34346 VST.floyd.assert_lemmas <> later_ENTAILL thm
R34362:34372 VST.veric.SeparationLogic <> typeof_temp def
R34397:34397 compcert.lib.Maps <> :::x_'!'_x not
R34414:34417 compcert.lib.Maps <> :::x_'!'_x not
R34398:34407 VST.veric.seplog <> temp_types def
R34397:34397 compcert.lib.Maps <> :::x_'!'_x not
R34414:34417 compcert.lib.Maps <> :::x_'!'_x not
R34398:34407 VST.veric.seplog <> temp_types def
R34451:34468 VST.floyd.assert_lemmas <> andp_subst_ENTAILL thm
R34498:34508 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R34451:34468 VST.floyd.assert_lemmas <> andp_subst_ENTAILL thm
R34498:34508 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R34545:34554 VST.msl.seplog <> andp_left1 meth
R34545:34554 VST.msl.seplog <> andp_left1 meth
R34571:34580 VST.msl.seplog <> andp_left2 meth
R34571:34580 VST.msl.seplog <> andp_left2 meth
R34611:34615 VST.veric.SeparationLogic <> local def
R34618:34622 VST.veric.mpred <> lift1 def
R34679:34708 VST.veric.expr2 <> neutral_cast_subsumption thm
R34679:34708 VST.veric.expr2 <> neutral_cast_subsumption thm
R34732:34754 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R34732:34754 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R34783:34793 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34783:34793 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34818:34828 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34818:34828 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34853:34863 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34853:34863 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34888:34898 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34888:34898 VST.floyd.assert_lemmas <> exp_ENTAILL thm
R34977:34989 VST.floyd.assert_lemmas <> later_ENTAILL thm
R34977:34989 VST.floyd.assert_lemmas <> later_ENTAILL thm
R35005:35015 VST.veric.SeparationLogic <> typeof_temp def
R35040:35040 compcert.lib.Maps <> :::x_'!'_x not
R35057:35060 compcert.lib.Maps <> :::x_'!'_x not
R35041:35050 VST.veric.seplog <> temp_types def
R35040:35040 compcert.lib.Maps <> :::x_'!'_x not
R35057:35060 compcert.lib.Maps <> :::x_'!'_x not
R35041:35050 VST.veric.seplog <> temp_types def
R35094:35111 VST.floyd.assert_lemmas <> andp_subst_ENTAILL thm
R35141:35151 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R35094:35111 VST.floyd.assert_lemmas <> andp_subst_ENTAILL thm
R35141:35151 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R35188:35197 VST.msl.seplog <> andp_left1 meth
R35188:35197 VST.msl.seplog <> andp_left1 meth
R35214:35223 VST.msl.seplog <> andp_left2 meth
R35214:35223 VST.msl.seplog <> andp_left2 meth
R35254:35258 VST.veric.SeparationLogic <> local def
R35261:35265 VST.veric.mpred <> lift1 def
R35335:35357 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R35335:35357 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
prf 35386:35403 DeepEmbedded semax_Sbuiltin_inv
R35418:35426 VST.veric.mpred <> compspecs class
binder 35414:35415 <> CS:403
R35437:35446 VST.veric.juicy_extspec <> OracleKind class
binder 35430:35434 <> Espec:404
binder 35449:35453 <> Delta:405
binder 35455:35455 <> P:406
binder 35457:35457 <> R:407
binder 35459:35461 <> opt:408
binder 35463:35465 <> ext:409
binder 35467:35468 <> tl:410
binder 35470:35471 <> el:411
R35526:35529 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R35582:35586 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R35554:35558 VST.msl.seplog <> ::logic:x_'&&'_x not
R35581:35581 VST.msl.seplog <> ::logic:x_'&&'_x not
R35530:35534 VST.veric.SeparationLogic <> local def
R35537:35546 VST.veric.SeparationLogic <> tc_environ def
R35548:35552 VST.floyd.SeparationLogicAsLogic <> Delta:405 var
R35576:35579 VST.msl.seplog <> ::logic:x_'&&'_x not
R35559:35569 VST.veric.SeparationLogic <> allp_fun_id def
R35571:35575 VST.floyd.SeparationLogicAsLogic <> Delta:405 var
R35580:35580 VST.floyd.SeparationLogicAsLogic <> P:406 var
R35587:35591 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R35597:35600 VST.msl.seplog <> ::logic:x_'||'_x not
R35592:35594 VST.msl.seplog <> ::logic:'|>'_x not
R35595:35596 VST.msl.seplog <> FF meth
R35601:35602 VST.msl.seplog <> FF meth
R35477:35481 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R35525:35525 VST.floyd.SeparationLogicAsLogic <> R:407 var
R35501:35508 compcert.cfrontend.Clight <> Sbuiltin constr
R35521:35522 VST.floyd.SeparationLogicAsLogic <> el:411 var
R35518:35519 VST.floyd.SeparationLogicAsLogic <> tl:410 var
R35514:35516 VST.floyd.SeparationLogicAsLogic <> ext:409 var
R35510:35512 VST.floyd.SeparationLogicAsLogic <> opt:408 var
R35498:35498 VST.floyd.SeparationLogicAsLogic <> P:406 var
R35492:35496 VST.floyd.SeparationLogicAsLogic <> Delta:405 var
R35486:35490 VST.floyd.SeparationLogicAsLogic <> Espec:404 var
R35483:35484 VST.floyd.SeparationLogicAsLogic <> CS:403 var
R35634:35641 compcert.cfrontend.Clight <> Sbuiltin constr
R35634:35641 compcert.cfrontend.Clight <> Sbuiltin constr
R35725:35731 VST.msl.log_normalize <> FF_left thm
R35725:35731 VST.msl.log_normalize <> FF_left thm
R35816:35822 VST.msl.log_normalize <> FF_left thm
R35816:35822 VST.msl.log_normalize <> FF_left thm
prf 35837:35852 DeepEmbedded semax_Slabel_inv
R35867:35875 VST.veric.mpred <> compspecs class
binder 35863:35864 <> CS:412
R35886:35895 VST.veric.juicy_extspec <> OracleKind class
binder 35879:35883 <> Espec:413
binder 35898:35902 <> Delta:414
binder 35904:35904 <> P:415
binder 35906:35906 <> R:416
binder 35908:35908 <> l:417
binder 35910:35910 <> c:418
R35953:35956 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R35958:35962 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R35983:35983 VST.floyd.SeparationLogicAsLogic <> R:416 var
R35981:35981 VST.floyd.SeparationLogicAsLogic <> c:418 var
R35979:35979 VST.floyd.SeparationLogicAsLogic <> P:415 var
R35973:35977 VST.floyd.SeparationLogicAsLogic <> Delta:414 var
R35967:35971 VST.floyd.SeparationLogicAsLogic <> Espec:413 var
R35964:35965 VST.floyd.SeparationLogicAsLogic <> CS:412 var
R35916:35920 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R35952:35952 VST.floyd.SeparationLogicAsLogic <> R:416 var
R35940:35945 compcert.cfrontend.Clight <> Slabel constr
R35949:35949 VST.floyd.SeparationLogicAsLogic <> c:418 var
R35947:35947 VST.floyd.SeparationLogicAsLogic <> l:417 var
R35937:35937 VST.floyd.SeparationLogicAsLogic <> P:415 var
R35931:35935 VST.floyd.SeparationLogicAsLogic <> Delta:414 var
R35925:35929 VST.floyd.SeparationLogicAsLogic <> Espec:413 var
R35922:35923 VST.floyd.SeparationLogicAsLogic <> CS:412 var
R36015:36020 compcert.cfrontend.Clight <> Slabel constr
R36015:36020 compcert.cfrontend.Clight <> Slabel constr
R36141:36152 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R36141:36152 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
prf 36174:36188 DeepEmbedded semax_Sgoto_inv
R36203:36211 VST.veric.mpred <> compspecs class
binder 36199:36200 <> CS:419
R36222:36231 VST.veric.juicy_extspec <> OracleKind class
binder 36215:36219 <> Espec:420
binder 36234:36238 <> Delta:421
binder 36240:36240 <> P:422
binder 36242:36242 <> R:423
binder 36244:36244 <> l:424
R36284:36287 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36340:36344 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R36312:36316 VST.msl.seplog <> ::logic:x_'&&'_x not
R36339:36339 VST.msl.seplog <> ::logic:x_'&&'_x not
R36288:36292 VST.veric.SeparationLogic <> local def
R36295:36304 VST.veric.SeparationLogic <> tc_environ def
R36306:36310 VST.floyd.SeparationLogicAsLogic <> Delta:421 var
R36334:36337 VST.msl.seplog <> ::logic:x_'&&'_x not
R36317:36327 VST.veric.SeparationLogic <> allp_fun_id def
R36329:36333 VST.floyd.SeparationLogicAsLogic <> Delta:421 var
R36338:36338 VST.floyd.SeparationLogicAsLogic <> P:422 var
R36345:36349 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R36355:36358 VST.msl.seplog <> ::logic:x_'||'_x not
R36350:36352 VST.msl.seplog <> ::logic:'|>'_x not
R36353:36354 VST.msl.seplog <> FF meth
R36359:36360 VST.msl.seplog <> FF meth
R36250:36254 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R36283:36283 VST.floyd.SeparationLogicAsLogic <> R:423 var
R36274:36278 compcert.cfrontend.Clight <> Sgoto constr
R36280:36280 VST.floyd.SeparationLogicAsLogic <> l:424 var
R36271:36271 VST.floyd.SeparationLogicAsLogic <> P:422 var
R36265:36269 VST.floyd.SeparationLogicAsLogic <> Delta:421 var
R36259:36263 VST.floyd.SeparationLogicAsLogic <> Espec:420 var
R36256:36257 VST.floyd.SeparationLogicAsLogic <> CS:419 var
R36392:36396 compcert.cfrontend.Clight <> Sgoto constr
R36392:36396 compcert.cfrontend.Clight <> Sgoto constr
R36468:36474 VST.msl.log_normalize <> FF_left thm
R36468:36474 VST.msl.log_normalize <> FF_left thm
R36559:36565 VST.msl.log_normalize <> FF_left thm
R36559:36565 VST.msl.log_normalize <> FF_left thm
prf 36580:36599 DeepEmbedded semax_ifthenelse_inv
R36614:36622 VST.veric.mpred <> compspecs class
binder 36610:36611 <> CS:425
R36633:36642 VST.veric.juicy_extspec <> OracleKind class
binder 36626:36630 <> Espec:426
binder 36645:36649 <> Delta:427
binder 36651:36651 <> P:428
binder 36653:36653 <> R:429
binder 36655:36655 <> b:430
binder 36657:36658 <> c1:431
binder 36660:36661 <> c2:432
R36713:36718 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36771:36777 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R36743:36747 VST.msl.seplog <> ::logic:x_'&&'_x not
R36770:36770 VST.msl.seplog <> ::logic:x_'&&'_x not
R36719:36723 VST.veric.SeparationLogic <> local def
R36726:36735 VST.veric.SeparationLogic <> tc_environ def
R36737:36741 VST.floyd.SeparationLogicAsLogic <> Delta:427 var
R36765:36768 VST.msl.seplog <> ::logic:x_'&&'_x not
R36748:36758 VST.veric.SeparationLogic <> allp_fun_id def
R36760:36764 VST.floyd.SeparationLogicAsLogic <> Delta:427 var
R36769:36769 VST.floyd.SeparationLogicAsLogic <> P:428 var
R36778:36782 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R36788:36792 VST.msl.seplog <> ::logic:x_'||'_x not
R37109:37109 VST.msl.seplog <> ::logic:x_'||'_x not
R36783:36785 VST.msl.seplog <> ::logic:'|>'_x not
R36786:36787 VST.msl.seplog <> FF meth
R36890:36895 VST.msl.seplog <> ::logic:x_'&&'_x not
R36825:36828 VST.msl.seplog <> ::logic:x_'&&'_x not
R36793:36796 VST.msl.seplog <> ::logic:'!!'_x not
R36824:36824 VST.msl.seplog <> ::logic:'!!'_x not
R36817:36819 Coq.Init.Logic <> ::type_scope:x_'='_x not
R36797:36805 VST.veric.expr <> bool_type def
R36808:36813 compcert.cfrontend.Clight <> typeof def
R36815:36815 VST.floyd.SeparationLogicAsLogic <> b:430 var
R36820:36823 Coq.Init.Datatypes <> true constr
R36829:36835 VST.veric.SeparationLogic <> tc_expr def
R36844:36848 compcert.cfrontend.Clight <> Eunop constr
R36866:36869 compcert.cfrontend.Ctypes <> Tint constr
R36882:36887 compcert.cfrontend.Ctypes <> noattr def
R36875:36880 compcert.cfrontend.Ctypes <> Signed constr
R36871:36873 compcert.cfrontend.Ctypes <> I32 constr
R36863:36863 VST.floyd.SeparationLogicAsLogic <> b:430 var
R36850:36861 compcert.cfrontend.Cop <> Onotbool constr
R36837:36841 VST.floyd.SeparationLogicAsLogic <> Delta:427 var
R36896:36898 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R36919:36922 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R36910:36913 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36914:36918 VST.veric.mpred <> mpred def
R36903:36909 VST.veric.mpred <> environ ind
binder 36899:36900 <> P':433
R37101:37106 VST.msl.seplog <> ::logic:x_'&&'_x not
R36923:36926 VST.msl.seplog <> ::logic:'!!'_x not
R37100:37100 VST.msl.seplog <> ::logic:'!!'_x not
R37008:37017 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R36928:36932 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R37007:37007 VST.floyd.SeparationLogicAsLogic <> R:429 var
R37004:37005 VST.floyd.SeparationLogicAsLogic <> c1:431 var
R36952:36955 VST.msl.seplog <> ::logic:x_'&&'_x not
R36950:36951 VST.floyd.SeparationLogicAsLogic <> P':433 var
R36956:36960 VST.veric.SeparationLogic <> local def
R36963:36964 VST.veric.lift LiftNotation :::'`('_x_')' not
R36986:37000 VST.veric.lift LiftNotation :::'`('_x_')' not
R36965:36974 VST.veric.SeparationLogic <> typed_true def
R36977:36982 compcert.cfrontend.Clight <> typeof def
R36984:36984 VST.floyd.SeparationLogicAsLogic <> b:430 var
R36989:36997 VST.veric.expr <> eval_expr def
R36999:36999 VST.floyd.SeparationLogicAsLogic <> b:430 var
R36943:36947 VST.floyd.SeparationLogicAsLogic <> Delta:427 var
R36937:36941 VST.floyd.SeparationLogicAsLogic <> Espec:426 var
R36934:36935 VST.floyd.SeparationLogicAsLogic <> CS:425 var
R37019:37023 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R37099:37099 VST.floyd.SeparationLogicAsLogic <> R:429 var
R37096:37097 VST.floyd.SeparationLogicAsLogic <> c2:432 var
R37043:37046 VST.msl.seplog <> ::logic:x_'&&'_x not
R37041:37042 VST.floyd.SeparationLogicAsLogic <> P':433 var
R37047:37051 VST.veric.SeparationLogic <> local def
R37054:37055 VST.veric.lift LiftNotation :::'`('_x_')' not
R37078:37092 VST.veric.lift LiftNotation :::'`('_x_')' not
R37056:37066 VST.veric.SeparationLogic <> typed_false def
R37069:37074 compcert.cfrontend.Clight <> typeof def
R37076:37076 VST.floyd.SeparationLogicAsLogic <> b:430 var
R37081:37089 VST.veric.expr <> eval_expr def
R37091:37091 VST.floyd.SeparationLogicAsLogic <> b:430 var
R37034:37038 VST.floyd.SeparationLogicAsLogic <> Delta:427 var
R37028:37032 VST.floyd.SeparationLogicAsLogic <> Espec:426 var
R37025:37026 VST.floyd.SeparationLogicAsLogic <> CS:425 var
R37107:37108 VST.floyd.SeparationLogicAsLogic <> P':433 var
R36667:36671 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R36712:36712 VST.floyd.SeparationLogicAsLogic <> R:429 var
R36691:36701 compcert.cfrontend.Clight <> Sifthenelse constr
R36708:36709 VST.floyd.SeparationLogicAsLogic <> c2:432 var
R36705:36706 VST.floyd.SeparationLogicAsLogic <> c1:431 var
R36703:36703 VST.floyd.SeparationLogicAsLogic <> b:430 var
R36688:36688 VST.floyd.SeparationLogicAsLogic <> P:428 var
R36682:36686 VST.floyd.SeparationLogicAsLogic <> Delta:427 var
R36676:36680 VST.floyd.SeparationLogicAsLogic <> Espec:426 var
R36673:36674 VST.floyd.SeparationLogicAsLogic <> CS:425 var
R37141:37151 compcert.cfrontend.Clight <> Sifthenelse constr
R37141:37151 compcert.cfrontend.Clight <> Sifthenelse constr
R37277:37288 VST.msl.log_normalize <> andp_derives thm
R37277:37288 VST.msl.log_normalize <> andp_derives thm
R37308:37316 VST.msl.seplog <> exp_right meth
R37308:37316 VST.msl.seplog <> exp_right meth
R37332:37341 VST.msl.seplog <> andp_right meth
R37351:37360 VST.msl.seplog <> prop_right meth
R37332:37341 VST.msl.seplog <> andp_right meth
R37351:37360 VST.msl.seplog <> prop_right meth
R37490:37501 VST.msl.log_normalize <> andp_derives thm
R37490:37501 VST.msl.log_normalize <> andp_derives thm
R37520:37530 VST.floyd.SeparationLogicFacts <> exp_derives thm
R37520:37530 VST.floyd.SeparationLogicFacts <> exp_derives thm
R37570:37579 VST.msl.seplog <> andp_right meth
R37570:37579 VST.msl.seplog <> andp_right meth
R37598:37607 VST.msl.seplog <> prop_right meth
R37598:37607 VST.msl.seplog <> prop_right meth
R37647:37658 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R37647:37658 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R37674:37690 VST.floyd.assert_lemmas <> derives_full_refl thm
R37674:37690 VST.floyd.assert_lemmas <> derives_full_refl thm
R37706:37717 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R37706:37717 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R37733:37749 VST.floyd.assert_lemmas <> derives_full_refl thm
R37733:37749 VST.floyd.assert_lemmas <> derives_full_refl thm
prf 37764:37777 DeepEmbedded semax_loop_inv
R37792:37800 VST.veric.mpred <> compspecs class
binder 37788:37789 <> CS:434
R37811:37820 VST.veric.juicy_extspec <> OracleKind class
binder 37804:37808 <> Espec:435
binder 37823:37827 <> Delta:436
binder 37829:37829 <> P:437
binder 37831:37831 <> R:438
binder 37833:37836 <> body:439
binder 37838:37841 <> incr:440
R37889:37894 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R37947:37953 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R37919:37923 VST.msl.seplog <> ::logic:x_'&&'_x not
R37946:37946 VST.msl.seplog <> ::logic:x_'&&'_x not
R37895:37899 VST.veric.SeparationLogic <> local def
R37902:37911 VST.veric.SeparationLogic <> tc_environ def
R37913:37917 VST.floyd.SeparationLogicAsLogic <> Delta:436 var
R37941:37944 VST.msl.seplog <> ::logic:x_'&&'_x not
R37924:37934 VST.veric.SeparationLogic <> allp_fun_id def
R37936:37940 VST.floyd.SeparationLogicAsLogic <> Delta:436 var
R37945:37945 VST.floyd.SeparationLogicAsLogic <> P:437 var
R37954:37958 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R37964:37967 VST.msl.seplog <> ::logic:x_'||'_x not
R37959:37961 VST.msl.seplog <> ::logic:'|>'_x not
R37962:37963 VST.msl.seplog <> FF meth
R37968:37970 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R37990:37991 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R37981:37984 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R37985:37989 VST.veric.mpred <> mpred def
R37974:37980 VST.veric.mpred <> environ ind
binder 37971:37971 <> Q:441
R37992:37994 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R38015:38018 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R38006:38009 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38010:38014 VST.veric.mpred <> mpred def
R37999:38005 VST.veric.mpred <> environ ind
binder 37995:37996 <> Q':442
R38138:38143 VST.msl.seplog <> ::logic:x_'&&'_x not
R38019:38022 VST.msl.seplog <> ::logic:'!!'_x not
R38137:38137 VST.msl.seplog <> ::logic:'!!'_x not
R38075:38084 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R38024:38028 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R38053:38068 VST.veric.SeparationLogic <> loop1_ret_assert def
R38073:38073 VST.floyd.SeparationLogicAsLogic <> R:438 var
R38070:38071 VST.floyd.SeparationLogicAsLogic <> Q':442 var
R38047:38050 VST.floyd.SeparationLogicAsLogic <> body:439 var
R38045:38045 VST.floyd.SeparationLogicAsLogic <> Q:441 var
R38039:38043 VST.floyd.SeparationLogicAsLogic <> Delta:436 var
R38033:38037 VST.floyd.SeparationLogicAsLogic <> Espec:435 var
R38030:38031 VST.floyd.SeparationLogicAsLogic <> CS:434 var
R38086:38090 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R38116:38131 VST.veric.SeparationLogic <> loop2_ret_assert def
R38135:38135 VST.floyd.SeparationLogicAsLogic <> R:438 var
R38133:38133 VST.floyd.SeparationLogicAsLogic <> Q:441 var
R38110:38113 VST.floyd.SeparationLogicAsLogic <> incr:440 var
R38107:38108 VST.floyd.SeparationLogicAsLogic <> Q':442 var
R38101:38105 VST.floyd.SeparationLogicAsLogic <> Delta:436 var
R38095:38099 VST.floyd.SeparationLogicAsLogic <> Espec:435 var
R38092:38093 VST.floyd.SeparationLogicAsLogic <> CS:434 var
R38144:38144 VST.floyd.SeparationLogicAsLogic <> Q:441 var
R37847:37851 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R37888:37888 VST.floyd.SeparationLogicAsLogic <> R:438 var
R37871:37875 compcert.cfrontend.Clight <> Sloop constr
R37882:37885 VST.floyd.SeparationLogicAsLogic <> incr:440 var
R37877:37880 VST.floyd.SeparationLogicAsLogic <> body:439 var
R37868:37868 VST.floyd.SeparationLogicAsLogic <> P:437 var
R37862:37866 VST.floyd.SeparationLogicAsLogic <> Delta:436 var
R37856:37860 VST.floyd.SeparationLogicAsLogic <> Espec:435 var
R37853:37854 VST.floyd.SeparationLogicAsLogic <> CS:434 var
R38176:38180 compcert.cfrontend.Clight <> Sloop constr
R38176:38180 compcert.cfrontend.Clight <> Sloop constr
R38309:38317 VST.msl.seplog <> exp_right meth
R38309:38317 VST.msl.seplog <> exp_right meth
R38334:38342 VST.msl.seplog <> exp_right meth
R38334:38342 VST.msl.seplog <> exp_right meth
R38359:38368 VST.msl.seplog <> andp_right meth
R38378:38387 VST.msl.seplog <> prop_right meth
R38359:38368 VST.msl.seplog <> andp_right meth
R38378:38387 VST.msl.seplog <> prop_right meth
R38517:38527 VST.floyd.SeparationLogicFacts <> exp_derives thm
R38517:38527 VST.floyd.SeparationLogicFacts <> exp_derives thm
R38550:38560 VST.floyd.SeparationLogicFacts <> exp_derives thm
R38550:38560 VST.floyd.SeparationLogicFacts <> exp_derives thm
R38599:38608 VST.msl.seplog <> andp_right meth
R38618:38627 VST.msl.seplog <> prop_right meth
R38599:38608 VST.msl.seplog <> andp_right meth
R38618:38627 VST.msl.seplog <> prop_right meth
R38861:38872 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R38902:38917 VST.veric.SeparationLogic <> loop1_ret_assert def
R38861:38872 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R38934:38950 VST.floyd.assert_lemmas <> derives_full_refl thm
R38934:38950 VST.floyd.assert_lemmas <> derives_full_refl thm
R38992:39008 VST.floyd.assert_lemmas <> derives_full_refl thm
R38992:39008 VST.floyd.assert_lemmas <> derives_full_refl thm
R39090:39106 VST.floyd.assert_lemmas <> derives_full_refl thm
R39090:39106 VST.floyd.assert_lemmas <> derives_full_refl thm
R39342:39353 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R39383:39398 VST.veric.SeparationLogic <> loop1_ret_assert def
R39342:39353 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R39415:39431 VST.floyd.assert_lemmas <> derives_full_refl thm
R39415:39431 VST.floyd.assert_lemmas <> derives_full_refl thm
R39473:39489 VST.floyd.assert_lemmas <> derives_full_refl thm
R39473:39489 VST.floyd.assert_lemmas <> derives_full_refl thm
R39571:39587 VST.floyd.assert_lemmas <> derives_full_refl thm
R39571:39587 VST.floyd.assert_lemmas <> derives_full_refl thm
prf 39641:39656 DeepEmbedded semax_switch_inv
R39671:39679 VST.veric.mpred <> compspecs class
binder 39667:39668 <> CS:443
R39690:39699 VST.veric.juicy_extspec <> OracleKind class
binder 39683:39687 <> Espec:444
binder 39702:39706 <> Delta:445
binder 39708:39708 <> P:446
binder 39710:39710 <> R:447
binder 39712:39712 <> a:448
binder 39714:39715 <> sl:449
R39760:39765 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39818:39830 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R39790:39794 VST.msl.seplog <> ::logic:x_'&&'_x not
R39817:39817 VST.msl.seplog <> ::logic:x_'&&'_x not
R39766:39770 VST.veric.SeparationLogic <> local def
R39773:39782 VST.veric.SeparationLogic <> tc_environ def
R39784:39788 VST.floyd.SeparationLogicAsLogic <> Delta:445 var
R39812:39815 VST.msl.seplog <> ::logic:x_'&&'_x not
R39795:39805 VST.veric.SeparationLogic <> allp_fun_id def
R39807:39811 VST.floyd.SeparationLogicAsLogic <> Delta:445 var
R39816:39816 VST.floyd.SeparationLogicAsLogic <> P:446 var
R39831:39835 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R39841:39844 VST.msl.seplog <> ::logic:x_'||'_x not
R39836:39838 VST.msl.seplog <> ::logic:'|>'_x not
R39839:39840 VST.msl.seplog <> FF meth
R39900:39911 VST.msl.seplog <> ::logic:x_'&&'_x not
R39879:39883 VST.msl.seplog <> ::logic:x_'&&'_x not
R39899:39899 VST.msl.seplog <> ::logic:x_'&&'_x not
R39845:39848 VST.msl.seplog <> ::logic:'!!'_x not
R39878:39878 VST.msl.seplog <> ::logic:'!!'_x not
R39871:39873 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39849:39859 VST.veric.expr <> is_int_type def
R39862:39867 compcert.cfrontend.Clight <> typeof def
R39869:39869 VST.floyd.SeparationLogicAsLogic <> a:448 var
R39874:39877 Coq.Init.Datatypes <> true constr
R39884:39890 VST.veric.SeparationLogic <> tc_expr def
R39898:39898 VST.floyd.SeparationLogicAsLogic <> a:448 var
R39892:39896 VST.floyd.SeparationLogicAsLogic <> Delta:445 var
R39912:39914 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R39935:39938 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R39926:39929 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39930:39934 VST.veric.mpred <> mpred def
R39919:39925 VST.veric.mpred <> environ ind
binder 39915:39916 <> P':450
R40155:40158 VST.msl.seplog <> ::logic:x_'&&'_x not
R39939:39942 VST.msl.seplog <> ::logic:'!!'_x not
R40154:40154 VST.msl.seplog <> ::logic:'!!'_x not
binder 39950:39950 <> n:451
R39959:39963 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R40134:40150 VST.veric.SeparationLogic <> switch_ret_assert def
R40152:40152 VST.floyd.SeparationLogicAsLogic <> R:447 var
R40056:40079 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R40082:40094 compcert.cfrontend.Clight <> select_switch def
R40113:40114 VST.floyd.SeparationLogicAsLogic <> sl:449 var
R40097:40108 compcert.lib.Integers Int unsigned def
R40110:40110 VST.floyd.SeparationLogicAsLogic <> n:451 var
R40032:40035 VST.msl.seplog <> ::logic:x_'&&'_x not
R39997:40001 VST.veric.SeparationLogic <> local def
R40004:40004 VST.veric.lift LiftNotation :::'`'_x not
R40007:40030 VST.veric.lift LiftNotation :::'`'_x not
R40005:40006 Coq.Init.Logic <> eq ind
R40022:40023 VST.veric.lift LiftNotation :::'`('_x_')' not
R40030:40030 VST.veric.lift LiftNotation :::'`('_x_')' not
R40024:40027 compcert.common.Values <> Vint constr
R40029:40029 VST.floyd.SeparationLogicAsLogic <> n:451 var
R40009:40017 VST.veric.expr <> eval_expr def
R40019:40019 VST.floyd.SeparationLogicAsLogic <> a:448 var
R40036:40037 VST.floyd.SeparationLogicAsLogic <> P':450 var
R39974:39978 VST.floyd.SeparationLogicAsLogic <> Delta:445 var
R39968:39972 VST.floyd.SeparationLogicAsLogic <> Espec:444 var
R39965:39966 VST.floyd.SeparationLogicAsLogic <> CS:443 var
R40159:40160 VST.floyd.SeparationLogicAsLogic <> P':450 var
R39721:39725 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax defax
R39759:39759 VST.floyd.SeparationLogicAsLogic <> R:447 var
R39745:39751 compcert.cfrontend.Clight <> Sswitch constr
R39755:39756 VST.floyd.SeparationLogicAsLogic <> sl:449 var
R39753:39753 VST.floyd.SeparationLogicAsLogic <> a:448 var
R39742:39742 VST.floyd.SeparationLogicAsLogic <> P:446 var
R39736:39740 VST.floyd.SeparationLogicAsLogic <> Delta:445 var
R39730:39734 VST.floyd.SeparationLogicAsLogic <> Espec:444 var
R39727:39728 VST.floyd.SeparationLogicAsLogic <> CS:443 var
R40192:40198 compcert.cfrontend.Clight <> Sswitch constr
R40192:40198 compcert.cfrontend.Clight <> Sswitch constr
R40298:40307 VST.msl.log_normalize <> andp_assoc thm
R40298:40307 VST.msl.log_normalize <> andp_assoc thm
R40298:40307 VST.msl.log_normalize <> andp_assoc thm
R40320:40331 VST.msl.log_normalize <> andp_derives thm
R40320:40331 VST.msl.log_normalize <> andp_derives thm
R40350:40359 VST.msl.seplog <> andp_right meth
R40350:40359 VST.msl.seplog <> andp_right meth
R40379:40387 VST.msl.seplog <> exp_right meth
R40379:40387 VST.msl.seplog <> exp_right meth
R40403:40412 VST.msl.seplog <> andp_right meth
R40422:40431 VST.msl.seplog <> prop_right meth
R40403:40412 VST.msl.seplog <> andp_right meth
R40422:40431 VST.msl.seplog <> prop_right meth
R40561:40572 VST.msl.log_normalize <> andp_derives thm
R40561:40572 VST.msl.log_normalize <> andp_derives thm
R40591:40601 VST.floyd.SeparationLogicFacts <> exp_derives thm
R40591:40601 VST.floyd.SeparationLogicFacts <> exp_derives thm
R40626:40637 VST.msl.log_normalize <> andp_derives thm
R40626:40637 VST.msl.log_normalize <> andp_derives thm
R40656:40667 VST.msl.log_normalize <> prop_derives thm
R40656:40667 VST.msl.log_normalize <> prop_derives thm
R40720:40731 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R40720:40731 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_conseq prfax
R40763:40779 VST.floyd.assert_lemmas <> derives_full_refl thm
R40763:40779 VST.floyd.assert_lemmas <> derives_full_refl thm
R40870:40876 VST.msl.log_normalize <> FF_left thm
R40870:40876 VST.msl.log_normalize <> FF_left thm
R41126:41165 VST.floyd.SeparationLogicFacts CLIGHT_SEPARATION_HOARE_LOGIC_EXTRACTION <> mod
R41191:41198 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Conseq.CSHL_Def <> modtype
mod 41120:41123 <> DeepEmbedded.Extr
R41221:41228 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Conseq.CSHL_Def <> modtype
mod 41209:41216 <> DeepEmbedded.Extr.CSHL_Def
R41259:41263 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R41259:41263 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
prf 41289:41308 DeepEmbedded.Extr semax_extract_exists
R41325:41333 VST.veric.mpred <> compspecs class
binder 41321:41322 <> CS:452
R41344:41353 VST.veric.juicy_extspec <> OracleKind class
binder 41337:41341 <> Espec:453
binder 41367:41367 <> A:454
R41384:41387 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R41395:41396 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R41397:41401 VST.veric.mpred <> mpred def
R41388:41394 VST.veric.mpred <> environ ind
R41383:41383 VST.floyd.SeparationLogicAsLogic <> A:454 var
binder 41379:41379 <> P:455
binder 41404:41404 <> c:456
R41414:41422 VST.veric.seplog <> tycontext ind
binder 41407:41411 <> Delta:457
R41429:41438 VST.veric.tycontext <> ret_assert rec
binder 41426:41426 <> R:458
R41444:41444 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R41486:41493 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R41495:41499 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R41532:41532 VST.floyd.SeparationLogicAsLogic <> R:458 var
R41530:41530 VST.floyd.SeparationLogicAsLogic <> c:456 var
R41517:41519 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R41523:41524 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R41522:41522 VST.floyd.SeparationLogicAsLogic <> A:454 var
binder 41520:41520 <> x:459
R41525:41525 VST.floyd.SeparationLogicAsLogic <> P:455 var
R41527:41527 VST.floyd.SeparationLogicAsLogic <> x:459 var
R41510:41514 VST.floyd.SeparationLogicAsLogic <> Delta:457 var
R41504:41508 VST.floyd.SeparationLogicAsLogic <> Espec:453 var
R41501:41502 VST.floyd.SeparationLogicAsLogic <> CS:452 var
binder 41452:41452 <> x:460
R41456:41460 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R41485:41485 VST.floyd.SeparationLogicAsLogic <> R:458 var
R41483:41483 VST.floyd.SeparationLogicAsLogic <> c:456 var
R41478:41478 VST.floyd.SeparationLogicAsLogic <> P:455 var
R41480:41480 VST.floyd.SeparationLogicAsLogic <> x:460 var
R41471:41475 VST.floyd.SeparationLogicAsLogic <> Delta:457 var
R41465:41469 VST.floyd.SeparationLogicAsLogic <> Espec:453 var
R41462:41463 VST.floyd.SeparationLogicAsLogic <> CS:452 var
binder 41616:41616 <> x:461
R41621:41634 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_skip_inv thm
R41645:41645 VST.floyd.SeparationLogicAsLogic <> x:461 var
binder 41616:41616 <> x:462
R41621:41634 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_skip_inv thm
R41645:41645 VST.floyd.SeparationLogicAsLogic <> x:462 var
R41661:41672 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R41661:41672 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R41690:41698 VST.msl.log_normalize <> exp_andp2 thm
R41707:41714 VST.msl.seplog <> exp_left meth
R41690:41698 VST.msl.log_normalize <> exp_andp2 thm
R41690:41698 VST.msl.log_normalize <> exp_andp2 thm
R41690:41698 VST.msl.log_normalize <> exp_andp2 thm
R41690:41698 VST.msl.log_normalize <> exp_andp2 thm
R41707:41714 VST.msl.seplog <> exp_left meth
R41760:41776 VST.floyd.assert_lemmas <> derives_full_refl thm
R41760:41776 VST.floyd.assert_lemmas <> derives_full_refl thm
R41791:41807 VST.floyd.assert_lemmas <> derives_full_refl thm
R41791:41807 VST.floyd.assert_lemmas <> derives_full_refl thm
R41822:41838 VST.floyd.assert_lemmas <> derives_full_refl thm
R41822:41838 VST.floyd.assert_lemmas <> derives_full_refl thm
R41861:41877 VST.floyd.assert_lemmas <> derives_full_refl thm
R41861:41877 VST.floyd.assert_lemmas <> derives_full_refl thm
R41893:41904 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post'' thm
R41919:41936 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R41893:41904 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post'' thm
R41919:41936 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R41952:41962 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R41952:41962 VST.floyd.assert_lemmas <> ENTAIL_refl thm
binder 41985:41985 <> x:463
R41990:42005 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_assign_inv thm
R42020:42020 VST.floyd.SeparationLogicAsLogic <> x:463 var
binder 41985:41985 <> x:464
R41990:42005 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_assign_inv thm
R42020:42020 VST.floyd.SeparationLogicAsLogic <> x:464 var
R42048:42055 VST.msl.seplog <> exp_left meth
R42048:42055 VST.msl.seplog <> exp_left meth
R42081:42089 VST.msl.log_normalize <> exp_andp2 thm
R42081:42089 VST.msl.log_normalize <> exp_andp2 thm
R42081:42089 VST.msl.log_normalize <> exp_andp2 thm
R42081:42089 VST.msl.log_normalize <> exp_andp2 thm
R42081:42089 VST.msl.log_normalize <> exp_andp2 thm
R42112:42123 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R42152:42168 VST.floyd.assert_lemmas <> derives_full_refl thm
R42112:42123 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R42152:42168 VST.floyd.assert_lemmas <> derives_full_refl thm
R42152:42168 VST.floyd.assert_lemmas <> derives_full_refl thm
R42152:42168 VST.floyd.assert_lemmas <> derives_full_refl thm
R42152:42168 VST.floyd.assert_lemmas <> derives_full_refl thm
R42198:42209 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R42250:42294 VST.floyd.SeparationLogicAsLogic AuxDefs semax_store_store_union_hack_backward constr
R42219:42235 VST.floyd.assert_lemmas <> derives_full_refl thm
R42198:42209 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R42219:42235 VST.floyd.assert_lemmas <> derives_full_refl thm
R42250:42294 VST.floyd.SeparationLogicAsLogic AuxDefs semax_store_store_union_hack_backward constr
R42319:42330 VST.msl.seplog <> derives_refl meth
R42319:42330 VST.msl.seplog <> derives_refl meth
R42354:42360 VST.msl.log_normalize <> FF_left thm
R42354:42360 VST.msl.log_normalize <> FF_left thm
R42384:42390 VST.msl.log_normalize <> FF_left thm
R42384:42390 VST.msl.log_normalize <> FF_left thm
R42422:42428 VST.msl.log_normalize <> FF_left thm
R42422:42428 VST.msl.log_normalize <> FF_left thm
binder 42451:42451 <> x:465
R42456:42469 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_Sset_inv thm
R42484:42484 VST.floyd.SeparationLogicAsLogic <> x:465 var
binder 42451:42451 <> x:466
R42456:42469 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_Sset_inv thm
R42484:42484 VST.floyd.SeparationLogicAsLogic <> x:466 var
R42512:42519 VST.msl.seplog <> exp_left meth
R42512:42519 VST.msl.seplog <> exp_left meth
R42545:42553 VST.msl.log_normalize <> exp_andp2 thm
R42545:42553 VST.msl.log_normalize <> exp_andp2 thm
R42545:42553 VST.msl.log_normalize <> exp_andp2 thm
R42545:42553 VST.msl.log_normalize <> exp_andp2 thm
R42545:42553 VST.msl.log_normalize <> exp_andp2 thm
R42576:42587 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R42616:42632 VST.floyd.assert_lemmas <> derives_full_refl thm
R42576:42587 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R42616:42632 VST.floyd.assert_lemmas <> derives_full_refl thm
R42616:42632 VST.floyd.assert_lemmas <> derives_full_refl thm
R42616:42632 VST.floyd.assert_lemmas <> derives_full_refl thm
R42616:42632 VST.floyd.assert_lemmas <> derives_full_refl thm
R42662:42673 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R42714:42766 VST.floyd.SeparationLogicAsLogic AuxDefs semax_set_ptr_compare_load_cast_load_backward constr
R42683:42699 VST.floyd.assert_lemmas <> derives_full_refl thm
R42662:42673 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R42683:42699 VST.floyd.assert_lemmas <> derives_full_refl thm
R42714:42766 VST.floyd.SeparationLogicAsLogic AuxDefs semax_set_ptr_compare_load_cast_load_backward constr
R42791:42802 VST.msl.seplog <> derives_refl meth
R42791:42802 VST.msl.seplog <> derives_refl meth
R42826:42832 VST.msl.log_normalize <> FF_left thm
R42826:42832 VST.msl.log_normalize <> FF_left thm
R42856:42862 VST.msl.log_normalize <> FF_left thm
R42856:42862 VST.msl.log_normalize <> FF_left thm
R42894:42900 VST.msl.log_normalize <> FF_left thm
R42894:42900 VST.msl.log_normalize <> FF_left thm
binder 42923:42923 <> x:467
R42928:42941 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_call_inv thm
R42958:42958 VST.floyd.SeparationLogicAsLogic <> x:467 var
binder 42923:42923 <> x:468
R42928:42941 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_call_inv thm
R42958:42958 VST.floyd.SeparationLogicAsLogic <> x:468 var
R42986:42993 VST.msl.seplog <> exp_left meth
R42986:42993 VST.msl.seplog <> exp_left meth
R43019:43027 VST.msl.log_normalize <> exp_andp2 thm
R43019:43027 VST.msl.log_normalize <> exp_andp2 thm
R43019:43027 VST.msl.log_normalize <> exp_andp2 thm
R43019:43027 VST.msl.log_normalize <> exp_andp2 thm
R43019:43027 VST.msl.log_normalize <> exp_andp2 thm
R43050:43061 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R43090:43106 VST.floyd.assert_lemmas <> derives_full_refl thm
R43050:43061 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R43090:43106 VST.floyd.assert_lemmas <> derives_full_refl thm
R43090:43106 VST.floyd.assert_lemmas <> derives_full_refl thm
R43090:43106 VST.floyd.assert_lemmas <> derives_full_refl thm
R43090:43106 VST.floyd.assert_lemmas <> derives_full_refl thm
R43136:43147 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R43188:43214 VST.floyd.SeparationLogicAsLogic AuxDefs semax_call_backward constr
R43157:43173 VST.floyd.assert_lemmas <> derives_full_refl thm
R43136:43147 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R43157:43173 VST.floyd.assert_lemmas <> derives_full_refl thm
R43188:43214 VST.floyd.SeparationLogicAsLogic AuxDefs semax_call_backward constr
R43239:43250 VST.msl.seplog <> derives_refl meth
R43239:43250 VST.msl.seplog <> derives_refl meth
R43274:43280 VST.msl.log_normalize <> FF_left thm
R43274:43280 VST.msl.log_normalize <> FF_left thm
R43304:43310 VST.msl.log_normalize <> FF_left thm
R43304:43310 VST.msl.log_normalize <> FF_left thm
R43342:43348 VST.msl.log_normalize <> FF_left thm
R43342:43348 VST.msl.log_normalize <> FF_left thm
binder 43371:43371 <> x:469
R43376:43393 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_Sbuiltin_inv thm
R43412:43412 VST.floyd.SeparationLogicAsLogic <> x:469 var
binder 43371:43371 <> x:470
R43376:43393 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_Sbuiltin_inv thm
R43412:43412 VST.floyd.SeparationLogicAsLogic <> x:470 var
R43428:43439 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R43488:43508 VST.floyd.SeparationLogicAsLogic AuxDefs semax_builtin constr
R43459:43475 VST.floyd.assert_lemmas <> derives_full_refl thm
R43428:43439 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R43459:43475 VST.floyd.assert_lemmas <> derives_full_refl thm
R43459:43475 VST.floyd.assert_lemmas <> derives_full_refl thm
R43459:43475 VST.floyd.assert_lemmas <> derives_full_refl thm
R43459:43475 VST.floyd.assert_lemmas <> derives_full_refl thm
R43488:43508 VST.floyd.SeparationLogicAsLogic AuxDefs semax_builtin constr
R43525:43533 VST.msl.log_normalize <> exp_andp2 thm
R43525:43533 VST.msl.log_normalize <> exp_andp2 thm
R43525:43533 VST.msl.log_normalize <> exp_andp2 thm
R43525:43533 VST.msl.log_normalize <> exp_andp2 thm
R43525:43533 VST.msl.log_normalize <> exp_andp2 thm
R43546:43553 VST.msl.seplog <> exp_left meth
R43546:43553 VST.msl.seplog <> exp_left meth
R43629:43631 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R43651:43652 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R43642:43645 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43646:43650 VST.veric.mpred <> mpred def
R43635:43641 VST.veric.mpred <> environ ind
binder 43632:43632 <> Q:471
R43676:43679 VST.msl.seplog <> ::logic:x_'&&'_x not
R43653:43656 VST.msl.seplog <> ::logic:'!!'_x not
R43675:43675 VST.msl.seplog <> ::logic:'!!'_x not
R43657:43661 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R43669:43669 VST.floyd.SeparationLogicAsLogic <> Q:471 var
R43680:43680 VST.floyd.SeparationLogicAsLogic <> Q:471 var
R43605:43621 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R43629:43631 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R43651:43652 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R43642:43645 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43646:43650 VST.veric.mpred <> mpred def
R43635:43641 VST.veric.mpred <> environ ind
binder 43632:43632 <> Q:472
R43676:43679 VST.msl.seplog <> ::logic:x_'&&'_x not
R43653:43656 VST.msl.seplog <> ::logic:'!!'_x not
R43675:43675 VST.msl.seplog <> ::logic:'!!'_x not
R43657:43661 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R43669:43669 VST.floyd.SeparationLogicAsLogic <> Q:472 var
R43680:43680 VST.floyd.SeparationLogicAsLogic <> Q:472 var
R43605:43621 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R43729:43742 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv' thm
R43729:43742 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv' thm
R43813:43815 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R43838:43839 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R43820:43824 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
binder 43816:43817 <> H0:473
R43797:43805 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R43813:43815 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R43838:43839 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R43820:43824 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
binder 43816:43817 <> H0:474
R43797:43805 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R43858:43867 VST.msl.seplog <> andp_left2 meth
R43858:43867 VST.msl.seplog <> andp_left2 meth
R43884:43903 VST.msl.log_normalize <> derives_extract_prop thm
R43884:43903 VST.msl.log_normalize <> derives_extract_prop thm
R43929:43937 VST.msl.seplog <> exp_right meth
R43929:43937 VST.msl.seplog <> exp_right meth
R44021:44032 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R44082:44105 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R44110:44112 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R44133:44134 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R44124:44127 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44128:44132 VST.veric.mpred <> mpred def
R44117:44123 VST.veric.mpred <> environ ind
binder 44113:44114 <> P':475
R44287:44290 VST.msl.seplog <> ::logic:x_'&&'_x not
R44135:44138 VST.msl.seplog <> ::logic:'!!'_x not
R44286:44286 VST.msl.seplog <> ::logic:'!!'_x not
R44210:44213 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R44139:44143 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R44154:44157 VST.msl.seplog <> ::logic:x_'&&'_x not
R44152:44153 VST.floyd.SeparationLogicAsLogic <> P':475 var
R44158:44162 VST.veric.SeparationLogic <> local def
R44165:44166 VST.veric.lift LiftNotation :::'`('_x_')' not
R44188:44202 VST.veric.lift LiftNotation :::'`('_x_')' not
R44167:44176 VST.veric.SeparationLogic <> typed_true def
R44179:44184 compcert.cfrontend.Clight <> typeof def
R44191:44199 VST.veric.expr <> eval_expr def
R44214:44218 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R44229:44232 VST.msl.seplog <> ::logic:x_'&&'_x not
R44227:44228 VST.floyd.SeparationLogicAsLogic <> P':475 var
R44233:44237 VST.veric.SeparationLogic <> local def
R44240:44241 VST.veric.lift LiftNotation :::'`('_x_')' not
R44264:44278 VST.veric.lift LiftNotation :::'`('_x_')' not
R44242:44252 VST.veric.SeparationLogic <> typed_false def
R44255:44260 compcert.cfrontend.Clight <> typeof def
R44267:44275 VST.veric.expr <> eval_expr def
R44291:44292 VST.floyd.SeparationLogicAsLogic <> P':475 var
R44052:44068 VST.floyd.assert_lemmas <> derives_full_refl thm
R44021:44032 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R44052:44068 VST.floyd.assert_lemmas <> derives_full_refl thm
R44052:44068 VST.floyd.assert_lemmas <> derives_full_refl thm
R44052:44068 VST.floyd.assert_lemmas <> derives_full_refl thm
R44052:44068 VST.floyd.assert_lemmas <> derives_full_refl thm
R44082:44105 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R44110:44112 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R44133:44134 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R44124:44127 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44128:44132 VST.veric.mpred <> mpred def
R44117:44123 VST.veric.mpred <> environ ind
binder 44113:44114 <> P':476
R44287:44290 VST.msl.seplog <> ::logic:x_'&&'_x not
R44135:44138 VST.msl.seplog <> ::logic:'!!'_x not
R44286:44286 VST.msl.seplog <> ::logic:'!!'_x not
R44210:44213 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R44139:44143 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R44154:44157 VST.msl.seplog <> ::logic:x_'&&'_x not
R44152:44153 VST.floyd.SeparationLogicAsLogic <> P':476 var
R44158:44162 VST.veric.SeparationLogic <> local def
R44165:44166 VST.veric.lift LiftNotation :::'`('_x_')' not
R44188:44202 VST.veric.lift LiftNotation :::'`('_x_')' not
R44167:44176 VST.veric.SeparationLogic <> typed_true def
R44179:44184 compcert.cfrontend.Clight <> typeof def
R44191:44199 VST.veric.expr <> eval_expr def
R44214:44218 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R44229:44232 VST.msl.seplog <> ::logic:x_'&&'_x not
R44227:44228 VST.floyd.SeparationLogicAsLogic <> P':476 var
R44233:44237 VST.veric.SeparationLogic <> local def
R44240:44241 VST.veric.lift LiftNotation :::'`('_x_')' not
R44264:44278 VST.veric.lift LiftNotation :::'`('_x_')' not
R44242:44252 VST.veric.SeparationLogic <> typed_false def
R44255:44260 compcert.cfrontend.Clight <> typeof def
R44267:44275 VST.veric.expr <> eval_expr def
R44291:44292 VST.floyd.SeparationLogicAsLogic <> P':476 var
binder 44320:44320 <> x:477
R44325:44344 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_ifthenelse_inv thm
R44361:44361 VST.floyd.SeparationLogicAsLogic <> x:477 var
binder 44320:44320 <> x:478
R44325:44344 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_ifthenelse_inv thm
R44361:44361 VST.floyd.SeparationLogicAsLogic <> x:478 var
R44393:44400 VST.msl.seplog <> exp_left meth
R44393:44400 VST.msl.seplog <> exp_left meth
R44428:44436 VST.msl.log_normalize <> exp_andp2 thm
R44428:44436 VST.msl.log_normalize <> exp_andp2 thm
R44428:44436 VST.msl.log_normalize <> exp_andp2 thm
R44428:44436 VST.msl.log_normalize <> exp_andp2 thm
R44428:44436 VST.msl.log_normalize <> exp_andp2 thm
R44478:44486 VST.msl.log_normalize <> exp_andp1 thm
R44478:44486 VST.msl.log_normalize <> exp_andp1 thm
R44478:44486 VST.msl.log_normalize <> exp_andp1 thm
R44551:44553 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R44632:44633 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R44558:44562 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R44573:44576 VST.msl.seplog <> ::logic:x_'&&'_x not
R44577:44581 VST.veric.SeparationLogic <> local def
R44584:44587 VST.veric.lift LiftNotation :::'`'_x not
R44609:44624 VST.veric.lift LiftNotation :::'`'_x not
R44588:44597 VST.veric.SeparationLogic <> typed_true def
R44600:44605 compcert.cfrontend.Clight <> typeof def
R44613:44621 VST.veric.expr <> eval_expr def
binder 44554:44555 <> H0:479
R44636:44639 VST.msl.seplog <> ::logic:x_'&&'_x not
R44640:44644 VST.veric.SeparationLogic <> local def
R44647:44650 VST.veric.lift LiftNotation :::'`'_x not
R44672:44687 VST.veric.lift LiftNotation :::'`'_x not
R44651:44660 VST.veric.SeparationLogic <> typed_true def
R44663:44668 compcert.cfrontend.Clight <> typeof def
R44676:44684 VST.veric.expr <> eval_expr def
R44535:44543 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R44551:44553 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R44632:44633 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R44558:44562 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R44573:44576 VST.msl.seplog <> ::logic:x_'&&'_x not
R44577:44581 VST.veric.SeparationLogic <> local def
R44584:44587 VST.veric.lift LiftNotation :::'`'_x not
R44609:44624 VST.veric.lift LiftNotation :::'`'_x not
R44588:44597 VST.veric.SeparationLogic <> typed_true def
R44600:44605 compcert.cfrontend.Clight <> typeof def
R44613:44621 VST.veric.expr <> eval_expr def
binder 44554:44555 <> H0:480
R44636:44639 VST.msl.seplog <> ::logic:x_'&&'_x not
R44640:44644 VST.veric.SeparationLogic <> local def
R44647:44650 VST.veric.lift LiftNotation :::'`'_x not
R44672:44687 VST.veric.lift LiftNotation :::'`'_x not
R44651:44660 VST.veric.SeparationLogic <> typed_true def
R44663:44668 compcert.cfrontend.Clight <> typeof def
R44676:44684 VST.veric.expr <> eval_expr def
R44535:44543 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R44706:44715 VST.msl.seplog <> andp_left2 meth
R44706:44715 VST.msl.seplog <> andp_left2 meth
R44735:44744 VST.msl.log_normalize <> andp_assoc thm
R44735:44744 VST.msl.log_normalize <> andp_assoc thm
R44735:44744 VST.msl.log_normalize <> andp_assoc thm
R44735:44744 VST.msl.log_normalize <> andp_assoc thm
R44761:44780 VST.msl.log_normalize <> derives_extract_prop thm
R44761:44780 VST.msl.log_normalize <> derives_extract_prop thm
R44806:44814 VST.msl.seplog <> exp_right meth
R44817:44821 Coq.Init.Logic <> proj1 thm
R44806:44814 VST.msl.seplog <> exp_right meth
R44817:44821 Coq.Init.Logic <> proj1 thm
R44915:44923 VST.msl.log_normalize <> exp_andp1 thm
R44915:44923 VST.msl.log_normalize <> exp_andp1 thm
R44915:44923 VST.msl.log_normalize <> exp_andp1 thm
R44988:44990 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45070:45071 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R44995:44999 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R45010:45013 VST.msl.seplog <> ::logic:x_'&&'_x not
R45014:45018 VST.veric.SeparationLogic <> local def
R45021:45024 VST.veric.lift LiftNotation :::'`'_x not
R45047:45062 VST.veric.lift LiftNotation :::'`'_x not
R45025:45035 VST.veric.SeparationLogic <> typed_false def
R45038:45043 compcert.cfrontend.Clight <> typeof def
R45051:45059 VST.veric.expr <> eval_expr def
binder 44991:44992 <> H0:481
R45074:45077 VST.msl.seplog <> ::logic:x_'&&'_x not
R45078:45082 VST.veric.SeparationLogic <> local def
R45085:45088 VST.veric.lift LiftNotation :::'`'_x not
R45111:45126 VST.veric.lift LiftNotation :::'`'_x not
R45089:45099 VST.veric.SeparationLogic <> typed_false def
R45102:45107 compcert.cfrontend.Clight <> typeof def
R45115:45123 VST.veric.expr <> eval_expr def
R44972:44980 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R44988:44990 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45070:45071 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R44995:44999 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R45010:45013 VST.msl.seplog <> ::logic:x_'&&'_x not
R45014:45018 VST.veric.SeparationLogic <> local def
R45021:45024 VST.veric.lift LiftNotation :::'`'_x not
R45047:45062 VST.veric.lift LiftNotation :::'`'_x not
R45025:45035 VST.veric.SeparationLogic <> typed_false def
R45038:45043 compcert.cfrontend.Clight <> typeof def
R45051:45059 VST.veric.expr <> eval_expr def
binder 44991:44992 <> H0:482
R45074:45077 VST.msl.seplog <> ::logic:x_'&&'_x not
R45078:45082 VST.veric.SeparationLogic <> local def
R45085:45088 VST.veric.lift LiftNotation :::'`'_x not
R45111:45126 VST.veric.lift LiftNotation :::'`'_x not
R45089:45099 VST.veric.SeparationLogic <> typed_false def
R45102:45107 compcert.cfrontend.Clight <> typeof def
R45115:45123 VST.veric.expr <> eval_expr def
R44972:44980 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R45145:45154 VST.msl.seplog <> andp_left2 meth
R45145:45154 VST.msl.seplog <> andp_left2 meth
R45174:45183 VST.msl.log_normalize <> andp_assoc thm
R45174:45183 VST.msl.log_normalize <> andp_assoc thm
R45174:45183 VST.msl.log_normalize <> andp_assoc thm
R45174:45183 VST.msl.log_normalize <> andp_assoc thm
R45200:45219 VST.msl.log_normalize <> derives_extract_prop thm
R45200:45219 VST.msl.log_normalize <> derives_extract_prop thm
R45245:45253 VST.msl.seplog <> exp_right meth
R45256:45260 Coq.Init.Logic <> proj2 thm
R45245:45253 VST.msl.seplog <> exp_right meth
R45256:45260 Coq.Init.Logic <> proj2 thm
binder 45360:45360 <> x:483
R45365:45378 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_loop_inv thm
R45393:45393 VST.floyd.SeparationLogicAsLogic <> x:483 var
binder 45360:45360 <> x:484
R45365:45378 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_loop_inv thm
R45393:45393 VST.floyd.SeparationLogicAsLogic <> x:484 var
R45410:45429 VST.floyd.SeparationLogicAsLogic AuxDefs semax_conseq constr
R45441:45443 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45464:45465 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45455:45458 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45459:45463 VST.veric.mpred <> mpred def
R45448:45454 VST.veric.mpred <> environ ind
binder 45444:45444 <> Q:485
R45466:45468 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45490:45500 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45481:45484 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45485:45489 VST.veric.mpred <> mpred def
R45474:45480 VST.veric.mpred <> environ ind
binder 45469:45470 <> Q':486
R45501:45503 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45547:45559 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45507:45511 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R45525:45540 VST.veric.SeparationLogic <> loop1_ret_assert def
R45542:45543 VST.floyd.SeparationLogicAsLogic <> Q':486 var
R45519:45519 VST.floyd.SeparationLogicAsLogic <> Q:485 var
binder 45504:45504 <> H:487
R45560:45562 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45607:45608 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45567:45571 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R45586:45601 VST.veric.SeparationLogic <> loop2_ret_assert def
R45603:45603 VST.floyd.SeparationLogicAsLogic <> Q:485 var
R45579:45580 VST.floyd.SeparationLogicAsLogic <> Q':486 var
binder 45563:45564 <> H0:488
R45609:45609 VST.floyd.SeparationLogicAsLogic <> Q:485 var
R45635:45651 VST.floyd.assert_lemmas <> derives_full_refl thm
R45410:45429 VST.floyd.SeparationLogicAsLogic AuxDefs semax_conseq constr
R45441:45443 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45464:45465 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45455:45458 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45459:45463 VST.veric.mpred <> mpred def
R45448:45454 VST.veric.mpred <> environ ind
binder 45444:45444 <> Q:489
R45466:45468 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45490:45500 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45481:45484 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45485:45489 VST.veric.mpred <> mpred def
R45474:45480 VST.veric.mpred <> environ ind
binder 45469:45470 <> Q':490
R45501:45503 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45547:45559 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45507:45511 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R45525:45540 VST.veric.SeparationLogic <> loop1_ret_assert def
R45542:45543 VST.floyd.SeparationLogicAsLogic <> Q':490 var
R45519:45519 VST.floyd.SeparationLogicAsLogic <> Q:489 var
binder 45504:45504 <> H:491
R45560:45562 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45607:45608 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R45567:45571 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R45586:45601 VST.veric.SeparationLogic <> loop2_ret_assert def
R45603:45603 VST.floyd.SeparationLogicAsLogic <> Q:489 var
R45579:45580 VST.floyd.SeparationLogicAsLogic <> Q':490 var
binder 45563:45564 <> H0:492
R45609:45609 VST.floyd.SeparationLogicAsLogic <> Q:489 var
R45635:45651 VST.floyd.assert_lemmas <> derives_full_refl thm
R45635:45651 VST.floyd.assert_lemmas <> derives_full_refl thm
R45635:45651 VST.floyd.assert_lemmas <> derives_full_refl thm
R45635:45651 VST.floyd.assert_lemmas <> derives_full_refl thm
R45681:45689 VST.msl.log_normalize <> exp_andp2 thm
R45681:45689 VST.msl.log_normalize <> exp_andp2 thm
R45681:45689 VST.msl.log_normalize <> exp_andp2 thm
R45681:45689 VST.msl.log_normalize <> exp_andp2 thm
R45681:45689 VST.msl.log_normalize <> exp_andp2 thm
R45704:45711 VST.msl.seplog <> exp_left meth
R45704:45711 VST.msl.seplog <> exp_left meth
R45797:45807 VST.floyd.SeparationLogicFacts <> exp_derives thm
R45797:45807 VST.floyd.SeparationLogicFacts <> exp_derives thm
R45832:45842 VST.floyd.SeparationLogicFacts <> exp_derives thm
R45832:45842 VST.floyd.SeparationLogicFacts <> exp_derives thm
R45868:45887 VST.msl.log_normalize <> derives_extract_prop thm
R45868:45887 VST.msl.log_normalize <> derives_extract_prop thm
R45917:45925 VST.msl.seplog <> exp_right meth
R45917:45925 VST.msl.seplog <> exp_right meth
R45945:45953 VST.msl.seplog <> exp_right meth
R45945:45953 VST.msl.seplog <> exp_right meth
R45989:46006 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R46019:46021 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46042:46043 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46033:46036 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46037:46041 VST.veric.mpred <> mpred def
R46026:46032 VST.veric.mpred <> environ ind
binder 46022:46022 <> Q:493
R46044:46046 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46068:46078 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46059:46062 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46063:46067 VST.veric.mpred <> mpred def
R46052:46058 VST.veric.mpred <> environ ind
binder 46047:46048 <> Q':494
R46079:46081 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46125:46137 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46085:46089 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R46103:46118 VST.veric.SeparationLogic <> loop1_ret_assert def
R46120:46121 VST.floyd.SeparationLogicAsLogic <> Q':494 var
R46097:46097 VST.floyd.SeparationLogicAsLogic <> Q:493 var
binder 46082:46082 <> H:495
R46138:46140 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46185:46186 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46145:46149 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R46164:46179 VST.veric.SeparationLogic <> loop2_ret_assert def
R46181:46181 VST.floyd.SeparationLogicAsLogic <> Q:493 var
R46157:46158 VST.floyd.SeparationLogicAsLogic <> Q':494 var
binder 46141:46142 <> H0:496
R46187:46188 VST.floyd.SeparationLogicAsLogic <> Q':494 var
R45989:46006 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R46019:46021 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46042:46043 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46033:46036 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46037:46041 VST.veric.mpred <> mpred def
R46026:46032 VST.veric.mpred <> environ ind
binder 46022:46022 <> Q:497
R46044:46046 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46068:46078 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46059:46062 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46063:46067 VST.veric.mpred <> mpred def
R46052:46058 VST.veric.mpred <> environ ind
binder 46047:46048 <> Q':498
R46079:46081 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46125:46137 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46085:46089 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R46103:46118 VST.veric.SeparationLogic <> loop1_ret_assert def
R46120:46121 VST.floyd.SeparationLogicAsLogic <> Q':498 var
R46097:46097 VST.floyd.SeparationLogicAsLogic <> Q:497 var
binder 46082:46082 <> H:499
R46138:46140 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46185:46186 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R46145:46149 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R46164:46179 VST.veric.SeparationLogic <> loop2_ret_assert def
R46181:46181 VST.floyd.SeparationLogicAsLogic <> Q:497 var
R46157:46158 VST.floyd.SeparationLogicAsLogic <> Q':498 var
binder 46141:46142 <> H0:500
R46187:46188 VST.floyd.SeparationLogicAsLogic <> Q':498 var
R46345:46361 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post_simple thm
R46345:46361 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post_simple thm
R46433:46448 VST.veric.SeparationLogic <> loop1_ret_assert def
R46466:46474 VST.msl.seplog <> exp_right meth
R46481:46489 VST.msl.seplog <> exp_right meth
R46497:46505 VST.msl.seplog <> exp_right meth
R46513:46521 VST.msl.seplog <> exp_right meth
R46466:46474 VST.msl.seplog <> exp_right meth
R46481:46489 VST.msl.seplog <> exp_right meth
R46497:46505 VST.msl.seplog <> exp_right meth
R46513:46521 VST.msl.seplog <> exp_right meth
R46542:46553 VST.msl.seplog <> derives_refl meth
R46542:46553 VST.msl.seplog <> derives_refl meth
R46607:46618 VST.msl.seplog <> derives_refl meth
R46607:46618 VST.msl.seplog <> derives_refl meth
R46673:46688 VST.veric.SeparationLogic <> loop1_ret_assert def
R46706:46714 VST.msl.seplog <> exp_right meth
R46721:46729 VST.msl.seplog <> exp_right meth
R46737:46745 VST.msl.seplog <> exp_right meth
R46753:46761 VST.msl.seplog <> exp_right meth
R46706:46714 VST.msl.seplog <> exp_right meth
R46721:46729 VST.msl.seplog <> exp_right meth
R46737:46745 VST.msl.seplog <> exp_right meth
R46753:46761 VST.msl.seplog <> exp_right meth
R46782:46793 VST.msl.seplog <> derives_refl meth
R46782:46793 VST.msl.seplog <> derives_refl meth
R46863:46874 VST.msl.seplog <> derives_refl meth
R46863:46874 VST.msl.seplog <> derives_refl meth
R47029:47045 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post_simple thm
R47029:47045 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post_simple thm
R47117:47132 VST.veric.SeparationLogic <> loop1_ret_assert def
R47150:47158 VST.msl.seplog <> exp_right meth
R47165:47173 VST.msl.seplog <> exp_right meth
R47181:47189 VST.msl.seplog <> exp_right meth
R47197:47205 VST.msl.seplog <> exp_right meth
R47150:47158 VST.msl.seplog <> exp_right meth
R47165:47173 VST.msl.seplog <> exp_right meth
R47181:47189 VST.msl.seplog <> exp_right meth
R47197:47205 VST.msl.seplog <> exp_right meth
R47226:47237 VST.msl.seplog <> derives_refl meth
R47226:47237 VST.msl.seplog <> derives_refl meth
R47291:47302 VST.msl.seplog <> derives_refl meth
R47291:47302 VST.msl.seplog <> derives_refl meth
R47356:47367 VST.msl.seplog <> derives_refl meth
R47356:47367 VST.msl.seplog <> derives_refl meth
R47437:47448 VST.msl.seplog <> derives_refl meth
R47437:47448 VST.msl.seplog <> derives_refl meth
binder 47471:47471 <> x:501
R47476:47490 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_break_inv thm
R47501:47501 VST.floyd.SeparationLogicAsLogic <> x:501 var
binder 47471:47471 <> x:502
R47476:47490 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_break_inv thm
R47501:47501 VST.floyd.SeparationLogicAsLogic <> x:502 var
R47517:47528 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R47548:47564 VST.floyd.assert_lemmas <> derives_full_refl thm
R47517:47528 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R47548:47564 VST.floyd.assert_lemmas <> derives_full_refl thm
R47548:47564 VST.floyd.assert_lemmas <> derives_full_refl thm
R47548:47564 VST.floyd.assert_lemmas <> derives_full_refl thm
R47548:47564 VST.floyd.assert_lemmas <> derives_full_refl thm
R47588:47596 VST.msl.log_normalize <> exp_andp2 thm
R47605:47612 VST.msl.seplog <> exp_left meth
R47588:47596 VST.msl.log_normalize <> exp_andp2 thm
R47588:47596 VST.msl.log_normalize <> exp_andp2 thm
R47588:47596 VST.msl.log_normalize <> exp_andp2 thm
R47588:47596 VST.msl.log_normalize <> exp_andp2 thm
R47605:47612 VST.msl.seplog <> exp_left meth
R47652:47670 VST.floyd.SeparationLogicAsLogic AuxDefs semax_break constr
R47652:47670 VST.floyd.SeparationLogicAsLogic AuxDefs semax_break constr
binder 47693:47693 <> x:503
R47698:47715 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_continue_inv thm
R47726:47726 VST.floyd.SeparationLogicAsLogic <> x:503 var
binder 47693:47693 <> x:504
R47698:47715 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_continue_inv thm
R47726:47726 VST.floyd.SeparationLogicAsLogic <> x:504 var
R47742:47753 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R47773:47789 VST.floyd.assert_lemmas <> derives_full_refl thm
R47742:47753 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R47773:47789 VST.floyd.assert_lemmas <> derives_full_refl thm
R47773:47789 VST.floyd.assert_lemmas <> derives_full_refl thm
R47773:47789 VST.floyd.assert_lemmas <> derives_full_refl thm
R47773:47789 VST.floyd.assert_lemmas <> derives_full_refl thm
R47813:47821 VST.msl.log_normalize <> exp_andp2 thm
R47830:47837 VST.msl.seplog <> exp_left meth
R47813:47821 VST.msl.log_normalize <> exp_andp2 thm
R47813:47821 VST.msl.log_normalize <> exp_andp2 thm
R47813:47821 VST.msl.log_normalize <> exp_andp2 thm
R47813:47821 VST.msl.log_normalize <> exp_andp2 thm
R47830:47837 VST.msl.seplog <> exp_left meth
R47877:47898 VST.floyd.SeparationLogicAsLogic AuxDefs semax_continue constr
R47877:47898 VST.floyd.SeparationLogicAsLogic AuxDefs semax_continue constr
binder 47921:47921 <> x:505
R47926:47941 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_return_inv thm
R47954:47954 VST.floyd.SeparationLogicAsLogic <> x:505 var
binder 47921:47921 <> x:506
R47926:47941 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_return_inv thm
R47954:47954 VST.floyd.SeparationLogicAsLogic <> x:506 var
R47971:47982 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R47991:47999 VST.veric.tycontext <> RA_normal proj
R47991:47999 VST.veric.tycontext <> RA_normal proj
R48007:48014 VST.veric.tycontext <> RA_break proj
R48022:48032 VST.veric.tycontext <> RA_continue proj
R48040:48048 VST.veric.tycontext <> RA_return proj
R48053:48057 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R48063:48066 VST.msl.seplog <> ::logic:x_'||'_x not
R48058:48060 VST.msl.seplog <> ::logic:'|>'_x not
R48061:48062 VST.msl.seplog <> FF meth
R48067:48075 VST.veric.tycontext <> RA_return proj
R48096:48115 VST.floyd.SeparationLogicAsLogic AuxDefs semax_return constr
R47971:47982 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R47991:47999 VST.veric.tycontext <> RA_normal proj
R47991:47999 VST.veric.tycontext <> RA_normal proj
R48007:48014 VST.veric.tycontext <> RA_break proj
R48022:48032 VST.veric.tycontext <> RA_continue proj
R48040:48048 VST.veric.tycontext <> RA_return proj
R48053:48057 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R48063:48066 VST.msl.seplog <> ::logic:x_'||'_x not
R48058:48060 VST.msl.seplog <> ::logic:'|>'_x not
R48061:48062 VST.msl.seplog <> FF meth
R48067:48075 VST.veric.tycontext <> RA_return proj
R48096:48115 VST.floyd.SeparationLogicAsLogic AuxDefs semax_return constr
R48134:48142 VST.msl.log_normalize <> exp_andp2 thm
R48134:48142 VST.msl.log_normalize <> exp_andp2 thm
R48134:48142 VST.msl.log_normalize <> exp_andp2 thm
R48134:48142 VST.msl.log_normalize <> exp_andp2 thm
R48134:48142 VST.msl.log_normalize <> exp_andp2 thm
R48157:48164 VST.msl.seplog <> exp_left meth
R48157:48164 VST.msl.seplog <> exp_left meth
R48222:48238 VST.floyd.assert_lemmas <> derives_full_refl thm
R48222:48238 VST.floyd.assert_lemmas <> derives_full_refl thm
R48253:48269 VST.floyd.assert_lemmas <> derives_full_refl thm
R48253:48269 VST.floyd.assert_lemmas <> derives_full_refl thm
R48284:48300 VST.floyd.assert_lemmas <> derives_full_refl thm
R48284:48300 VST.floyd.assert_lemmas <> derives_full_refl thm
R48315:48331 VST.floyd.assert_lemmas <> derives_full_refl thm
R48315:48331 VST.floyd.assert_lemmas <> derives_full_refl thm
R48355:48363 VST.veric.tycontext <> RA_return proj
R48377:48399 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R48402:48418 VST.floyd.assert_lemmas <> derives_full_refl thm
R48377:48399 VST.floyd.assert_lemmas <> derives_full_bupd0_left thm
R48402:48418 VST.floyd.assert_lemmas <> derives_full_refl thm
binder 48441:48441 <> x:507
R48446:48461 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_switch_inv thm
R48476:48476 VST.floyd.SeparationLogicAsLogic <> x:507 var
binder 48441:48441 <> x:508
R48446:48461 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_switch_inv thm
R48476:48476 VST.floyd.SeparationLogicAsLogic <> x:508 var
R48492:48503 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R48523:48539 VST.floyd.assert_lemmas <> derives_full_refl thm
R48492:48503 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R48523:48539 VST.floyd.assert_lemmas <> derives_full_refl thm
R48523:48539 VST.floyd.assert_lemmas <> derives_full_refl thm
R48523:48539 VST.floyd.assert_lemmas <> derives_full_refl thm
R48523:48539 VST.floyd.assert_lemmas <> derives_full_refl thm
R48563:48571 VST.msl.log_normalize <> exp_andp2 thm
R48580:48587 VST.msl.seplog <> exp_left meth
R48563:48571 VST.msl.log_normalize <> exp_andp2 thm
R48563:48571 VST.msl.log_normalize <> exp_andp2 thm
R48563:48571 VST.msl.log_normalize <> exp_andp2 thm
R48563:48571 VST.msl.log_normalize <> exp_andp2 thm
R48580:48587 VST.msl.seplog <> exp_left meth
R48629:48638 VST.msl.log_normalize <> andp_assoc thm
R48629:48638 VST.msl.log_normalize <> andp_assoc thm
R48629:48638 VST.msl.log_normalize <> andp_assoc thm
R48653:48672 VST.floyd.SeparationLogicAsLogic AuxDefs semax_switch constr
R48653:48672 VST.floyd.SeparationLogicAsLogic AuxDefs semax_switch constr
R48742:48753 compcert.lib.Integers Int unsigned def
R48742:48753 compcert.lib.Integers Int unsigned def
R48775:48783 VST.msl.log_normalize <> exp_andp2 thm
R48775:48783 VST.msl.log_normalize <> exp_andp2 thm
R48775:48783 VST.msl.log_normalize <> exp_andp2 thm
R48775:48783 VST.msl.log_normalize <> exp_andp2 thm
R48775:48783 VST.msl.log_normalize <> exp_andp2 thm
R48847:48849 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R49054:49055 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R48865:48867 compcert.lib.Integers <> int syndef
binder 48860:48861 <> n0:509
R48881:48885 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R49034:49050 VST.veric.SeparationLogic <> switch_ret_assert def
R48958:48981 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R48984:48996 compcert.cfrontend.Clight <> select_switch def
R48999:49010 compcert.lib.Integers Int unsigned def
R49012:49013 VST.floyd.SeparationLogicAsLogic <> n0:509 var
R48936:48939 VST.msl.seplog <> ::logic:x_'&&'_x not
R48894:48898 VST.veric.SeparationLogic <> local def
R48901:48903 VST.veric.lift LiftNotation :::'`'_x not
R48906:48934 VST.veric.lift LiftNotation :::'`'_x not
R48904:48905 Coq.Init.Logic <> eq ind
R48923:48925 VST.veric.lift LiftNotation :::'`'_x not
R48933:48933 VST.veric.lift LiftNotation :::'`'_x not
R48926:48929 compcert.common.Values <> Vint constr
R48931:48932 VST.floyd.SeparationLogicAsLogic <> n0:509 var
R48909:48917 VST.veric.expr <> eval_expr def
binder 48850:48850 <> H:510
R49097:49100 VST.msl.seplog <> ::logic:x_'&&'_x not
R49056:49060 VST.veric.SeparationLogic <> local def
R49063:49065 VST.veric.lift LiftNotation :::'`'_x not
R49068:49095 VST.veric.lift LiftNotation :::'`'_x not
R49066:49067 Coq.Init.Logic <> eq ind
R49085:49087 VST.veric.lift LiftNotation :::'`'_x not
R49094:49094 VST.veric.lift LiftNotation :::'`'_x not
R49088:49091 compcert.common.Values <> Vint constr
R49071:49079 VST.veric.expr <> eval_expr def
R48831:48839 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R48847:48849 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R49054:49055 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R48865:48867 compcert.lib.Integers <> int syndef
binder 48860:48861 <> n0:511
R48881:48885 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax defax
R49034:49050 VST.veric.SeparationLogic <> switch_ret_assert def
R48958:48981 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R48984:48996 compcert.cfrontend.Clight <> select_switch def
R48999:49010 compcert.lib.Integers Int unsigned def
R49012:49013 VST.floyd.SeparationLogicAsLogic <> n0:511 var
R48936:48939 VST.msl.seplog <> ::logic:x_'&&'_x not
R48894:48898 VST.veric.SeparationLogic <> local def
R48901:48903 VST.veric.lift LiftNotation :::'`'_x not
R48906:48934 VST.veric.lift LiftNotation :::'`'_x not
R48904:48905 Coq.Init.Logic <> eq ind
R48923:48925 VST.veric.lift LiftNotation :::'`'_x not
R48933:48933 VST.veric.lift LiftNotation :::'`'_x not
R48926:48929 compcert.common.Values <> Vint constr
R48931:48932 VST.floyd.SeparationLogicAsLogic <> n0:511 var
R48909:48917 VST.veric.expr <> eval_expr def
binder 48850:48850 <> H:512
R49097:49100 VST.msl.seplog <> ::logic:x_'&&'_x not
R49056:49060 VST.veric.SeparationLogic <> local def
R49063:49065 VST.veric.lift LiftNotation :::'`'_x not
R49068:49095 VST.veric.lift LiftNotation :::'`'_x not
R49066:49067 Coq.Init.Logic <> eq ind
R49085:49087 VST.veric.lift LiftNotation :::'`'_x not
R49094:49094 VST.veric.lift LiftNotation :::'`'_x not
R49088:49091 compcert.common.Values <> Vint constr
R49071:49079 VST.veric.expr <> eval_expr def
R48831:48839 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R49123:49131 VST.msl.log_normalize <> andp_comm thm
R49134:49137 VST.msl.seplog <> prop meth
R49148:49157 VST.msl.log_normalize <> andp_assoc thm
R49164:49172 VST.msl.log_normalize <> andp_comm thm
R49175:49178 VST.msl.seplog <> prop meth
R49123:49131 VST.msl.log_normalize <> andp_comm thm
R49134:49137 VST.msl.seplog <> prop meth
R49123:49131 VST.msl.log_normalize <> andp_comm thm
R49134:49137 VST.msl.seplog <> prop meth
R49148:49157 VST.msl.log_normalize <> andp_assoc thm
R49148:49157 VST.msl.log_normalize <> andp_assoc thm
R49148:49157 VST.msl.log_normalize <> andp_assoc thm
R49148:49157 VST.msl.log_normalize <> andp_assoc thm
R49148:49157 VST.msl.log_normalize <> andp_assoc thm
R49164:49172 VST.msl.log_normalize <> andp_comm thm
R49175:49178 VST.msl.seplog <> prop meth
R49164:49172 VST.msl.log_normalize <> andp_comm thm
R49175:49178 VST.msl.seplog <> prop meth
R49199:49218 VST.msl.log_normalize <> derives_extract_prop thm
R49199:49218 VST.msl.log_normalize <> derives_extract_prop thm
R49244:49252 VST.msl.seplog <> exp_right meth
R49244:49252 VST.msl.seplog <> exp_right meth
binder 49350:49350 <> x:513
R49355:49370 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_Slabel_inv thm
R49385:49385 VST.floyd.SeparationLogicAsLogic <> x:513 var
binder 49350:49350 <> x:514
R49355:49370 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_Slabel_inv thm
R49385:49385 VST.floyd.SeparationLogicAsLogic <> x:514 var
R49400:49418 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
R49400:49418 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
binder 49466:49466 <> x:515
R49471:49485 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_Sgoto_inv thm
R49498:49498 VST.floyd.SeparationLogicAsLogic <> x:515 var
binder 49466:49466 <> x:516
R49471:49485 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_Sgoto_inv thm
R49498:49498 VST.floyd.SeparationLogicAsLogic <> x:516 var
R49514:49525 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R49574:49591 VST.floyd.SeparationLogicAsLogic AuxDefs semax_goto constr
R49545:49561 VST.floyd.assert_lemmas <> derives_full_refl thm
R49514:49525 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R49545:49561 VST.floyd.assert_lemmas <> derives_full_refl thm
R49545:49561 VST.floyd.assert_lemmas <> derives_full_refl thm
R49545:49561 VST.floyd.assert_lemmas <> derives_full_refl thm
R49545:49561 VST.floyd.assert_lemmas <> derives_full_refl thm
R49574:49591 VST.floyd.SeparationLogicAsLogic AuxDefs semax_goto constr
R49608:49616 VST.msl.log_normalize <> exp_andp2 thm
R49608:49616 VST.msl.log_normalize <> exp_andp2 thm
R49608:49616 VST.msl.log_normalize <> exp_andp2 thm
R49608:49616 VST.msl.log_normalize <> exp_andp2 thm
R49608:49616 VST.msl.log_normalize <> exp_andp2 thm
R49629:49636 VST.msl.seplog <> exp_left meth
R49629:49636 VST.msl.seplog <> exp_left meth
R49688:49691 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr <> mod
R49715:49726 VST.floyd.SeparationLogicFacts GenExtrFacts <> modtype
R49729:49736 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Conseq.CSHL_Def <> modtype
R49740:49745 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Conseq <> modtype
R49749:49752 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr <> modtype
mod 49702:49710 <> DeepEmbedded.ExtrFacts
R49777:49789 VST.floyd.SeparationLogicFacts GenIExtrFacts <> modtype
R49792:49799 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Conseq.CSHL_Def <> modtype
R49803:49809 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq <> modtype
R49813:49816 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr <> modtype
mod 49763:49772 <> DeepEmbedded.ExtrIFacts
R49901:49937 VST.veric.SeparationLogic MINIMUM_CLIGHT_SEPARATION_HOARE_LOGIC <> mod
R49963:49977 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
mod 49863:49896 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic
R50000:50014 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
mod 49988:49995 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.CSHL_Def
R50038:50053 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDefs <> modtype
mod 50025:50033 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.CSHL_Defs
def 50068:50087 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists
R50093:50112 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
def 50127:50140 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_func_nil
R50146:50167 VST.floyd.SeparationLogicAsLogic AuxDefs semax_func_nil constr
R50171:50188 VST.floyd.SeparationLogicAsLogic Def semax_external defax
def 50204:50218 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_func_cons
R50224:50246 VST.floyd.SeparationLogicAsLogic AuxDefs semax_func_cons constr
R50250:50267 VST.floyd.SeparationLogicAsLogic Def semax_external defax
def 50283:50301 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_func_cons_ext
R50307:50333 VST.floyd.SeparationLogicAsLogic AuxDefs semax_func_cons_ext constr
R50337:50354 VST.floyd.SeparationLogicAsLogic Def semax_external defax
prf 50369:50384 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_ifthenelse
R50402:50410 VST.veric.mpred <> compspecs class
binder 50398:50399 <> CS:517
R50421:50430 VST.veric.juicy_extspec <> OracleKind class
binder 50414:50418 <> Espec:518
binder 50444:50448 <> Delta:519
binder 50450:50450 <> P:520
R50456:50459 compcert.cfrontend.Clight <> expr ind
binder 50453:50453 <> b:521
binder 50462:50462 <> c:522
binder 50464:50464 <> d:523
binder 50466:50466 <> R:524
R50502:50510 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50590:50598 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50679:50687 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50689:50693 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax def
R50799:50799 VST.floyd.SeparationLogicAsLogic <> R:524 var
R50780:50790 compcert.cfrontend.Clight <> Sifthenelse constr
R50796:50796 VST.floyd.SeparationLogicAsLogic <> d:523 var
R50794:50794 VST.floyd.SeparationLogicAsLogic <> c:522 var
R50792:50792 VST.floyd.SeparationLogicAsLogic <> b:521 var
R50772:50775 VST.msl.seplog <> ::logic:x_'&&'_x not
R50711:50717 VST.veric.SeparationLogic <> tc_expr def
R50726:50730 compcert.cfrontend.Clight <> Eunop constr
R50748:50751 compcert.cfrontend.Ctypes <> Tint constr
R50764:50769 compcert.cfrontend.Ctypes <> noattr def
R50757:50762 compcert.cfrontend.Ctypes <> Signed constr
R50753:50755 compcert.cfrontend.Ctypes <> I32 constr
R50745:50745 VST.floyd.SeparationLogicAsLogic <> b:521 var
R50732:50743 compcert.cfrontend.Cop <> Onotbool constr
R50719:50723 VST.floyd.SeparationLogicAsLogic <> Delta:519 var
R50776:50776 VST.floyd.SeparationLogicAsLogic <> P:520 var
R50704:50708 VST.floyd.SeparationLogicAsLogic <> Delta:519 var
R50698:50702 VST.floyd.SeparationLogicAsLogic <> Espec:518 var
R50695:50696 VST.floyd.SeparationLogicAsLogic <> CS:517 var
R50600:50604 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax def
R50678:50678 VST.floyd.SeparationLogicAsLogic <> R:524 var
R50676:50676 VST.floyd.SeparationLogicAsLogic <> d:523 var
R50623:50626 VST.msl.seplog <> ::logic:x_'&&'_x not
R50622:50622 VST.floyd.SeparationLogicAsLogic <> P:520 var
R50627:50631 VST.veric.SeparationLogic <> local def
R50634:50635 VST.veric.lift LiftNotation :::'`('_x_')' not
R50658:50672 VST.veric.lift LiftNotation :::'`('_x_')' not
R50636:50646 VST.veric.SeparationLogic <> typed_false def
R50649:50654 compcert.cfrontend.Clight <> typeof def
R50656:50656 VST.floyd.SeparationLogicAsLogic <> b:521 var
R50661:50669 VST.veric.expr <> eval_expr def
R50671:50671 VST.floyd.SeparationLogicAsLogic <> b:521 var
R50615:50619 VST.floyd.SeparationLogicAsLogic <> Delta:519 var
R50609:50613 VST.floyd.SeparationLogicAsLogic <> Espec:518 var
R50606:50607 VST.floyd.SeparationLogicAsLogic <> CS:517 var
R50512:50516 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax def
R50589:50589 VST.floyd.SeparationLogicAsLogic <> R:524 var
R50587:50587 VST.floyd.SeparationLogicAsLogic <> c:522 var
R50535:50538 VST.msl.seplog <> ::logic:x_'&&'_x not
R50534:50534 VST.floyd.SeparationLogicAsLogic <> P:520 var
R50539:50543 VST.veric.SeparationLogic <> local def
R50546:50547 VST.veric.lift LiftNotation :::'`('_x_')' not
R50569:50583 VST.veric.lift LiftNotation :::'`('_x_')' not
R50548:50557 VST.veric.SeparationLogic <> typed_true def
R50560:50565 compcert.cfrontend.Clight <> typeof def
R50567:50567 VST.floyd.SeparationLogicAsLogic <> b:521 var
R50572:50580 VST.veric.expr <> eval_expr def
R50582:50582 VST.floyd.SeparationLogicAsLogic <> b:521 var
R50527:50531 VST.floyd.SeparationLogicAsLogic <> Delta:519 var
R50521:50525 VST.floyd.SeparationLogicAsLogic <> Espec:518 var
R50518:50519 VST.floyd.SeparationLogicAsLogic <> CS:517 var
R50495:50497 Coq.Init.Logic <> ::type_scope:x_'='_x not
R50475:50483 VST.veric.expr <> bool_type def
R50486:50491 compcert.cfrontend.Clight <> typeof def
R50493:50493 VST.floyd.SeparationLogicAsLogic <> b:521 var
R50498:50501 Coq.Init.Datatypes <> true constr
R50833:50856 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R50833:50856 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R50890:50905 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre_simple thm
R50890:50905 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre_simple thm
def 50952:50960 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_seq
R50966:50982 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
def 50997:51007 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_break
R51013:51031 VST.floyd.SeparationLogicAsLogic AuxDefs semax_break constr
def 51046:51059 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_continue
R51065:51086 VST.floyd.SeparationLogicAsLogic AuxDefs semax_continue constr
def 51101:51110 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_loop
R51116:51133 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
prf 51145:51156 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_switch
R51174:51182 VST.veric.mpred <> compspecs class
binder 51170:51171 <> CS:525
binder 51185:51189 <> Espec:526
binder 51191:51195 <> Delta:527
R51208:51211 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51212:51216 VST.veric.mpred <> mpred def
R51201:51207 VST.veric.mpred <> environ ind
binder 51198:51198 <> Q:528
binder 51219:51219 <> a:529
binder 51221:51222 <> sl:530
binder 51224:51224 <> R:531
R51261:51269 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51270:51270 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51312:51321 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51322:51322 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51534:51543 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51545:51549 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax def
R51583:51583 VST.floyd.SeparationLogicAsLogic <> R:531 var
R51569:51575 compcert.cfrontend.Clight <> Sswitch constr
R51579:51580 VST.floyd.SeparationLogicAsLogic <> sl:530 var
R51577:51577 VST.floyd.SeparationLogicAsLogic <> a:529 var
R51566:51566 VST.floyd.SeparationLogicAsLogic <> Q:528 var
R51560:51564 VST.floyd.SeparationLogicAsLogic <> Delta:527 var
R51554:51558 VST.floyd.SeparationLogicAsLogic <> Espec:526 var
R51551:51552 VST.floyd.SeparationLogicAsLogic <> CS:525 var
binder 51330:51330 <> n:532
R51339:51343 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax def
R51514:51530 VST.veric.SeparationLogic <> switch_ret_assert def
R51532:51532 VST.floyd.SeparationLogicAsLogic <> R:531 var
R51436:51459 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R51462:51474 compcert.cfrontend.Clight <> select_switch def
R51493:51494 VST.floyd.SeparationLogicAsLogic <> sl:530 var
R51477:51488 compcert.lib.Integers Int unsigned def
R51490:51490 VST.floyd.SeparationLogicAsLogic <> n:532 var
binder 51365:51367 <> rho:533
R51372:51375 VST.msl.seplog <> andp meth
R51412:51412 VST.floyd.SeparationLogicAsLogic <> Q:528 var
R51414:51416 VST.floyd.SeparationLogicAsLogic <> rho:533 var
R51378:51381 VST.msl.seplog <> prop meth
R51399:51401 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51384:51392 VST.veric.expr <> eval_expr def
R51396:51398 VST.floyd.SeparationLogicAsLogic <> rho:533 var
R51394:51394 VST.floyd.SeparationLogicAsLogic <> a:529 var
R51402:51405 compcert.common.Values <> Vint constr
R51407:51407 VST.floyd.SeparationLogicAsLogic <> n:532 var
R51354:51358 VST.floyd.SeparationLogicAsLogic <> Delta:527 var
R51348:51352 VST.floyd.SeparationLogicAsLogic <> Espec:526 var
R51345:51346 VST.floyd.SeparationLogicAsLogic <> CS:525 var
binder 51278:51280 <> rho:534
R51288:51292 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R51283:51283 VST.floyd.SeparationLogicAsLogic <> Q:528 var
R51285:51287 VST.floyd.SeparationLogicAsLogic <> rho:534 var
R51293:51299 VST.veric.SeparationLogic <> tc_expr def
R51309:51311 VST.floyd.SeparationLogicAsLogic <> rho:534 var
R51307:51307 VST.floyd.SeparationLogicAsLogic <> a:529 var
R51301:51305 VST.floyd.SeparationLogicAsLogic <> Delta:527 var
R51254:51256 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51232:51242 VST.veric.expr <> is_int_type def
R51245:51250 compcert.cfrontend.Clight <> typeof def
R51252:51252 VST.floyd.SeparationLogicAsLogic <> a:529 var
R51257:51260 Coq.Init.Datatypes <> true constr
R51616:51635 VST.floyd.SeparationLogicAsLogic AuxDefs semax_switch constr
R51616:51635 VST.floyd.SeparationLogicAsLogic AuxDefs semax_switch constr
R51663:51678 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre_simple thm
R51663:51678 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre_simple thm
R51728:51770 VST.floyd.SeparationLogicFacts CLIGHT_SEPARATION_HOARE_LOGIC_CALL_BACKWARD <> mod
R51796:51810 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
mod 51721:51725 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.CallB
R51833:51847 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
mod 51821:51828 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.CallB.CSHL_Def
def 51862:51880 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.CallB semax_call_backward
R51886:51912 VST.floyd.SeparationLogicAsLogic AuxDefs semax_call_backward constr
R51920:51924 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.CallB <> mod
R51944:51950 VST.floyd.SeparationLogicFacts CallB2F <> modtype
R51953:51967 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R51971:51976 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R51980:51984 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.CallB <> modtype
mod 51935:51939 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.CallF
def 52000:52009 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_call
R52015:52038 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_call_forward prfax
def 52053:52064 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_return
R52070:52089 VST.floyd.SeparationLogicAsLogic AuxDefs semax_return constr
R52106:52148 VST.floyd.SeparationLogicFacts CLIGHT_SEPARATION_HOARE_LOGIC_SSET_BACKWARD <> mod
R52174:52188 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
mod 52100:52103 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sset
R52211:52225 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
mod 52199:52206 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sset.CSHL_Def
def 52240:52284 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sset semax_set_ptr_compare_load_cast_load_backward
R52290:52342 VST.floyd.SeparationLogicAsLogic AuxDefs semax_set_ptr_compare_load_cast_load_backward constr
R52350:52353 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sset <> mod
R52372:52379 VST.floyd.SeparationLogicFacts Sset2Set <> modtype
R52382:52396 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R52400:52405 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R52409:52412 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sset <> modtype
mod 52364:52367 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.SetB
R52432:52437 VST.floyd.SeparationLogicFacts SetB2F <> modtype
R52440:52454 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R52458:52463 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R52467:52470 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.SetB <> modtype
mod 52424:52427 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.SetF
def 52486:52502 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_set_forward
R52508:52529 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_set_forward prfax
R52551:52561 VST.floyd.SeparationLogicFacts Sset2PtrCmp <> modtype
R52564:52578 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R52582:52587 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R52591:52594 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sset <> modtype
mod 52540:52546 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.PtrCmpB
R52617:52625 VST.floyd.SeparationLogicFacts PtrCmpB2F <> modtype
R52628:52642 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R52646:52651 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R52655:52661 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.PtrCmpB <> modtype
mod 52606:52612 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.PtrCmpF
def 52677:52693 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_ptr_compare
R52699:52731 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_ptr_compare_forward prfax
R52751:52759 VST.floyd.SeparationLogicFacts Sset2Load <> modtype
R52762:52776 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R52780:52785 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R52789:52792 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sset <> modtype
mod 52742:52746 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.LoadB
R52813:52819 VST.floyd.SeparationLogicFacts LoadB2F <> modtype
R52822:52836 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R52840:52845 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R52849:52853 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.LoadB <> modtype
mod 52804:52808 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.LoadF
def 52869:52878 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_load
R52884:52907 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_load_forward prfax
R52931:52943 VST.floyd.SeparationLogicFacts Sset2CastLoad <> modtype
R52946:52960 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R52964:52969 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R52973:52976 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sset <> modtype
mod 52918:52926 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.CastLoadB
R53001:53011 VST.floyd.SeparationLogicFacts CastLoadB2F <> modtype
R53014:53028 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R53032:53037 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R53041:53049 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.CastLoadB <> modtype
mod 52988:52996 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.CastLoadF
def 53065:53079 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_cast_load
R53085:53117 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_cast_load_forward prfax
R53137:53182 VST.floyd.SeparationLogicFacts CLIGHT_SEPARATION_HOARE_LOGIC_SASSIGN_BACKWARD <> mod
R53208:53222 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
mod 53128:53134 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sassign
R53245:53259 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
mod 53233:53240 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sassign.CSHL_Def
def 53274:53310 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sassign semax_store_store_union_hack_backward
R53316:53360 VST.floyd.SeparationLogicAsLogic AuxDefs semax_store_store_union_hack_backward constr
R53368:53374 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sassign <> mod
R53404:53425 VST.floyd.SeparationLogicFacts Sassign2StoreUnionHack <> modtype
R53428:53442 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R53446:53451 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R53455:53461 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sassign <> modtype
mod 53385:53399 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.StoreUnionHackB
R53492:53508 VST.floyd.SeparationLogicFacts StoreUnionHackB2F <> modtype
R53511:53525 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R53529:53534 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R53538:53552 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.StoreUnionHackB <> modtype
mod 53473:53487 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.StoreUnionHackF
def 53568:53589 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_store_union_hack
R53595:53640 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_store_union_hack_forward prfax
R53661:53673 VST.floyd.SeparationLogicFacts Sassign2Store <> modtype
R53676:53690 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R53694:53699 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R53703:53709 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.Sassign <> modtype
mod 53651:53656 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.StoreB
R53954:53961 VST.floyd.SeparationLogicFacts StoreB2F <> modtype
R53964:53978 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
R53982:53987 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.Conseq <> modtype
R53991:53996 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.StoreB <> modtype
mod 53944:53949 <> DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.StoreF
def 54012:54022 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_store
R54028:54053 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_store_forward prfax
def 54068:54077 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_skip
R54083:54100 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
def 54115:54126 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_conseq
R54132:54151 VST.floyd.SeparationLogicAsLogic AuxDefs semax_conseq constr
def 54166:54177 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_Slabel
R54183:54201 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
def 54216:54224 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_ext
R54230:54251 VST.floyd.SeparationLogicAsLogic MinimumLogic semax_ext prfax
def 54266:54279 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_ext_void
R54285:54311 VST.floyd.SeparationLogicAsLogic MinimumLogic semax_ext_void prfax
def 54326:54342 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_external_FF
R54348:54377 VST.floyd.SeparationLogicAsLogic MinimumLogic semax_external_FF prfax
def 54391:54416 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_external_funspec_sub
R54422:54460 VST.floyd.SeparationLogicAsLogic MinimumLogic semax_external_funspec_sub prfax
def 54474:54506 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_external_binaryintersection
R54512:54557 VST.floyd.SeparationLogicAsLogic MinimumLogic semax_external_binaryintersection prfax
def 54572:54600 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_body_binaryintersection
binder 54611:54611 <> V:535
binder 54613:54613 <> G:536
binder 54615:54616 <> cs:537
binder 54619:54619 <> f:538
binder 54621:54623 <> sp1:539
binder 54625:54627 <> sp2:540
binder 54629:54631 <> phi:541
R54642:54651 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDefs semax_body def
R54662:54664 VST.floyd.SeparationLogicAsLogic <> sp1:539 var
R54660:54660 VST.floyd.SeparationLogicAsLogic <> f:538 var
R54657:54658 VST.floyd.SeparationLogicAsLogic <> cs:537 var
R54655:54655 VST.floyd.SeparationLogicAsLogic <> G:536 var
R54653:54653 VST.floyd.SeparationLogicAsLogic <> V:535 var
binder 54636:54638 <> SB1:542
R54674:54683 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDefs semax_body def
R54694:54696 VST.floyd.SeparationLogicAsLogic <> sp2:540 var
R54692:54692 VST.floyd.SeparationLogicAsLogic <> f:538 var
R54689:54690 VST.floyd.SeparationLogicAsLogic <> cs:537 var
R54687:54687 VST.floyd.SeparationLogicAsLogic <> G:536 var
R54685:54685 VST.floyd.SeparationLogicAsLogic <> V:535 var
binder 54668:54670 <> SB2:543
R54745:54747 Coq.Init.Logic <> ::type_scope:x_'='_x not
R54706:54724 VST.veric.seplog <> binary_intersection def
R54737:54739 Coq.Init.Datatypes <> snd def
R54741:54743 VST.floyd.SeparationLogicAsLogic <> sp2:540 var
R54727:54729 Coq.Init.Datatypes <> snd def
R54731:54733 VST.floyd.SeparationLogicAsLogic <> sp1:539 var
R54748:54751 Coq.Init.Datatypes <> Some constr
R54753:54755 VST.floyd.SeparationLogicAsLogic <> phi:541 var
binder 54702:54703 <> BI:544
R54762:54771 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDefs semax_body def
R54782:54782 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R54790:54791 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R54795:54795 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R54783:54785 Coq.Init.Datatypes <> fst def
R54787:54789 VST.floyd.SeparationLogicAsLogic <> sp1:539 var
R54792:54794 VST.floyd.SeparationLogicAsLogic <> phi:541 var
R54780:54780 VST.floyd.SeparationLogicAsLogic <> f:538 var
R54777:54778 VST.floyd.SeparationLogicAsLogic <> cs:537 var
R54775:54775 VST.floyd.SeparationLogicAsLogic <> G:536 var
R54773:54773 VST.floyd.SeparationLogicAsLogic <> V:535 var
R55119:55154 Coq.Logic.Classical_Prop EqdepTheory inj_pair2 thm
R55119:55154 Coq.Logic.Classical_Prop EqdepTheory inj_pair2 thm
R55171:55206 Coq.Logic.Classical_Prop EqdepTheory inj_pair2 thm
R55171:55206 Coq.Logic.Classical_Prop EqdepTheory inj_pair2 thm
def 55428:55442 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_func_mono
R55448:55470 VST.floyd.SeparationLogicAsLogic AuxDefs semax_func_mono constr
R55474:55491 VST.floyd.SeparationLogicAsLogic Def semax_external defax
def 55507:55520 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_func_app
R55526:55547 VST.floyd.SeparationLogicAsLogic AuxDefs semax_func_app constr
R55551:55568 VST.floyd.SeparationLogicAsLogic Def semax_external defax
def 55583:55604 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_func_subsumption
R55610:55639 VST.floyd.SeparationLogicAsLogic AuxDefs semax_func_subsumption constr
R55643:55660 VST.floyd.SeparationLogicAsLogic Def semax_external defax
def 55675:55689 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_func_join
R55696:55718 VST.floyd.SeparationLogicAsLogic AuxDefs semax_func_join constr
R55722:55739 VST.floyd.SeparationLogicAsLogic Def semax_external defax
def 55754:55770 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_func_firstn
R55776:55800 VST.floyd.SeparationLogicAsLogic AuxDefs semax_func_firstn constr
R55804:55821 VST.floyd.SeparationLogicAsLogic Def semax_external defax
def 55836:55851 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_func_skipn
R55857:55880 VST.floyd.SeparationLogicAsLogic AuxDefs semax_func_skipn constr
R55884:55901 VST.floyd.SeparationLogicAsLogic Def semax_external defax
prf 55912:55927 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic tc_fn_return_sub
R55945:55953 VST.veric.mpred <> compspecs class
binder 55940:55941 <> CS:545
R55972:55980 VST.veric.seplog <> tycontext ind
binder 55957:55961 <> Delta:546
binder 55963:55968 <> Delta':547
R56012:56017 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 56025:56027 <> ret:548
binder 56029:56034 <> retsig:549
R56068:56073 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56074:56085 VST.veric.SeparationLogic <> tc_fn_return def
R56098:56103 VST.floyd.SeparationLogicAsLogic <> retsig:549 var
R56094:56096 VST.floyd.SeparationLogicAsLogic <> ret:548 var
R56087:56092 VST.floyd.SeparationLogicAsLogic <> Delta':547 var
R56039:56050 VST.veric.SeparationLogic <> tc_fn_return def
R56062:56067 VST.floyd.SeparationLogicAsLogic <> retsig:549 var
R56058:56060 VST.floyd.SeparationLogicAsLogic <> ret:548 var
R56052:56056 VST.floyd.SeparationLogicAsLogic <> Delta:546 var
R55986:55998 VST.veric.expr <> tycontext_sub def
R56006:56011 VST.floyd.SeparationLogicAsLogic <> Delta':547 var
R56000:56004 VST.floyd.SeparationLogicAsLogic <> Delta:546 var
R56218:56218 compcert.lib.Maps <> :::x_'!'_x not
R56235:56238 compcert.lib.Maps <> :::x_'!'_x not
R56219:56228 VST.veric.seplog <> temp_types def
R56244:56244 compcert.lib.Maps <> :::x_'!'_x not
R56262:56265 compcert.lib.Maps <> :::x_'!'_x not
R56245:56254 VST.veric.seplog <> temp_types def
R56218:56218 compcert.lib.Maps <> :::x_'!'_x not
R56235:56238 compcert.lib.Maps <> :::x_'!'_x not
R56219:56228 VST.veric.seplog <> temp_types def
R56244:56244 compcert.lib.Maps <> :::x_'!'_x not
R56262:56265 compcert.lib.Maps <> :::x_'!'_x not
R56245:56254 VST.veric.seplog <> temp_types def
R56244:56244 compcert.lib.Maps <> :::x_'!'_x not
R56262:56265 compcert.lib.Maps <> :::x_'!'_x not
R56245:56254 VST.veric.seplog <> temp_types def
prf 56316:56323 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic obox_sub
R56351:56359 VST.veric.seplog <> tycontext ind
binder 56336:56340 <> Delta:550
binder 56342:56347 <> Delta':551
binder 56362:56363 <> id:552
binder 56365:56365 <> P:553
binder 56367:56369 <> rho:554
R56402:56409 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56429:56436 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56457:56464 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56484:56488 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R56465:56468 VST.floyd.SeparationLogicFacts <> obox def
R56481:56483 VST.floyd.SeparationLogicAsLogic <> rho:554 var
R56479:56479 VST.floyd.SeparationLogicAsLogic <> P:553 var
R56476:56477 VST.floyd.SeparationLogicAsLogic <> id:552 var
R56470:56474 VST.floyd.SeparationLogicAsLogic <> Delta:550 var
R56489:56492 VST.floyd.SeparationLogicFacts <> obox def
R56506:56508 VST.floyd.SeparationLogicAsLogic <> rho:554 var
R56504:56504 VST.floyd.SeparationLogicAsLogic <> P:553 var
R56501:56502 VST.floyd.SeparationLogicAsLogic <> id:552 var
R56494:56499 VST.floyd.SeparationLogicAsLogic <> Delta':551 var
R56437:56446 VST.veric.SeparationLogic <> tc_environ def
R56454:56456 VST.floyd.SeparationLogicAsLogic <> rho:554 var
R56448:56452 VST.floyd.SeparationLogicAsLogic <> Delta:550 var
R56410:56419 VST.floyd.SeparationLogicFacts <> temp_guard def
R56427:56428 VST.floyd.SeparationLogicAsLogic <> id:552 var
R56421:56425 VST.floyd.SeparationLogicAsLogic <> Delta:550 var
R56376:56388 VST.veric.expr <> tycontext_sub def
R56396:56401 VST.floyd.SeparationLogicAsLogic <> Delta':551 var
R56390:56394 VST.floyd.SeparationLogicAsLogic <> Delta:550 var
R56537:56540 VST.floyd.SeparationLogicFacts <> obox def
R56612:56612 compcert.lib.Maps <> :::x_'!'_x not
R56629:56632 compcert.lib.Maps <> :::x_'!'_x not
R56613:56622 VST.veric.seplog <> temp_types def
R56639:56639 compcert.lib.Maps <> :::x_'!'_x not
R56657:56660 compcert.lib.Maps <> :::x_'!'_x not
R56640:56649 VST.veric.seplog <> temp_types def
R56612:56612 compcert.lib.Maps <> :::x_'!'_x not
R56629:56632 compcert.lib.Maps <> :::x_'!'_x not
R56613:56622 VST.veric.seplog <> temp_types def
R56639:56639 compcert.lib.Maps <> :::x_'!'_x not
R56657:56660 compcert.lib.Maps <> :::x_'!'_x not
R56640:56649 VST.veric.seplog <> temp_types def
R56639:56639 compcert.lib.Maps <> :::x_'!'_x not
R56657:56660 compcert.lib.Maps <> :::x_'!'_x not
R56640:56649 VST.veric.seplog <> temp_types def
prf 56723:56733 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic oboxopt_sub
R56761:56769 VST.veric.seplog <> tycontext ind
binder 56746:56750 <> Delta:555
binder 56752:56757 <> Delta':556
binder 56772:56773 <> id:557
binder 56775:56775 <> P:558
binder 56777:56779 <> rho:559
R56812:56819 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56843:56850 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56871:56878 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56901:56905 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R56879:56885 VST.floyd.SeparationLogicFacts <> oboxopt def
R56898:56900 VST.floyd.SeparationLogicAsLogic <> rho:559 var
R56896:56896 VST.floyd.SeparationLogicAsLogic <> P:558 var
R56893:56894 VST.floyd.SeparationLogicAsLogic <> id:557 var
R56887:56891 VST.floyd.SeparationLogicAsLogic <> Delta:555 var
R56906:56912 VST.floyd.SeparationLogicFacts <> oboxopt def
R56926:56928 VST.floyd.SeparationLogicAsLogic <> rho:559 var
R56924:56924 VST.floyd.SeparationLogicAsLogic <> P:558 var
R56921:56922 VST.floyd.SeparationLogicAsLogic <> id:557 var
R56914:56919 VST.floyd.SeparationLogicAsLogic <> Delta':556 var
R56851:56860 VST.veric.SeparationLogic <> tc_environ def
R56868:56870 VST.floyd.SeparationLogicAsLogic <> rho:559 var
R56862:56866 VST.floyd.SeparationLogicAsLogic <> Delta:555 var
R56820:56833 VST.floyd.SeparationLogicFacts <> temp_guard_opt def
R56841:56842 VST.floyd.SeparationLogicAsLogic <> id:557 var
R56835:56839 VST.floyd.SeparationLogicAsLogic <> Delta:555 var
R56786:56798 VST.veric.expr <> tycontext_sub def
R56806:56811 VST.floyd.SeparationLogicAsLogic <> Delta':556 var
R56800:56804 VST.floyd.SeparationLogicAsLogic <> Delta:555 var
R56973:56980 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic obox_sub thm
R56973:56980 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic obox_sub thm
prf 57022:57050 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic typecheck_tid_ptr_compare_sub
binder 57060:57064 <> Delta:560
binder 57066:57071 <> Delta':561
binder 57073:57074 <> id:562
R57105:57110 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57152:57157 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57193:57195 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57158:57182 VST.veric.SeparationLogic <> typecheck_tid_ptr_compare def
R57191:57192 VST.floyd.SeparationLogicAsLogic <> id:562 var
R57184:57189 VST.floyd.SeparationLogicAsLogic <> Delta':561 var
R57196:57199 Coq.Init.Datatypes <> true constr
R57145:57147 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57111:57135 VST.veric.SeparationLogic <> typecheck_tid_ptr_compare def
R57143:57144 VST.floyd.SeparationLogicAsLogic <> id:562 var
R57137:57141 VST.floyd.SeparationLogicAsLogic <> Delta:560 var
R57148:57151 Coq.Init.Datatypes <> true constr
R57079:57091 VST.veric.expr <> tycontext_sub def
R57099:57104 VST.floyd.SeparationLogicAsLogic <> Delta':561 var
R57093:57097 VST.floyd.SeparationLogicAsLogic <> Delta:560 var
R57218:57242 VST.veric.SeparationLogic <> typecheck_tid_ptr_compare def
R57324:57324 compcert.lib.Maps <> :::x_'!'_x not
R57341:57344 compcert.lib.Maps <> :::x_'!'_x not
R57325:57334 VST.veric.seplog <> temp_types def
R57351:57351 compcert.lib.Maps <> :::x_'!'_x not
R57369:57372 compcert.lib.Maps <> :::x_'!'_x not
R57352:57361 VST.veric.seplog <> temp_types def
R57324:57324 compcert.lib.Maps <> :::x_'!'_x not
R57341:57344 compcert.lib.Maps <> :::x_'!'_x not
R57325:57334 VST.veric.seplog <> temp_types def
R57351:57351 compcert.lib.Maps <> :::x_'!'_x not
R57369:57372 compcert.lib.Maps <> :::x_'!'_x not
R57352:57361 VST.veric.seplog <> temp_types def
R57351:57351 compcert.lib.Maps <> :::x_'!'_x not
R57369:57372 compcert.lib.Maps <> :::x_'!'_x not
R57352:57361 VST.veric.seplog <> temp_types def
prf 57427:57449 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_Delta_subsumption
R57466:57474 VST.veric.mpred <> compspecs class
binder 57462:57463 <> CS:563
R57485:57494 VST.veric.juicy_extspec <> OracleKind class
binder 57478:57482 <> Espec:564
binder 57507:57511 <> Delta:565
binder 57513:57518 <> Delta':566
binder 57520:57520 <> P:567
binder 57522:57522 <> c:568
binder 57524:57524 <> R:569
R57560:57568 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57596:57599 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57601:57605 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R57627:57627 VST.floyd.SeparationLogicAsLogic <> R:569 var
R57625:57625 VST.floyd.SeparationLogicAsLogic <> c:568 var
R57623:57623 VST.floyd.SeparationLogicAsLogic <> P:567 var
R57616:57621 VST.floyd.SeparationLogicAsLogic <> Delta':566 var
R57610:57614 VST.floyd.SeparationLogicAsLogic <> Espec:564 var
R57607:57608 VST.floyd.SeparationLogicAsLogic <> CS:563 var
R57570:57574 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R57595:57595 VST.floyd.SeparationLogicAsLogic <> R:569 var
R57593:57593 VST.floyd.SeparationLogicAsLogic <> c:568 var
R57591:57591 VST.floyd.SeparationLogicAsLogic <> P:567 var
R57585:57589 VST.floyd.SeparationLogicAsLogic <> Delta:565 var
R57579:57583 VST.floyd.SeparationLogicAsLogic <> Espec:564 var
R57576:57577 VST.floyd.SeparationLogicAsLogic <> CS:563 var
R57534:57546 VST.veric.expr <> tycontext_sub def
R57554:57559 VST.floyd.SeparationLogicAsLogic <> Delta':566 var
R57548:57552 VST.floyd.SeparationLogicAsLogic <> Delta:565 var
R57787:57790 VST.msl.seplog <> ::logic:x_'&&'_x not
R57721:57724 VST.msl.seplog <> ::logic:x_'&&'_x not
R57689:57692 VST.msl.seplog <> ::logic:'!!'_x not
R57720:57720 VST.msl.seplog <> ::logic:'!!'_x not
R57713:57715 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57693:57701 VST.veric.expr <> bool_type def
R57704:57709 compcert.cfrontend.Clight <> typeof def
R57716:57719 Coq.Init.Datatypes <> true constr
R57725:57731 VST.veric.SeparationLogic <> tc_expr def
R57741:57745 compcert.cfrontend.Clight <> Eunop constr
R57763:57766 compcert.cfrontend.Ctypes <> Tint constr
R57779:57784 compcert.cfrontend.Ctypes <> noattr def
R57772:57777 compcert.cfrontend.Ctypes <> Signed constr
R57768:57770 compcert.cfrontend.Ctypes <> I32 constr
R57747:57758 compcert.cfrontend.Cop <> Onotbool constr
R57673:57681 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R57804:57827 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R57787:57790 VST.msl.seplog <> ::logic:x_'&&'_x not
R57721:57724 VST.msl.seplog <> ::logic:x_'&&'_x not
R57689:57692 VST.msl.seplog <> ::logic:'!!'_x not
R57720:57720 VST.msl.seplog <> ::logic:'!!'_x not
R57713:57715 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57693:57701 VST.veric.expr <> bool_type def
R57704:57709 compcert.cfrontend.Clight <> typeof def
R57716:57719 Coq.Init.Datatypes <> true constr
R57725:57731 VST.veric.SeparationLogic <> tc_expr def
R57741:57745 compcert.cfrontend.Clight <> Eunop constr
R57763:57766 compcert.cfrontend.Ctypes <> Tint constr
R57779:57784 compcert.cfrontend.Ctypes <> noattr def
R57772:57777 compcert.cfrontend.Ctypes <> Signed constr
R57768:57770 compcert.cfrontend.Ctypes <> I32 constr
R57747:57758 compcert.cfrontend.Cop <> Onotbool constr
R57673:57681 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R57804:57827 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R57847:57857 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R57869:57879 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R57847:57857 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R57869:57879 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R57893:57903 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R57913:57923 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R57893:57903 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R57913:57923 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R57962:57966 VST.veric.SeparationLogic <> local def
R57969:57973 VST.veric.mpred <> lift1 def
R57997:58028 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R57997:58028 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R58048:58081 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R58048:58081 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R58102:58118 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R58102:58118 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R58139:58157 VST.floyd.SeparationLogicAsLogic AuxDefs semax_break constr
R58139:58157 VST.floyd.SeparationLogicAsLogic AuxDefs semax_break constr
R58178:58199 VST.floyd.SeparationLogicAsLogic AuxDefs semax_continue constr
R58178:58199 VST.floyd.SeparationLogicAsLogic AuxDefs semax_continue constr
R58220:58237 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R58220:58237 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R58308:58312 VST.msl.seplog <> ::logic:x_'&&'_x not
R58343:58343 VST.msl.seplog <> ::logic:x_'&&'_x not
R58274:58277 VST.msl.seplog <> ::logic:'!!'_x not
R58307:58307 VST.msl.seplog <> ::logic:'!!'_x not
R58300:58302 Coq.Init.Logic <> ::type_scope:x_'='_x not
R58278:58288 VST.veric.expr <> is_int_type def
R58291:58296 compcert.cfrontend.Clight <> typeof def
R58303:58306 Coq.Init.Datatypes <> true constr
R58314:58317 VST.msl.seplog <> ::logic:x_'&&'_x not
R58318:58322 VST.veric.SeparationLogic <> local def
R58325:58334 VST.veric.SeparationLogic <> tc_environ def
R58258:58266 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R58308:58312 VST.msl.seplog <> ::logic:x_'&&'_x not
R58343:58343 VST.msl.seplog <> ::logic:x_'&&'_x not
R58274:58277 VST.msl.seplog <> ::logic:'!!'_x not
R58307:58307 VST.msl.seplog <> ::logic:'!!'_x not
R58300:58302 Coq.Init.Logic <> ::type_scope:x_'='_x not
R58278:58288 VST.veric.expr <> is_int_type def
R58291:58296 compcert.cfrontend.Clight <> typeof def
R58303:58306 Coq.Init.Datatypes <> true constr
R58314:58317 VST.msl.seplog <> ::logic:x_'&&'_x not
R58318:58322 VST.veric.SeparationLogic <> local def
R58325:58334 VST.veric.SeparationLogic <> tc_environ def
R58258:58266 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R58374:58393 VST.floyd.SeparationLogicAsLogic AuxDefs semax_switch constr
R58374:58393 VST.floyd.SeparationLogicAsLogic AuxDefs semax_switch constr
R58432:58439 VST.msl.log_normalize <> add_andp thm
R58432:58439 VST.msl.log_normalize <> add_andp thm
R58432:58439 VST.msl.log_normalize <> add_andp thm
R58467:58471 VST.veric.SeparationLogic <> local def
R58474:58478 VST.veric.mpred <> lift1 def
R58504:58513 VST.msl.seplog <> andp_left2 meth
R58504:58513 VST.msl.seplog <> andp_left2 meth
R58528:58559 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R58528:58559 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R58581:58614 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R58581:58614 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R58651:58659 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R58651:58659 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R58705:58713 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R58725:58751 VST.floyd.SeparationLogicAsLogic AuxDefs semax_call_backward constr
R58705:58713 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R58725:58751 VST.floyd.SeparationLogicAsLogic AuxDefs semax_call_backward constr
R58765:58774 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58765:58774 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58802:58811 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58802:58811 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58839:58848 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58839:58848 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58872:58881 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58872:58881 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58904:58913 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58904:58913 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58936:58945 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58936:58945 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58968:58977 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R58968:58977 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R59002:59011 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R59002:59011 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R59036:59045 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R59036:59045 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R59069:59078 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R59069:59078 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R59116:59126 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R59136:59146 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R59156:59165 VST.msl.seplog <> andp_right meth
R59175:59184 VST.msl.seplog <> andp_left1 meth
R59116:59126 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R59136:59146 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R59156:59165 VST.msl.seplog <> andp_right meth
R59175:59184 VST.msl.seplog <> andp_left1 meth
R59220:59224 VST.veric.SeparationLogic <> local def
R59227:59231 VST.veric.mpred <> lift1 def
R59264:59273 VST.msl.seplog <> prop_right meth
R59264:59273 VST.msl.seplog <> prop_right meth
R59361:59376 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic tc_fn_return_sub thm
R59361:59376 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic tc_fn_return_sub thm
R59797:59806 VST.msl.seplog <> andp_right meth
R59797:59806 VST.msl.seplog <> andp_right meth
R59829:59838 VST.msl.log_normalize <> andp_assoc thm
R59829:59838 VST.msl.log_normalize <> andp_assoc thm
R59829:59838 VST.msl.log_normalize <> andp_assoc thm
R59847:59856 VST.msl.seplog <> andp_left1 meth
R59847:59856 VST.msl.seplog <> andp_left1 meth
R59884:59888 VST.veric.SeparationLogic <> local def
R59891:59895 VST.veric.mpred <> lift1 def
R59923:59954 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R59923:59954 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R59978:60011 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R59978:60011 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R60038:60046 VST.msl.log_normalize <> andp_comm thm
R60049:60055 VST.veric.SeparationLogic <> tc_expr def
R60038:60046 VST.msl.log_normalize <> andp_comm thm
R60049:60055 VST.veric.SeparationLogic <> tc_expr def
R60038:60046 VST.msl.log_normalize <> andp_comm thm
R60049:60055 VST.veric.SeparationLogic <> tc_expr def
R60079:60088 VST.msl.log_normalize <> andp_assoc thm
R60079:60088 VST.msl.log_normalize <> andp_assoc thm
R60079:60088 VST.msl.log_normalize <> andp_assoc thm
R60097:60106 VST.msl.seplog <> andp_left1 meth
R60097:60106 VST.msl.seplog <> andp_left1 meth
R60142:60146 VST.veric.SeparationLogic <> local def
R60149:60153 VST.veric.mpred <> lift1 def
R60181:60216 VST.veric.Clight_assert_lemmas <> tc_exprlist_sub thm
R60181:60216 VST.veric.Clight_assert_lemmas <> tc_exprlist_sub thm
R60240:60273 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R60240:60273 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R60304:60314 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R60304:60314 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R60329:60340 VST.floyd.assert_lemmas <> later_ENTAIL thm
R60329:60340 VST.floyd.assert_lemmas <> later_ENTAIL thm
R60355:60367 VST.floyd.assert_lemmas <> sepcon_ENTAIL thm
R60377:60387 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R60355:60367 VST.floyd.assert_lemmas <> sepcon_ENTAIL thm
R60377:60387 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R60462:60466 VST.veric.SeparationLogic <> local def
R60469:60473 VST.veric.mpred <> lift1 def
R60499:60509 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic oboxopt_sub thm
R60499:60509 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic oboxopt_sub thm
R60533:60559 VST.floyd.SeparationLogicAsLogic DeepEmbedded tc_fn_return_temp_guard_opt thm
R60533:60559 VST.floyd.SeparationLogicAsLogic DeepEmbedded tc_fn_return_temp_guard_opt thm
R60584:60617 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R60584:60617 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R60638:60646 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R60658:60677 VST.floyd.SeparationLogicAsLogic AuxDefs semax_return constr
R60638:60646 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R60658:60677 VST.floyd.SeparationLogicAsLogic AuxDefs semax_return constr
R60707:60709 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60693:60700 VST.veric.seplog <> ret_type def
R60710:60717 VST.veric.seplog <> ret_type def
R60738:60750 VST.veric.expr <> tycontext_sub def
R60707:60709 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60693:60700 VST.veric.seplog <> ret_type def
R60710:60717 VST.veric.seplog <> ret_type def
R60792:60802 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R60814:60824 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R60792:60802 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R60814:60824 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R60861:60865 VST.veric.SeparationLogic <> local def
R60868:60872 VST.veric.mpred <> lift1 def
R60916:60947 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R60916:60947 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R60969:61002 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R60969:61002 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R61042:61050 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R61062:61114 VST.floyd.SeparationLogicAsLogic AuxDefs semax_set_ptr_compare_load_cast_load_backward constr
R61042:61050 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R61062:61114 VST.floyd.SeparationLogicAsLogic AuxDefs semax_set_ptr_compare_load_cast_load_backward constr
R61128:61137 VST.floyd.assert_lemmas <> orp_ENTAIL thm
R61147:61156 VST.floyd.assert_lemmas <> orp_ENTAIL thm
R61166:61175 VST.floyd.assert_lemmas <> orp_ENTAIL thm
R61128:61137 VST.floyd.assert_lemmas <> orp_ENTAIL thm
R61147:61156 VST.floyd.assert_lemmas <> orp_ENTAIL thm
R61166:61175 VST.floyd.assert_lemmas <> orp_ENTAIL thm
R61196:61207 VST.floyd.assert_lemmas <> later_ENTAIL thm
R61196:61207 VST.floyd.assert_lemmas <> later_ENTAIL thm
R61222:61232 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61244:61254 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R61222:61232 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61244:61254 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R61270:61280 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61270:61280 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61298:61302 VST.veric.SeparationLogic <> local def
R61305:61309 VST.veric.mpred <> lift1 def
R61355:61386 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R61355:61386 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R61410:61443 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R61410:61443 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R61468:61472 VST.veric.SeparationLogic <> local def
R61475:61479 VST.veric.mpred <> lift1 def
R61525:61559 VST.veric.Clight_assert_lemmas <> tc_temp_id_sub thm
R61525:61559 VST.veric.Clight_assert_lemmas <> tc_temp_id_sub thm
R61580:61589 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R61580:61589 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R61615:61624 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R61615:61624 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R61649:61658 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R61649:61658 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R61683:61692 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R61683:61692 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R61717:61726 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R61717:61726 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R61752:61761 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R61752:61761 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R61787:61797 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61809:61820 VST.floyd.assert_lemmas <> later_ENTAIL thm
R61823:61833 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61843:61853 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61863:61873 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61883:61893 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61903:61913 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61787:61797 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61809:61820 VST.floyd.assert_lemmas <> later_ENTAIL thm
R61823:61833 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61843:61853 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61863:61873 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61883:61893 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61903:61913 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R61944:61948 VST.veric.SeparationLogic <> local def
R61951:61955 VST.veric.mpred <> lift1 def
R62206:62234 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic typecheck_tid_ptr_compare_sub thm
R62206:62234 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic typecheck_tid_ptr_compare_sub thm
R62259:62263 VST.veric.SeparationLogic <> local def
R62266:62270 VST.veric.mpred <> lift1 def
R62316:62347 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R62316:62347 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R62371:62404 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R62371:62404 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R62429:62433 VST.veric.SeparationLogic <> local def
R62436:62440 VST.veric.mpred <> lift1 def
R62486:62517 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R62486:62517 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R62541:62574 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R62541:62574 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R62598:62608 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R62598:62608 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R62625:62635 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R62625:62635 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R62652:62662 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R62652:62662 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R62679:62689 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R62679:62689 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R62704:62713 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R62704:62713 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R62738:62747 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R62738:62747 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R62772:62781 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R62772:62781 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R62806:62816 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R62828:62839 VST.floyd.assert_lemmas <> later_ENTAIL thm
R62842:62852 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R62862:62872 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R62882:62892 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R62806:62816 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R62828:62839 VST.floyd.assert_lemmas <> later_ENTAIL thm
R62842:62852 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R62862:62872 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R62882:62892 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R62918:62922 VST.veric.SeparationLogic <> local def
R62925:62929 VST.veric.mpred <> lift1 def
R63010:63045 VST.veric.Clight_assert_lemmas <> typeof_temp_sub thm
R63010:63045 VST.veric.Clight_assert_lemmas <> typeof_temp_sub thm
R63070:63074 VST.veric.SeparationLogic <> local def
R63077:63081 VST.veric.mpred <> lift1 def
R63127:63160 VST.veric.Clight_assert_lemmas <> tc_lvalue_sub thm
R63127:63160 VST.veric.Clight_assert_lemmas <> tc_lvalue_sub thm
R63184:63217 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R63184:63217 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R63241:63251 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R63241:63251 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R63268:63278 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R63268:63278 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R63295:63305 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R63295:63305 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R63320:63329 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R63320:63329 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R63354:63363 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R63354:63363 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R63388:63397 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R63388:63397 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R63422:63431 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R63422:63431 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R63456:63466 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R63478:63489 VST.floyd.assert_lemmas <> later_ENTAIL thm
R63492:63502 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R63512:63522 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R63532:63542 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R63456:63466 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R63478:63489 VST.floyd.assert_lemmas <> later_ENTAIL thm
R63492:63502 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R63512:63522 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R63532:63542 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R63568:63572 VST.veric.SeparationLogic <> local def
R63575:63579 VST.veric.mpred <> lift1 def
R63694:63729 VST.veric.Clight_assert_lemmas <> typeof_temp_sub thm
R63694:63729 VST.veric.Clight_assert_lemmas <> typeof_temp_sub thm
R63754:63758 VST.veric.SeparationLogic <> local def
R63761:63765 VST.veric.mpred <> lift1 def
R63811:63844 VST.veric.Clight_assert_lemmas <> tc_lvalue_sub thm
R63811:63844 VST.veric.Clight_assert_lemmas <> tc_lvalue_sub thm
R63868:63901 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R63868:63901 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R63925:63935 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R63925:63935 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R63952:63962 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R63952:63962 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R63979:63989 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R63979:63989 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R64003:64011 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R64023:64067 VST.floyd.SeparationLogicAsLogic AuxDefs semax_store_store_union_hack_backward constr
R64003:64011 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R64023:64067 VST.floyd.SeparationLogicAsLogic AuxDefs semax_store_store_union_hack_backward constr
R64081:64090 VST.floyd.assert_lemmas <> orp_ENTAIL thm
R64081:64090 VST.floyd.assert_lemmas <> orp_ENTAIL thm
R64105:64114 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R64105:64114 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R64139:64149 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R64159:64169 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R64139:64149 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R64159:64169 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R64187:64198 VST.floyd.assert_lemmas <> later_ENTAIL thm
R64187:64198 VST.floyd.assert_lemmas <> later_ENTAIL thm
R64213:64223 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R64235:64245 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R64213:64223 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R64235:64245 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R64261:64271 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R64261:64271 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R64289:64293 VST.veric.SeparationLogic <> local def
R64296:64300 VST.veric.mpred <> lift1 def
R64346:64379 VST.veric.Clight_assert_lemmas <> tc_lvalue_sub thm
R64346:64379 VST.veric.Clight_assert_lemmas <> tc_lvalue_sub thm
R64403:64436 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R64403:64436 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R64461:64465 VST.veric.SeparationLogic <> local def
R64468:64472 VST.veric.mpred <> lift1 def
R64518:64549 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R64518:64549 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R64573:64606 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R64573:64606 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R64628:64637 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R64628:64637 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R64662:64671 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R64662:64671 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R64696:64705 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R64696:64705 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R64731:64740 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R64731:64740 VST.floyd.assert_lemmas <> exp_ENTAIL thm
R64765:64775 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R64785:64795 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R64765:64775 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R64785:64795 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R64813:64824 VST.floyd.assert_lemmas <> later_ENTAIL thm
R64813:64824 VST.floyd.assert_lemmas <> later_ENTAIL thm
R64839:64849 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R64861:64871 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R64839:64849 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R64861:64871 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R64887:64897 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R64887:64897 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R64915:64919 VST.veric.SeparationLogic <> local def
R64922:64926 VST.veric.mpred <> lift1 def
R64972:65005 VST.veric.Clight_assert_lemmas <> tc_lvalue_sub thm
R64972:65005 VST.veric.Clight_assert_lemmas <> tc_lvalue_sub thm
R65029:65062 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R65029:65062 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R65087:65091 VST.veric.SeparationLogic <> local def
R65094:65098 VST.veric.mpred <> lift1 def
R65144:65175 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R65144:65175 VST.veric.Clight_assert_lemmas <> tc_expr_sub thm
R65199:65232 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R65199:65232 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R65252:65269 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R65252:65269 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R65282:65302 VST.floyd.SeparationLogicAsLogic AuxDefs semax_builtin constr
R65282:65302 VST.floyd.SeparationLogicAsLogic AuxDefs semax_builtin constr
R65315:65333 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
R65315:65333 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
R65352:65369 VST.floyd.SeparationLogicAsLogic AuxDefs semax_goto constr
R65352:65369 VST.floyd.SeparationLogicAsLogic AuxDefs semax_goto constr
R65383:65394 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_conseq def
R65383:65394 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_conseq def
R65432:65444 VST.msl.seplog <> derives_trans meth
R65432:65444 VST.msl.seplog <> derives_trans meth
R65473:65484 VST.msl.log_normalize <> andp_derives thm
R65496:65507 VST.msl.log_normalize <> andp_derives thm
R65473:65484 VST.msl.log_normalize <> andp_derives thm
R65496:65507 VST.msl.log_normalize <> andp_derives thm
R65532:65536 VST.veric.SeparationLogic <> local def
R65539:65543 VST.veric.mpred <> lift1 def
R65590:65623 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R65590:65623 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R65654:65689 VST.veric.Clight_assert_lemmas <> allp_fun_id_sub thm
R65654:65689 VST.veric.Clight_assert_lemmas <> allp_fun_id_sub thm
R65711:65723 VST.msl.seplog <> derives_trans meth
R65711:65723 VST.msl.seplog <> derives_trans meth
R65752:65763 VST.msl.log_normalize <> andp_derives thm
R65775:65786 VST.msl.log_normalize <> andp_derives thm
R65752:65763 VST.msl.log_normalize <> andp_derives thm
R65775:65786 VST.msl.log_normalize <> andp_derives thm
R65811:65815 VST.veric.SeparationLogic <> local def
R65818:65822 VST.veric.mpred <> lift1 def
R65869:65902 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R65869:65902 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R65933:65968 VST.veric.Clight_assert_lemmas <> allp_fun_id_sub thm
R65933:65968 VST.veric.Clight_assert_lemmas <> allp_fun_id_sub thm
R65990:66002 VST.msl.seplog <> derives_trans meth
R65990:66002 VST.msl.seplog <> derives_trans meth
R66031:66042 VST.msl.log_normalize <> andp_derives thm
R66054:66065 VST.msl.log_normalize <> andp_derives thm
R66031:66042 VST.msl.log_normalize <> andp_derives thm
R66054:66065 VST.msl.log_normalize <> andp_derives thm
R66090:66094 VST.veric.SeparationLogic <> local def
R66097:66101 VST.veric.mpred <> lift1 def
R66148:66181 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R66148:66181 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R66212:66247 VST.veric.Clight_assert_lemmas <> allp_fun_id_sub thm
R66212:66247 VST.veric.Clight_assert_lemmas <> allp_fun_id_sub thm
R66269:66281 VST.msl.seplog <> derives_trans meth
R66269:66281 VST.msl.seplog <> derives_trans meth
R66310:66321 VST.msl.log_normalize <> andp_derives thm
R66333:66344 VST.msl.log_normalize <> andp_derives thm
R66310:66321 VST.msl.log_normalize <> andp_derives thm
R66333:66344 VST.msl.log_normalize <> andp_derives thm
R66369:66373 VST.veric.SeparationLogic <> local def
R66376:66380 VST.veric.mpred <> lift1 def
R66427:66460 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R66427:66460 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R66491:66526 VST.veric.Clight_assert_lemmas <> allp_fun_id_sub thm
R66491:66526 VST.veric.Clight_assert_lemmas <> allp_fun_id_sub thm
R66562:66574 VST.msl.seplog <> derives_trans meth
R66562:66574 VST.msl.seplog <> derives_trans meth
R66603:66614 VST.msl.log_normalize <> andp_derives thm
R66626:66637 VST.msl.log_normalize <> andp_derives thm
R66603:66614 VST.msl.log_normalize <> andp_derives thm
R66626:66637 VST.msl.log_normalize <> andp_derives thm
R66662:66666 VST.veric.SeparationLogic <> local def
R66669:66673 VST.veric.mpred <> lift1 def
R66720:66753 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R66720:66753 VST.veric.semax_lemmas <> typecheck_environ_sub thm
R66784:66819 VST.veric.Clight_assert_lemmas <> allp_fun_id_sub thm
R66784:66819 VST.veric.Clight_assert_lemmas <> allp_fun_id_sub thm
prf 66840:66854 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cenv_sub
binder 66865:66866 <> CS:570
binder 66868:66870 <> CS':571
R66880:66887 VST.veric.expr <> cenv_sub def
R66905:66911 VST.veric.mpred <> cenv_cs meth
R66913:66915 VST.floyd.SeparationLogicAsLogic <> CS':571 var
R66891:66897 VST.veric.mpred <> cenv_cs meth
R66899:66900 VST.floyd.SeparationLogicAsLogic <> CS:570 var
binder 66874:66877 <> CSUB:572
binder 66919:66923 <> Delta:573
binder 66925:66925 <> e:574
binder 66927:66929 <> rho:575
R66954:66959 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R66983:66987 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R66961:66967 VST.veric.SeparationLogic <> tc_expr def
R66980:66982 VST.floyd.SeparationLogicAsLogic <> rho:575 var
R66978:66978 VST.floyd.SeparationLogicAsLogic <> e:574 var
R66972:66976 VST.floyd.SeparationLogicAsLogic <> Delta:573 var
R66969:66970 VST.floyd.SeparationLogicAsLogic <> CS:570 var
R66988:66991 VST.msl.seplog <> ::logic:'!!'_x not
R67034:67034 VST.msl.seplog <> ::logic:'!!'_x not
R67011:67013 Coq.Init.Logic <> ::type_scope:x_'='_x not
R66993:67001 VST.veric.expr <> eval_expr def
R67008:67010 VST.floyd.SeparationLogicAsLogic <> rho:575 var
R67006:67006 VST.floyd.SeparationLogicAsLogic <> e:574 var
R67003:67004 VST.floyd.SeparationLogicAsLogic <> CS:570 var
R67015:67023 VST.veric.expr <> eval_expr def
R67031:67033 VST.floyd.SeparationLogicAsLogic <> rho:575 var
R67029:67029 VST.floyd.SeparationLogicAsLogic <> e:574 var
R67025:67027 VST.floyd.SeparationLogicAsLogic <> CS':571 var
R66934:66943 VST.veric.SeparationLogic <> tc_environ def
R66951:66953 VST.floyd.SeparationLogicAsLogic <> rho:575 var
R66945:66949 VST.floyd.SeparationLogicAsLogic <> Delta:573 var
R67122:67125 VST.msl.seplog <> ::logic:x_'&&'_x not
R67080:67082 VST.msl.seplog <> ::logic:'!!'_x not
R67083:67088 VST.veric.Cop2 <> tc_val def
R67103:67111 VST.veric.expr <> eval_expr def
R67091:67096 compcert.cfrontend.Clight <> typeof def
R67127:67133 VST.veric.SeparationLogic <> tc_expr def
R67060:67072 VST.msl.seplog <> derives_trans meth
R67122:67125 VST.msl.seplog <> ::logic:x_'&&'_x not
R67080:67082 VST.msl.seplog <> ::logic:'!!'_x not
R67083:67088 VST.veric.Cop2 <> tc_val def
R67103:67111 VST.veric.expr <> eval_expr def
R67091:67096 compcert.cfrontend.Clight <> typeof def
R67127:67133 VST.veric.SeparationLogic <> tc_expr def
R67060:67072 VST.msl.seplog <> derives_trans meth
R67162:67171 VST.msl.seplog <> andp_right meth
R67162:67171 VST.msl.seplog <> andp_right meth
R67189:67208 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R67189:67208 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R67244:67276 VST.veric.expr_lemmas <> eval_expr_cenv_sub_eq thm
R67244:67276 VST.veric.expr_lemmas <> eval_expr_cenv_sub_eq thm
R67244:67276 VST.veric.expr_lemmas <> eval_expr_cenv_sub_eq thm
R67244:67276 VST.veric.expr_lemmas <> eval_expr_cenv_sub_eq thm
R67340:67352 VST.veric.Cop2 <> tc_val_Vundef thm
R67340:67352 VST.veric.Cop2 <> tc_val_Vundef thm
prf 67381:67397 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub
binder 67408:67409 <> CS:576
binder 67411:67413 <> CS':577
R67423:67432 VST.veric.expr <> cspecs_sub def
R67438:67440 VST.floyd.SeparationLogicAsLogic <> CS':577 var
R67435:67436 VST.floyd.SeparationLogicAsLogic <> CS:576 var
binder 67417:67420 <> CSUB:578
binder 67443:67447 <> Delta:579
binder 67449:67449 <> e:580
binder 67451:67453 <> rho:581
R67478:67483 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R67507:67511 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R67485:67491 VST.veric.SeparationLogic <> tc_expr def
R67504:67506 VST.floyd.SeparationLogicAsLogic <> rho:581 var
R67502:67502 VST.floyd.SeparationLogicAsLogic <> e:580 var
R67496:67500 VST.floyd.SeparationLogicAsLogic <> Delta:579 var
R67493:67494 VST.floyd.SeparationLogicAsLogic <> CS:576 var
R67512:67515 VST.msl.seplog <> ::logic:'!!'_x not
R67558:67558 VST.msl.seplog <> ::logic:'!!'_x not
R67535:67537 Coq.Init.Logic <> ::type_scope:x_'='_x not
R67517:67525 VST.veric.expr <> eval_expr def
R67532:67534 VST.floyd.SeparationLogicAsLogic <> rho:581 var
R67530:67530 VST.floyd.SeparationLogicAsLogic <> e:580 var
R67527:67528 VST.floyd.SeparationLogicAsLogic <> CS:576 var
R67539:67547 VST.veric.expr <> eval_expr def
R67555:67557 VST.floyd.SeparationLogicAsLogic <> rho:581 var
R67553:67553 VST.floyd.SeparationLogicAsLogic <> e:580 var
R67549:67551 VST.floyd.SeparationLogicAsLogic <> CS':577 var
R67458:67467 VST.veric.SeparationLogic <> tc_environ def
R67475:67477 VST.floyd.SeparationLogicAsLogic <> rho:581 var
R67469:67473 VST.floyd.SeparationLogicAsLogic <> Delta:579 var
R67610:67624 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cenv_sub thm
R67610:67624 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cenv_sub thm
prf 67655:67669 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic lvalue_cenv_sub
binder 67680:67681 <> CS:582
binder 67683:67685 <> CS':583
R67695:67702 VST.veric.expr <> cenv_sub def
R67720:67726 VST.veric.mpred <> cenv_cs meth
R67728:67730 VST.floyd.SeparationLogicAsLogic <> CS':583 var
R67706:67712 VST.veric.mpred <> cenv_cs meth
R67714:67715 VST.floyd.SeparationLogicAsLogic <> CS:582 var
binder 67689:67692 <> CSUB:584
binder 67734:67738 <> Delta:585
binder 67740:67740 <> e:586
binder 67742:67744 <> rho:587
R67769:67774 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R67800:67804 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R67776:67784 VST.veric.SeparationLogic <> tc_lvalue def
R67797:67799 VST.floyd.SeparationLogicAsLogic <> rho:587 var
R67795:67795 VST.floyd.SeparationLogicAsLogic <> e:586 var
R67789:67793 VST.floyd.SeparationLogicAsLogic <> Delta:585 var
R67786:67787 VST.floyd.SeparationLogicAsLogic <> CS:582 var
R67805:67808 VST.msl.seplog <> ::logic:'!!'_x not
R67855:67855 VST.msl.seplog <> ::logic:'!!'_x not
R67830:67832 Coq.Init.Logic <> ::type_scope:x_'='_x not
R67810:67820 VST.veric.expr <> eval_lvalue def
R67827:67829 VST.floyd.SeparationLogicAsLogic <> rho:587 var
R67825:67825 VST.floyd.SeparationLogicAsLogic <> e:586 var
R67822:67823 VST.floyd.SeparationLogicAsLogic <> CS:582 var
R67834:67844 VST.veric.expr <> eval_lvalue def
R67852:67854 VST.floyd.SeparationLogicAsLogic <> rho:587 var
R67850:67850 VST.floyd.SeparationLogicAsLogic <> e:586 var
R67846:67848 VST.floyd.SeparationLogicAsLogic <> CS':583 var
R67749:67758 VST.veric.SeparationLogic <> tc_environ def
R67766:67768 VST.floyd.SeparationLogicAsLogic <> rho:587 var
R67760:67764 VST.floyd.SeparationLogicAsLogic <> Delta:585 var
R67947:67950 VST.msl.seplog <> ::logic:x_'&&'_x not
R67902:67904 VST.msl.seplog <> ::logic:'!!'_x not
R67905:67922 VST.veric.val_lemmas <> is_pointer_or_null def
R67926:67936 VST.veric.expr <> eval_lvalue def
R67952:67960 VST.veric.SeparationLogic <> tc_lvalue def
R67882:67894 VST.msl.seplog <> derives_trans meth
R67947:67950 VST.msl.seplog <> ::logic:x_'&&'_x not
R67902:67904 VST.msl.seplog <> ::logic:'!!'_x not
R67905:67922 VST.veric.val_lemmas <> is_pointer_or_null def
R67926:67936 VST.veric.expr <> eval_lvalue def
R67952:67960 VST.veric.SeparationLogic <> tc_lvalue def
R67882:67894 VST.msl.seplog <> derives_trans meth
R67989:67998 VST.msl.seplog <> andp_right meth
R67989:67998 VST.msl.seplog <> andp_right meth
R68016:68037 VST.veric.SeparationLogic <> typecheck_lvalue_sound thm
R68016:68037 VST.veric.SeparationLogic <> typecheck_lvalue_sound thm
R68073:68107 VST.veric.expr_lemmas <> eval_lvalue_cenv_sub_eq thm
R68073:68107 VST.veric.expr_lemmas <> eval_lvalue_cenv_sub_eq thm
R68073:68107 VST.veric.expr_lemmas <> eval_lvalue_cenv_sub_eq thm
R68073:68107 VST.veric.expr_lemmas <> eval_lvalue_cenv_sub_eq thm
prf 68186:68202 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic lvalue_cspecs_sub
binder 68213:68214 <> CS:588
binder 68216:68218 <> CS':589
R68228:68237 VST.veric.expr <> cspecs_sub def
R68243:68245 VST.floyd.SeparationLogicAsLogic <> CS':589 var
R68240:68241 VST.floyd.SeparationLogicAsLogic <> CS:588 var
binder 68222:68225 <> CSUB:590
binder 68248:68252 <> Delta:591
binder 68254:68254 <> e:592
binder 68256:68258 <> rho:593
R68283:68288 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R68314:68318 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R68290:68298 VST.veric.SeparationLogic <> tc_lvalue def
R68311:68313 VST.floyd.SeparationLogicAsLogic <> rho:593 var
R68309:68309 VST.floyd.SeparationLogicAsLogic <> e:592 var
R68303:68307 VST.floyd.SeparationLogicAsLogic <> Delta:591 var
R68300:68301 VST.floyd.SeparationLogicAsLogic <> CS:588 var
R68319:68322 VST.msl.seplog <> ::logic:'!!'_x not
R68369:68369 VST.msl.seplog <> ::logic:'!!'_x not
R68344:68346 Coq.Init.Logic <> ::type_scope:x_'='_x not
R68324:68334 VST.veric.expr <> eval_lvalue def
R68341:68343 VST.floyd.SeparationLogicAsLogic <> rho:593 var
R68339:68339 VST.floyd.SeparationLogicAsLogic <> e:592 var
R68336:68337 VST.floyd.SeparationLogicAsLogic <> CS:588 var
R68348:68358 VST.veric.expr <> eval_lvalue def
R68366:68368 VST.floyd.SeparationLogicAsLogic <> rho:593 var
R68364:68364 VST.floyd.SeparationLogicAsLogic <> e:592 var
R68360:68362 VST.floyd.SeparationLogicAsLogic <> CS':589 var
R68263:68272 VST.veric.SeparationLogic <> tc_environ def
R68280:68282 VST.floyd.SeparationLogicAsLogic <> rho:593 var
R68274:68278 VST.floyd.SeparationLogicAsLogic <> Delta:591 var
R68421:68435 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic lvalue_cenv_sub thm
R68421:68435 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic lvalue_cenv_sub thm
prf 68467:68486 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic denote_tc_bool_CSCS'
binder 68489:68490 <> CS:594
binder 68492:68494 <> CS':595
binder 68497:68497 <> v:596
binder 68499:68499 <> e:597
R68536:68538 Coq.Init.Logic <> ::type_scope:x_'='_x not
R68503:68518 VST.veric.SeparationLogic <> denote_tc_assert def
R68524:68530 VST.veric.expr <> tc_bool def
R68534:68534 VST.floyd.SeparationLogicAsLogic <> e:597 var
R68532:68532 VST.floyd.SeparationLogicAsLogic <> v:596 var
R68520:68521 VST.floyd.SeparationLogicAsLogic <> CS:594 var
R68540:68555 VST.veric.SeparationLogic <> denote_tc_assert def
R68562:68568 VST.veric.expr <> tc_bool def
R68572:68572 VST.floyd.SeparationLogicAsLogic <> e:597 var
R68570:68570 VST.floyd.SeparationLogicAsLogic <> v:596 var
R68557:68559 VST.floyd.SeparationLogicAsLogic <> CS':595 var
prf 68623:68638 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic tc_expr_NoVundef
binder 68641:68642 <> CS:598
binder 68645:68649 <> Delta:599
binder 68651:68653 <> rho:600
binder 68655:68655 <> e:601
R68662:68678 VST.veric.seplog <> typecheck_environ def
R68686:68688 VST.floyd.SeparationLogicAsLogic <> rho:600 var
R68680:68684 VST.floyd.SeparationLogicAsLogic <> Delta:599 var
binder 68658:68659 <> TE:602
R68717:68721 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R68695:68701 VST.veric.SeparationLogic <> tc_expr def
R68714:68716 VST.floyd.SeparationLogicAsLogic <> rho:600 var
R68712:68712 VST.floyd.SeparationLogicAsLogic <> e:601 var
R68706:68710 VST.floyd.SeparationLogicAsLogic <> Delta:599 var
R68703:68704 VST.floyd.SeparationLogicAsLogic <> CS:598 var
R68722:68725 VST.msl.seplog <> ::logic:'!!'_x not
R68798:68798 VST.msl.seplog <> ::logic:'!!'_x not
R68765:68768 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R68726:68731 VST.veric.Cop2 <> tc_val def
R68746:68754 VST.veric.expr <> eval_expr def
R68761:68763 VST.floyd.SeparationLogicAsLogic <> rho:600 var
R68759:68759 VST.floyd.SeparationLogicAsLogic <> e:601 var
R68756:68757 VST.floyd.SeparationLogicAsLogic <> CS:598 var
R68734:68739 compcert.cfrontend.Clight <> typeof def
R68741:68741 VST.floyd.SeparationLogicAsLogic <> e:601 var
R68769:68769 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R68789:68791 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R68771:68779 VST.veric.expr <> eval_expr def
R68786:68788 VST.floyd.SeparationLogicAsLogic <> rho:600 var
R68784:68784 VST.floyd.SeparationLogicAsLogic <> e:601 var
R68781:68782 VST.floyd.SeparationLogicAsLogic <> CS:598 var
R68792:68797 compcert.common.Values <> Vundef constr
R68817:68829 VST.msl.seplog <> derives_trans meth
R68817:68829 VST.msl.seplog <> derives_trans meth
R68838:68857 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R68838:68857 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R68939:68951 VST.veric.Cop2 <> tc_val_Vundef thm
R68939:68951 VST.veric.Cop2 <> tc_val_Vundef thm
def 68986:68991 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic SETpre
binder 68993:68994 <> CS:603
binder 68996:69000 <> Delta:604
binder 69002:69003 <> id:605
binder 69005:69005 <> e:606
binder 69007:69007 <> P:607
R70444:70450 VST.msl.seplog <> ::logic:x_'||'_x not
R70958:70958 VST.msl.seplog <> ::logic:x_'||'_x not
R70051:70057 VST.msl.seplog <> ::logic:x_'||'_x not
R70443:70443 VST.msl.seplog <> ::logic:x_'||'_x not
R69117:69123 VST.msl.seplog <> ::logic:x_'||'_x not
R70050:70050 VST.msl.seplog <> ::logic:x_'||'_x not
R69014:69017 VST.msl.seplog <> ::logic:'|>'_x not
R69116:69116 VST.msl.seplog <> ::logic:'|>'_x not
R69077:69080 VST.msl.seplog <> ::logic:x_'&&'_x not
R69037:69040 VST.msl.seplog <> ::logic:x_'&&'_x not
R69019:69025 VST.veric.SeparationLogic <> tc_expr def
R69036:69036 VST.floyd.SeparationLogicAsLogic <> e:606 var
R69030:69034 VST.floyd.SeparationLogicAsLogic <> Delta:604 var
R69027:69028 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R69042:69051 VST.veric.SeparationLogic <> tc_temp_id def
R69076:69076 VST.floyd.SeparationLogicAsLogic <> e:606 var
R69070:69074 VST.floyd.SeparationLogicAsLogic <> Delta:604 var
R69067:69068 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R69057:69062 compcert.cfrontend.Clight <> typeof def
R69064:69064 VST.floyd.SeparationLogicAsLogic <> e:606 var
R69053:69054 VST.floyd.SeparationLogicAsLogic <> id:605 var
R69082:69086 VST.veric.seplog <> subst def
R69115:69115 VST.floyd.SeparationLogicAsLogic <> P:607 var
R69099:69107 VST.veric.expr <> eval_expr def
R69112:69112 VST.floyd.SeparationLogicAsLogic <> e:606 var
R69109:69110 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R69094:69095 VST.floyd.SeparationLogicAsLogic <> id:605 var
R69088:69092 VST.veric.mpred <> mpred def
R69124:69126 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69153:69160 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69133:69152 compcert.cfrontend.Cop <> binary_operation ind
binder 69127:69129 <> cmp:608
R69161:69163 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69173:69180 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69169:69172 compcert.cfrontend.Clight <> expr ind
binder 69164:69165 <> e1:609
R69181:69183 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69193:69200 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69189:69192 compcert.cfrontend.Clight <> expr ind
binder 69184:69185 <> e2:610
R69201:69203 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69213:69220 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69209:69212 compcert.cfrontend.Ctypes <> type ind
binder 69204:69205 <> ty:611
R69221:69223 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69235:69242 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69230:69234 VST.msl.shares <> share def
binder 69224:69226 <> sh1:612
R69243:69245 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69257:69264 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69252:69256 VST.msl.shares <> share def
binder 69246:69248 <> sh2:613
R69614:69623 VST.msl.seplog <> ::logic:x_'&&'_x not
R69265:69268 VST.msl.seplog <> ::logic:'!!'_x not
R69613:69613 VST.msl.seplog <> ::logic:'!!'_x not
R69292:69305 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R69270:69272 Coq.Init.Logic <> ::type_scope:x_'='_x not
R69269:69269 VST.floyd.SeparationLogicAsLogic <> e:606 var
R69273:69278 compcert.cfrontend.Clight <> Ebinop constr
R69290:69291 VST.floyd.SeparationLogicAsLogic <> ty:611 var
R69287:69288 VST.floyd.SeparationLogicAsLogic <> e2:610 var
R69284:69285 VST.floyd.SeparationLogicAsLogic <> e1:609 var
R69280:69282 VST.floyd.SeparationLogicAsLogic <> cmp:608 var
R69358:69371 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R69307:69324 VST.msl.sepalg <> nonidentity def
R69355:69357 VST.floyd.SeparationLogicAsLogic <> sh1:612 var
R69346:69353 VST.msl.shares <> pa_share inst
R69332:69344 VST.msl.shares Share Join_ba inst
R69326:69330 VST.msl.shares <> share def
R69424:69437 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R69373:69390 VST.msl.sepalg <> nonidentity def
R69421:69423 VST.floyd.SeparationLogicAsLogic <> sh2:613 var
R69412:69419 VST.msl.shares <> pa_share inst
R69398:69410 VST.msl.shares Share Join_ba inst
R69392:69396 VST.msl.shares <> share def
R69462:69475 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R69455:69457 Coq.Init.Logic <> ::type_scope:x_'='_x not
R69438:69450 VST.veric.SeparationLogic <> is_comparison def
R69452:69454 VST.floyd.SeparationLogicAsLogic <> cmp:608 var
R69458:69461 Coq.Init.Datatypes <> true constr
R69520:69523 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R69512:69514 Coq.Init.Logic <> ::type_scope:x_'='_x not
R69476:69483 VST.veric.Cop2 <> eqb_type def
R69497:69511 VST.veric.Cop2 <> int_or_ptr_type def
R69486:69491 compcert.cfrontend.Clight <> typeof def
R69493:69494 VST.floyd.SeparationLogicAsLogic <> e1:609 var
R69515:69519 Coq.Init.Datatypes <> false constr
R69568:69571 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R69560:69562 Coq.Init.Logic <> ::type_scope:x_'='_x not
R69524:69531 VST.veric.Cop2 <> eqb_type def
R69545:69559 VST.veric.Cop2 <> int_or_ptr_type def
R69534:69539 compcert.cfrontend.Clight <> typeof def
R69541:69542 VST.floyd.SeparationLogicAsLogic <> e2:610 var
R69563:69567 Coq.Init.Datatypes <> false constr
R69606:69608 Coq.Init.Logic <> ::type_scope:x_'='_x not
R69572:69596 VST.veric.SeparationLogic <> typecheck_tid_ptr_compare def
R69604:69605 VST.floyd.SeparationLogicAsLogic <> id:605 var
R69598:69602 VST.floyd.SeparationLogicAsLogic <> Delta:604 var
R69609:69612 Coq.Init.Datatypes <> true constr
R69624:69627 VST.msl.seplog <> ::logic:'|>'_x not
R70049:70049 VST.msl.seplog <> ::logic:'|>'_x not
R69980:69993 VST.msl.seplog <> ::logic:x_'&&'_x not
R69862:69876 VST.msl.seplog <> ::logic:x_'&&'_x not
R69979:69979 VST.msl.seplog <> ::logic:x_'&&'_x not
R69744:69758 VST.msl.seplog <> ::logic:x_'&&'_x not
R69861:69861 VST.msl.seplog <> ::logic:x_'&&'_x not
R69672:69675 VST.msl.seplog <> ::logic:x_'&&'_x not
R69648:69651 VST.msl.seplog <> ::logic:x_'&&'_x not
R69629:69635 VST.veric.SeparationLogic <> tc_expr def
R69646:69647 VST.floyd.SeparationLogicAsLogic <> e1:609 var
R69640:69644 VST.floyd.SeparationLogicAsLogic <> Delta:604 var
R69637:69638 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R69653:69659 VST.veric.SeparationLogic <> tc_expr def
R69670:69671 VST.floyd.SeparationLogicAsLogic <> e2:610 var
R69664:69668 VST.floyd.SeparationLogicAsLogic <> Delta:604 var
R69661:69662 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R69676:69680 VST.veric.SeparationLogic <> local def
R69683:69686 VST.veric.lift LiftNotation :::'`'_x not
R69703:69742 VST.veric.lift LiftNotation :::'`'_x not
R69687:69698 VST.veric.SeparationLogic <> blocks_match def
R69700:69702 VST.floyd.SeparationLogicAsLogic <> cmp:608 var
R69727:69735 VST.veric.expr <> eval_expr def
R69740:69741 VST.floyd.SeparationLogicAsLogic <> e2:610 var
R69737:69738 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R69708:69716 VST.veric.expr <> eval_expr def
R69721:69722 VST.floyd.SeparationLogicAsLogic <> e1:609 var
R69718:69719 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R69807:69809 VST.msl.seplog <> ::logic:x_'*'_x not
R69759:69762 VST.veric.lift LiftNotation :::'`'_x not
R69786:69806 VST.veric.lift LiftNotation :::'`'_x not
R69763:69769 VST.veric.SeparationLogic <> mapsto_ def
R69776:69781 compcert.cfrontend.Clight <> typeof def
R69783:69784 VST.floyd.SeparationLogicAsLogic <> e1:609 var
R69771:69773 VST.floyd.SeparationLogicAsLogic <> sh1:612 var
R69791:69799 VST.veric.expr <> eval_expr def
R69804:69805 VST.floyd.SeparationLogicAsLogic <> e1:609 var
R69801:69802 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R69811:69812 VST.msl.seplog <> TT meth
R69836:69846 VST.veric.SeparationLogic <> LiftNatDed' inst
R69854:69859 VST.veric.SeparationLogic <> Nveric inst
R69848:69852 VST.veric.mpred <> mpred def
R69815:69825 VST.veric.mpred <> LiftEnviron canonstruc
R69827:69831 VST.veric.mpred <> mpred def
R69925:69927 VST.msl.seplog <> ::logic:x_'*'_x not
R69877:69880 VST.veric.lift LiftNotation :::'`'_x not
R69904:69924 VST.veric.lift LiftNotation :::'`'_x not
R69881:69887 VST.veric.SeparationLogic <> mapsto_ def
R69894:69899 compcert.cfrontend.Clight <> typeof def
R69901:69902 VST.floyd.SeparationLogicAsLogic <> e2:610 var
R69889:69891 VST.floyd.SeparationLogicAsLogic <> sh2:613 var
R69909:69917 VST.veric.expr <> eval_expr def
R69922:69923 VST.floyd.SeparationLogicAsLogic <> e2:610 var
R69919:69920 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R69929:69930 VST.msl.seplog <> TT meth
R69954:69964 VST.veric.SeparationLogic <> LiftNatDed' inst
R69972:69977 VST.veric.SeparationLogic <> Nveric inst
R69966:69970 VST.veric.mpred <> mpred def
R69933:69943 VST.veric.mpred <> LiftEnviron canonstruc
R69945:69949 VST.veric.mpred <> mpred def
R69995:69999 VST.veric.seplog <> subst def
R70048:70048 VST.floyd.SeparationLogicAsLogic <> P:607 var
R70012:70020 VST.veric.expr <> eval_expr def
R70026:70031 compcert.cfrontend.Clight <> Ebinop constr
R70043:70044 VST.floyd.SeparationLogicAsLogic <> ty:611 var
R70040:70041 VST.floyd.SeparationLogicAsLogic <> e2:610 var
R70037:70038 VST.floyd.SeparationLogicAsLogic <> e1:609 var
R70033:70035 VST.floyd.SeparationLogicAsLogic <> cmp:608 var
R70022:70023 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R70007:70008 VST.floyd.SeparationLogicAsLogic <> id:605 var
R70001:70005 VST.veric.mpred <> mpred def
R70058:70060 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70071:70078 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70066:70070 VST.msl.shares <> share def
binder 70061:70062 <> sh:614
R70079:70081 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70091:70098 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70087:70090 compcert.cfrontend.Ctypes <> type ind
binder 70082:70083 <> t2:615
R70099:70101 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70110:70117 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70107:70109 compcert.common.Values <> val ind
binder 70102:70103 <> v2:616
R70220:70229 VST.msl.seplog <> ::logic:x_'&&'_x not
R70118:70121 VST.msl.seplog <> ::logic:'!!'_x not
R70219:70219 VST.msl.seplog <> ::logic:'!!'_x not
R70158:70161 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R70142:70144 Coq.Init.Logic <> ::type_scope:x_'='_x not
R70122:70132 VST.veric.SeparationLogic <> typeof_temp def
R70140:70141 VST.floyd.SeparationLogicAsLogic <> id:605 var
R70134:70138 VST.floyd.SeparationLogicAsLogic <> Delta:604 var
R70146:70149 Coq.Init.Datatypes <> Some constr
R70156:70157 VST.floyd.SeparationLogicAsLogic <> t2:615 var
R70151:70154 compcert.cfrontend.Ctypes <> type ind
R70198:70201 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R70191:70193 Coq.Init.Logic <> ::type_scope:x_'='_x not
R70162:70176 VST.veric.expr <> is_neutral_cast def
R70189:70190 VST.floyd.SeparationLogicAsLogic <> t2:615 var
R70179:70184 compcert.cfrontend.Clight <> typeof def
R70186:70186 VST.floyd.SeparationLogicAsLogic <> e:606 var
R70194:70197 Coq.Init.Datatypes <> true constr
R70202:70215 VST.veric.shares <> readable_share def
R70217:70218 VST.floyd.SeparationLogicAsLogic <> sh:614 var
R70230:70233 VST.msl.seplog <> ::logic:'|>'_x not
R70442:70442 VST.msl.seplog <> ::logic:'|>'_x not
R70414:70417 VST.msl.seplog <> ::logic:x_'&&'_x not
R70291:70305 VST.msl.seplog <> ::logic:x_'&&'_x not
R70413:70413 VST.msl.seplog <> ::logic:x_'&&'_x not
R70255:70258 VST.msl.seplog <> ::logic:x_'&&'_x not
R70235:70243 VST.veric.SeparationLogic <> tc_lvalue def
R70254:70254 VST.floyd.SeparationLogicAsLogic <> e:606 var
R70248:70252 VST.floyd.SeparationLogicAsLogic <> Delta:604 var
R70245:70246 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R70259:70263 VST.veric.SeparationLogic <> local def
R70266:70268 VST.veric.lift LiftNotation :::'`'_x not
R70289:70289 VST.veric.lift LiftNotation :::'`'_x not
R70269:70274 VST.veric.Cop2 <> tc_val def
R70287:70288 VST.floyd.SeparationLogicAsLogic <> v2:616 var
R70277:70282 compcert.cfrontend.Clight <> typeof def
R70284:70284 VST.floyd.SeparationLogicAsLogic <> e:606 var
R70359:70361 VST.msl.seplog <> ::logic:x_'*'_x not
R70306:70309 VST.veric.lift LiftNotation :::'`'_x not
R70330:70358 VST.veric.lift LiftNotation :::'`'_x not
R70310:70315 VST.veric.SeparationLogic <> mapsto def
R70321:70326 compcert.cfrontend.Clight <> typeof def
R70328:70328 VST.floyd.SeparationLogicAsLogic <> e:606 var
R70317:70318 VST.floyd.SeparationLogicAsLogic <> sh:614 var
R70354:70355 VST.veric.lift LiftNotation :::'`'_x not
R70356:70357 VST.floyd.SeparationLogicAsLogic <> v2:616 var
R70335:70345 VST.veric.expr <> eval_lvalue def
R70350:70350 VST.floyd.SeparationLogicAsLogic <> e:606 var
R70347:70348 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R70363:70364 VST.msl.seplog <> TT meth
R70388:70398 VST.veric.SeparationLogic <> LiftNatDed' inst
R70406:70411 VST.veric.SeparationLogic <> Nveric inst
R70400:70404 VST.veric.mpred <> mpred def
R70367:70377 VST.veric.mpred <> LiftEnviron canonstruc
R70379:70383 VST.veric.mpred <> mpred def
R70419:70423 VST.veric.seplog <> subst def
R70441:70441 VST.floyd.SeparationLogicAsLogic <> P:607 var
R70435:70436 VST.veric.lift LiftNotation :::'`'_x not
R70437:70438 VST.floyd.SeparationLogicAsLogic <> v2:616 var
R70431:70432 VST.floyd.SeparationLogicAsLogic <> id:605 var
R70425:70429 VST.veric.mpred <> mpred def
R70451:70453 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70464:70471 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70459:70463 VST.msl.shares <> share def
binder 70454:70455 <> sh:617
R70472:70474 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70484:70491 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70480:70483 compcert.cfrontend.Clight <> expr ind
binder 70475:70476 <> e1:618
R70492:70494 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70504:70511 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70500:70503 compcert.cfrontend.Ctypes <> type ind
binder 70495:70496 <> t1:619
R70512:70514 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70523:70530 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R70520:70522 compcert.common.Values <> val ind
binder 70515:70516 <> v2:620
R70659:70668 VST.msl.seplog <> ::logic:x_'&&'_x not
R70531:70534 VST.msl.seplog <> ::logic:'!!'_x not
R70658:70658 VST.msl.seplog <> ::logic:'!!'_x not
R70550:70553 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R70536:70538 Coq.Init.Logic <> ::type_scope:x_'='_x not
R70535:70535 VST.floyd.SeparationLogicAsLogic <> e:606 var
R70539:70543 compcert.cfrontend.Clight <> Ecast constr
R70548:70549 VST.floyd.SeparationLogicAsLogic <> t1:619 var
R70545:70546 VST.floyd.SeparationLogicAsLogic <> e1:618 var
R70590:70593 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R70574:70576 Coq.Init.Logic <> ::type_scope:x_'='_x not
R70554:70564 VST.veric.SeparationLogic <> typeof_temp def
R70572:70573 VST.floyd.SeparationLogicAsLogic <> id:605 var
R70566:70570 VST.floyd.SeparationLogicAsLogic <> Delta:604 var
R70578:70581 Coq.Init.Datatypes <> Some constr
R70588:70589 VST.floyd.SeparationLogicAsLogic <> t1:619 var
R70583:70586 compcert.cfrontend.Ctypes <> type ind
R70637:70640 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R70629:70631 Coq.Init.Logic <> ::type_scope:x_'='_x not
R70594:70613 VST.veric.SeparationLogic <> cast_pointer_to_bool def
R70627:70628 VST.floyd.SeparationLogicAsLogic <> t1:619 var
R70616:70621 compcert.cfrontend.Clight <> typeof def
R70623:70624 VST.floyd.SeparationLogicAsLogic <> e1:618 var
R70632:70636 Coq.Init.Datatypes <> false constr
R70641:70654 VST.veric.shares <> readable_share def
R70656:70657 VST.floyd.SeparationLogicAsLogic <> sh:617 var
R70669:70672 VST.msl.seplog <> ::logic:'|>'_x not
R70957:70957 VST.msl.seplog <> ::logic:'|>'_x not
R70881:70894 VST.msl.seplog <> ::logic:x_'&&'_x not
R70756:70770 VST.msl.seplog <> ::logic:x_'&&'_x not
R70880:70880 VST.msl.seplog <> ::logic:x_'&&'_x not
R70695:70698 VST.msl.seplog <> ::logic:x_'&&'_x not
R70674:70682 VST.veric.SeparationLogic <> tc_lvalue def
R70693:70694 VST.floyd.SeparationLogicAsLogic <> e1:618 var
R70687:70691 VST.floyd.SeparationLogicAsLogic <> Delta:604 var
R70684:70685 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R70699:70703 VST.veric.SeparationLogic <> local def
R70706:70709 VST.veric.lift LiftNotation :::'`'_x not
R70719:70754 VST.veric.lift LiftNotation :::'`'_x not
R70710:70715 VST.veric.Cop2 <> tc_val def
R70717:70718 VST.floyd.SeparationLogicAsLogic <> t1:619 var
R70723:70725 VST.veric.lift LiftNotation :::'`'_x not
R70753:70753 VST.veric.lift LiftNotation :::'`'_x not
R70726:70734 VST.veric.expr <> eval_cast def
R70751:70752 VST.floyd.SeparationLogicAsLogic <> v2:620 var
R70748:70749 VST.floyd.SeparationLogicAsLogic <> t1:619 var
R70737:70742 compcert.cfrontend.Clight <> typeof def
R70744:70745 VST.floyd.SeparationLogicAsLogic <> e1:618 var
R70826:70828 VST.msl.seplog <> ::logic:x_'*'_x not
R70771:70774 VST.veric.lift LiftNotation :::'`'_x not
R70796:70825 VST.veric.lift LiftNotation :::'`'_x not
R70775:70780 VST.veric.SeparationLogic <> mapsto def
R70786:70791 compcert.cfrontend.Clight <> typeof def
R70793:70794 VST.floyd.SeparationLogicAsLogic <> e1:618 var
R70782:70783 VST.floyd.SeparationLogicAsLogic <> sh:617 var
R70821:70822 VST.veric.lift LiftNotation :::'`'_x not
R70823:70824 VST.floyd.SeparationLogicAsLogic <> v2:620 var
R70801:70811 VST.veric.expr <> eval_lvalue def
R70816:70817 VST.floyd.SeparationLogicAsLogic <> e1:618 var
R70813:70814 VST.floyd.SeparationLogicAsLogic <> CS:603 var
R70830:70831 VST.msl.seplog <> TT meth
R70855:70865 VST.veric.SeparationLogic <> LiftNatDed' inst
R70873:70878 VST.veric.SeparationLogic <> Nveric inst
R70867:70871 VST.veric.mpred <> mpred def
R70834:70844 VST.veric.mpred <> LiftEnviron canonstruc
R70846:70850 VST.veric.mpred <> mpred def
R70896:70900 VST.veric.seplog <> subst def
R70956:70956 VST.floyd.SeparationLogicAsLogic <> P:607 var
R70912:70914 VST.veric.lift LiftNotation :::'`'_x not
R70953:70953 VST.veric.lift LiftNotation :::'`'_x not
R70915:70923 VST.veric.val_lemmas <> force_val def
R70926:70933 VST.veric.Clight_Cop2 <> sem_cast def
R70950:70951 VST.floyd.SeparationLogicAsLogic <> v2:620 var
R70947:70948 VST.floyd.SeparationLogicAsLogic <> t1:619 var
R70936:70941 compcert.cfrontend.Clight <> typeof def
R70943:70944 VST.floyd.SeparationLogicAsLogic <> e1:618 var
R70908:70909 VST.floyd.SeparationLogicAsLogic <> id:605 var
R70902:70906 VST.veric.mpred <> mpred def
def 70973:70981 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic ASSIGNpre
R70988:70996 VST.veric.mpred <> compspecs class
binder 70984:70985 <> CS:621
binder 70999:71003 <> Delta:622
binder 71005:71006 <> e1:623
binder 71008:71009 <> e2:624
binder 71011:71011 <> P:625
R71021:71024 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R71025:71029 VST.veric.mpred <> mpred def
R71014:71020 VST.veric.mpred <> environ ind
R71036:71036 VST.msl.seplog <> ::logic:x_'||'_x not
R71410:71425 VST.msl.seplog <> ::logic:x_'||'_x not
R72299:72299 VST.msl.seplog <> ::logic:x_'||'_x not
R71037:71039 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R71050:71062 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R71045:71049 VST.msl.shares <> share def
binder 71040:71041 <> sh:626
R71083:71097 VST.msl.seplog <> ::logic:x_'&&'_x not
R71063:71065 VST.msl.seplog <> ::logic:'!!'_x not
R71066:71079 VST.veric.shares <> writable_share def
R71081:71082 VST.floyd.SeparationLogicAsLogic <> sh:626 var
R71098:71101 VST.msl.seplog <> ::logic:'|>'_x not
R71409:71409 VST.msl.seplog <> ::logic:'|>'_x not
R71160:71179 VST.msl.seplog <> ::logic:x_'&&'_x not
R71408:71408 VST.msl.seplog <> ::logic:x_'&&'_x not
R71120:71123 VST.msl.seplog <> ::logic:x_'&&'_x not
R71102:71110 VST.veric.SeparationLogic <> tc_lvalue def
R71118:71119 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71112:71116 VST.floyd.SeparationLogicAsLogic <> Delta:622 var
R71124:71130 VST.veric.SeparationLogic <> tc_expr def
R71139:71143 compcert.cfrontend.Clight <> Ecast constr
R71149:71154 compcert.cfrontend.Clight <> typeof def
R71156:71157 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71145:71146 VST.floyd.SeparationLogicAsLogic <> e2:624 var
R71132:71136 VST.floyd.SeparationLogicAsLogic <> Delta:622 var
R71225:71244 VST.msl.seplog <> ::logic:x_'*'_x not
R71407:71407 VST.msl.seplog <> ::logic:x_'*'_x not
R71180:71183 VST.veric.lift LiftNotation :::'`'_x not
R71206:71224 VST.veric.lift LiftNotation :::'`'_x not
R71184:71190 VST.veric.SeparationLogic <> mapsto_ def
R71196:71201 compcert.cfrontend.Clight <> typeof def
R71203:71204 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71192:71193 VST.floyd.SeparationLogicAsLogic <> sh:626 var
R71210:71220 VST.veric.expr <> eval_lvalue def
R71222:71223 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71402:71405 VST.msl.seplog <> ::logic:x_'-*'_x not
R71245:71248 VST.veric.lift LiftNotation :::'`'_x not
R71270:71401 VST.veric.lift LiftNotation :::'`'_x not
R71249:71254 VST.veric.SeparationLogic <> mapsto def
R71260:71265 compcert.cfrontend.Clight <> typeof def
R71267:71268 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71256:71257 VST.floyd.SeparationLogicAsLogic <> sh:626 var
R71310:71312 VST.veric.lift LiftNotation :::'`'_x not
R71322:71400 VST.veric.lift LiftNotation :::'`'_x not
R71313:71321 VST.veric.val_lemmas <> force_val def
R71347:71350 VST.veric.lift LiftNotation :::'`'_x not
R71383:71399 VST.veric.lift LiftNotation :::'`'_x not
R71351:71358 VST.veric.Clight_Cop2 <> sem_cast def
R71373:71378 compcert.cfrontend.Clight <> typeof def
R71380:71381 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71361:71366 compcert.cfrontend.Clight <> typeof def
R71368:71369 VST.floyd.SeparationLogicAsLogic <> e2:624 var
R71387:71395 VST.veric.expr <> eval_expr def
R71397:71398 VST.floyd.SeparationLogicAsLogic <> e2:624 var
R71274:71284 VST.veric.expr <> eval_lvalue def
R71286:71287 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71406:71406 VST.floyd.SeparationLogicAsLogic <> P:625 var
R71426:71429 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R71476:71492 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R71435:71438 compcert.cfrontend.Ctypes <> type ind
binder 71430:71431 <> t2:627
R71451:71462 compcert.common.AST <> memory_chunk ind
binder 71442:71443 <> ch:628
R71451:71462 compcert.common.AST <> memory_chunk ind
binder 71445:71447 <> ch':629
R71471:71475 VST.msl.shares <> share def
binder 71466:71467 <> sh:630
R71735:71752 VST.msl.seplog <> ::logic:x_'&&'_x not
R71493:71496 VST.msl.seplog <> ::logic:'!!'_x not
R71734:71734 VST.msl.seplog <> ::logic:'!!'_x not
R71554:71575 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R71547:71549 Coq.Init.Logic <> ::type_scope:x_'='_x not
R71522:71525 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R71498:71509 VST.veric.SeparationLogic <> numeric_type def
R71512:71517 compcert.cfrontend.Clight <> typeof def
R71519:71520 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71526:71537 VST.veric.SeparationLogic <> numeric_type def
R71539:71540 VST.floyd.SeparationLogicAsLogic <> t2:627 var
R71550:71553 Coq.Init.Datatypes <> true constr
R71613:71634 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R71599:71601 Coq.Init.Logic <> ::type_scope:x_'='_x not
R71576:71586 compcert.cfrontend.Ctypes <> access_mode def
R71589:71594 compcert.cfrontend.Clight <> typeof def
R71596:71597 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71602:71609 compcert.cfrontend.Ctypes <> By_value constr
R71611:71612 VST.floyd.SeparationLogicAsLogic <> ch:628 var
R71664:71685 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R71649:71651 Coq.Init.Logic <> ::type_scope:x_'='_x not
R71635:71645 compcert.cfrontend.Ctypes <> access_mode def
R71647:71648 VST.floyd.SeparationLogicAsLogic <> t2:627 var
R71652:71659 compcert.cfrontend.Ctypes <> By_value constr
R71661:71663 VST.floyd.SeparationLogicAsLogic <> ch':629 var
R71713:71716 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R71686:71705 VST.veric.SeparationLogic <> decode_encode_val_ok def
R71710:71712 VST.floyd.SeparationLogicAsLogic <> ch':629 var
R71707:71708 VST.floyd.SeparationLogicAsLogic <> ch:628 var
R71717:71730 VST.veric.shares <> writable_share def
R71732:71733 VST.floyd.SeparationLogicAsLogic <> sh:630 var
R71753:71756 VST.msl.seplog <> ::logic:'|>'_x not
R72298:72298 VST.msl.seplog <> ::logic:'|>'_x not
R71815:71837 VST.msl.seplog <> ::logic:x_'&&'_x not
R72297:72297 VST.msl.seplog <> ::logic:x_'&&'_x not
R71775:71778 VST.msl.seplog <> ::logic:x_'&&'_x not
R71757:71765 VST.veric.SeparationLogic <> tc_lvalue def
R71773:71774 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71767:71771 VST.floyd.SeparationLogicAsLogic <> Delta:622 var
R71779:71785 VST.veric.SeparationLogic <> tc_expr def
R71794:71798 compcert.cfrontend.Clight <> Ecast constr
R71804:71809 compcert.cfrontend.Clight <> typeof def
R71811:71812 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71800:71801 VST.floyd.SeparationLogicAsLogic <> e2:624 var
R71787:71791 VST.floyd.SeparationLogicAsLogic <> Delta:622 var
R71942:71964 VST.msl.seplog <> ::logic:x_'*'_x not
R72296:72296 VST.msl.seplog <> ::logic:x_'*'_x not
R71883:71905 VST.msl.seplog <> ::logic:x_'&&'_x not
R71838:71841 VST.veric.lift LiftNotation :::'`'_x not
R71864:71882 VST.veric.lift LiftNotation :::'`'_x not
R71842:71848 VST.veric.SeparationLogic <> mapsto_ def
R71854:71859 compcert.cfrontend.Clight <> typeof def
R71861:71862 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71850:71851 VST.floyd.SeparationLogicAsLogic <> sh:630 var
R71868:71878 VST.veric.expr <> eval_lvalue def
R71880:71881 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71906:71909 VST.veric.lift LiftNotation :::'`'_x not
R71923:71941 VST.veric.lift LiftNotation :::'`'_x not
R71910:71916 VST.veric.SeparationLogic <> mapsto_ def
R71921:71922 VST.floyd.SeparationLogicAsLogic <> t2:627 var
R71918:71919 VST.floyd.SeparationLogicAsLogic <> sh:630 var
R71927:71937 VST.veric.expr <> eval_lvalue def
R71939:71940 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R71965:71968 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R71977:71998 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R71974:71976 compcert.common.Values <> val ind
binder 71969:71970 <> v':631
R72041:72064 VST.msl.seplog <> ::logic:x_'-*'_x not
R71999:72002 VST.veric.lift LiftNotation :::'`'_x not
R72015:72040 VST.veric.lift LiftNotation :::'`'_x not
R72003:72008 VST.veric.SeparationLogic <> mapsto def
R72013:72014 VST.floyd.SeparationLogicAsLogic <> t2:627 var
R72010:72011 VST.floyd.SeparationLogicAsLogic <> sh:630 var
R72036:72037 VST.veric.lift LiftNotation :::'`'_x not
R72038:72039 VST.floyd.SeparationLogicAsLogic <> v':631 var
R72019:72029 VST.veric.expr <> eval_lvalue def
R72031:72032 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R72065:72067 VST.msl.seplog <> imp meth
R72295:72295 VST.floyd.SeparationLogicAsLogic <> P:625 var
R72070:72074 VST.veric.SeparationLogic <> local def
R72099:72101 VST.veric.lift LiftNotation :::'`'_x not
R72119:72291 VST.veric.lift LiftNotation :::'`'_x not
R72102:72118 compcert.common.Memdata <> decode_encode_val def
R72287:72288 VST.veric.lift LiftNotation :::'`'_x not
R72289:72290 VST.floyd.SeparationLogicAsLogic <> v':631 var
R72279:72280 VST.veric.lift LiftNotation :::'`'_x not
R72281:72283 VST.floyd.SeparationLogicAsLogic <> ch':629 var
R72272:72273 VST.veric.lift LiftNotation :::'`'_x not
R72274:72275 VST.floyd.SeparationLogicAsLogic <> ch:628 var
R72147:72149 VST.veric.lift LiftNotation :::'`'_x not
R72159:72243 VST.veric.lift LiftNotation :::'`'_x not
R72150:72158 VST.veric.val_lemmas <> force_val def
R72190:72193 VST.veric.lift LiftNotation :::'`'_x not
R72226:72242 VST.veric.lift LiftNotation :::'`'_x not
R72194:72201 VST.veric.Clight_Cop2 <> sem_cast def
R72216:72221 compcert.cfrontend.Clight <> typeof def
R72223:72224 VST.floyd.SeparationLogicAsLogic <> e1:623 var
R72204:72209 compcert.cfrontend.Clight <> typeof def
R72211:72212 VST.floyd.SeparationLogicAsLogic <> e2:624 var
R72230:72238 VST.veric.expr <> eval_expr def
R72240:72241 VST.floyd.SeparationLogicAsLogic <> e2:624 var
def 72315:72322 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic STOREpre
binder 72324:72325 <> CS:632
binder 72327:72331 <> Delta:633
binder 72333:72334 <> e1:634
binder 72336:72337 <> e2:635
binder 72339:72339 <> P:636
R72345:72347 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72358:72364 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72353:72357 VST.msl.shares <> share def
binder 72348:72349 <> sh:637
R72385:72393 VST.msl.seplog <> ::logic:x_'&&'_x not
R72365:72367 VST.msl.seplog <> ::logic:'!!'_x not
R72368:72381 VST.veric.shares <> writable_share def
R72383:72384 VST.floyd.SeparationLogicAsLogic <> sh:637 var
R72394:72397 VST.msl.seplog <> ::logic:'|>'_x not
R72672:72672 VST.msl.seplog <> ::logic:'|>'_x not
R72464:72477 VST.msl.seplog <> ::logic:x_'&&'_x not
R72671:72671 VST.msl.seplog <> ::logic:x_'&&'_x not
R72420:72423 VST.msl.seplog <> ::logic:x_'&&'_x not
R72399:72407 VST.veric.SeparationLogic <> tc_lvalue def
R72418:72419 VST.floyd.SeparationLogicAsLogic <> e1:634 var
R72412:72416 VST.floyd.SeparationLogicAsLogic <> Delta:633 var
R72409:72410 VST.floyd.SeparationLogicAsLogic <> CS:632 var
R72425:72431 VST.veric.SeparationLogic <> tc_expr def
R72443:72447 compcert.cfrontend.Clight <> Ecast constr
R72453:72458 compcert.cfrontend.Clight <> typeof def
R72460:72461 VST.floyd.SeparationLogicAsLogic <> e1:634 var
R72449:72450 VST.floyd.SeparationLogicAsLogic <> e2:635 var
R72436:72440 VST.floyd.SeparationLogicAsLogic <> Delta:633 var
R72433:72434 VST.floyd.SeparationLogicAsLogic <> CS:632 var
R72527:72540 VST.msl.seplog <> ::logic:x_'*'_x not
R72670:72670 VST.msl.seplog <> ::logic:x_'*'_x not
R72478:72481 VST.veric.lift LiftNotation :::'`'_x not
R72504:72526 VST.veric.lift LiftNotation :::'`'_x not
R72482:72488 VST.veric.SeparationLogic <> mapsto_ def
R72494:72499 compcert.cfrontend.Clight <> typeof def
R72501:72502 VST.floyd.SeparationLogicAsLogic <> e1:634 var
R72490:72491 VST.floyd.SeparationLogicAsLogic <> sh:637 var
R72509:72519 VST.veric.expr <> eval_lvalue def
R72524:72525 VST.floyd.SeparationLogicAsLogic <> e1:634 var
R72521:72522 VST.floyd.SeparationLogicAsLogic <> CS:632 var
R72665:72668 VST.msl.seplog <> ::logic:x_'-*'_x not
R72541:72544 VST.veric.lift LiftNotation :::'`'_x not
R72566:72664 VST.veric.lift LiftNotation :::'`'_x not
R72545:72550 VST.veric.SeparationLogic <> mapsto def
R72556:72561 compcert.cfrontend.Clight <> typeof def
R72563:72564 VST.floyd.SeparationLogicAsLogic <> e1:634 var
R72552:72553 VST.floyd.SeparationLogicAsLogic <> sh:637 var
R72591:72593 VST.veric.lift LiftNotation :::'`'_x not
R72603:72663 VST.veric.lift LiftNotation :::'`'_x not
R72594:72602 VST.veric.val_lemmas <> force_val def
R72606:72609 VST.veric.lift LiftNotation :::'`'_x not
R72642:72662 VST.veric.lift LiftNotation :::'`'_x not
R72610:72617 VST.veric.Clight_Cop2 <> sem_cast def
R72632:72637 compcert.cfrontend.Clight <> typeof def
R72639:72640 VST.floyd.SeparationLogicAsLogic <> e1:634 var
R72620:72625 compcert.cfrontend.Clight <> typeof def
R72627:72628 VST.floyd.SeparationLogicAsLogic <> e2:635 var
R72647:72655 VST.veric.expr <> eval_expr def
R72660:72661 VST.floyd.SeparationLogicAsLogic <> e2:635 var
R72657:72658 VST.floyd.SeparationLogicAsLogic <> CS:632 var
R72571:72581 VST.veric.expr <> eval_lvalue def
R72586:72587 VST.floyd.SeparationLogicAsLogic <> e1:634 var
R72583:72584 VST.floyd.SeparationLogicAsLogic <> CS:632 var
R72669:72669 VST.floyd.SeparationLogicAsLogic <> P:636 var
def 72688:72694 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic CALLpre
binder 72696:72697 <> CS:638
binder 72699:72703 <> Delta:639
binder 72705:72707 <> ret:640
binder 72709:72709 <> a:641
binder 72711:72712 <> bl:642
binder 72714:72714 <> R:643
R72724:72726 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72745:72751 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72736:72739 Coq.Init.Datatypes <> list ind
R72741:72744 compcert.cfrontend.Ctypes <> type ind
binder 72727:72732 <> argsig:644
R72752:72754 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72768:72774 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72764:72767 compcert.cfrontend.Ctypes <> type ind
binder 72755:72760 <> retsig:645
R72775:72777 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72801:72807 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72783:72800 compcert.common.AST <> calling_convention rec
binder 72778:72779 <> cc:646
R72808:72810 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72829:72835 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72815:72828 VST.veric.rmaps <> TypeTree ind
binder 72811:72811 <> A:647
R72836:72838 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72956:72962 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72855:72858 Coq.Init.Datatypes <> list ind
binder 72850:72851 <> ts:648
R72866:72900 VST.msl.functors MixVariantFunctor _functor proj
R72951:72955 VST.veric.mpred <> mpred def
R72903:72934 VST.veric.rmaps <> dependent_type_functor_rec def
R72940:72945 VST.veric.mpred <> ArgsTT def
R72947:72947 VST.floyd.SeparationLogicAsLogic <> A:647 var
R72936:72937 VST.floyd.SeparationLogicAsLogic <> ts:648 var
binder 72839:72839 <> P:649
R72963:72965 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R73085:73091 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R72982:72985 Coq.Init.Datatypes <> list ind
binder 72977:72978 <> ts:650
R72993:73027 VST.msl.functors MixVariantFunctor _functor proj
R73080:73084 VST.veric.mpred <> mpred def
R73030:73061 VST.veric.rmaps <> dependent_type_functor_rec def
R73067:73074 VST.veric.mpred <> AssertTT def
R73076:73076 VST.floyd.SeparationLogicAsLogic <> A:647 var
R73063:73064 VST.floyd.SeparationLogicAsLogic <> ts:650 var
binder 72966:72966 <> Q:651
R73092:73094 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R73130:73136 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R73102:73125 VST.veric.mpred <> args_super_non_expansive def
R73129:73129 VST.floyd.SeparationLogicAsLogic <> P:649 var
R73127:73127 VST.floyd.SeparationLogicAsLogic <> A:647 var
binder 73095:73097 <> NEP:652
R73137:73139 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R73170:73176 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R73147:73165 VST.veric.mpred <> super_non_expansive def
R73169:73169 VST.floyd.SeparationLogicAsLogic <> Q:651 var
R73167:73167 VST.floyd.SeparationLogicAsLogic <> A:647 var
binder 73140:73142 <> NEQ:653
R73177:73179 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R73194:73200 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R73185:73188 Coq.Init.Datatypes <> list ind
binder 73180:73181 <> ts:654
R73201:73203 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R74146:74152 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R73213:73247 VST.msl.functors MixVariantFunctor _functor proj
R74141:74145 VST.veric.mpred <> mpred def
R73274:73287 VST.veric.rmaps <> TypeTree ind
binder 73270:73270 <> T:655
R73292:73325 VST.msl.functors MixVariantFunctor functor rec
R73349:73349 VST.floyd.SeparationLogicAsLogic <> T:655 var
R73371:73385 VST.veric.rmaps <> ConstType constr
R73393:73434 VST.msl.functors MixVariantFunctorGenerator fconst def
R73454:73464 VST.veric.rmaps <> Mpred constr
R73469:73513 VST.msl.functors MixVariantFunctorGenerator fidentity def
R73530:73548 VST.veric.rmaps <> DependentType constr
R73555:73596 VST.msl.functors MixVariantFunctorGenerator fconst def
R73600:73602 Coq.Lists.List <> nth def
R73614:73617 Coq.Init.Datatypes <> unit ind
R73611:73612 VST.floyd.SeparationLogicAsLogic <> ts:654 var
R73635:73648 VST.veric.rmaps <> ProdType constr
R73659:73699 VST.msl.functors MixVariantFunctorGenerator fpair def
R73712:73715 VST.floyd.SeparationLogicAsLogic <> dtfr:656 var
R73702:73705 VST.floyd.SeparationLogicAsLogic <> dtfr:656 var
R73736:73750 VST.veric.rmaps <> ArrowType constr
R73761:73801 VST.msl.functors MixVariantFunctorGenerator ffunc def
R73814:73817 VST.floyd.SeparationLogicAsLogic <> dtfr:656 var
R73804:73807 VST.floyd.SeparationLogicAsLogic <> dtfr:656 var
R73838:73850 VST.veric.rmaps <> SigType constr
R73860:73899 VST.msl.functors MixVariantFunctorGenerator fsig def
binder 73908:73908 <> a:658
R73913:73916 VST.floyd.SeparationLogicAsLogic <> dtfr:656 var
R73921:73921 VST.floyd.SeparationLogicAsLogic <> a:658 var
R73901:73901 VST.floyd.SeparationLogicAsLogic <> A:647 var
R73940:73951 VST.veric.rmaps <> PiType constr
R73962:74000 VST.msl.functors MixVariantFunctorGenerator fpi def
binder 74010:74010 <> i:659
R74020:74023 VST.floyd.SeparationLogicAsLogic <> dtfr:656 var
R74028:74028 VST.floyd.SeparationLogicAsLogic <> i:659 var
R74047:74060 VST.veric.rmaps <> ListType constr
R74068:74108 VST.msl.functors MixVariantFunctorGenerator flist def
R74111:74114 VST.floyd.SeparationLogicAsLogic <> dtfr:656 var
R74138:74138 VST.floyd.SeparationLogicAsLogic <> A:647 var
binder 73204:73204 <> x:660
R74486:74494 VST.msl.seplog <> ::logic:x_'&&'_x not
R74398:74406 VST.msl.seplog <> ::logic:x_'&&'_x not
R74326:74342 VST.msl.seplog <> ::logic:x_'&&'_x not
R74397:74397 VST.msl.seplog <> ::logic:x_'&&'_x not
R74153:74156 VST.msl.seplog <> ::logic:'!!'_x not
R74325:74325 VST.msl.seplog <> ::logic:'!!'_x not
R74242:74254 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R74184:74186 Coq.Init.Logic <> ::type_scope:x_'='_x not
R74157:74172 compcert.cfrontend.Cop <> classify_fun def
R74175:74180 compcert.cfrontend.Clight <> typeof def
R74182:74182 VST.floyd.SeparationLogicAsLogic <> a:641 var
R74187:74200 compcert.cfrontend.Cop <> fun_case_f constr
R74240:74241 VST.floyd.SeparationLogicAsLogic <> cc:646 var
R74233:74238 VST.floyd.SeparationLogicAsLogic <> retsig:645 var
R74203:74223 VST.veric.mpred <> typelist_of_type_list def
R74225:74230 VST.floyd.SeparationLogicAsLogic <> argsig:644 var
R74255:74255 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R74291:74295 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R74270:74273 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R74277:74279 Coq.Init.Logic <> ::type_scope:x_'='_x not
R74274:74276 VST.floyd.SeparationLogicAsLogic <> ret:640 var
R74281:74284 Coq.Init.Datatypes <> None constr
R74286:74290 compcert.common.AST <> ident def
R74262:74264 Coq.Init.Logic <> ::type_scope:x_'='_x not
R74256:74261 VST.floyd.SeparationLogicAsLogic <> retsig:645 var
R74265:74269 compcert.cfrontend.Ctypes <> Tvoid constr
R74296:74307 VST.veric.SeparationLogic <> tc_fn_return def
R74319:74324 VST.floyd.SeparationLogicAsLogic <> retsig:645 var
R74315:74317 VST.floyd.SeparationLogicAsLogic <> ret:640 var
R74309:74313 VST.floyd.SeparationLogicAsLogic <> Delta:639 var
R74362:74365 VST.msl.seplog <> ::logic:x_'&&'_x not
R74344:74350 VST.veric.SeparationLogic <> tc_expr def
R74361:74361 VST.floyd.SeparationLogicAsLogic <> a:641 var
R74355:74359 VST.floyd.SeparationLogicAsLogic <> Delta:639 var
R74352:74353 VST.floyd.SeparationLogicAsLogic <> CS:638 var
R74367:74377 VST.veric.SeparationLogic <> tc_exprlist def
R74395:74396 VST.floyd.SeparationLogicAsLogic <> bl:642 var
R74388:74393 VST.floyd.SeparationLogicAsLogic <> argsig:644 var
R74382:74386 VST.floyd.SeparationLogicAsLogic <> Delta:639 var
R74379:74380 VST.floyd.SeparationLogicAsLogic <> CS:638 var
R74407:74410 VST.veric.lift LiftNotation :::'`'_x not
R74466:74485 VST.veric.lift LiftNotation :::'`'_x not
R74411:74418 VST.veric.SeparationLogic <> func_ptr def
R74421:74430 VST.veric.mpred <> mk_funspec constr
R74462:74464 VST.floyd.SeparationLogicAsLogic <> NEQ:653 var
R74458:74460 VST.floyd.SeparationLogicAsLogic <> NEP:652 var
R74456:74456 VST.floyd.SeparationLogicAsLogic <> Q:651 var
R74454:74454 VST.floyd.SeparationLogicAsLogic <> P:649 var
R74452:74452 VST.floyd.SeparationLogicAsLogic <> A:647 var
R74449:74450 VST.floyd.SeparationLogicAsLogic <> cc:646 var
R74432:74432 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R74439:74440 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R74447:74447 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R74433:74438 VST.floyd.SeparationLogicAsLogic <> argsig:644 var
R74441:74446 VST.floyd.SeparationLogicAsLogic <> retsig:645 var
R74471:74479 VST.veric.expr <> eval_expr def
R74484:74484 VST.floyd.SeparationLogicAsLogic <> a:641 var
R74481:74482 VST.floyd.SeparationLogicAsLogic <> CS:638 var
R74495:74499 VST.msl.seplog <> ::logic:'|>'_x not
R74762:74762 VST.msl.seplog <> ::logic:'|>'_x not
R74501:74506 VST.msl.seplog <> sepcon meth
R74704:74710 VST.floyd.SeparationLogicFacts <> oboxopt def
R74755:74758 VST.msl.seplog <> ::logic:x_'-*'_x not
R74723:74734 VST.veric.SeparationLogic <> maybe_retval def
R74752:74754 VST.floyd.SeparationLogicAsLogic <> ret:640 var
R74745:74750 VST.floyd.SeparationLogicAsLogic <> retsig:645 var
R74737:74737 VST.floyd.SeparationLogicAsLogic <> Q:651 var
R74742:74742 VST.floyd.SeparationLogicAsLogic <> x:660 var
R74739:74740 VST.floyd.SeparationLogicAsLogic <> ts:654 var
R74759:74759 VST.floyd.SeparationLogicAsLogic <> R:643 var
R74718:74720 VST.floyd.SeparationLogicAsLogic <> ret:640 var
R74712:74716 VST.floyd.SeparationLogicAsLogic <> Delta:639 var
binder 74624:74626 <> rho:661
R74631:74631 VST.floyd.SeparationLogicAsLogic <> P:649 var
R74638:74638 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R74648:74649 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R74681:74681 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R74639:74643 VST.veric.mpred <> ge_of def
R74645:74647 VST.floyd.SeparationLogicAsLogic <> rho:661 var
R74651:74663 VST.veric.expr <> eval_exprlist def
R74678:74680 VST.floyd.SeparationLogicAsLogic <> rho:661 var
R74675:74676 VST.floyd.SeparationLogicAsLogic <> bl:642 var
R74668:74673 VST.floyd.SeparationLogicAsLogic <> argsig:644 var
R74665:74666 VST.floyd.SeparationLogicAsLogic <> CS:638 var
R74636:74636 VST.floyd.SeparationLogicAsLogic <> x:660 var
R74633:74634 VST.floyd.SeparationLogicAsLogic <> ts:654 var
R74567:74577 VST.veric.SeparationLogic <> LiftSepLog' inst
R74592:74597 VST.veric.SeparationLogic <> Sveric inst
R74585:74590 VST.veric.SeparationLogic <> Nveric inst
R74579:74583 VST.veric.mpred <> mpred def
R74539:74549 VST.veric.SeparationLogic <> LiftNatDed' inst
R74557:74562 VST.veric.SeparationLogic <> Nveric inst
R74551:74555 VST.veric.mpred <> mpred def
R74509:74514 VST.veric.lift <> lifted proj
R74517:74527 VST.veric.mpred <> LiftEnviron canonstruc
R74529:74533 VST.veric.mpred <> mpred def
prf 75032:75042 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_cssub
binder 75045:75046 <> CS:662
binder 75048:75050 <> CS':663
R75060:75069 VST.veric.expr <> cspecs_sub def
R75075:75077 VST.floyd.SeparationLogicAsLogic <> CS':663 var
R75072:75073 VST.floyd.SeparationLogicAsLogic <> CS:662 var
binder 75054:75057 <> CSUB:664
binder 75080:75084 <> Espec:665
binder 75086:75090 <> Delta:666
binder 75092:75092 <> P:667
binder 75094:75094 <> c:668
binder 75096:75096 <> R:669
R75132:75135 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R75137:75141 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R75163:75163 VST.floyd.SeparationLogicAsLogic <> R:669 var
R75161:75161 VST.floyd.SeparationLogicAsLogic <> c:668 var
R75159:75159 VST.floyd.SeparationLogicAsLogic <> P:667 var
R75153:75157 VST.floyd.SeparationLogicAsLogic <> Delta:666 var
R75147:75151 VST.floyd.SeparationLogicAsLogic <> Espec:665 var
R75143:75145 VST.floyd.SeparationLogicAsLogic <> CS':663 var
R75106:75110 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R75131:75131 VST.floyd.SeparationLogicAsLogic <> R:669 var
R75129:75129 VST.floyd.SeparationLogicAsLogic <> c:668 var
R75127:75127 VST.floyd.SeparationLogicAsLogic <> P:667 var
R75121:75125 VST.floyd.SeparationLogicAsLogic <> Delta:666 var
R75115:75119 VST.floyd.SeparationLogicAsLogic <> Espec:665 var
R75112:75113 VST.floyd.SeparationLogicAsLogic <> CS:662 var
R75326:75330 VST.msl.seplog <> ::logic:x_'&&'_x not
R75401:75401 VST.msl.seplog <> ::logic:x_'&&'_x not
R75256:75259 VST.msl.seplog <> ::logic:x_'&&'_x not
R75224:75227 VST.msl.seplog <> ::logic:'!!'_x not
R75255:75255 VST.msl.seplog <> ::logic:'!!'_x not
R75248:75250 Coq.Init.Logic <> ::type_scope:x_'='_x not
R75228:75236 VST.veric.expr <> bool_type def
R75239:75244 compcert.cfrontend.Clight <> typeof def
R75251:75254 Coq.Init.Datatypes <> true constr
R75261:75267 VST.veric.SeparationLogic <> tc_expr def
R75280:75284 compcert.cfrontend.Clight <> Eunop constr
R75302:75305 compcert.cfrontend.Ctypes <> Tint constr
R75318:75323 compcert.cfrontend.Ctypes <> noattr def
R75311:75316 compcert.cfrontend.Ctypes <> Signed constr
R75307:75309 compcert.cfrontend.Ctypes <> I32 constr
R75286:75297 compcert.cfrontend.Cop <> Onotbool constr
R75396:75399 VST.msl.seplog <> ::logic:x_'&&'_x not
R75332:75338 VST.veric.SeparationLogic <> tc_expr def
R75350:75354 compcert.cfrontend.Clight <> Eunop constr
R75372:75375 compcert.cfrontend.Ctypes <> Tint constr
R75388:75393 compcert.cfrontend.Ctypes <> noattr def
R75381:75386 compcert.cfrontend.Ctypes <> Signed constr
R75377:75379 compcert.cfrontend.Ctypes <> I32 constr
R75356:75367 compcert.cfrontend.Cop <> Onotbool constr
R75208:75216 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R75414:75437 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R75326:75330 VST.msl.seplog <> ::logic:x_'&&'_x not
R75401:75401 VST.msl.seplog <> ::logic:x_'&&'_x not
R75256:75259 VST.msl.seplog <> ::logic:x_'&&'_x not
R75224:75227 VST.msl.seplog <> ::logic:'!!'_x not
R75255:75255 VST.msl.seplog <> ::logic:'!!'_x not
R75248:75250 Coq.Init.Logic <> ::type_scope:x_'='_x not
R75228:75236 VST.veric.expr <> bool_type def
R75239:75244 compcert.cfrontend.Clight <> typeof def
R75251:75254 Coq.Init.Datatypes <> true constr
R75261:75267 VST.veric.SeparationLogic <> tc_expr def
R75280:75284 compcert.cfrontend.Clight <> Eunop constr
R75302:75305 compcert.cfrontend.Ctypes <> Tint constr
R75318:75323 compcert.cfrontend.Ctypes <> noattr def
R75311:75316 compcert.cfrontend.Ctypes <> Signed constr
R75307:75309 compcert.cfrontend.Ctypes <> I32 constr
R75286:75297 compcert.cfrontend.Cop <> Onotbool constr
R75396:75399 VST.msl.seplog <> ::logic:x_'&&'_x not
R75332:75338 VST.veric.SeparationLogic <> tc_expr def
R75350:75354 compcert.cfrontend.Clight <> Eunop constr
R75372:75375 compcert.cfrontend.Ctypes <> Tint constr
R75388:75393 compcert.cfrontend.Ctypes <> noattr def
R75381:75386 compcert.cfrontend.Ctypes <> Signed constr
R75377:75379 compcert.cfrontend.Ctypes <> I32 constr
R75356:75367 compcert.cfrontend.Cop <> Onotbool constr
R75208:75216 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R75414:75437 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R75463:75472 VST.msl.seplog <> andp_right meth
R75463:75472 VST.msl.seplog <> andp_right meth
R75506:75515 VST.msl.log_normalize <> andp_assoc thm
R75506:75515 VST.msl.log_normalize <> andp_assoc thm
R75506:75515 VST.msl.log_normalize <> andp_assoc thm
R75528:75537 VST.msl.seplog <> andp_left1 meth
R75528:75537 VST.msl.seplog <> andp_left1 meth
R75550:75560 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R75570:75580 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R75550:75560 VST.floyd.assert_lemmas <> andp_ENTAIL thm
R75570:75580 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R75619:75623 VST.veric.SeparationLogic <> local def
R75626:75630 VST.veric.mpred <> lift1 def
R75654:75671 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R75654:75671 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R75705:75713 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R75705:75713 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R75748:75757 VST.msl.seplog <> andp_right meth
R75748:75757 VST.msl.seplog <> andp_right meth
R75793:75802 VST.msl.log_normalize <> andp_assoc thm
R75793:75802 VST.msl.log_normalize <> andp_assoc thm
R75793:75802 VST.msl.log_normalize <> andp_assoc thm
R75817:75832 VST.msl.seplog <> imp_andp_adjoint meth
R75817:75832 VST.msl.seplog <> imp_andp_adjoint meth
R75852:75861 VST.msl.log_normalize <> andp_assoc thm
R75852:75861 VST.msl.log_normalize <> andp_assoc thm
R75852:75861 VST.msl.log_normalize <> andp_assoc thm
R75876:75885 VST.msl.seplog <> andp_left1 meth
R75876:75885 VST.msl.seplog <> andp_left1 meth
R75944:75948 VST.msl.seplog <> ::logic:x_'&&'_x not
R75968:75968 VST.msl.seplog <> ::logic:x_'&&'_x not
R75920:75924 VST.veric.SeparationLogic <> local def
R75927:75936 VST.veric.SeparationLogic <> tc_environ def
R75950:75956 VST.veric.SeparationLogic <> tc_expr def
R75900:75912 VST.msl.seplog <> derives_trans meth
R76002:76006 VST.veric.SeparationLogic <> local def
binder 76013:76015 <> rho:670
R76040:76042 Coq.Init.Logic <> ::type_scope:x_'='_x not
R76022:76030 VST.veric.expr <> eval_expr def
R76037:76039 VST.floyd.SeparationLogicAsLogic <> rho:670 var
R76044:76052 VST.veric.expr <> eval_expr def
R76060:76062 VST.floyd.SeparationLogicAsLogic <> rho:670 var
R75981:75993 VST.msl.seplog <> derives_trans meth
R75944:75948 VST.msl.seplog <> ::logic:x_'&&'_x not
R75968:75968 VST.msl.seplog <> ::logic:x_'&&'_x not
R75920:75924 VST.veric.SeparationLogic <> local def
R75927:75936 VST.veric.SeparationLogic <> tc_environ def
R75950:75956 VST.veric.SeparationLogic <> tc_expr def
R75900:75912 VST.msl.seplog <> derives_trans meth
R76002:76006 VST.veric.SeparationLogic <> local def
binder 76013:76015 <> rho:671
R76040:76042 Coq.Init.Logic <> ::type_scope:x_'='_x not
R76022:76030 VST.veric.expr <> eval_expr def
R76037:76039 VST.floyd.SeparationLogicAsLogic <> rho:671 var
R76044:76052 VST.veric.expr <> eval_expr def
R76060:76062 VST.floyd.SeparationLogicAsLogic <> rho:671 var
R75981:75993 VST.msl.seplog <> derives_trans meth
R76084:76090 VST.veric.SeparationLogic <> tc_expr def
R76141:76161 VST.veric.SeparationLogic <> denote_tc_assert_andp thm
R76141:76161 VST.veric.SeparationLogic <> denote_tc_assert_andp thm
R76141:76161 VST.veric.SeparationLogic <> denote_tc_assert_andp thm
R76225:76229 VST.veric.SeparationLogic <> local def
R76232:76236 VST.veric.mpred <> lift1 def
R76264:76280 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R76264:76280 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R76303:76318 VST.msl.seplog <> imp_andp_adjoint meth
R76303:76318 VST.msl.seplog <> imp_andp_adjoint meth
R76362:76366 VST.veric.SeparationLogic <> local def
R76369:76373 VST.veric.mpred <> lift1 def
R76453:76461 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R76453:76461 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R76496:76505 VST.msl.seplog <> andp_right meth
R76496:76505 VST.msl.seplog <> andp_right meth
R76541:76550 VST.msl.log_normalize <> andp_assoc thm
R76541:76550 VST.msl.log_normalize <> andp_assoc thm
R76541:76550 VST.msl.log_normalize <> andp_assoc thm
R76565:76580 VST.msl.seplog <> imp_andp_adjoint meth
R76565:76580 VST.msl.seplog <> imp_andp_adjoint meth
R76600:76609 VST.msl.log_normalize <> andp_assoc thm
R76600:76609 VST.msl.log_normalize <> andp_assoc thm
R76600:76609 VST.msl.log_normalize <> andp_assoc thm
R76624:76633 VST.msl.seplog <> andp_left1 meth
R76624:76633 VST.msl.seplog <> andp_left1 meth
R76692:76696 VST.msl.seplog <> ::logic:x_'&&'_x not
R76716:76716 VST.msl.seplog <> ::logic:x_'&&'_x not
R76668:76672 VST.veric.SeparationLogic <> local def
R76675:76684 VST.veric.SeparationLogic <> tc_environ def
R76698:76704 VST.veric.SeparationLogic <> tc_expr def
R76648:76660 VST.msl.seplog <> derives_trans meth
R76750:76754 VST.veric.SeparationLogic <> local def
binder 76761:76763 <> rho:672
R76788:76790 Coq.Init.Logic <> ::type_scope:x_'='_x not
R76770:76778 VST.veric.expr <> eval_expr def
R76785:76787 VST.floyd.SeparationLogicAsLogic <> rho:672 var
R76792:76800 VST.veric.expr <> eval_expr def
R76808:76810 VST.floyd.SeparationLogicAsLogic <> rho:672 var
R76729:76741 VST.msl.seplog <> derives_trans meth
R76692:76696 VST.msl.seplog <> ::logic:x_'&&'_x not
R76716:76716 VST.msl.seplog <> ::logic:x_'&&'_x not
R76668:76672 VST.veric.SeparationLogic <> local def
R76675:76684 VST.veric.SeparationLogic <> tc_environ def
R76698:76704 VST.veric.SeparationLogic <> tc_expr def
R76648:76660 VST.msl.seplog <> derives_trans meth
R76750:76754 VST.veric.SeparationLogic <> local def
binder 76761:76763 <> rho:673
R76788:76790 Coq.Init.Logic <> ::type_scope:x_'='_x not
R76770:76778 VST.veric.expr <> eval_expr def
R76785:76787 VST.floyd.SeparationLogicAsLogic <> rho:673 var
R76792:76800 VST.veric.expr <> eval_expr def
R76808:76810 VST.floyd.SeparationLogicAsLogic <> rho:673 var
R76729:76741 VST.msl.seplog <> derives_trans meth
R76832:76838 VST.veric.SeparationLogic <> tc_expr def
R76889:76909 VST.veric.SeparationLogic <> denote_tc_assert_andp thm
R76889:76909 VST.veric.SeparationLogic <> denote_tc_assert_andp thm
R76889:76909 VST.veric.SeparationLogic <> denote_tc_assert_andp thm
R76973:76977 VST.veric.SeparationLogic <> local def
R76980:76984 VST.veric.mpred <> lift1 def
R77012:77028 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R77012:77028 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R77051:77066 VST.msl.seplog <> imp_andp_adjoint meth
R77051:77066 VST.msl.seplog <> imp_andp_adjoint meth
R77110:77114 VST.veric.SeparationLogic <> local def
R77117:77121 VST.veric.mpred <> lift1 def
R77199:77215 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R77199:77215 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R77236:77254 VST.floyd.SeparationLogicAsLogic AuxDefs semax_break constr
R77236:77254 VST.floyd.SeparationLogicAsLogic AuxDefs semax_break constr
R77275:77296 VST.floyd.SeparationLogicAsLogic AuxDefs semax_continue constr
R77275:77296 VST.floyd.SeparationLogicAsLogic AuxDefs semax_continue constr
R77317:77334 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R77317:77334 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R77405:77409 VST.msl.seplog <> ::logic:x_'&&'_x not
R77439:77439 VST.msl.seplog <> ::logic:x_'&&'_x not
R77371:77374 VST.msl.seplog <> ::logic:'!!'_x not
R77404:77404 VST.msl.seplog <> ::logic:'!!'_x not
R77397:77399 Coq.Init.Logic <> ::type_scope:x_'='_x not
R77375:77385 VST.veric.expr <> is_int_type def
R77388:77393 compcert.cfrontend.Clight <> typeof def
R77400:77403 Coq.Init.Datatypes <> true constr
R77411:77414 VST.msl.seplog <> ::logic:x_'&&'_x not
R77415:77419 VST.veric.SeparationLogic <> local def
R77422:77431 VST.veric.SeparationLogic <> tc_environ def
R77355:77363 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R77405:77409 VST.msl.seplog <> ::logic:x_'&&'_x not
R77439:77439 VST.msl.seplog <> ::logic:x_'&&'_x not
R77371:77374 VST.msl.seplog <> ::logic:'!!'_x not
R77404:77404 VST.msl.seplog <> ::logic:'!!'_x not
R77397:77399 Coq.Init.Logic <> ::type_scope:x_'='_x not
R77375:77385 VST.veric.expr <> is_int_type def
R77388:77393 compcert.cfrontend.Clight <> typeof def
R77400:77403 Coq.Init.Datatypes <> true constr
R77411:77414 VST.msl.seplog <> ::logic:x_'&&'_x not
R77415:77419 VST.veric.SeparationLogic <> local def
R77422:77431 VST.veric.SeparationLogic <> tc_environ def
R77355:77363 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R77470:77489 VST.floyd.SeparationLogicAsLogic AuxDefs semax_switch constr
R77470:77489 VST.floyd.SeparationLogicAsLogic AuxDefs semax_switch constr
R77540:77552 VST.msl.seplog <> derives_trans meth
R77540:77552 VST.msl.seplog <> derives_trans meth
R77561:77572 VST.msl.log_normalize <> andp_derives thm
R77561:77572 VST.msl.log_normalize <> andp_derives thm
R77590:77601 VST.msl.seplog <> derives_refl meth
R77590:77601 VST.msl.seplog <> derives_refl meth
R77624:77628 VST.veric.SeparationLogic <> local def
R77631:77635 VST.veric.mpred <> lift1 def
R77655:77672 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R77655:77672 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R77774:77780 VST.veric.mpred <> environ ind
binder 77770:77770 <> x:674
R77899:77903 VST.msl.seplog <> ::logic:x_'&&'_x not
R77937:77937 VST.msl.seplog <> ::logic:x_'&&'_x not
R77839:77843 VST.msl.seplog <> ::logic:x_'&&'_x not
R77785:77789 VST.veric.SeparationLogic <> local def
R77838:77838 VST.floyd.SeparationLogicAsLogic <> x:674 var
R77792:77795 VST.veric.lift LiftNotation :::'`'_x not
R77803:77835 VST.veric.lift LiftNotation :::'`'_x not
R77797:77798 Coq.Init.Logic <> eq ind
R77800:77802 compcert.common.Values <> val ind
R77825:77827 VST.veric.lift LiftNotation :::'`'_x not
R77834:77834 VST.veric.lift LiftNotation :::'`'_x not
R77828:77831 compcert.common.Values <> Vint constr
R77808:77816 VST.veric.expr <> eval_expr def
R77844:77848 VST.veric.SeparationLogic <> local def
R77898:77898 VST.floyd.SeparationLogicAsLogic <> x:674 var
R77851:77854 VST.veric.lift LiftNotation :::'`'_x not
R77862:77895 VST.veric.lift LiftNotation :::'`'_x not
R77856:77857 Coq.Init.Logic <> eq ind
R77859:77861 compcert.common.Values <> val ind
R77885:77887 VST.veric.lift LiftNotation :::'`'_x not
R77894:77894 VST.veric.lift LiftNotation :::'`'_x not
R77888:77891 compcert.common.Values <> Vint constr
R77867:77875 VST.veric.expr <> eval_expr def
R77907:77910 VST.msl.seplog <> ::logic:x_'&&'_x not
R77906:77906 VST.floyd.SeparationLogicAsLogic <> x:674 var
R77911:77915 VST.veric.SeparationLogic <> local def
R77936:77936 VST.floyd.SeparationLogicAsLogic <> x:674 var
R77918:77927 VST.veric.SeparationLogic <> tc_environ def
R77750:77758 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R77774:77780 VST.veric.mpred <> environ ind
binder 77770:77770 <> x:675
R77899:77903 VST.msl.seplog <> ::logic:x_'&&'_x not
R77937:77937 VST.msl.seplog <> ::logic:x_'&&'_x not
R77839:77843 VST.msl.seplog <> ::logic:x_'&&'_x not
R77785:77789 VST.veric.SeparationLogic <> local def
R77838:77838 VST.floyd.SeparationLogicAsLogic <> x:675 var
R77792:77795 VST.veric.lift LiftNotation :::'`'_x not
R77803:77835 VST.veric.lift LiftNotation :::'`'_x not
R77797:77798 Coq.Init.Logic <> eq ind
R77800:77802 compcert.common.Values <> val ind
R77825:77827 VST.veric.lift LiftNotation :::'`'_x not
R77834:77834 VST.veric.lift LiftNotation :::'`'_x not
R77828:77831 compcert.common.Values <> Vint constr
R77808:77816 VST.veric.expr <> eval_expr def
R77844:77848 VST.veric.SeparationLogic <> local def
R77898:77898 VST.floyd.SeparationLogicAsLogic <> x:675 var
R77851:77854 VST.veric.lift LiftNotation :::'`'_x not
R77862:77895 VST.veric.lift LiftNotation :::'`'_x not
R77856:77857 Coq.Init.Logic <> eq ind
R77859:77861 compcert.common.Values <> val ind
R77885:77887 VST.veric.lift LiftNotation :::'`'_x not
R77894:77894 VST.veric.lift LiftNotation :::'`'_x not
R77888:77891 compcert.common.Values <> Vint constr
R77867:77875 VST.veric.expr <> eval_expr def
R77907:77910 VST.msl.seplog <> ::logic:x_'&&'_x not
R77906:77906 VST.floyd.SeparationLogicAsLogic <> x:675 var
R77911:77915 VST.veric.SeparationLogic <> local def
R77936:77936 VST.floyd.SeparationLogicAsLogic <> x:675 var
R77918:77927 VST.veric.SeparationLogic <> tc_environ def
R77750:77758 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R77982:77991 VST.msl.seplog <> andp_right meth
R77982:77991 VST.msl.seplog <> andp_right meth
R78029:78038 VST.msl.log_normalize <> andp_assoc thm
R78029:78038 VST.msl.log_normalize <> andp_assoc thm
R78029:78038 VST.msl.log_normalize <> andp_assoc thm
R78056:78060 VST.veric.SeparationLogic <> local def
R78063:78067 VST.veric.mpred <> lift1 def
R78088:78100 VST.msl.seplog <> derives_trans meth
R78088:78100 VST.msl.seplog <> derives_trans meth
R78127:78139 VST.msl.seplog <> derives_trans meth
R78127:78139 VST.msl.seplog <> derives_trans meth
R78149:78165 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R78149:78165 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R78205:78209 VST.veric.lift <> liftx def
R78212:78215 VST.veric.lift <> lift def
R78244:78248 VST.veric.lift <> liftx def
R78251:78254 VST.veric.lift <> lift def
R78343:78351 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R78343:78351 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R78452:78455 VST.msl.seplog <> ::logic:x_'&&'_x not
R78425:78431 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic CALLpre def
R78456:78462 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic CALLpre def
R78409:78417 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R78452:78455 VST.msl.seplog <> ::logic:x_'&&'_x not
R78425:78431 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic CALLpre def
R78456:78462 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic CALLpre def
R78409:78417 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R78524:78543 VST.msl.log_normalize <> derives_extract_prop thm
R78524:78543 VST.msl.log_normalize <> derives_extract_prop thm
R78569:78578 VST.msl.seplog <> andp_right meth
R78569:78578 VST.msl.seplog <> andp_right meth
R78587:78598 VST.msl.seplog <> derives_refl meth
R78587:78598 VST.msl.seplog <> derives_refl meth
R78608:78614 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic CALLpre def
R78636:78646 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78636:78646 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78676:78686 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78676:78686 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78716:78726 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78716:78726 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78752:78762 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78752:78762 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78787:78797 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78787:78797 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78822:78832 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78822:78832 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78857:78867 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78857:78867 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78894:78904 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78894:78904 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78931:78941 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78931:78941 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78967:78977 VST.floyd.SeparationLogicFacts <> exp_derives thm
R78967:78977 VST.floyd.SeparationLogicFacts <> exp_derives thm
R79000:79009 VST.msl.log_normalize <> andp_assoc thm
R79000:79009 VST.msl.log_normalize <> andp_assoc thm
R79000:79009 VST.msl.log_normalize <> andp_assoc thm
R79000:79009 VST.msl.log_normalize <> andp_assoc thm
R79000:79009 VST.msl.log_normalize <> andp_assoc thm
R79000:79009 VST.msl.log_normalize <> andp_assoc thm
R79000:79009 VST.msl.log_normalize <> andp_assoc thm
R79000:79009 VST.msl.log_normalize <> andp_assoc thm
R79000:79009 VST.msl.log_normalize <> andp_assoc thm
R79024:79035 VST.msl.log_normalize <> andp_derives thm
R79024:79035 VST.msl.log_normalize <> andp_derives thm
R79087:79088 VST.msl.seplog <> ::logic:x_'&&'_x not
R79243:79258 VST.msl.seplog <> ::logic:x_'&&'_x not
R79648:79648 VST.msl.seplog <> ::logic:x_'&&'_x not
R79089:79089 VST.msl.seplog <> ::logic:x_'&&'_x not
R79137:79152 VST.msl.seplog <> ::logic:x_'&&'_x not
R79242:79242 VST.msl.seplog <> ::logic:x_'&&'_x not
R79090:79092 VST.msl.seplog <> ::logic:'!!'_x not
R79136:79136 VST.msl.seplog <> ::logic:'!!'_x not
R79112:79115 Coq.Init.Logic <> ::type_scope:x_'='_x not
R79094:79102 VST.veric.expr <> eval_expr def
R79117:79125 VST.veric.expr <> eval_expr def
R79153:79155 VST.msl.seplog <> ::logic:'!!'_x not
R79241:79241 VST.msl.seplog <> ::logic:'!!'_x not
R79189:79206 Coq.Init.Logic <> ::type_scope:x_'='_x not
R79158:79170 VST.veric.expr <> eval_exprlist def
R79209:79221 VST.veric.expr <> eval_exprlist def
R79282:79300 VST.msl.seplog <> ::logic:x_'&&'_x not
R79647:79647 VST.msl.seplog <> ::logic:x_'&&'_x not
R79260:79266 VST.veric.SeparationLogic <> tc_expr def
R79336:79356 VST.msl.seplog <> ::logic:x_'&&'_x not
R79646:79646 VST.msl.seplog <> ::logic:x_'&&'_x not
R79302:79312 VST.veric.SeparationLogic <> tc_exprlist def
R79440:79461 VST.msl.seplog <> ::logic:x_'&&'_x not
R79357:79360 VST.veric.lift LiftNotation :::'`'_x not
R79416:79439 VST.veric.lift LiftNotation :::'`'_x not
R79361:79368 VST.veric.SeparationLogic <> func_ptr def
R79371:79380 VST.veric.mpred <> mk_funspec constr
R79382:79382 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R79389:79390 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R79397:79397 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R79421:79429 VST.veric.expr <> eval_expr def
R79462:79465 VST.msl.seplog <> ::logic:'|>'_x not
R79645:79645 VST.msl.seplog <> ::logic:'|>'_x not
R79534:79551 VST.msl.seplog <> ::logic:x_'*'_x not
binder 79471:79473 <> tau:676
R79485:79485 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R79495:79496 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R79528:79528 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R79486:79490 VST.veric.mpred <> ge_of def
R79498:79510 VST.veric.expr <> eval_exprlist def
R79525:79527 VST.floyd.SeparationLogicAsLogic <> tau:676 var
R79552:79558 VST.floyd.SeparationLogicFacts <> oboxopt def
R79582:79588 VST.veric.mpred <> environ ind
binder 79575:79578 <> rho0:677
R79630:79633 VST.msl.seplog <> ::logic:x_'-*'_x not
R79593:79604 VST.veric.SeparationLogic <> maybe_retval def
R79626:79629 VST.floyd.SeparationLogicAsLogic <> rho0:677 var
R79636:79639 VST.floyd.SeparationLogicAsLogic <> rho0:677 var
R79060:79072 VST.msl.seplog <> derives_trans meth
R79087:79088 VST.msl.seplog <> ::logic:x_'&&'_x not
R79243:79258 VST.msl.seplog <> ::logic:x_'&&'_x not
R79648:79648 VST.msl.seplog <> ::logic:x_'&&'_x not
R79089:79089 VST.msl.seplog <> ::logic:x_'&&'_x not
R79137:79152 VST.msl.seplog <> ::logic:x_'&&'_x not
R79242:79242 VST.msl.seplog <> ::logic:x_'&&'_x not
R79090:79092 VST.msl.seplog <> ::logic:'!!'_x not
R79136:79136 VST.msl.seplog <> ::logic:'!!'_x not
R79112:79115 Coq.Init.Logic <> ::type_scope:x_'='_x not
R79094:79102 VST.veric.expr <> eval_expr def
R79117:79125 VST.veric.expr <> eval_expr def
R79153:79155 VST.msl.seplog <> ::logic:'!!'_x not
R79241:79241 VST.msl.seplog <> ::logic:'!!'_x not
R79189:79206 Coq.Init.Logic <> ::type_scope:x_'='_x not
R79158:79170 VST.veric.expr <> eval_exprlist def
R79209:79221 VST.veric.expr <> eval_exprlist def
R79282:79300 VST.msl.seplog <> ::logic:x_'&&'_x not
R79647:79647 VST.msl.seplog <> ::logic:x_'&&'_x not
R79260:79266 VST.veric.SeparationLogic <> tc_expr def
R79336:79356 VST.msl.seplog <> ::logic:x_'&&'_x not
R79646:79646 VST.msl.seplog <> ::logic:x_'&&'_x not
R79302:79312 VST.veric.SeparationLogic <> tc_exprlist def
R79440:79461 VST.msl.seplog <> ::logic:x_'&&'_x not
R79357:79360 VST.veric.lift LiftNotation :::'`'_x not
R79416:79439 VST.veric.lift LiftNotation :::'`'_x not
R79361:79368 VST.veric.SeparationLogic <> func_ptr def
R79371:79380 VST.veric.mpred <> mk_funspec constr
R79382:79382 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R79389:79390 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R79397:79397 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R79421:79429 VST.veric.expr <> eval_expr def
R79462:79465 VST.msl.seplog <> ::logic:'|>'_x not
R79645:79645 VST.msl.seplog <> ::logic:'|>'_x not
R79534:79551 VST.msl.seplog <> ::logic:x_'*'_x not
binder 79471:79473 <> tau:678
R79485:79485 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R79495:79496 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R79528:79528 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R79486:79490 VST.veric.mpred <> ge_of def
R79498:79510 VST.veric.expr <> eval_exprlist def
R79525:79527 VST.floyd.SeparationLogicAsLogic <> tau:678 var
R79552:79558 VST.floyd.SeparationLogicFacts <> oboxopt def
R79582:79588 VST.veric.mpred <> environ ind
binder 79575:79578 <> rho0:679
R79630:79633 VST.msl.seplog <> ::logic:x_'-*'_x not
R79593:79604 VST.veric.SeparationLogic <> maybe_retval def
R79626:79629 VST.floyd.SeparationLogicAsLogic <> rho0:679 var
R79636:79639 VST.floyd.SeparationLogicAsLogic <> rho0:679 var
R79060:79072 VST.msl.seplog <> derives_trans meth
R79666:79675 VST.msl.seplog <> andp_right meth
R79666:79675 VST.msl.seplog <> andp_right meth
R79702:79711 VST.msl.log_normalize <> andp_assoc thm
R79702:79711 VST.msl.log_normalize <> andp_assoc thm
R79702:79711 VST.msl.log_normalize <> andp_assoc thm
R79720:79729 VST.msl.seplog <> andp_left1 meth
R79720:79729 VST.msl.seplog <> andp_left1 meth
R79738:79749 VST.msl.log_normalize <> andp_derives thm
R79738:79749 VST.msl.log_normalize <> andp_derives thm
R79766:79782 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R79766:79782 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R79800:79823 VST.veric.SeparationLogic <> eval_exprlist_cspecs_sub thm
R79800:79823 VST.veric.SeparationLogic <> eval_exprlist_cspecs_sub thm
R79861:79865 VST.veric.lift <> liftx def
R79868:79871 VST.veric.lift <> lift def
R79874:79883 VST.veric.SeparationLogic <> make_args' def
R79932:79943 VST.msl.log_normalize <> andp_derives thm
R79956:79967 VST.msl.log_normalize <> andp_derives thm
R79932:79943 VST.msl.log_normalize <> andp_derives thm
R79956:79967 VST.msl.log_normalize <> andp_derives thm
R79996:80013 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R79996:80013 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R80031:80052 VST.veric.SeparationLogic <> tc_exprlist_cspecs_sub thm
R80031:80052 VST.veric.SeparationLogic <> tc_exprlist_cspecs_sub thm
R80078:80086 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R80098:80124 VST.floyd.SeparationLogicAsLogic AuxDefs semax_call_backward constr
R80078:80086 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R80098:80124 VST.floyd.SeparationLogicAsLogic AuxDefs semax_call_backward constr
R80165:80184 VST.msl.log_normalize <> derives_extract_prop thm
R80165:80184 VST.msl.log_normalize <> derives_extract_prop thm
R80210:80219 VST.msl.seplog <> andp_left2 meth
R80210:80219 VST.msl.seplog <> andp_left2 meth
R80229:80235 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic CALLpre def
R80257:80267 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80257:80267 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80297:80307 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80297:80307 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80337:80347 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80337:80347 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80373:80383 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80373:80383 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80408:80418 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80408:80418 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80443:80453 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80443:80453 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80478:80488 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80478:80488 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80515:80525 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80515:80525 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80552:80562 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80552:80562 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80588:80598 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80588:80598 VST.floyd.SeparationLogicFacts <> exp_derives thm
R80617:80628 VST.msl.seplog <> derives_refl meth
R80617:80628 VST.msl.seplog <> derives_refl meth
R80695:80698 VST.msl.seplog <> andp meth
R81068:81071 VST.msl.seplog <> andp meth
R81216:81220 VST.veric.lift <> liftx def
R81338:81339 Coq.Init.Datatypes <> id def
R81341:81347 VST.veric.mpred <> environ ind
R81297:81308 VST.veric.SeparationLogic <> cast_expropt def
R81319:81326 VST.veric.seplog <> ret_type def
R81282:81290 VST.veric.tycontext <> RA_return proj
R81223:81228 VST.veric.lift <> Tarrow canonstruc
R81244:81249 VST.veric.lift <> Tarrow canonstruc
R81260:81270 VST.veric.mpred <> LiftEnviron canonstruc
R81272:81276 VST.veric.mpred <> mpred def
R81251:81257 VST.veric.mpred <> environ ind
R81231:81236 Coq.Init.Datatypes <> option ind
R81238:81240 compcert.common.Values <> val ind
R81151:81160 VST.veric.SeparationLogic <> tc_expropt def
R81177:81184 VST.veric.seplog <> ret_type def
R81103:81113 VST.veric.SeparationLogic <> LiftNatDed' inst
R81121:81126 VST.veric.SeparationLogic <> Nveric inst
R81115:81119 VST.veric.mpred <> mpred def
R81085:81091 VST.veric.mpred <> environ ind
R81094:81098 VST.veric.mpred <> mpred def
R80771:80774 VST.msl.seplog <> andp meth
R80918:80922 VST.veric.lift <> liftx def
R81039:81040 Coq.Init.Datatypes <> id def
R81042:81048 VST.veric.mpred <> environ ind
R80999:81010 VST.veric.SeparationLogic <> cast_expropt def
R81020:81027 VST.veric.seplog <> ret_type def
R80984:80992 VST.veric.tycontext <> RA_return proj
R80925:80930 VST.veric.lift <> Tarrow canonstruc
R80946:80951 VST.veric.lift <> Tarrow canonstruc
R80962:80972 VST.veric.mpred <> LiftEnviron canonstruc
R80974:80978 VST.veric.mpred <> mpred def
R80953:80959 VST.veric.mpred <> environ ind
R80933:80938 Coq.Init.Datatypes <> option ind
R80940:80942 compcert.common.Values <> val ind
R80854:80863 VST.veric.SeparationLogic <> tc_expropt def
R80879:80886 VST.veric.seplog <> ret_type def
R80806:80816 VST.veric.SeparationLogic <> LiftNatDed' inst
R80824:80829 VST.veric.SeparationLogic <> Nveric inst
R80818:80822 VST.veric.mpred <> mpred def
R80788:80794 VST.veric.mpred <> environ ind
R80797:80801 VST.veric.mpred <> mpred def
R80730:80740 VST.veric.SeparationLogic <> LiftNatDed' inst
R80748:80753 VST.veric.SeparationLogic <> Nveric inst
R80742:80746 VST.veric.mpred <> mpred def
R80712:80718 VST.veric.mpred <> environ ind
R80721:80725 VST.veric.mpred <> mpred def
R80648:80656 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R80695:80698 VST.msl.seplog <> andp meth
R81068:81071 VST.msl.seplog <> andp meth
R81216:81220 VST.veric.lift <> liftx def
R81338:81339 Coq.Init.Datatypes <> id def
R81341:81347 VST.veric.mpred <> environ ind
R81297:81308 VST.veric.SeparationLogic <> cast_expropt def
R81319:81326 VST.veric.seplog <> ret_type def
R81282:81290 VST.veric.tycontext <> RA_return proj
R81223:81228 VST.veric.lift <> Tarrow canonstruc
R81244:81249 VST.veric.lift <> Tarrow canonstruc
R81260:81270 VST.veric.mpred <> LiftEnviron canonstruc
R81272:81276 VST.veric.mpred <> mpred def
R81251:81257 VST.veric.mpred <> environ ind
R81231:81236 Coq.Init.Datatypes <> option ind
R81238:81240 compcert.common.Values <> val ind
R81151:81160 VST.veric.SeparationLogic <> tc_expropt def
R81177:81184 VST.veric.seplog <> ret_type def
R81103:81113 VST.veric.SeparationLogic <> LiftNatDed' inst
R81121:81126 VST.veric.SeparationLogic <> Nveric inst
R81115:81119 VST.veric.mpred <> mpred def
R81085:81091 VST.veric.mpred <> environ ind
R81094:81098 VST.veric.mpred <> mpred def
R80771:80774 VST.msl.seplog <> andp meth
R80918:80922 VST.veric.lift <> liftx def
R81039:81040 Coq.Init.Datatypes <> id def
R81042:81048 VST.veric.mpred <> environ ind
R80999:81010 VST.veric.SeparationLogic <> cast_expropt def
R81020:81027 VST.veric.seplog <> ret_type def
R80984:80992 VST.veric.tycontext <> RA_return proj
R80925:80930 VST.veric.lift <> Tarrow canonstruc
R80946:80951 VST.veric.lift <> Tarrow canonstruc
R80962:80972 VST.veric.mpred <> LiftEnviron canonstruc
R80974:80978 VST.veric.mpred <> mpred def
R80953:80959 VST.veric.mpred <> environ ind
R80933:80938 Coq.Init.Datatypes <> option ind
R80940:80942 compcert.common.Values <> val ind
R80854:80863 VST.veric.SeparationLogic <> tc_expropt def
R80879:80886 VST.veric.seplog <> ret_type def
R80806:80816 VST.veric.SeparationLogic <> LiftNatDed' inst
R80824:80829 VST.veric.SeparationLogic <> Nveric inst
R80818:80822 VST.veric.mpred <> mpred def
R80788:80794 VST.veric.mpred <> environ ind
R80797:80801 VST.veric.mpred <> mpred def
R80730:80740 VST.veric.SeparationLogic <> LiftNatDed' inst
R80748:80753 VST.veric.SeparationLogic <> Nveric inst
R80742:80746 VST.veric.mpred <> mpred def
R80712:80718 VST.veric.mpred <> environ ind
R80721:80725 VST.veric.mpred <> mpred def
R80648:80656 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R81366:81375 VST.msl.seplog <> andp_right meth
R81366:81375 VST.msl.seplog <> andp_right meth
R81408:81412 VST.veric.SeparationLogic <> local def
R81415:81419 VST.veric.mpred <> lift1 def
R81458:81477 VST.msl.log_normalize <> derives_extract_prop thm
R81458:81477 VST.msl.log_normalize <> derives_extract_prop thm
R81503:81512 VST.msl.seplog <> andp_right meth
R81503:81512 VST.msl.seplog <> andp_right meth
R81521:81530 VST.msl.seplog <> andp_left1 meth
R81521:81530 VST.msl.seplog <> andp_left1 meth
R81539:81557 VST.veric.SeparationLogic <> tc_expropt_cenv_sub thm
R81539:81557 VST.veric.SeparationLogic <> tc_expropt_cenv_sub thm
R81582:81586 VST.veric.lift <> liftx def
R81589:81592 VST.veric.lift <> lift def
R81609:81641 VST.veric.SeparationLogic <> RA_return_cast_expropt_cspecs_sub thm
R81609:81641 VST.veric.SeparationLogic <> RA_return_cast_expropt_cspecs_sub thm
R81672:81680 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R81692:81711 VST.floyd.SeparationLogicAsLogic AuxDefs semax_return constr
R81672:81680 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R81692:81711 VST.floyd.SeparationLogicAsLogic AuxDefs semax_return constr
R81755:81758 VST.msl.seplog <> andp meth
R81786:81791 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic SETpre def
R81761:81766 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic SETpre def
R81738:81746 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R81755:81758 VST.msl.seplog <> andp meth
R81786:81791 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic SETpre def
R81761:81766 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic SETpre def
R81738:81746 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R81844:81863 VST.msl.log_normalize <> derives_extract_prop thm
R81844:81863 VST.msl.log_normalize <> derives_extract_prop thm
R81894:81903 VST.msl.seplog <> andp_right meth
R81894:81903 VST.msl.seplog <> andp_right meth
R81912:81923 VST.msl.seplog <> derives_refl meth
R81912:81923 VST.msl.seplog <> derives_refl meth
R81933:81938 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic SETpre def
R81954:81964 VST.msl.log_normalize <> orp_derives thm
R81954:81964 VST.msl.log_normalize <> orp_derives thm
R81981:81991 VST.msl.log_normalize <> orp_derives thm
R81981:81991 VST.msl.log_normalize <> orp_derives thm
R82010:82020 VST.msl.log_normalize <> orp_derives thm
R82010:82020 VST.msl.log_normalize <> orp_derives thm
R82041:82053 VST.msl.log_normalize <> later_derives thm
R82041:82053 VST.msl.log_normalize <> later_derives thm
R82062:82071 VST.msl.seplog <> andp_right meth
R82062:82071 VST.msl.seplog <> andp_right meth
R82094:82103 VST.msl.seplog <> andp_left1 meth
R82094:82103 VST.msl.seplog <> andp_left1 meth
R82112:82123 VST.msl.log_normalize <> andp_derives thm
R82112:82123 VST.msl.log_normalize <> andp_derives thm
R82132:82149 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R82132:82149 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R82181:82201 VST.veric.SeparationLogic <> tc_temp_id_cspecs_sub thm
R82181:82201 VST.veric.SeparationLogic <> tc_temp_id_cspecs_sub thm
R82253:82254 VST.msl.seplog <> ::logic:x_'&&'_x not
R82274:82279 VST.msl.seplog <> ::logic:x_'&&'_x not
R82315:82320 VST.msl.seplog <> ::logic:x_'&&'_x not
R82256:82262 VST.veric.SeparationLogic <> tc_expr def
R82281:82285 VST.veric.seplog <> subst def
R82298:82306 VST.veric.expr <> eval_expr def
R82287:82291 VST.veric.mpred <> mpred def
R82233:82245 VST.msl.seplog <> derives_trans meth
R82253:82254 VST.msl.seplog <> ::logic:x_'&&'_x not
R82274:82279 VST.msl.seplog <> ::logic:x_'&&'_x not
R82315:82320 VST.msl.seplog <> ::logic:x_'&&'_x not
R82256:82262 VST.veric.SeparationLogic <> tc_expr def
R82281:82285 VST.veric.seplog <> subst def
R82298:82306 VST.veric.expr <> eval_expr def
R82287:82291 VST.veric.mpred <> mpred def
R82233:82245 VST.msl.seplog <> derives_trans meth
R82384:82399 VST.msl.seplog <> imp_andp_adjoint meth
R82384:82399 VST.msl.seplog <> imp_andp_adjoint meth
R82423:82435 VST.msl.seplog <> derives_trans meth
R82423:82435 VST.msl.seplog <> derives_trans meth
R82445:82461 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R82445:82461 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R82524:82528 VST.veric.seplog <> subst def
R82555:82570 VST.msl.seplog <> imp_andp_adjoint meth
R82555:82570 VST.msl.seplog <> imp_andp_adjoint meth
R82579:82588 VST.msl.seplog <> andp_left2 meth
R82579:82588 VST.msl.seplog <> andp_left2 meth
R82618:82628 VST.floyd.SeparationLogicFacts <> exp_derives thm
R82618:82628 VST.floyd.SeparationLogicFacts <> exp_derives thm
R82660:82670 VST.floyd.SeparationLogicFacts <> exp_derives thm
R82660:82670 VST.floyd.SeparationLogicFacts <> exp_derives thm
R82702:82712 VST.floyd.SeparationLogicFacts <> exp_derives thm
R82702:82712 VST.floyd.SeparationLogicFacts <> exp_derives thm
R82744:82754 VST.floyd.SeparationLogicFacts <> exp_derives thm
R82744:82754 VST.floyd.SeparationLogicFacts <> exp_derives thm
R82785:82795 VST.floyd.SeparationLogicFacts <> exp_derives thm
R82785:82795 VST.floyd.SeparationLogicFacts <> exp_derives thm
R82828:82838 VST.floyd.SeparationLogicFacts <> exp_derives thm
R82828:82838 VST.floyd.SeparationLogicFacts <> exp_derives thm
R82870:82882 VST.msl.log_normalize <> later_derives thm
R82870:82882 VST.msl.log_normalize <> later_derives thm
R82895:82904 VST.msl.log_normalize <> andp_assoc thm
R82895:82904 VST.msl.log_normalize <> andp_assoc thm
R82895:82904 VST.msl.log_normalize <> andp_assoc thm
R82895:82904 VST.msl.log_normalize <> andp_assoc thm
R82895:82904 VST.msl.log_normalize <> andp_assoc thm
R82895:82904 VST.msl.log_normalize <> andp_assoc thm
R82895:82904 VST.msl.log_normalize <> andp_assoc thm
R82895:82904 VST.msl.log_normalize <> andp_assoc thm
R82895:82904 VST.msl.log_normalize <> andp_assoc thm
R82895:82904 VST.msl.log_normalize <> andp_assoc thm
R82895:82904 VST.msl.log_normalize <> andp_assoc thm
R82945:82945 VST.msl.seplog <> ::logic:x_'&&'_x not
R83056:83061 VST.msl.seplog <> ::logic:x_'&&'_x not
R83563:83563 VST.msl.seplog <> ::logic:x_'&&'_x not
R82999:83002 VST.msl.seplog <> ::logic:x_'&&'_x not
R82946:82949 VST.msl.seplog <> ::logic:'!!'_x not
R82998:82998 VST.msl.seplog <> ::logic:'!!'_x not
R82950:82950 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82971:82975 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82997:82997 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82952:82960 VST.veric.expr <> eval_expr def
R82977:82985 VST.veric.expr <> eval_expr def
R83003:83006 VST.msl.seplog <> ::logic:'!!'_x not
R83055:83055 VST.msl.seplog <> ::logic:'!!'_x not
R83007:83007 Coq.Init.Logic <> ::type_scope:x_'='_x not
R83028:83032 Coq.Init.Logic <> ::type_scope:x_'='_x not
R83054:83054 Coq.Init.Logic <> ::type_scope:x_'='_x not
R83009:83017 VST.veric.expr <> eval_expr def
R83034:83042 VST.veric.expr <> eval_expr def
R83086:83092 VST.msl.seplog <> ::logic:x_'&&'_x not
R83562:83562 VST.msl.seplog <> ::logic:x_'&&'_x not
R83063:83069 VST.veric.SeparationLogic <> tc_expr def
R83117:83124 VST.msl.seplog <> ::logic:x_'&&'_x not
R83561:83561 VST.msl.seplog <> ::logic:x_'&&'_x not
R83094:83100 VST.veric.SeparationLogic <> tc_expr def
R83196:83204 VST.msl.seplog <> ::logic:x_'&&'_x not
R83560:83560 VST.msl.seplog <> ::logic:x_'&&'_x not
R83125:83129 VST.veric.SeparationLogic <> local def
R83132:83135 VST.veric.lift LiftNotation :::'`'_x not
R83151:83190 VST.veric.lift LiftNotation :::'`'_x not
R83136:83147 VST.veric.SeparationLogic <> blocks_match def
R83175:83183 VST.veric.expr <> eval_expr def
R83156:83164 VST.veric.expr <> eval_expr def
R83276:83285 VST.msl.seplog <> ::logic:x_'&&'_x not
R83559:83559 VST.msl.seplog <> ::logic:x_'&&'_x not
R83257:83259 VST.msl.seplog <> ::logic:x_'*'_x not
R83205:83208 VST.veric.lift LiftNotation :::'`'_x not
R83232:83256 VST.veric.lift LiftNotation :::'`'_x not
R83209:83215 VST.veric.SeparationLogic <> mapsto_ def
R83222:83227 compcert.cfrontend.Clight <> typeof def
R83237:83245 VST.veric.expr <> eval_expr def
R83261:83262 VST.msl.seplog <> TT meth
R83270:83275 VST.veric.SeparationLogic <> Nveric inst
R83264:83268 VST.veric.mpred <> mpred def
R83357:83425 VST.msl.seplog <> ::logic:x_'&&'_x not
R83338:83340 VST.msl.seplog <> ::logic:x_'*'_x not
R83286:83289 VST.veric.lift LiftNotation :::'`'_x not
R83313:83337 VST.veric.lift LiftNotation :::'`'_x not
R83290:83296 VST.veric.SeparationLogic <> mapsto_ def
R83303:83308 compcert.cfrontend.Clight <> typeof def
R83318:83326 VST.veric.expr <> eval_expr def
R83342:83343 VST.msl.seplog <> TT meth
R83351:83356 VST.veric.SeparationLogic <> Nveric inst
R83345:83349 VST.veric.mpred <> mpred def
R83427:83431 VST.veric.seplog <> subst def
R83443:83446 VST.veric.lift LiftNotation :::'`'_x not
R83512:83551 VST.veric.lift LiftNotation :::'`'_x not
R83447:83456 VST.veric.val_lemmas <> force_val2 def
R83460:83480 VST.veric.Clight_Cop2 <> sem_binary_operation' def
R83501:83506 compcert.cfrontend.Clight <> typeof def
R83489:83494 compcert.cfrontend.Clight <> typeof def
R83536:83544 VST.veric.expr <> eval_expr def
R83517:83525 VST.veric.expr <> eval_expr def
R83433:83437 VST.veric.mpred <> mpred def
R82925:82937 VST.msl.seplog <> derives_trans meth
R82945:82945 VST.msl.seplog <> ::logic:x_'&&'_x not
R83056:83061 VST.msl.seplog <> ::logic:x_'&&'_x not
R83563:83563 VST.msl.seplog <> ::logic:x_'&&'_x not
R82999:83002 VST.msl.seplog <> ::logic:x_'&&'_x not
R82946:82949 VST.msl.seplog <> ::logic:'!!'_x not
R82998:82998 VST.msl.seplog <> ::logic:'!!'_x not
R82950:82950 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82971:82975 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82997:82997 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82952:82960 VST.veric.expr <> eval_expr def
R82977:82985 VST.veric.expr <> eval_expr def
R83003:83006 VST.msl.seplog <> ::logic:'!!'_x not
R83055:83055 VST.msl.seplog <> ::logic:'!!'_x not
R83007:83007 Coq.Init.Logic <> ::type_scope:x_'='_x not
R83028:83032 Coq.Init.Logic <> ::type_scope:x_'='_x not
R83054:83054 Coq.Init.Logic <> ::type_scope:x_'='_x not
R83009:83017 VST.veric.expr <> eval_expr def
R83034:83042 VST.veric.expr <> eval_expr def
R83086:83092 VST.msl.seplog <> ::logic:x_'&&'_x not
R83562:83562 VST.msl.seplog <> ::logic:x_'&&'_x not
R83063:83069 VST.veric.SeparationLogic <> tc_expr def
R83117:83124 VST.msl.seplog <> ::logic:x_'&&'_x not
R83561:83561 VST.msl.seplog <> ::logic:x_'&&'_x not
R83094:83100 VST.veric.SeparationLogic <> tc_expr def
R83196:83204 VST.msl.seplog <> ::logic:x_'&&'_x not
R83560:83560 VST.msl.seplog <> ::logic:x_'&&'_x not
R83125:83129 VST.veric.SeparationLogic <> local def
R83132:83135 VST.veric.lift LiftNotation :::'`'_x not
R83151:83190 VST.veric.lift LiftNotation :::'`'_x not
R83136:83147 VST.veric.SeparationLogic <> blocks_match def
R83175:83183 VST.veric.expr <> eval_expr def
R83156:83164 VST.veric.expr <> eval_expr def
R83276:83285 VST.msl.seplog <> ::logic:x_'&&'_x not
R83559:83559 VST.msl.seplog <> ::logic:x_'&&'_x not
R83257:83259 VST.msl.seplog <> ::logic:x_'*'_x not
R83205:83208 VST.veric.lift LiftNotation :::'`'_x not
R83232:83256 VST.veric.lift LiftNotation :::'`'_x not
R83209:83215 VST.veric.SeparationLogic <> mapsto_ def
R83222:83227 compcert.cfrontend.Clight <> typeof def
R83237:83245 VST.veric.expr <> eval_expr def
R83261:83262 VST.msl.seplog <> TT meth
R83270:83275 VST.veric.SeparationLogic <> Nveric inst
R83264:83268 VST.veric.mpred <> mpred def
R83357:83425 VST.msl.seplog <> ::logic:x_'&&'_x not
R83338:83340 VST.msl.seplog <> ::logic:x_'*'_x not
R83286:83289 VST.veric.lift LiftNotation :::'`'_x not
R83313:83337 VST.veric.lift LiftNotation :::'`'_x not
R83290:83296 VST.veric.SeparationLogic <> mapsto_ def
R83303:83308 compcert.cfrontend.Clight <> typeof def
R83318:83326 VST.veric.expr <> eval_expr def
R83342:83343 VST.msl.seplog <> TT meth
R83351:83356 VST.veric.SeparationLogic <> Nveric inst
R83345:83349 VST.veric.mpred <> mpred def
R83427:83431 VST.veric.seplog <> subst def
R83443:83446 VST.veric.lift LiftNotation :::'`'_x not
R83512:83551 VST.veric.lift LiftNotation :::'`'_x not
R83447:83456 VST.veric.val_lemmas <> force_val2 def
R83460:83480 VST.veric.Clight_Cop2 <> sem_binary_operation' def
R83501:83506 compcert.cfrontend.Clight <> typeof def
R83489:83494 compcert.cfrontend.Clight <> typeof def
R83536:83544 VST.veric.expr <> eval_expr def
R83517:83525 VST.veric.expr <> eval_expr def
R83433:83437 VST.veric.mpred <> mpred def
R82925:82937 VST.msl.seplog <> derives_trans meth
R83587:83596 VST.msl.seplog <> andp_right meth
R83606:83615 VST.msl.seplog <> andp_right meth
R83625:83636 VST.msl.seplog <> derives_refl meth
R83587:83596 VST.msl.seplog <> andp_right meth
R83606:83615 VST.msl.seplog <> andp_right meth
R83625:83636 VST.msl.seplog <> derives_refl meth
R83660:83669 VST.msl.seplog <> andp_left1 meth
R83660:83669 VST.msl.seplog <> andp_left1 meth
R83679:83695 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R83679:83695 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R83739:83748 VST.msl.seplog <> andp_left2 meth
R83739:83748 VST.msl.seplog <> andp_left2 meth
R83758:83767 VST.msl.seplog <> andp_left1 meth
R83758:83767 VST.msl.seplog <> andp_left1 meth
R83777:83793 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R83777:83793 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R83849:83853 VST.veric.lift <> liftx def
R83856:83859 VST.veric.lift <> lift def
R83862:83866 VST.veric.SeparationLogic <> local def
R83869:83873 VST.veric.mpred <> lift1 def
R83876:83880 VST.veric.seplog <> subst def
R83949:83958 VST.msl.seplog <> andp_right meth
R83949:83958 VST.msl.seplog <> andp_right meth
R83967:83976 VST.msl.seplog <> andp_left1 meth
R83967:83976 VST.msl.seplog <> andp_left1 meth
R83985:84002 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R83985:84002 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R84034:84043 VST.msl.seplog <> andp_right meth
R84034:84043 VST.msl.seplog <> andp_right meth
R84052:84061 VST.msl.seplog <> andp_left2 meth
R84070:84079 VST.msl.seplog <> andp_left1 meth
R84052:84061 VST.msl.seplog <> andp_left2 meth
R84070:84079 VST.msl.seplog <> andp_left1 meth
R84088:84105 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R84088:84105 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R84137:84146 VST.msl.seplog <> andp_right meth
R84137:84146 VST.msl.seplog <> andp_right meth
R84181:84190 VST.msl.seplog <> andp_right meth
R84181:84190 VST.msl.seplog <> andp_right meth
R84225:84234 VST.msl.seplog <> andp_left2 meth
R84225:84234 VST.msl.seplog <> andp_left2 meth
R84243:84252 VST.msl.seplog <> andp_left2 meth
R84243:84252 VST.msl.seplog <> andp_left2 meth
R84261:84270 VST.msl.seplog <> andp_left2 meth
R84261:84270 VST.msl.seplog <> andp_left2 meth
R84279:84288 VST.msl.seplog <> andp_left2 meth
R84279:84288 VST.msl.seplog <> andp_left2 meth
R84312:84332 VST.veric.Clight_Cop2 <> sem_binary_operation' def
R84457:84467 VST.floyd.SeparationLogicFacts <> exp_derives thm
R84457:84467 VST.floyd.SeparationLogicFacts <> exp_derives thm
R84497:84507 VST.floyd.SeparationLogicFacts <> exp_derives thm
R84497:84507 VST.floyd.SeparationLogicFacts <> exp_derives thm
R84536:84546 VST.floyd.SeparationLogicFacts <> exp_derives thm
R84536:84546 VST.floyd.SeparationLogicFacts <> exp_derives thm
R84586:84598 VST.msl.log_normalize <> later_derives thm
R84586:84598 VST.msl.log_normalize <> later_derives thm
R84611:84620 VST.msl.log_normalize <> andp_assoc thm
R84611:84620 VST.msl.log_normalize <> andp_assoc thm
R84611:84620 VST.msl.log_normalize <> andp_assoc thm
R84611:84620 VST.msl.log_normalize <> andp_assoc thm
R84611:84620 VST.msl.log_normalize <> andp_assoc thm
R84611:84620 VST.msl.log_normalize <> andp_assoc thm
R84611:84620 VST.msl.log_normalize <> andp_assoc thm
R84639:84648 VST.msl.seplog <> andp_right meth
R84639:84648 VST.msl.seplog <> andp_right meth
R84657:84666 VST.msl.seplog <> andp_left1 meth
R84675:84694 VST.veric.SeparationLogic <> tc_lvalue_cspecs_sub thm
R84657:84666 VST.msl.seplog <> andp_left1 meth
R84675:84694 VST.veric.SeparationLogic <> tc_lvalue_cspecs_sub thm
R84722:84731 VST.msl.seplog <> andp_right meth
R84722:84731 VST.msl.seplog <> andp_right meth
R84763:84772 VST.msl.seplog <> andp_right meth
R84763:84772 VST.msl.seplog <> andp_right meth
R84792:84804 VST.msl.seplog <> derives_trans meth
R84792:84804 VST.msl.seplog <> derives_trans meth
R84825:84834 VST.msl.seplog <> andp_right meth
R84825:84834 VST.msl.seplog <> andp_right meth
R84843:84852 VST.msl.seplog <> andp_left1 meth
R84843:84852 VST.msl.seplog <> andp_left1 meth
R84874:84890 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic lvalue_cspecs_sub thm
R84874:84890 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic lvalue_cspecs_sub thm
R84925:84936 VST.msl.seplog <> derives_refl meth
R84925:84936 VST.msl.seplog <> derives_refl meth
R84969:84973 VST.veric.lift <> liftx def
R84976:84979 VST.veric.lift <> lift def
R85041:85051 VST.floyd.SeparationLogicFacts <> exp_derives thm
R85041:85051 VST.floyd.SeparationLogicFacts <> exp_derives thm
R85079:85089 VST.floyd.SeparationLogicFacts <> exp_derives thm
R85079:85089 VST.floyd.SeparationLogicFacts <> exp_derives thm
R85117:85127 VST.floyd.SeparationLogicFacts <> exp_derives thm
R85117:85127 VST.floyd.SeparationLogicFacts <> exp_derives thm
R85154:85164 VST.floyd.SeparationLogicFacts <> exp_derives thm
R85154:85164 VST.floyd.SeparationLogicFacts <> exp_derives thm
R85194:85206 VST.msl.log_normalize <> later_derives thm
R85194:85206 VST.msl.log_normalize <> later_derives thm
R85219:85228 VST.msl.log_normalize <> andp_assoc thm
R85219:85228 VST.msl.log_normalize <> andp_assoc thm
R85219:85228 VST.msl.log_normalize <> andp_assoc thm
R85219:85228 VST.msl.log_normalize <> andp_assoc thm
R85219:85228 VST.msl.log_normalize <> andp_assoc thm
R85219:85228 VST.msl.log_normalize <> andp_assoc thm
R85219:85228 VST.msl.log_normalize <> andp_assoc thm
R85321:85325 VST.msl.seplog <> ::logic:x_'&&'_x not
R85589:85589 VST.msl.seplog <> ::logic:x_'&&'_x not
R85265:85267 VST.msl.seplog <> ::logic:'!!'_x not
R85320:85320 VST.msl.seplog <> ::logic:'!!'_x not
R85268:85268 Coq.Init.Logic <> ::type_scope:x_'='_x not
R85291:85295 Coq.Init.Logic <> ::type_scope:x_'='_x not
R85319:85319 Coq.Init.Logic <> ::type_scope:x_'='_x not
R85270:85280 VST.veric.expr <> eval_lvalue def
R85297:85307 VST.veric.expr <> eval_lvalue def
R85352:85358 VST.msl.seplog <> ::logic:x_'&&'_x not
R85588:85588 VST.msl.seplog <> ::logic:x_'&&'_x not
R85327:85335 VST.veric.SeparationLogic <> tc_lvalue def
R85428:85441 VST.msl.seplog <> ::logic:x_'&&'_x not
R85587:85587 VST.msl.seplog <> ::logic:x_'&&'_x not
R85359:85363 VST.veric.SeparationLogic <> local def
R85366:85369 VST.veric.lift LiftNotation :::'`'_x not
R85378:85422 VST.veric.lift LiftNotation :::'`'_x not
R85370:85375 VST.veric.Cop2 <> tc_val def
R85382:85384 VST.veric.lift LiftNotation :::'`'_x not
R85421:85421 VST.veric.lift LiftNotation :::'`'_x not
R85385:85393 VST.veric.val_lemmas <> force_val def
R85396:85403 VST.veric.Clight_Cop2 <> sem_cast def
R85406:85411 compcert.cfrontend.Clight <> typeof def
R85519:85522 VST.msl.seplog <> ::logic:x_'&&'_x not
R85500:85502 VST.msl.seplog <> ::logic:x_'*'_x not
R85442:85445 VST.veric.lift LiftNotation :::'`'_x not
R85467:85499 VST.veric.lift LiftNotation :::'`'_x not
R85446:85451 VST.veric.SeparationLogic <> mapsto def
R85457:85462 compcert.cfrontend.Clight <> typeof def
R85492:85493 VST.veric.lift LiftNotation :::'`'_x not
R85472:85482 VST.veric.expr <> eval_lvalue def
R85504:85505 VST.msl.seplog <> TT meth
R85513:85518 VST.veric.SeparationLogic <> Nveric inst
R85507:85511 VST.veric.mpred <> mpred def
R85524:85528 VST.veric.seplog <> subst def
R85540:85542 VST.veric.lift LiftNotation :::'`'_x not
R85579:85579 VST.veric.lift LiftNotation :::'`'_x not
R85543:85551 VST.veric.val_lemmas <> force_val def
R85554:85561 VST.veric.Clight_Cop2 <> sem_cast def
R85564:85569 compcert.cfrontend.Clight <> typeof def
R85530:85534 VST.veric.mpred <> mpred def
R85245:85257 VST.msl.seplog <> derives_trans meth
R85321:85325 VST.msl.seplog <> ::logic:x_'&&'_x not
R85589:85589 VST.msl.seplog <> ::logic:x_'&&'_x not
R85265:85267 VST.msl.seplog <> ::logic:'!!'_x not
R85320:85320 VST.msl.seplog <> ::logic:'!!'_x not
R85268:85268 Coq.Init.Logic <> ::type_scope:x_'='_x not
R85291:85295 Coq.Init.Logic <> ::type_scope:x_'='_x not
R85319:85319 Coq.Init.Logic <> ::type_scope:x_'='_x not
R85270:85280 VST.veric.expr <> eval_lvalue def
R85297:85307 VST.veric.expr <> eval_lvalue def
R85352:85358 VST.msl.seplog <> ::logic:x_'&&'_x not
R85588:85588 VST.msl.seplog <> ::logic:x_'&&'_x not
R85327:85335 VST.veric.SeparationLogic <> tc_lvalue def
R85428:85441 VST.msl.seplog <> ::logic:x_'&&'_x not
R85587:85587 VST.msl.seplog <> ::logic:x_'&&'_x not
R85359:85363 VST.veric.SeparationLogic <> local def
R85366:85369 VST.veric.lift LiftNotation :::'`'_x not
R85378:85422 VST.veric.lift LiftNotation :::'`'_x not
R85370:85375 VST.veric.Cop2 <> tc_val def
R85382:85384 VST.veric.lift LiftNotation :::'`'_x not
R85421:85421 VST.veric.lift LiftNotation :::'`'_x not
R85385:85393 VST.veric.val_lemmas <> force_val def
R85396:85403 VST.veric.Clight_Cop2 <> sem_cast def
R85406:85411 compcert.cfrontend.Clight <> typeof def
R85519:85522 VST.msl.seplog <> ::logic:x_'&&'_x not
R85500:85502 VST.msl.seplog <> ::logic:x_'*'_x not
R85442:85445 VST.veric.lift LiftNotation :::'`'_x not
R85467:85499 VST.veric.lift LiftNotation :::'`'_x not
R85446:85451 VST.veric.SeparationLogic <> mapsto def
R85457:85462 compcert.cfrontend.Clight <> typeof def
R85492:85493 VST.veric.lift LiftNotation :::'`'_x not
R85472:85482 VST.veric.expr <> eval_lvalue def
R85504:85505 VST.msl.seplog <> TT meth
R85513:85518 VST.veric.SeparationLogic <> Nveric inst
R85507:85511 VST.veric.mpred <> mpred def
R85524:85528 VST.veric.seplog <> subst def
R85540:85542 VST.veric.lift LiftNotation :::'`'_x not
R85579:85579 VST.veric.lift LiftNotation :::'`'_x not
R85543:85551 VST.veric.val_lemmas <> force_val def
R85554:85561 VST.veric.Clight_Cop2 <> sem_cast def
R85564:85569 compcert.cfrontend.Clight <> typeof def
R85530:85534 VST.veric.mpred <> mpred def
R85245:85257 VST.msl.seplog <> derives_trans meth
R85609:85618 VST.msl.seplog <> andp_right meth
R85628:85637 VST.msl.seplog <> andp_left1 meth
R85609:85618 VST.msl.seplog <> andp_right meth
R85628:85637 VST.msl.seplog <> andp_left1 meth
R85660:85676 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic lvalue_cspecs_sub thm
R85660:85676 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic lvalue_cspecs_sub thm
R85715:85724 VST.msl.seplog <> andp_right meth
R85715:85724 VST.msl.seplog <> andp_right meth
R85733:85742 VST.msl.seplog <> andp_left1 meth
R85733:85742 VST.msl.seplog <> andp_left1 meth
R85751:85770 VST.veric.SeparationLogic <> tc_lvalue_cspecs_sub thm
R85751:85770 VST.veric.SeparationLogic <> tc_lvalue_cspecs_sub thm
R85799:85803 VST.veric.lift <> liftx def
R85806:85809 VST.veric.lift <> lift def
R85858:85866 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R85879:85931 VST.floyd.SeparationLogicAsLogic AuxDefs semax_set_ptr_compare_load_cast_load_backward constr
R85858:85866 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R85879:85931 VST.floyd.SeparationLogicAsLogic AuxDefs semax_set_ptr_compare_load_cast_load_backward constr
R85947:85956 VST.msl.seplog <> andp_left2 meth
R85947:85956 VST.msl.seplog <> andp_left2 meth
R85965:85974 VST.msl.seplog <> andp_left2 meth
R85965:85974 VST.msl.seplog <> andp_left2 meth
R85983:85994 VST.msl.seplog <> derives_refl meth
R85983:85994 VST.msl.seplog <> derives_refl meth
R86023:86026 VST.msl.seplog <> andp meth
R86058:86066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic ASSIGNpre def
R86029:86037 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic ASSIGNpre def
R86007:86015 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R86023:86026 VST.msl.seplog <> andp meth
R86058:86066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic ASSIGNpre def
R86029:86037 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic ASSIGNpre def
R86007:86015 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R86120:86139 VST.msl.log_normalize <> derives_extract_prop thm
R86120:86139 VST.msl.log_normalize <> derives_extract_prop thm
R86170:86179 VST.msl.seplog <> andp_right meth
R86170:86179 VST.msl.seplog <> andp_right meth
R86188:86199 VST.msl.seplog <> derives_refl meth
R86188:86199 VST.msl.seplog <> derives_refl meth
R86209:86217 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic ASSIGNpre def
R86239:86249 VST.msl.log_normalize <> orp_derives thm
R86239:86249 VST.msl.log_normalize <> orp_derives thm
R86274:86284 VST.floyd.SeparationLogicFacts <> exp_derives thm
R86274:86284 VST.floyd.SeparationLogicFacts <> exp_derives thm
R86315:86327 VST.msl.log_normalize <> later_derives thm
R86315:86327 VST.msl.log_normalize <> later_derives thm
R86344:86353 VST.msl.seplog <> andp_right meth
R86344:86353 VST.msl.seplog <> andp_right meth
R86372:86381 VST.msl.seplog <> andp_left1 meth
R86372:86381 VST.msl.seplog <> andp_left1 meth
R86390:86401 VST.msl.log_normalize <> andp_derives thm
R86390:86401 VST.msl.log_normalize <> andp_derives thm
R86410:86429 VST.veric.SeparationLogic <> tc_lvalue_cspecs_sub thm
R86410:86429 VST.veric.SeparationLogic <> tc_lvalue_cspecs_sub thm
R86447:86464 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R86447:86464 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R86512:86512 VST.msl.seplog <> ::logic:x_'&&'_x not
R86671:86718 VST.msl.seplog <> ::logic:x_'&&'_x not
R87002:87002 VST.msl.seplog <> ::logic:x_'&&'_x not
R86513:86513 VST.msl.seplog <> ::logic:x_'&&'_x not
R86570:86617 VST.msl.seplog <> ::logic:x_'&&'_x not
R86670:86670 VST.msl.seplog <> ::logic:x_'&&'_x not
R86514:86516 VST.msl.seplog <> ::logic:'!!'_x not
R86569:86569 VST.msl.seplog <> ::logic:'!!'_x not
R86517:86517 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86540:86544 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86568:86568 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86519:86529 VST.veric.expr <> eval_lvalue def
R86546:86556 VST.veric.expr <> eval_lvalue def
R86618:86620 VST.msl.seplog <> ::logic:'!!'_x not
R86669:86669 VST.msl.seplog <> ::logic:'!!'_x not
R86621:86621 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86642:86646 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86668:86668 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86623:86631 VST.veric.expr <> eval_expr def
R86648:86656 VST.veric.expr <> eval_expr def
R86772:86819 VST.msl.seplog <> ::logic:x_'*'_x not
R87001:87001 VST.msl.seplog <> ::logic:x_'*'_x not
R86719:86722 VST.veric.lift LiftNotation :::'`'_x not
R86745:86771 VST.veric.lift LiftNotation :::'`'_x not
R86723:86729 VST.veric.SeparationLogic <> mapsto_ def
R86735:86740 compcert.cfrontend.Clight <> typeof def
R86750:86760 VST.veric.expr <> eval_lvalue def
R86992:86995 VST.msl.seplog <> ::logic:x_'-*'_x not
R86820:86823 VST.veric.lift LiftNotation :::'`'_x not
R86845:86991 VST.veric.lift LiftNotation :::'`'_x not
R86824:86829 VST.veric.SeparationLogic <> mapsto def
R86835:86840 compcert.cfrontend.Clight <> typeof def
R86917:86920 VST.veric.lift LiftNotation :::'`'_x not
R86966:86986 VST.veric.lift LiftNotation :::'`'_x not
R86930:86933 VST.floyd.assert_lemmas <> :::x_'oo'_x not
R86921:86929 VST.veric.val_lemmas <> force_val def
R86934:86941 VST.veric.Clight_Cop2 <> sem_cast def
R86956:86961 compcert.cfrontend.Clight <> typeof def
R86944:86949 compcert.cfrontend.Clight <> typeof def
R86971:86979 VST.veric.expr <> eval_expr def
R86850:86860 VST.veric.expr <> eval_lvalue def
R86492:86504 VST.msl.seplog <> derives_trans meth
R86512:86512 VST.msl.seplog <> ::logic:x_'&&'_x not
R86671:86718 VST.msl.seplog <> ::logic:x_'&&'_x not
R87002:87002 VST.msl.seplog <> ::logic:x_'&&'_x not
R86513:86513 VST.msl.seplog <> ::logic:x_'&&'_x not
R86570:86617 VST.msl.seplog <> ::logic:x_'&&'_x not
R86670:86670 VST.msl.seplog <> ::logic:x_'&&'_x not
R86514:86516 VST.msl.seplog <> ::logic:'!!'_x not
R86569:86569 VST.msl.seplog <> ::logic:'!!'_x not
R86517:86517 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86540:86544 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86568:86568 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86519:86529 VST.veric.expr <> eval_lvalue def
R86546:86556 VST.veric.expr <> eval_lvalue def
R86618:86620 VST.msl.seplog <> ::logic:'!!'_x not
R86669:86669 VST.msl.seplog <> ::logic:'!!'_x not
R86621:86621 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86642:86646 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86668:86668 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86623:86631 VST.veric.expr <> eval_expr def
R86648:86656 VST.veric.expr <> eval_expr def
R86772:86819 VST.msl.seplog <> ::logic:x_'*'_x not
R87001:87001 VST.msl.seplog <> ::logic:x_'*'_x not
R86719:86722 VST.veric.lift LiftNotation :::'`'_x not
R86745:86771 VST.veric.lift LiftNotation :::'`'_x not
R86723:86729 VST.veric.SeparationLogic <> mapsto_ def
R86735:86740 compcert.cfrontend.Clight <> typeof def
R86750:86760 VST.veric.expr <> eval_lvalue def
R86992:86995 VST.msl.seplog <> ::logic:x_'-*'_x not
R86820:86823 VST.veric.lift LiftNotation :::'`'_x not
R86845:86991 VST.veric.lift LiftNotation :::'`'_x not
R86824:86829 VST.veric.SeparationLogic <> mapsto def
R86835:86840 compcert.cfrontend.Clight <> typeof def
R86917:86920 VST.veric.lift LiftNotation :::'`'_x not
R86966:86986 VST.veric.lift LiftNotation :::'`'_x not
R86930:86933 VST.floyd.assert_lemmas <> :::x_'oo'_x not
R86921:86929 VST.veric.val_lemmas <> force_val def
R86934:86941 VST.veric.Clight_Cop2 <> sem_cast def
R86956:86961 compcert.cfrontend.Clight <> typeof def
R86944:86949 compcert.cfrontend.Clight <> typeof def
R86971:86979 VST.veric.expr <> eval_expr def
R86850:86860 VST.veric.expr <> eval_lvalue def
R86492:86504 VST.msl.seplog <> derives_trans meth
R87022:87033 VST.msl.log_normalize <> andp_derives thm
R87044:87055 VST.msl.log_normalize <> andp_derives thm
R87022:87033 VST.msl.log_normalize <> andp_derives thm
R87044:87055 VST.msl.log_normalize <> andp_derives thm
R87084:87100 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic lvalue_cspecs_sub thm
R87084:87100 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic lvalue_cspecs_sub thm
R87130:87142 VST.msl.seplog <> derives_trans meth
R87130:87142 VST.msl.seplog <> derives_trans meth
R87154:87170 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R87154:87170 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R87203:87209 VST.veric.SeparationLogic <> tc_expr def
R87227:87247 VST.veric.SeparationLogic <> denote_tc_assert_andp thm
R87227:87247 VST.veric.SeparationLogic <> denote_tc_assert_andp thm
R87227:87247 VST.veric.SeparationLogic <> denote_tc_assert_andp thm
R87297:87301 VST.veric.lift <> liftx def
R87304:87307 VST.veric.lift <> lift def
R87356:87366 VST.floyd.SeparationLogicFacts <> exp_derives thm
R87356:87366 VST.floyd.SeparationLogicFacts <> exp_derives thm
R87394:87404 VST.floyd.SeparationLogicFacts <> exp_derives thm
R87394:87404 VST.floyd.SeparationLogicFacts <> exp_derives thm
R87432:87442 VST.floyd.SeparationLogicFacts <> exp_derives thm
R87432:87442 VST.floyd.SeparationLogicFacts <> exp_derives thm
R87471:87481 VST.floyd.SeparationLogicFacts <> exp_derives thm
R87471:87481 VST.floyd.SeparationLogicFacts <> exp_derives thm
R87520:87532 VST.msl.log_normalize <> later_derives thm
R87520:87532 VST.msl.log_normalize <> later_derives thm
R87549:87558 VST.msl.seplog <> andp_right meth
R87549:87558 VST.msl.seplog <> andp_right meth
R87577:87586 VST.msl.seplog <> andp_left1 meth
R87577:87586 VST.msl.seplog <> andp_left1 meth
R87595:87606 VST.msl.log_normalize <> andp_derives thm
R87595:87606 VST.msl.log_normalize <> andp_derives thm
R87615:87634 VST.veric.SeparationLogic <> tc_lvalue_cspecs_sub thm
R87615:87634 VST.veric.SeparationLogic <> tc_lvalue_cspecs_sub thm
R87652:87669 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R87652:87669 VST.veric.SeparationLogic <> tc_expr_cspecs_sub thm
R87717:87717 VST.msl.seplog <> ::logic:x_'&&'_x not
R87876:87923 VST.msl.seplog <> ::logic:x_'&&'_x not
R88507:88507 VST.msl.seplog <> ::logic:x_'&&'_x not
R87718:87718 VST.msl.seplog <> ::logic:x_'&&'_x not
R87775:87822 VST.msl.seplog <> ::logic:x_'&&'_x not
R87875:87875 VST.msl.seplog <> ::logic:x_'&&'_x not
R87719:87721 VST.msl.seplog <> ::logic:'!!'_x not
R87774:87774 VST.msl.seplog <> ::logic:'!!'_x not
R87722:87722 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87745:87749 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87773:87773 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87724:87734 VST.veric.expr <> eval_lvalue def
R87751:87761 VST.veric.expr <> eval_lvalue def
R87823:87825 VST.msl.seplog <> ::logic:'!!'_x not
R87874:87874 VST.msl.seplog <> ::logic:'!!'_x not
R87826:87826 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87847:87851 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87873:87873 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87828:87836 VST.veric.expr <> eval_expr def
R87853:87861 VST.veric.expr <> eval_expr def
R88068:88113 VST.msl.seplog <> ::logic:x_'*'_x not
R88506:88506 VST.msl.seplog <> ::logic:x_'*'_x not
R87977:88023 VST.msl.seplog <> ::logic:x_'&&'_x not
R87924:87927 VST.veric.lift LiftNotation :::'`'_x not
R87950:87976 VST.veric.lift LiftNotation :::'`'_x not
R87928:87934 VST.veric.SeparationLogic <> mapsto_ def
R87940:87945 compcert.cfrontend.Clight <> typeof def
R87955:87965 VST.veric.expr <> eval_lvalue def
R88024:88027 VST.veric.lift LiftNotation :::'`'_x not
R88041:88067 VST.veric.lift LiftNotation :::'`'_x not
R88028:88034 VST.veric.SeparationLogic <> mapsto_ def
R88046:88056 VST.veric.expr <> eval_lvalue def
R88114:88117 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R88125:88170 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R88122:88124 compcert.common.Values <> val ind
binder 88118:88118 <> x:680
R88220:88269 VST.msl.seplog <> ::logic:x_'-*'_x not
R88171:88174 VST.veric.lift LiftNotation :::'`'_x not
R88187:88219 VST.veric.lift LiftNotation :::'`'_x not
R88175:88180 VST.veric.SeparationLogic <> mapsto def
R88212:88213 VST.veric.lift LiftNotation :::'`'_x not
R88214:88214 VST.floyd.SeparationLogicAsLogic <> x:680 var
R88192:88202 VST.veric.expr <> eval_lvalue def
R88496:88500 VST.msl.seplog <> ::logic:x_'-->'_x not
R88270:88274 VST.veric.SeparationLogic <> local def
R88325:88327 VST.veric.lift LiftNotation :::'`'_x not
R88345:88490 VST.veric.lift LiftNotation :::'`'_x not
R88328:88344 compcert.common.Memdata <> decode_encode_val def
R88487:88488 VST.veric.lift LiftNotation :::'`'_x not
R88489:88489 VST.floyd.SeparationLogicAsLogic <> x:680 var
R88479:88480 VST.veric.lift LiftNotation :::'`'_x not
R88472:88473 VST.veric.lift LiftNotation :::'`'_x not
R88399:88402 VST.veric.lift LiftNotation :::'`'_x not
R88448:88468 VST.veric.lift LiftNotation :::'`'_x not
R88412:88415 VST.floyd.assert_lemmas <> :::x_'oo'_x not
R88403:88411 VST.veric.val_lemmas <> force_val def
R88416:88423 VST.veric.Clight_Cop2 <> sem_cast def
R88438:88443 compcert.cfrontend.Clight <> typeof def
R88426:88431 compcert.cfrontend.Clight <> typeof def
R88453:88461 VST.veric.expr <> eval_expr def
R87697:87709 VST.msl.seplog <> derives_trans meth
R87717:87717 VST.msl.seplog <> ::logic:x_'&&'_x not
R87876:87923 VST.msl.seplog <> ::logic:x_'&&'_x not
R88507:88507 VST.msl.seplog <> ::logic:x_'&&'_x not
R87718:87718 VST.msl.seplog <> ::logic:x_'&&'_x not
R87775:87822 VST.msl.seplog <> ::logic:x_'&&'_x not
R87875:87875 VST.msl.seplog <> ::logic:x_'&&'_x not
R87719:87721 VST.msl.seplog <> ::logic:'!!'_x not
R87774:87774 VST.msl.seplog <> ::logic:'!!'_x not
R87722:87722 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87745:87749 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87773:87773 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87724:87734 VST.veric.expr <> eval_lvalue def
R87751:87761 VST.veric.expr <> eval_lvalue def
R87823:87825 VST.msl.seplog <> ::logic:'!!'_x not
R87874:87874 VST.msl.seplog <> ::logic:'!!'_x not
R87826:87826 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87847:87851 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87873:87873 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87828:87836 VST.veric.expr <> eval_expr def
R87853:87861 VST.veric.expr <> eval_expr def
R88068:88113 VST.msl.seplog <> ::logic:x_'*'_x not
R88506:88506 VST.msl.seplog <> ::logic:x_'*'_x not
R87977:88023 VST.msl.seplog <> ::logic:x_'&&'_x not
R87924:87927 VST.veric.lift LiftNotation :::'`'_x not
R87950:87976 VST.veric.lift LiftNotation :::'`'_x not
R87928:87934 VST.veric.SeparationLogic <> mapsto_ def
R87940:87945 compcert.cfrontend.Clight <> typeof def
R87955:87965 VST.veric.expr <> eval_lvalue def
R88024:88027 VST.veric.lift LiftNotation :::'`'_x not
R88041:88067 VST.veric.lift LiftNotation :::'`'_x not
R88028:88034 VST.veric.SeparationLogic <> mapsto_ def
R88046:88056 VST.veric.expr <> eval_lvalue def
R88114:88117 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R88125:88170 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R88122:88124 compcert.common.Values <> val ind
binder 88118:88118 <> x:681
R88220:88269 VST.msl.seplog <> ::logic:x_'-*'_x not
R88171:88174 VST.veric.lift LiftNotation :::'`'_x not
R88187:88219 VST.veric.lift LiftNotation :::'`'_x not
R88175:88180 VST.veric.SeparationLogic <> mapsto def
R88212:88213 VST.veric.lift LiftNotation :::'`'_x not
R88214:88214 VST.floyd.SeparationLogicAsLogic <> x:681 var
R88192:88202 VST.veric.expr <> eval_lvalue def
R88496:88500 VST.msl.seplog <> ::logic:x_'-->'_x not
R88270:88274 VST.veric.SeparationLogic <> local def
R88325:88327 VST.veric.lift LiftNotation :::'`'_x not
R88345:88490 VST.veric.lift LiftNotation :::'`'_x not
R88328:88344 compcert.common.Memdata <> decode_encode_val def
R88487:88488 VST.veric.lift LiftNotation :::'`'_x not
R88489:88489 VST.floyd.SeparationLogicAsLogic <> x:681 var
R88479:88480 VST.veric.lift LiftNotation :::'`'_x not
R88472:88473 VST.veric.lift LiftNotation :::'`'_x not
R88399:88402 VST.veric.lift LiftNotation :::'`'_x not
R88448:88468 VST.veric.lift LiftNotation :::'`'_x not
R88412:88415 VST.floyd.assert_lemmas <> :::x_'oo'_x not
R88403:88411 VST.veric.val_lemmas <> force_val def
R88416:88423 VST.veric.Clight_Cop2 <> sem_cast def
R88438:88443 compcert.cfrontend.Clight <> typeof def
R88426:88431 compcert.cfrontend.Clight <> typeof def
R88453:88461 VST.veric.expr <> eval_expr def
R87697:87709 VST.msl.seplog <> derives_trans meth
R88527:88538 VST.msl.log_normalize <> andp_derives thm
R88549:88560 VST.msl.log_normalize <> andp_derives thm
R88527:88538 VST.msl.log_normalize <> andp_derives thm
R88549:88560 VST.msl.log_normalize <> andp_derives thm
R88589:88605 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic lvalue_cspecs_sub thm
R88589:88605 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic lvalue_cspecs_sub thm
R88635:88647 VST.msl.seplog <> derives_trans meth
R88635:88647 VST.msl.seplog <> derives_trans meth
R88659:88675 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R88659:88675 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic rvalue_cspecs_sub thm
R88708:88714 VST.veric.SeparationLogic <> tc_expr def
R88732:88752 VST.veric.SeparationLogic <> denote_tc_assert_andp thm
R88732:88752 VST.veric.SeparationLogic <> denote_tc_assert_andp thm
R88732:88752 VST.veric.SeparationLogic <> denote_tc_assert_andp thm
R88802:88806 VST.veric.SeparationLogic <> local def
R88809:88813 VST.veric.mpred <> lift1 def
R88816:88820 VST.veric.lift <> liftx def
R88823:88826 VST.veric.lift <> lift def
R88874:88882 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R88894:88938 VST.floyd.SeparationLogicAsLogic AuxDefs semax_store_store_union_hack_backward constr
R88874:88882 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R88894:88938 VST.floyd.SeparationLogicAsLogic AuxDefs semax_store_store_union_hack_backward constr
R88954:88963 VST.msl.seplog <> andp_left2 meth
R88954:88963 VST.msl.seplog <> andp_left2 meth
R88972:88981 VST.msl.seplog <> andp_left2 meth
R88972:88981 VST.msl.seplog <> andp_left2 meth
R88990:89001 VST.msl.seplog <> derives_refl meth
R88990:89001 VST.msl.seplog <> derives_refl meth
R89015:89032 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R89015:89032 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R89045:89065 VST.floyd.SeparationLogicAsLogic AuxDefs semax_builtin constr
R89045:89065 VST.floyd.SeparationLogicAsLogic AuxDefs semax_builtin constr
R89078:89096 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
R89078:89096 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
R89115:89132 VST.floyd.SeparationLogicAsLogic AuxDefs semax_goto constr
R89115:89132 VST.floyd.SeparationLogicAsLogic AuxDefs semax_goto constr
R89146:89157 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_conseq def
R89146:89157 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_conseq def
prf 89200:89221 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_body_subsumption
binder 89231:89232 <> cs:682
binder 89234:89234 <> V:683
binder 89236:89237 <> V':684
binder 89239:89239 <> F:685
binder 89241:89242 <> F':686
binder 89244:89244 <> f:687
binder 89246:89249 <> spec:688
R89263:89272 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDefs semax_body def
R89283:89286 VST.floyd.SeparationLogicAsLogic <> spec:688 var
R89281:89281 VST.floyd.SeparationLogicAsLogic <> f:687 var
R89278:89279 VST.floyd.SeparationLogicAsLogic <> cs:682 var
R89276:89276 VST.floyd.SeparationLogicAsLogic <> F:685 var
R89274:89274 VST.floyd.SeparationLogicAsLogic <> V:683 var
binder 89258:89259 <> SF:689
R89300:89312 VST.veric.expr <> tycontext_sub def
R89342:89355 VST.veric.tycontext <> func_tycontext def
R89365:89367 Coq.Init.Datatypes <> nil constr
R89362:89363 VST.floyd.SeparationLogicAsLogic <> F':686 var
R89359:89360 VST.floyd.SeparationLogicAsLogic <> V':684 var
R89357:89357 VST.floyd.SeparationLogicAsLogic <> f:687 var
R89315:89328 VST.veric.tycontext <> func_tycontext def
R89336:89338 Coq.Init.Datatypes <> nil constr
R89334:89334 VST.floyd.SeparationLogicAsLogic <> F:685 var
R89332:89332 VST.floyd.SeparationLogicAsLogic <> V:683 var
R89330:89330 VST.floyd.SeparationLogicAsLogic <> f:687 var
binder 89296:89297 <> TS:690
R89377:89386 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDefs semax_body def
R89399:89402 VST.floyd.SeparationLogicAsLogic <> spec:688 var
R89397:89397 VST.floyd.SeparationLogicAsLogic <> f:687 var
R89394:89395 VST.floyd.SeparationLogicAsLogic <> cs:682 var
R89391:89392 VST.floyd.SeparationLogicAsLogic <> F':686 var
R89388:89389 VST.floyd.SeparationLogicAsLogic <> V':684 var
R89499:89521 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_Delta_subsumption thm
R89499:89521 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_Delta_subsumption thm
prf 89649:89667 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_body_cenv_sub
binder 89670:89671 <> CS:691
binder 89673:89675 <> CS':692
R89685:89694 VST.veric.expr <> cspecs_sub def
R89699:89701 VST.floyd.SeparationLogicAsLogic <> CS':692 var
R89696:89697 VST.floyd.SeparationLogicAsLogic <> CS:691 var
binder 89679:89682 <> CSUB:693
binder 89704:89704 <> V:694
binder 89706:89706 <> G:695
binder 89708:89708 <> f:696
binder 89710:89713 <> spec:697
R89733:89738 Coq.Lists.List <> Forall ind
R89812:89818 compcert.cfrontend.Clight <> fn_vars proj
R89820:89820 VST.floyd.SeparationLogicAsLogic <> f:696 var
R89755:89757 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R89750:89754 compcert.common.AST <> ident def
R89758:89761 compcert.cfrontend.Ctypes <> type ind
binder 89745:89746 <> it:698
R89802:89804 Coq.Init.Logic <> ::type_scope:x_'='_x not
R89766:89778 compcert.cfrontend.Ctypes <> complete_type def
R89795:89797 Coq.Init.Datatypes <> snd def
R89799:89800 VST.floyd.SeparationLogicAsLogic <> it:698 var
R89782:89788 VST.veric.mpred <> cenv_cs meth
R89790:89791 VST.floyd.SeparationLogicAsLogic <> CS:691 var
R89805:89808 Coq.Init.Datatypes <> true constr
binder 89722:89729 <> COMPLETE:699
R89854:89857 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89859:89868 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDefs semax_body def
R89880:89883 VST.floyd.SeparationLogicAsLogic <> spec:697 var
R89878:89878 VST.floyd.SeparationLogicAsLogic <> f:696 var
R89874:89876 VST.floyd.SeparationLogicAsLogic <> CS':692 var
R89872:89872 VST.floyd.SeparationLogicAsLogic <> G:695 var
R89870:89870 VST.floyd.SeparationLogicAsLogic <> V:694 var
R89830:89839 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDefs semax_body def
R89850:89853 VST.floyd.SeparationLogicAsLogic <> spec:697 var
R89848:89848 VST.floyd.SeparationLogicAsLogic <> f:696 var
R89845:89846 VST.floyd.SeparationLogicAsLogic <> CS:691 var
R89843:89843 VST.floyd.SeparationLogicAsLogic <> G:695 var
R89841:89841 VST.floyd.SeparationLogicAsLogic <> V:694 var
R90013:90047 VST.veric.semax_prog <> stackframe_of_cspecs_sub thm
R90064:90074 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_cssub thm
R90013:90047 VST.veric.semax_prog <> stackframe_of_cspecs_sub thm
R90013:90047 VST.veric.semax_prog <> stackframe_of_cspecs_sub thm
R90013:90047 VST.veric.semax_prog <> stackframe_of_cspecs_sub thm
R90064:90074 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_cssub thm
prf 90116:90136 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists'
R90153:90161 VST.veric.mpred <> compspecs class
binder 90149:90150 <> CS:700
R90172:90181 VST.veric.juicy_extspec <> OracleKind class
binder 90165:90169 <> Espec:701
binder 90195:90195 <> A:702
R90212:90215 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R90223:90224 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R90225:90229 VST.veric.mpred <> mpred def
R90216:90222 VST.veric.mpred <> environ ind
R90211:90211 VST.floyd.SeparationLogicAsLogic <> A:702 var
binder 90207:90207 <> P:703
binder 90232:90232 <> c:704
R90242:90250 VST.veric.seplog <> tycontext ind
binder 90235:90239 <> Delta:705
R90257:90266 VST.veric.tycontext <> ret_assert rec
binder 90254:90254 <> R:706
R90272:90272 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R90314:90321 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R90323:90327 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R90375:90375 VST.floyd.SeparationLogicAsLogic <> R:706 var
R90373:90373 VST.floyd.SeparationLogicAsLogic <> c:704 var
binder 90349:90351 <> rho:707
R90356:90358 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R90362:90363 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R90361:90361 VST.floyd.SeparationLogicAsLogic <> A:702 var
binder 90359:90359 <> x:708
R90364:90364 VST.floyd.SeparationLogicAsLogic <> P:703 var
R90368:90370 VST.floyd.SeparationLogicAsLogic <> rho:707 var
R90366:90366 VST.floyd.SeparationLogicAsLogic <> x:708 var
R90338:90342 VST.floyd.SeparationLogicAsLogic <> Delta:705 var
R90332:90336 VST.floyd.SeparationLogicAsLogic <> Espec:701 var
R90329:90330 VST.floyd.SeparationLogicAsLogic <> CS:700 var
binder 90280:90280 <> x:709
R90284:90288 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R90313:90313 VST.floyd.SeparationLogicAsLogic <> R:706 var
R90311:90311 VST.floyd.SeparationLogicAsLogic <> c:704 var
R90306:90306 VST.floyd.SeparationLogicAsLogic <> P:703 var
R90308:90308 VST.floyd.SeparationLogicAsLogic <> x:709 var
R90299:90303 VST.floyd.SeparationLogicAsLogic <> Delta:705 var
R90293:90297 VST.floyd.SeparationLogicAsLogic <> Espec:701 var
R90290:90291 VST.floyd.SeparationLogicAsLogic <> CS:700 var
R90399:90418 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists def
R90399:90418 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists def
prf 90447:90465 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_prop'
R90482:90490 VST.veric.mpred <> compspecs class
binder 90478:90479 <> CS:710
R90501:90510 VST.veric.juicy_extspec <> OracleKind class
binder 90494:90498 <> Espec:711
binder 90523:90527 <> Delta:712
binder 90530:90531 <> PP:713
binder 90540:90540 <> P:714
binder 90542:90542 <> c:715
binder 90544:90544 <> Q:716
R90558:90558 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R90592:90607 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R90609:90613 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R90659:90659 VST.floyd.SeparationLogicAsLogic <> Q:716 var
R90657:90657 VST.floyd.SeparationLogicAsLogic <> c:715 var
binder 90635:90637 <> rho:717
R90646:90649 VST.msl.seplog <> ::logic:x_'&&'_x not
R90642:90643 VST.msl.seplog <> ::logic:'!!'_x not
R90644:90645 VST.floyd.SeparationLogicAsLogic <> PP:713 var
R90650:90650 VST.floyd.SeparationLogicAsLogic <> P:714 var
R90652:90654 VST.floyd.SeparationLogicAsLogic <> rho:717 var
R90624:90628 VST.floyd.SeparationLogicAsLogic <> Delta:712 var
R90618:90622 VST.floyd.SeparationLogicAsLogic <> Espec:711 var
R90615:90616 VST.floyd.SeparationLogicAsLogic <> CS:710 var
R90561:90564 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R90566:90570 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R90591:90591 VST.floyd.SeparationLogicAsLogic <> Q:716 var
R90589:90589 VST.floyd.SeparationLogicAsLogic <> c:715 var
R90587:90587 VST.floyd.SeparationLogicAsLogic <> P:714 var
R90581:90585 VST.floyd.SeparationLogicAsLogic <> Delta:712 var
R90575:90579 VST.floyd.SeparationLogicAsLogic <> Espec:711 var
R90572:90573 VST.floyd.SeparationLogicAsLogic <> CS:710 var
R90559:90560 VST.floyd.SeparationLogicAsLogic <> PP:713 var
R90683:90700 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R90683:90700 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
prf 90729:90744 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux
binder 90754:90755 <> id:718
R90758:90758 Coq.Init.Logic <> ::type_scope:x_'='_x not
R90803:90806 Coq.Init.Logic <> ::type_scope:x_'='_x not
binder 90763:90763 <> i:719
R90768:90773 VST.veric.coqlib4 <> isSome def
R90775:90775 compcert.lib.Maps <> :::x_'!'_x not
R90798:90801 compcert.lib.Maps <> :::x_'!'_x not
R90802:90802 VST.floyd.SeparationLogicAsLogic <> i:719 var
R90776:90787 VST.veric.mpred <> insert_idset def
R90792:90797 VST.veric.mpred <> idset0 def
R90789:90790 VST.floyd.SeparationLogicAsLogic <> id:718 var
R90807:90808 Coq.Init.Logic <> eq ind
R90810:90811 VST.floyd.SeparationLogicAsLogic <> id:718 var
R90859:90866 VST.msl.Axioms <> prop_ext prfax
R90859:90866 VST.msl.Axioms <> prop_ext prfax
R90878:90889 VST.veric.mpred <> insert_idset def
R90904:90911 compcert.common.AST <> ident_eq def
R90904:90911 compcert.common.AST <> ident_eq def
R90943:90951 compcert.lib.Maps PTree gss thm
R90943:90951 compcert.lib.Maps PTree gss thm
R90943:90951 compcert.lib.Maps PTree gss thm
R90984:90992 compcert.lib.Maps PTree gso thm
R90984:90992 compcert.lib.Maps PTree gso thm
R90984:90992 compcert.lib.Maps PTree gso thm
R91014:91019 VST.veric.mpred <> idset0 def
R91034:91045 compcert.lib.Maps PTree gempty thm
R91034:91045 compcert.lib.Maps PTree gempty thm
R91034:91045 compcert.lib.Maps PTree gempty thm
prf 91115:91133 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic sepcon_derives_full
binder 91143:91147 <> Delta:720
binder 91149:91150 <> P1:721
binder 91152:91153 <> P2:722
binder 91155:91156 <> Q1:723
binder 91158:91159 <> Q2:724
R91238:91243 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R91318:91323 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R91384:91388 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R91348:91352 VST.msl.seplog <> ::logic:x_'&&'_x not
R91383:91383 VST.msl.seplog <> ::logic:x_'&&'_x not
R91324:91328 VST.veric.SeparationLogic <> local def
R91331:91340 VST.veric.SeparationLogic <> tc_environ def
R91342:91346 VST.floyd.SeparationLogicAsLogic <> Delta:720 var
R91370:91374 VST.msl.seplog <> ::logic:x_'&&'_x not
R91382:91382 VST.msl.seplog <> ::logic:x_'&&'_x not
R91353:91363 VST.veric.SeparationLogic <> allp_fun_id def
R91365:91369 VST.floyd.SeparationLogicAsLogic <> Delta:720 var
R91377:91379 VST.msl.seplog <> ::logic:x_'*'_x not
R91375:91376 VST.floyd.SeparationLogicAsLogic <> P1:721 var
R91380:91381 VST.floyd.SeparationLogicAsLogic <> Q1:723 var
R91389:91393 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R91399:91403 VST.msl.seplog <> ::logic:x_'||'_x not
R91411:91411 VST.msl.seplog <> ::logic:x_'||'_x not
R91394:91396 VST.msl.seplog <> ::logic:'|>'_x not
R91397:91398 VST.msl.seplog <> FF meth
R91406:91408 VST.msl.seplog <> ::logic:x_'*'_x not
R91404:91405 VST.floyd.SeparationLogicAsLogic <> P2:722 var
R91409:91410 VST.floyd.SeparationLogicAsLogic <> Q2:724 var
R91297:91301 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R91268:91272 VST.msl.seplog <> ::logic:x_'&&'_x not
R91296:91296 VST.msl.seplog <> ::logic:x_'&&'_x not
R91244:91248 VST.veric.SeparationLogic <> local def
R91251:91260 VST.veric.SeparationLogic <> tc_environ def
R91262:91266 VST.floyd.SeparationLogicAsLogic <> Delta:720 var
R91290:91293 VST.msl.seplog <> ::logic:x_'&&'_x not
R91273:91283 VST.veric.SeparationLogic <> allp_fun_id def
R91285:91289 VST.floyd.SeparationLogicAsLogic <> Delta:720 var
R91294:91295 VST.floyd.SeparationLogicAsLogic <> Q1:723 var
R91302:91306 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R91312:91315 VST.msl.seplog <> ::logic:x_'||'_x not
R91307:91309 VST.msl.seplog <> ::logic:'|>'_x not
R91310:91311 VST.msl.seplog <> FF meth
R91316:91317 VST.floyd.SeparationLogicAsLogic <> Q2:724 var
R91217:91221 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R91188:91192 VST.msl.seplog <> ::logic:x_'&&'_x not
R91216:91216 VST.msl.seplog <> ::logic:x_'&&'_x not
R91164:91168 VST.veric.SeparationLogic <> local def
R91171:91180 VST.veric.SeparationLogic <> tc_environ def
R91182:91186 VST.floyd.SeparationLogicAsLogic <> Delta:720 var
R91210:91213 VST.msl.seplog <> ::logic:x_'&&'_x not
R91193:91203 VST.veric.SeparationLogic <> allp_fun_id def
R91205:91209 VST.floyd.SeparationLogicAsLogic <> Delta:720 var
R91214:91215 VST.floyd.SeparationLogicAsLogic <> P1:721 var
R91222:91226 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R91232:91235 VST.msl.seplog <> ::logic:x_'||'_x not
R91227:91229 VST.msl.seplog <> ::logic:'|>'_x not
R91230:91231 VST.msl.seplog <> FF meth
R91236:91237 VST.floyd.SeparationLogicAsLogic <> P2:722 var
R91444:91457 VST.floyd.assert_lemmas <> sepcon_ENTAILL thm
R91444:91457 VST.floyd.assert_lemmas <> sepcon_ENTAILL thm
R91485:91497 VST.msl.seplog <> derives_trans meth
R91485:91497 VST.msl.seplog <> derives_trans meth
R91532:91544 VST.msl.seplog <> derives_trans meth
R91554:91564 VST.msl.ghost_seplog <> bupd_sepcon thm
R91532:91544 VST.msl.seplog <> derives_trans meth
R91554:91564 VST.msl.ghost_seplog <> bupd_sepcon thm
R91578:91586 VST.msl.ghost_seplog <> bupd_mono meth
R91578:91586 VST.msl.ghost_seplog <> bupd_mono meth
R91599:91616 VST.msl.log_normalize <> distrib_orp_sepcon thm
R91620:91638 VST.msl.log_normalize <> distrib_orp_sepcon2 thm
R91599:91616 VST.msl.log_normalize <> distrib_orp_sepcon thm
R91599:91616 VST.msl.log_normalize <> distrib_orp_sepcon thm
R91620:91638 VST.msl.log_normalize <> distrib_orp_sepcon2 thm
R91620:91638 VST.msl.log_normalize <> distrib_orp_sepcon2 thm
R91620:91638 VST.msl.log_normalize <> distrib_orp_sepcon2 thm
R91620:91638 VST.msl.log_normalize <> distrib_orp_sepcon2 thm
R91656:91663 VST.msl.seplog <> orp_left meth
R91656:91663 VST.msl.seplog <> orp_left meth
R91656:91663 VST.msl.seplog <> orp_left meth
R91656:91663 VST.msl.seplog <> orp_left meth
R91656:91663 VST.msl.seplog <> orp_left meth
R91656:91663 VST.msl.seplog <> orp_left meth
R91656:91663 VST.msl.seplog <> orp_left meth
R91656:91663 VST.msl.seplog <> orp_left meth
R91676:91685 VST.msl.seplog <> orp_right1 meth
R91676:91685 VST.msl.seplog <> orp_right1 meth
R91703:91714 VST.msl.seplog <> later_sepcon meth
R91703:91714 VST.msl.seplog <> later_sepcon meth
R91703:91714 VST.msl.seplog <> later_sepcon meth
R91729:91737 VST.msl.log_normalize <> FF_sepcon thm
R91729:91737 VST.msl.log_normalize <> FF_sepcon thm
R91729:91737 VST.msl.log_normalize <> FF_sepcon thm
R91756:91765 VST.msl.seplog <> orp_right1 meth
R91756:91765 VST.msl.seplog <> orp_right1 meth
R91780:91790 VST.msl.seplog <> sepcon_comm meth
R91780:91790 VST.msl.seplog <> sepcon_comm meth
R91780:91790 VST.msl.seplog <> sepcon_comm meth
R91803:91821 VST.msl.seplog <> wand_sepcon_adjoint meth
R91803:91821 VST.msl.seplog <> wand_sepcon_adjoint meth
R91835:91847 VST.msl.seplog <> derives_trans meth
R91857:91865 VST.msl.seplog <> now_later meth
R91835:91847 VST.msl.seplog <> derives_trans meth
R91857:91865 VST.msl.seplog <> now_later meth
R91881:91899 VST.msl.seplog <> wand_sepcon_adjoint meth
R91881:91899 VST.msl.seplog <> wand_sepcon_adjoint meth
R91917:91928 VST.msl.seplog <> later_sepcon meth
R91917:91928 VST.msl.seplog <> later_sepcon meth
R91917:91928 VST.msl.seplog <> later_sepcon meth
R91943:91951 VST.msl.log_normalize <> sepcon_FF thm
R91943:91951 VST.msl.log_normalize <> sepcon_FF thm
R91943:91951 VST.msl.log_normalize <> sepcon_FF thm
R91974:91983 VST.msl.seplog <> orp_right1 meth
R91974:91983 VST.msl.seplog <> orp_right1 meth
R91996:92014 VST.msl.seplog <> wand_sepcon_adjoint meth
R91996:92014 VST.msl.seplog <> wand_sepcon_adjoint meth
R92028:92040 VST.msl.seplog <> derives_trans meth
R92050:92058 VST.msl.seplog <> now_later meth
R92028:92040 VST.msl.seplog <> derives_trans meth
R92050:92058 VST.msl.seplog <> now_later meth
R92074:92092 VST.msl.seplog <> wand_sepcon_adjoint meth
R92074:92092 VST.msl.seplog <> wand_sepcon_adjoint meth
R92110:92121 VST.msl.seplog <> later_sepcon meth
R92110:92121 VST.msl.seplog <> later_sepcon meth
R92110:92121 VST.msl.seplog <> later_sepcon meth
R92136:92144 VST.msl.log_normalize <> sepcon_FF thm
R92136:92144 VST.msl.log_normalize <> sepcon_FF thm
R92136:92144 VST.msl.log_normalize <> sepcon_FF thm
R92167:92176 VST.msl.seplog <> orp_right2 meth
R92167:92176 VST.msl.seplog <> orp_right2 meth
prf 92197:92207 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_frame
R92224:92232 VST.veric.mpred <> compspecs class
binder 92220:92221 <> CS:725
R92243:92252 VST.veric.juicy_extspec <> OracleKind class
binder 92236:92240 <> Espec:726
binder 92265:92269 <> Delta:727
binder 92271:92271 <> P:728
binder 92273:92273 <> s:729
binder 92275:92275 <> R:730
binder 92277:92277 <> F:731
R92305:92310 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R92338:92345 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R92347:92351 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R92379:92394 VST.veric.SeparationLogic <> frame_ret_assert def
R92398:92398 VST.floyd.SeparationLogicAsLogic <> F:731 var
R92396:92396 VST.floyd.SeparationLogicAsLogic <> R:730 var
R92376:92376 VST.floyd.SeparationLogicAsLogic <> s:729 var
R92370:92372 VST.msl.seplog <> ::logic:x_'*'_x not
R92369:92369 VST.floyd.SeparationLogicAsLogic <> P:728 var
R92373:92373 VST.floyd.SeparationLogicAsLogic <> F:731 var
R92362:92366 VST.floyd.SeparationLogicAsLogic <> Delta:727 var
R92356:92360 VST.floyd.SeparationLogicAsLogic <> Espec:726 var
R92353:92354 VST.floyd.SeparationLogicAsLogic <> CS:725 var
R92312:92316 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R92337:92337 VST.floyd.SeparationLogicAsLogic <> R:730 var
R92335:92335 VST.floyd.SeparationLogicAsLogic <> s:729 var
R92333:92333 VST.floyd.SeparationLogicAsLogic <> P:728 var
R92327:92331 VST.floyd.SeparationLogicAsLogic <> Delta:727 var
R92321:92325 VST.floyd.SeparationLogicAsLogic <> Espec:726 var
R92318:92319 VST.floyd.SeparationLogicAsLogic <> CS:725 var
R92283:92300 VST.veric.SeparationLogic <> closed_wrt_modvars def
R92304:92304 VST.floyd.SeparationLogicAsLogic <> F:731 var
R92302:92302 VST.floyd.SeparationLogicAsLogic <> s:729 var
R92558:92562 VST.msl.seplog <> ::logic:x_'&&'_x not
R92568:92568 VST.msl.seplog <> ::logic:x_'&&'_x not
R92493:92496 VST.msl.seplog <> ::logic:x_'&&'_x not
R92461:92464 VST.msl.seplog <> ::logic:'!!'_x not
R92492:92492 VST.msl.seplog <> ::logic:'!!'_x not
R92485:92487 Coq.Init.Logic <> ::type_scope:x_'='_x not
R92465:92473 VST.veric.expr <> bool_type def
R92476:92481 compcert.cfrontend.Clight <> typeof def
R92488:92491 Coq.Init.Datatypes <> true constr
R92497:92503 VST.veric.SeparationLogic <> tc_expr def
R92512:92516 compcert.cfrontend.Clight <> Eunop constr
R92534:92537 compcert.cfrontend.Ctypes <> Tint constr
R92550:92555 compcert.cfrontend.Ctypes <> noattr def
R92543:92548 compcert.cfrontend.Ctypes <> Signed constr
R92539:92541 compcert.cfrontend.Ctypes <> I32 constr
R92518:92529 compcert.cfrontend.Cop <> Onotbool constr
R92564:92566 VST.msl.seplog <> ::logic:x_'*'_x not
R92445:92453 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R92558:92562 VST.msl.seplog <> ::logic:x_'&&'_x not
R92568:92568 VST.msl.seplog <> ::logic:x_'&&'_x not
R92493:92496 VST.msl.seplog <> ::logic:x_'&&'_x not
R92461:92464 VST.msl.seplog <> ::logic:'!!'_x not
R92492:92492 VST.msl.seplog <> ::logic:'!!'_x not
R92485:92487 Coq.Init.Logic <> ::type_scope:x_'='_x not
R92465:92473 VST.veric.expr <> bool_type def
R92476:92481 compcert.cfrontend.Clight <> typeof def
R92488:92491 Coq.Init.Datatypes <> true constr
R92497:92503 VST.veric.SeparationLogic <> tc_expr def
R92512:92516 compcert.cfrontend.Clight <> Eunop constr
R92534:92537 compcert.cfrontend.Ctypes <> Tint constr
R92550:92555 compcert.cfrontend.Ctypes <> noattr def
R92543:92548 compcert.cfrontend.Ctypes <> Signed constr
R92539:92541 compcert.cfrontend.Ctypes <> I32 constr
R92518:92529 compcert.cfrontend.Cop <> Onotbool constr
R92564:92566 VST.msl.seplog <> ::logic:x_'*'_x not
R92445:92453 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R92601:92610 VST.msl.seplog <> andp_left2 meth
R92613:92622 VST.msl.seplog <> andp_right meth
R92601:92610 VST.msl.seplog <> andp_left2 meth
R92613:92622 VST.msl.seplog <> andp_right meth
R92640:92652 VST.msl.seplog <> derives_trans meth
R92662:92675 VST.msl.seplog <> sepcon_derives meth
R92685:92694 VST.msl.seplog <> andp_left1 meth
R92706:92717 VST.msl.seplog <> derives_refl meth
R92640:92652 VST.msl.seplog <> derives_trans meth
R92662:92675 VST.msl.seplog <> sepcon_derives meth
R92685:92694 VST.msl.seplog <> andp_left1 meth
R92706:92717 VST.msl.seplog <> derives_refl meth
R92706:92717 VST.msl.seplog <> derives_refl meth
R92757:92783 VST.msl.predicates_sl <> extend_sepcon thm
R92786:92809 VST.veric.extend_tc <> extend_tc_expr thm
R92818:92822 compcert.cfrontend.Clight <> Eunop constr
R92840:92843 compcert.cfrontend.Ctypes <> Tint constr
R92856:92861 compcert.cfrontend.Ctypes <> noattr def
R92849:92854 compcert.cfrontend.Ctypes <> Signed constr
R92845:92847 compcert.cfrontend.Ctypes <> I32 constr
R92824:92835 compcert.cfrontend.Cop <> Onotbool constr
R92757:92783 VST.msl.predicates_sl <> extend_sepcon thm
R92786:92809 VST.veric.extend_tc <> extend_tc_expr thm
R92818:92822 compcert.cfrontend.Clight <> Eunop constr
R92840:92843 compcert.cfrontend.Ctypes <> Tint constr
R92856:92861 compcert.cfrontend.Ctypes <> noattr def
R92849:92854 compcert.cfrontend.Ctypes <> Signed constr
R92845:92847 compcert.cfrontend.Ctypes <> I32 constr
R92824:92835 compcert.cfrontend.Cop <> Onotbool constr
R92887:92899 VST.msl.seplog <> derives_trans meth
R92909:92922 VST.msl.seplog <> sepcon_derives meth
R92932:92941 VST.msl.seplog <> andp_left2 meth
R92953:92964 VST.msl.seplog <> derives_refl meth
R92887:92899 VST.msl.seplog <> derives_trans meth
R92909:92922 VST.msl.seplog <> sepcon_derives meth
R92932:92941 VST.msl.seplog <> andp_left2 meth
R92953:92964 VST.msl.seplog <> derives_refl meth
R92953:92964 VST.msl.seplog <> derives_refl meth
R92998:93028 VST.veric.semax_lemmas <> closed_Sifthenelse thm
R92998:93028 VST.veric.semax_lemmas <> closed_Sifthenelse thm
R92998:93028 VST.veric.semax_lemmas <> closed_Sifthenelse thm
R93060:93083 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R93060:93083 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R93101:93109 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R93101:93109 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R93152:93161 VST.msl.seplog <> andp_left2 meth
R93152:93161 VST.msl.seplog <> andp_left2 meth
R93211:93215 VST.veric.SeparationLogic <> local def
R93218:93222 VST.veric.mpred <> lift1 def
R93266:93274 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R93266:93274 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R93317:93326 VST.msl.seplog <> andp_left2 meth
R93317:93326 VST.msl.seplog <> andp_left2 meth
R93376:93380 VST.veric.SeparationLogic <> local def
R93383:93387 VST.veric.mpred <> lift1 def
R93428:93456 VST.veric.semax_lemmas <> closed_Ssequence thm
R93428:93456 VST.veric.semax_lemmas <> closed_Ssequence thm
R93428:93456 VST.veric.semax_lemmas <> closed_Ssequence thm
R93511:93513 VST.msl.seplog <> ::logic:x_'*'_x not
R93486:93502 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R93511:93513 VST.msl.seplog <> ::logic:x_'*'_x not
R93486:93502 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R93621:93623 VST.msl.seplog <> ::logic:x_'*'_x not
R93611:93618 VST.veric.tycontext <> RA_break proj
R93633:93640 VST.veric.tycontext <> RA_break proj
R93643:93658 VST.veric.SeparationLogic <> frame_ret_assert def
R93621:93623 VST.msl.seplog <> ::logic:x_'*'_x not
R93611:93618 VST.veric.tycontext <> RA_break proj
R93633:93640 VST.veric.tycontext <> RA_break proj
R93643:93658 VST.veric.SeparationLogic <> frame_ret_assert def
R93699:93717 VST.floyd.SeparationLogicAsLogic AuxDefs semax_break constr
R93699:93717 VST.floyd.SeparationLogicAsLogic AuxDefs semax_break constr
R93746:93748 VST.msl.seplog <> ::logic:x_'*'_x not
R93733:93743 VST.veric.tycontext <> RA_continue proj
R93758:93768 VST.veric.tycontext <> RA_continue proj
R93771:93786 VST.veric.SeparationLogic <> frame_ret_assert def
R93746:93748 VST.msl.seplog <> ::logic:x_'*'_x not
R93733:93743 VST.veric.tycontext <> RA_continue proj
R93758:93768 VST.veric.tycontext <> RA_continue proj
R93771:93786 VST.veric.SeparationLogic <> frame_ret_assert def
R93827:93848 VST.floyd.SeparationLogicAsLogic AuxDefs semax_continue constr
R93827:93848 VST.floyd.SeparationLogicAsLogic AuxDefs semax_continue constr
R93863:93887 VST.veric.semax_lemmas <> closed_Sloop thm
R93863:93887 VST.veric.semax_lemmas <> closed_Sloop thm
R93863:93887 VST.veric.semax_lemmas <> closed_Sloop thm
R93945:93947 VST.msl.seplog <> ::logic:x_'*'_x not
R93918:93935 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R93945:93947 VST.msl.seplog <> ::logic:x_'*'_x not
R93918:93935 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R94007:94022 VST.veric.SeparationLogic <> loop2_ret_assert def
R94033:94048 VST.veric.SeparationLogic <> frame_ret_assert def
R94026:94028 VST.msl.seplog <> ::logic:x_'*'_x not
R94070:94085 VST.veric.SeparationLogic <> frame_ret_assert def
R94088:94103 VST.veric.SeparationLogic <> loop2_ret_assert def
R94179:94186 VST.msl.seplog <> pred_ext meth
R94007:94022 VST.veric.SeparationLogic <> loop2_ret_assert def
R94033:94048 VST.veric.SeparationLogic <> frame_ret_assert def
R94026:94028 VST.msl.seplog <> ::logic:x_'*'_x not
R94070:94085 VST.veric.SeparationLogic <> frame_ret_assert def
R94088:94103 VST.veric.SeparationLogic <> loop2_ret_assert def
R94179:94186 VST.msl.seplog <> pred_ext meth
R94272:94283 VST.msl.seplog <> corable_prop meth
R94241:94260 VST.msl.seplog <> corable_andp_sepcon1 meth
R94241:94260 VST.msl.seplog <> corable_andp_sepcon1 meth
R94272:94283 VST.msl.seplog <> corable_prop meth
R94241:94260 VST.msl.seplog <> corable_andp_sepcon1 meth
R94298:94317 VST.floyd.SeparationLogicAsLogic AuxDefs semax_switch constr
R94298:94317 VST.floyd.SeparationLogicAsLogic AuxDefs semax_switch constr
R94352:94364 VST.msl.seplog <> derives_trans meth
R94374:94387 VST.msl.seplog <> sepcon_derives meth
R94408:94419 VST.msl.seplog <> derives_refl meth
R94352:94364 VST.msl.seplog <> derives_trans meth
R94374:94387 VST.msl.seplog <> sepcon_derives meth
R94408:94419 VST.msl.seplog <> derives_refl meth
R94439:94465 VST.msl.predicates_sl <> extend_sepcon thm
R94468:94491 VST.veric.extend_tc <> extend_tc_expr thm
R94439:94465 VST.msl.predicates_sl <> extend_sepcon thm
R94468:94491 VST.veric.extend_tc <> extend_tc_expr thm
R94577:94588 VST.msl.seplog <> corable_prop meth
R94539:94558 VST.msl.seplog <> corable_andp_sepcon1 meth
R94539:94558 VST.msl.seplog <> corable_andp_sepcon1 meth
R94577:94588 VST.msl.seplog <> corable_prop meth
R94539:94558 VST.msl.seplog <> corable_andp_sepcon1 meth
R94607:94623 VST.veric.SeparationLogic <> switch_ret_assert def
R94626:94641 VST.veric.SeparationLogic <> frame_ret_assert def
R94663:94678 VST.veric.SeparationLogic <> frame_ret_assert def
R94681:94697 VST.veric.SeparationLogic <> switch_ret_assert def
R94771:94778 VST.msl.seplog <> pred_ext meth
R94607:94623 VST.veric.SeparationLogic <> switch_ret_assert def
R94626:94641 VST.veric.SeparationLogic <> frame_ret_assert def
R94663:94678 VST.veric.SeparationLogic <> frame_ret_assert def
R94681:94697 VST.veric.SeparationLogic <> switch_ret_assert def
R94771:94778 VST.msl.seplog <> pred_ext meth
R94826:94852 VST.veric.semax_lemmas <> closed_Sswitch thm
R94826:94852 VST.veric.semax_lemmas <> closed_Sswitch thm
R94874:94885 VST.floyd.assert_lemmas <> frame_normal thm
R94874:94885 VST.floyd.assert_lemmas <> frame_normal thm
R94874:94885 VST.floyd.assert_lemmas <> frame_normal thm
R94899:94907 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R94922:94948 VST.floyd.SeparationLogicAsLogic AuxDefs semax_call_backward constr
R94899:94907 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R94922:94948 VST.floyd.SeparationLogicAsLogic AuxDefs semax_call_backward constr
R94970:94979 VST.msl.seplog <> andp_left2 meth
R94970:94979 VST.msl.seplog <> andp_left2 meth
R94996:95006 VST.msl.log_normalize <> exp_sepcon1 thm
R94996:95006 VST.msl.log_normalize <> exp_sepcon1 thm
R94996:95006 VST.msl.log_normalize <> exp_sepcon1 thm
R95015:95025 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95015:95025 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95057:95067 VST.msl.log_normalize <> exp_sepcon1 thm
R95057:95067 VST.msl.log_normalize <> exp_sepcon1 thm
R95057:95067 VST.msl.log_normalize <> exp_sepcon1 thm
R95076:95086 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95076:95086 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95118:95128 VST.msl.log_normalize <> exp_sepcon1 thm
R95118:95128 VST.msl.log_normalize <> exp_sepcon1 thm
R95118:95128 VST.msl.log_normalize <> exp_sepcon1 thm
R95137:95147 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95137:95147 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95175:95185 VST.msl.log_normalize <> exp_sepcon1 thm
R95175:95185 VST.msl.log_normalize <> exp_sepcon1 thm
R95175:95185 VST.msl.log_normalize <> exp_sepcon1 thm
R95194:95204 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95194:95204 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95231:95241 VST.msl.log_normalize <> exp_sepcon1 thm
R95231:95241 VST.msl.log_normalize <> exp_sepcon1 thm
R95231:95241 VST.msl.log_normalize <> exp_sepcon1 thm
R95250:95260 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95250:95260 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95287:95297 VST.msl.log_normalize <> exp_sepcon1 thm
R95287:95297 VST.msl.log_normalize <> exp_sepcon1 thm
R95287:95297 VST.msl.log_normalize <> exp_sepcon1 thm
R95306:95316 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95306:95316 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95343:95353 VST.msl.log_normalize <> exp_sepcon1 thm
R95343:95353 VST.msl.log_normalize <> exp_sepcon1 thm
R95343:95353 VST.msl.log_normalize <> exp_sepcon1 thm
R95362:95372 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95362:95372 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95401:95411 VST.msl.log_normalize <> exp_sepcon1 thm
R95401:95411 VST.msl.log_normalize <> exp_sepcon1 thm
R95401:95411 VST.msl.log_normalize <> exp_sepcon1 thm
R95420:95430 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95420:95430 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95459:95469 VST.msl.log_normalize <> exp_sepcon1 thm
R95459:95469 VST.msl.log_normalize <> exp_sepcon1 thm
R95459:95469 VST.msl.log_normalize <> exp_sepcon1 thm
R95478:95488 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95478:95488 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95516:95526 VST.msl.log_normalize <> exp_sepcon1 thm
R95516:95526 VST.msl.log_normalize <> exp_sepcon1 thm
R95516:95526 VST.msl.log_normalize <> exp_sepcon1 thm
R95535:95545 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95535:95545 VST.floyd.SeparationLogicFacts <> exp_derives thm
R95587:95596 VST.msl.seplog <> andp_right meth
R95606:95615 VST.msl.seplog <> andp_right meth
R95587:95596 VST.msl.seplog <> andp_right meth
R95606:95615 VST.msl.seplog <> andp_right meth
R95635:95653 VST.msl.seplog <> wand_sepcon_adjoint meth
R95635:95653 VST.msl.seplog <> wand_sepcon_adjoint meth
R95670:95679 VST.msl.seplog <> andp_left1 meth
R95670:95679 VST.msl.seplog <> andp_left1 meth
R95696:95705 VST.msl.seplog <> andp_left1 meth
R95696:95705 VST.msl.seplog <> andp_left1 meth
R95722:95740 VST.msl.seplog <> wand_sepcon_adjoint meth
R95722:95740 VST.msl.seplog <> wand_sepcon_adjoint meth
R95758:95770 VST.msl.seplog <> derives_trans meth
R95780:95793 VST.msl.seplog <> sepcon_derives meth
R95803:95814 VST.msl.seplog <> derives_refl meth
R95824:95832 VST.msl.seplog <> now_later meth
R95758:95770 VST.msl.seplog <> derives_trans meth
R95780:95793 VST.msl.seplog <> sepcon_derives meth
R95803:95814 VST.msl.seplog <> derives_refl meth
R95824:95832 VST.msl.seplog <> now_later meth
R95954:95980 VST.msl.predicates_sl <> extend_sepcon thm
R95983:96003 VST.veric.extend_tc <> extend_andp thm
R96049:96076 VST.veric.extend_tc <> extend_tc_exprlist thm
R96010:96033 VST.veric.extend_tc <> extend_tc_expr thm
R95954:95980 VST.msl.predicates_sl <> extend_sepcon thm
R95983:96003 VST.veric.extend_tc <> extend_andp thm
R96049:96076 VST.veric.extend_tc <> extend_tc_exprlist thm
R96010:96033 VST.veric.extend_tc <> extend_tc_expr thm
R96116:96134 VST.msl.seplog <> wand_sepcon_adjoint meth
R96116:96134 VST.msl.seplog <> wand_sepcon_adjoint meth
R96151:96160 VST.msl.seplog <> andp_left1 meth
R96163:96172 VST.msl.seplog <> andp_left2 meth
R96151:96160 VST.msl.seplog <> andp_left1 meth
R96163:96172 VST.msl.seplog <> andp_left2 meth
R96189:96207 VST.msl.seplog <> wand_sepcon_adjoint meth
R96189:96207 VST.msl.seplog <> wand_sepcon_adjoint meth
R96224:96256 VST.msl.log_normalize <> derives_left_sepcon_right_corable thm
R96224:96256 VST.msl.log_normalize <> derives_left_sepcon_right_corable thm
R96294:96309 VST.veric.SeparationLogic <> corable_func_ptr thm
R96294:96309 VST.veric.SeparationLogic <> corable_func_ptr thm
R96326:96344 VST.msl.seplog <> wand_sepcon_adjoint meth
R96326:96344 VST.msl.seplog <> wand_sepcon_adjoint meth
R96361:96370 VST.msl.seplog <> andp_left2 meth
R96361:96370 VST.msl.seplog <> andp_left2 meth
R96387:96405 VST.msl.seplog <> wand_sepcon_adjoint meth
R96387:96405 VST.msl.seplog <> wand_sepcon_adjoint meth
R96423:96435 VST.msl.seplog <> derives_trans meth
R96445:96458 VST.msl.seplog <> sepcon_derives meth
R96468:96479 VST.msl.seplog <> derives_refl meth
R96489:96497 VST.msl.seplog <> now_later meth
R96423:96435 VST.msl.seplog <> derives_trans meth
R96445:96458 VST.msl.seplog <> sepcon_derives meth
R96468:96479 VST.msl.seplog <> derives_refl meth
R96489:96497 VST.msl.seplog <> now_later meth
R96523:96534 VST.msl.seplog <> later_sepcon meth
R96523:96534 VST.msl.seplog <> later_sepcon meth
R96523:96534 VST.msl.seplog <> later_sepcon meth
R96551:96563 VST.msl.log_normalize <> later_derives thm
R96551:96563 VST.msl.log_normalize <> later_derives thm
R96582:96593 VST.msl.seplog <> sepcon_assoc meth
R96602:96615 VST.msl.seplog <> sepcon_derives meth
R96582:96593 VST.msl.seplog <> sepcon_assoc meth
R96582:96593 VST.msl.seplog <> sepcon_assoc meth
R96602:96615 VST.msl.seplog <> sepcon_derives meth
R96727:96753 VST.floyd.SeparationLogicAsLogic DeepEmbedded tc_fn_return_temp_guard_opt thm
R96679:96692 VST.floyd.SeparationLogicFacts <> oboxopt_closed thm
R96679:96692 VST.floyd.SeparationLogicFacts <> oboxopt_closed thm
R96727:96753 VST.floyd.SeparationLogicAsLogic DeepEmbedded tc_fn_return_temp_guard_opt thm
R96727:96753 VST.floyd.SeparationLogicAsLogic DeepEmbedded tc_fn_return_temp_guard_opt thm
R96679:96692 VST.floyd.SeparationLogicFacts <> oboxopt_closed thm
R96779:96791 VST.msl.seplog <> derives_trans meth
R96801:96814 VST.floyd.SeparationLogicFacts <> oboxopt_sepcon thm
R96779:96791 VST.msl.seplog <> derives_trans meth
R96801:96814 VST.floyd.SeparationLogicFacts <> oboxopt_sepcon thm
R96834:96842 VST.floyd.SeparationLogicFacts <> oboxopt_K thm
R96834:96842 VST.floyd.SeparationLogicFacts <> oboxopt_K thm
R96865:96874 VST.msl.seplog <> sepcon_emp meth
R96877:96888 VST.veric.SeparationLogic <> maybe_retval def
R96865:96874 VST.msl.seplog <> sepcon_emp meth
R96877:96888 VST.veric.SeparationLogic <> maybe_retval def
R96865:96874 VST.msl.seplog <> sepcon_emp meth
R96877:96888 VST.veric.SeparationLogic <> maybe_retval def
R96919:96931 VST.msl.seplog <> derives_trans meth
R96943:96956 VST.msl.wand_frame <> wand_frame_hor thm
R96919:96931 VST.msl.seplog <> derives_trans meth
R96943:96956 VST.msl.wand_frame <> wand_frame_hor thm
R96974:96987 VST.msl.seplog <> sepcon_derives meth
R96974:96987 VST.msl.seplog <> sepcon_derives meth
R97010:97028 VST.msl.seplog <> wand_sepcon_adjoint meth
R97010:97028 VST.msl.seplog <> wand_sepcon_adjoint meth
R97047:97056 VST.msl.seplog <> sepcon_emp meth
R97047:97056 VST.msl.seplog <> sepcon_emp meth
R97047:97056 VST.msl.seplog <> sepcon_emp meth
R97076:97084 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R97096:97115 VST.floyd.SeparationLogicAsLogic AuxDefs semax_return constr
R97076:97084 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R97096:97115 VST.floyd.SeparationLogicAsLogic AuxDefs semax_return constr
R97129:97138 VST.msl.seplog <> andp_left2 meth
R97129:97138 VST.msl.seplog <> andp_left2 meth
R97151:97160 VST.msl.seplog <> andp_right meth
R97151:97160 VST.msl.seplog <> andp_right meth
R97200:97212 VST.msl.seplog <> derives_trans meth
R97222:97235 VST.msl.seplog <> sepcon_derives meth
R97247:97258 VST.msl.seplog <> derives_refl meth
R97268:97277 VST.msl.seplog <> andp_left1 meth
R97280:97291 VST.msl.seplog <> derives_refl meth
R97200:97212 VST.msl.seplog <> derives_trans meth
R97222:97235 VST.msl.seplog <> sepcon_derives meth
R97247:97258 VST.msl.seplog <> derives_refl meth
R97268:97277 VST.msl.seplog <> andp_left1 meth
R97280:97291 VST.msl.seplog <> derives_refl meth
R97310:97336 VST.msl.predicates_sl <> extend_sepcon thm
R97339:97365 VST.veric.extend_tc <> extend_tc_expropt thm
R97378:97385 VST.veric.seplog <> ret_type def
R97310:97336 VST.msl.predicates_sl <> extend_sepcon thm
R97339:97365 VST.veric.extend_tc <> extend_tc_expropt thm
R97378:97385 VST.veric.seplog <> ret_type def
R97438:97450 VST.msl.seplog <> derives_trans meth
R97460:97473 VST.msl.seplog <> sepcon_derives meth
R97485:97496 VST.msl.seplog <> derives_refl meth
R97506:97515 VST.msl.seplog <> andp_left2 meth
R97518:97529 VST.msl.seplog <> derives_refl meth
R97438:97450 VST.msl.seplog <> derives_trans meth
R97460:97473 VST.msl.seplog <> sepcon_derives meth
R97485:97496 VST.msl.seplog <> derives_refl meth
R97506:97515 VST.msl.seplog <> andp_left2 meth
R97518:97529 VST.msl.seplog <> derives_refl meth
R97572:97583 VST.msl.seplog <> derives_refl meth
R97572:97583 VST.msl.seplog <> derives_refl meth
R97598:97609 VST.floyd.assert_lemmas <> frame_normal thm
R97598:97609 VST.floyd.assert_lemmas <> frame_normal thm
R97598:97609 VST.floyd.assert_lemmas <> frame_normal thm
R97623:97631 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R97643:97695 VST.floyd.SeparationLogicAsLogic AuxDefs semax_set_ptr_compare_load_cast_load_backward constr
R97623:97631 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R97643:97695 VST.floyd.SeparationLogicAsLogic AuxDefs semax_set_ptr_compare_load_cast_load_backward constr
R97709:97718 VST.msl.seplog <> andp_left2 meth
R97709:97718 VST.msl.seplog <> andp_left2 meth
R97734:97751 VST.msl.log_normalize <> distrib_orp_sepcon thm
R97734:97751 VST.msl.log_normalize <> distrib_orp_sepcon thm
R97734:97751 VST.msl.log_normalize <> distrib_orp_sepcon thm
R97734:97751 VST.msl.log_normalize <> distrib_orp_sepcon thm
R97734:97751 VST.msl.log_normalize <> distrib_orp_sepcon thm
R97734:97751 VST.msl.log_normalize <> distrib_orp_sepcon thm
R97771:97781 VST.msl.log_normalize <> orp_derives thm
R97771:97781 VST.msl.log_normalize <> orp_derives thm
R97771:97781 VST.msl.log_normalize <> orp_derives thm
R97771:97781 VST.msl.log_normalize <> orp_derives thm
R97771:97781 VST.msl.log_normalize <> orp_derives thm
R97771:97781 VST.msl.log_normalize <> orp_derives thm
R97771:97781 VST.msl.log_normalize <> orp_derives thm
R97771:97781 VST.msl.log_normalize <> orp_derives thm
R97797:97809 VST.msl.seplog <> derives_trans meth
R97819:97832 VST.msl.seplog <> sepcon_derives meth
R97842:97853 VST.msl.seplog <> derives_refl meth
R97865:97873 VST.msl.seplog <> now_later meth
R97797:97809 VST.msl.seplog <> derives_trans meth
R97819:97832 VST.msl.seplog <> sepcon_derives meth
R97842:97853 VST.msl.seplog <> derives_refl meth
R97865:97873 VST.msl.seplog <> now_later meth
R97896:97907 VST.msl.seplog <> later_sepcon meth
R97896:97907 VST.msl.seplog <> later_sepcon meth
R97896:97907 VST.msl.seplog <> later_sepcon meth
R97922:97934 VST.msl.log_normalize <> later_derives thm
R97922:97934 VST.msl.log_normalize <> later_derives thm
R97949:97958 VST.msl.seplog <> andp_right meth
R97949:97958 VST.msl.seplog <> andp_right meth
R98002:98014 VST.msl.seplog <> derives_trans meth
R98024:98037 VST.msl.seplog <> sepcon_derives meth
R98049:98060 VST.msl.seplog <> derives_refl meth
R98070:98079 VST.msl.seplog <> andp_left1 meth
R98082:98093 VST.msl.seplog <> derives_refl meth
R98002:98014 VST.msl.seplog <> derives_trans meth
R98024:98037 VST.msl.seplog <> sepcon_derives meth
R98049:98060 VST.msl.seplog <> derives_refl meth
R98070:98079 VST.msl.seplog <> andp_left1 meth
R98082:98093 VST.msl.seplog <> derives_refl meth
R98114:98140 VST.msl.predicates_sl <> extend_sepcon thm
R98143:98163 VST.veric.extend_tc <> extend_andp thm
R98209:98235 VST.veric.extend_tc <> extend_tc_temp_id thm
R98241:98246 compcert.cfrontend.Clight <> typeof def
R98170:98193 VST.veric.extend_tc <> extend_tc_expr thm
R98114:98140 VST.msl.predicates_sl <> extend_sepcon thm
R98143:98163 VST.veric.extend_tc <> extend_andp thm
R98209:98235 VST.veric.extend_tc <> extend_tc_temp_id thm
R98241:98246 compcert.cfrontend.Clight <> typeof def
R98170:98193 VST.veric.extend_tc <> extend_tc_expr thm
R98282:98294 VST.msl.seplog <> derives_trans meth
R98304:98317 VST.msl.seplog <> sepcon_derives meth
R98329:98340 VST.msl.seplog <> derives_refl meth
R98350:98359 VST.msl.seplog <> andp_left2 meth
R98362:98373 VST.msl.seplog <> derives_refl meth
R98282:98294 VST.msl.seplog <> derives_trans meth
R98304:98317 VST.msl.seplog <> sepcon_derives meth
R98329:98340 VST.msl.seplog <> derives_refl meth
R98350:98359 VST.msl.seplog <> andp_left2 meth
R98362:98373 VST.msl.seplog <> derives_refl meth
R98395:98406 VST.floyd.assert_lemmas <> subst_sepcon thm
R98395:98406 VST.floyd.assert_lemmas <> subst_sepcon thm
R98395:98406 VST.floyd.assert_lemmas <> subst_sepcon thm
R98426:98441 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R98426:98441 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R98426:98441 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R98426:98441 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R98472:98489 VST.veric.SeparationLogic <> closed_wrt_modvars def
R98516:98531 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux thm
R98516:98531 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux thm
R98516:98531 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux thm
R98562:98572 VST.msl.log_normalize <> exp_sepcon1 thm
R98581:98591 VST.floyd.SeparationLogicFacts <> exp_derives thm
R98562:98572 VST.msl.log_normalize <> exp_sepcon1 thm
R98562:98572 VST.msl.log_normalize <> exp_sepcon1 thm
R98581:98591 VST.floyd.SeparationLogicFacts <> exp_derives thm
R98620:98630 VST.msl.log_normalize <> exp_sepcon1 thm
R98639:98649 VST.floyd.SeparationLogicFacts <> exp_derives thm
R98620:98630 VST.msl.log_normalize <> exp_sepcon1 thm
R98620:98630 VST.msl.log_normalize <> exp_sepcon1 thm
R98639:98649 VST.floyd.SeparationLogicFacts <> exp_derives thm
R98677:98687 VST.msl.log_normalize <> exp_sepcon1 thm
R98696:98706 VST.floyd.SeparationLogicFacts <> exp_derives thm
R98677:98687 VST.msl.log_normalize <> exp_sepcon1 thm
R98677:98687 VST.msl.log_normalize <> exp_sepcon1 thm
R98696:98706 VST.floyd.SeparationLogicFacts <> exp_derives thm
R98734:98744 VST.msl.log_normalize <> exp_sepcon1 thm
R98753:98763 VST.floyd.SeparationLogicFacts <> exp_derives thm
R98734:98744 VST.msl.log_normalize <> exp_sepcon1 thm
R98734:98744 VST.msl.log_normalize <> exp_sepcon1 thm
R98753:98763 VST.floyd.SeparationLogicFacts <> exp_derives thm
R98791:98801 VST.msl.log_normalize <> exp_sepcon1 thm
R98810:98820 VST.floyd.SeparationLogicFacts <> exp_derives thm
R98791:98801 VST.msl.log_normalize <> exp_sepcon1 thm
R98791:98801 VST.msl.log_normalize <> exp_sepcon1 thm
R98810:98820 VST.floyd.SeparationLogicFacts <> exp_derives thm
R98849:98859 VST.msl.log_normalize <> exp_sepcon1 thm
R98868:98878 VST.floyd.SeparationLogicFacts <> exp_derives thm
R98849:98859 VST.msl.log_normalize <> exp_sepcon1 thm
R98849:98859 VST.msl.log_normalize <> exp_sepcon1 thm
R98868:98878 VST.floyd.SeparationLogicFacts <> exp_derives thm
R98923:98935 VST.msl.seplog <> derives_trans meth
R98945:98958 VST.msl.seplog <> sepcon_derives meth
R98968:98979 VST.msl.seplog <> derives_refl meth
R98991:98999 VST.msl.seplog <> now_later meth
R98923:98935 VST.msl.seplog <> derives_trans meth
R98945:98958 VST.msl.seplog <> sepcon_derives meth
R98968:98979 VST.msl.seplog <> derives_refl meth
R98991:98999 VST.msl.seplog <> now_later meth
R99022:99033 VST.msl.seplog <> later_sepcon meth
R99022:99033 VST.msl.seplog <> later_sepcon meth
R99022:99033 VST.msl.seplog <> later_sepcon meth
R99048:99060 VST.msl.log_normalize <> later_derives thm
R99048:99060 VST.msl.log_normalize <> later_derives thm
R99075:99084 VST.msl.seplog <> andp_right meth
R99094:99103 VST.msl.seplog <> andp_right meth
R99113:99122 VST.msl.seplog <> andp_right meth
R99132:99141 VST.msl.seplog <> andp_right meth
R99075:99084 VST.msl.seplog <> andp_right meth
R99094:99103 VST.msl.seplog <> andp_right meth
R99113:99122 VST.msl.seplog <> andp_right meth
R99132:99141 VST.msl.seplog <> andp_right meth
R99168:99180 VST.msl.seplog <> derives_trans meth
R99190:99203 VST.msl.seplog <> sepcon_derives meth
R99215:99226 VST.msl.seplog <> derives_refl meth
R99236:99245 VST.msl.seplog <> andp_left1 meth
R99248:99257 VST.msl.seplog <> andp_left1 meth
R99260:99269 VST.msl.seplog <> andp_left1 meth
R99272:99281 VST.msl.seplog <> andp_left1 meth
R99284:99295 VST.msl.seplog <> derives_refl meth
R99168:99180 VST.msl.seplog <> derives_trans meth
R99190:99203 VST.msl.seplog <> sepcon_derives meth
R99215:99226 VST.msl.seplog <> derives_refl meth
R99236:99245 VST.msl.seplog <> andp_left1 meth
R99248:99257 VST.msl.seplog <> andp_left1 meth
R99260:99269 VST.msl.seplog <> andp_left1 meth
R99272:99281 VST.msl.seplog <> andp_left1 meth
R99284:99295 VST.msl.seplog <> derives_refl meth
R99342:99368 VST.msl.predicates_sl <> extend_sepcon thm
R99371:99391 VST.veric.extend_tc <> extend_andp thm
R99438:99461 VST.veric.extend_tc <> extend_tc_expr thm
R99398:99421 VST.veric.extend_tc <> extend_tc_expr thm
R99342:99368 VST.msl.predicates_sl <> extend_sepcon thm
R99371:99391 VST.veric.extend_tc <> extend_andp thm
R99438:99461 VST.veric.extend_tc <> extend_tc_expr thm
R99398:99421 VST.veric.extend_tc <> extend_tc_expr thm
R99495:99499 VST.veric.SeparationLogic <> local def
R99502:99506 VST.veric.mpred <> lift1 def
R99555:99567 VST.msl.seplog <> derives_trans meth
R99577:99590 VST.msl.seplog <> sepcon_derives meth
R99602:99613 VST.msl.seplog <> derives_refl meth
R99623:99632 VST.msl.seplog <> andp_left1 meth
R99635:99644 VST.msl.seplog <> andp_left1 meth
R99647:99656 VST.msl.seplog <> andp_left1 meth
R99659:99668 VST.msl.seplog <> andp_left2 meth
R99671:99682 VST.msl.seplog <> derives_refl meth
R99555:99567 VST.msl.seplog <> derives_trans meth
R99577:99590 VST.msl.seplog <> sepcon_derives meth
R99602:99613 VST.msl.seplog <> derives_refl meth
R99623:99632 VST.msl.seplog <> andp_left1 meth
R99635:99644 VST.msl.seplog <> andp_left1 meth
R99647:99656 VST.msl.seplog <> andp_left1 meth
R99659:99668 VST.msl.seplog <> andp_left2 meth
R99671:99682 VST.msl.seplog <> derives_refl meth
R99708:99714 VST.msl.log_normalize <> andp_TT thm
R99717:99720 VST.msl.seplog <> prop meth
R99708:99714 VST.msl.log_normalize <> andp_TT thm
R99717:99720 VST.msl.seplog <> prop meth
R99708:99714 VST.msl.log_normalize <> andp_TT thm
R99717:99720 VST.msl.seplog <> prop meth
R99766:99778 VST.msl.seplog <> derives_trans meth
R99788:99801 VST.msl.seplog <> sepcon_derives meth
R99813:99824 VST.msl.seplog <> derives_refl meth
R99834:99843 VST.msl.seplog <> andp_left1 meth
R99846:99855 VST.msl.seplog <> andp_left1 meth
R99858:99867 VST.msl.seplog <> andp_left2 meth
R99870:99881 VST.msl.seplog <> derives_refl meth
R99766:99778 VST.msl.seplog <> derives_trans meth
R99788:99801 VST.msl.seplog <> sepcon_derives meth
R99813:99824 VST.msl.seplog <> derives_refl meth
R99834:99843 VST.msl.seplog <> andp_left1 meth
R99846:99855 VST.msl.seplog <> andp_left1 meth
R99858:99867 VST.msl.seplog <> andp_left2 meth
R99870:99881 VST.msl.seplog <> derives_refl meth
R99903:99914 VST.msl.seplog <> sepcon_assoc meth
R99903:99914 VST.msl.seplog <> sepcon_assoc meth
R99903:99914 VST.msl.seplog <> sepcon_assoc meth
R99931:99944 VST.msl.seplog <> sepcon_derives meth
R99931:99944 VST.msl.seplog <> sepcon_derives meth
R99968:99980 VST.msl.seplog <> derives_trans meth
R99990:100003 VST.msl.seplog <> sepcon_derives meth
R100015:100026 VST.msl.seplog <> derives_refl meth
R100036:100045 VST.msl.seplog <> andp_left1 meth
R100048:100057 VST.msl.seplog <> andp_left2 meth
R100060:100071 VST.msl.seplog <> derives_refl meth
R99968:99980 VST.msl.seplog <> derives_trans meth
R99990:100003 VST.msl.seplog <> sepcon_derives meth
R100015:100026 VST.msl.seplog <> derives_refl meth
R100036:100045 VST.msl.seplog <> andp_left1 meth
R100048:100057 VST.msl.seplog <> andp_left2 meth
R100060:100071 VST.msl.seplog <> derives_refl meth
R100093:100104 VST.msl.seplog <> sepcon_assoc meth
R100093:100104 VST.msl.seplog <> sepcon_assoc meth
R100093:100104 VST.msl.seplog <> sepcon_assoc meth
R100121:100134 VST.msl.seplog <> sepcon_derives meth
R100121:100134 VST.msl.seplog <> sepcon_derives meth
R100158:100170 VST.msl.seplog <> derives_trans meth
R100180:100193 VST.msl.seplog <> sepcon_derives meth
R100205:100216 VST.msl.seplog <> derives_refl meth
R100226:100235 VST.msl.seplog <> andp_left2 meth
R100238:100249 VST.msl.seplog <> derives_refl meth
R100158:100170 VST.msl.seplog <> derives_trans meth
R100180:100193 VST.msl.seplog <> sepcon_derives meth
R100205:100216 VST.msl.seplog <> derives_refl meth
R100226:100235 VST.msl.seplog <> andp_left2 meth
R100238:100249 VST.msl.seplog <> derives_refl meth
R100271:100282 VST.floyd.assert_lemmas <> subst_sepcon thm
R100271:100282 VST.floyd.assert_lemmas <> subst_sepcon thm
R100271:100282 VST.floyd.assert_lemmas <> subst_sepcon thm
R100302:100317 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R100302:100317 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R100302:100317 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R100302:100317 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R100348:100365 VST.veric.SeparationLogic <> closed_wrt_modvars def
R100392:100407 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux thm
R100392:100407 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux thm
R100392:100407 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux thm
R100438:100448 VST.msl.log_normalize <> exp_sepcon1 thm
R100457:100467 VST.floyd.SeparationLogicFacts <> exp_derives thm
R100438:100448 VST.msl.log_normalize <> exp_sepcon1 thm
R100438:100448 VST.msl.log_normalize <> exp_sepcon1 thm
R100457:100467 VST.floyd.SeparationLogicFacts <> exp_derives thm
R100495:100505 VST.msl.log_normalize <> exp_sepcon1 thm
R100514:100524 VST.floyd.SeparationLogicFacts <> exp_derives thm
R100495:100505 VST.msl.log_normalize <> exp_sepcon1 thm
R100495:100505 VST.msl.log_normalize <> exp_sepcon1 thm
R100514:100524 VST.floyd.SeparationLogicFacts <> exp_derives thm
R100552:100562 VST.msl.log_normalize <> exp_sepcon1 thm
R100571:100581 VST.floyd.SeparationLogicFacts <> exp_derives thm
R100552:100562 VST.msl.log_normalize <> exp_sepcon1 thm
R100552:100562 VST.msl.log_normalize <> exp_sepcon1 thm
R100571:100581 VST.floyd.SeparationLogicFacts <> exp_derives thm
R100625:100637 VST.msl.seplog <> derives_trans meth
R100647:100660 VST.msl.seplog <> sepcon_derives meth
R100670:100681 VST.msl.seplog <> derives_refl meth
R100693:100701 VST.msl.seplog <> now_later meth
R100625:100637 VST.msl.seplog <> derives_trans meth
R100647:100660 VST.msl.seplog <> sepcon_derives meth
R100670:100681 VST.msl.seplog <> derives_refl meth
R100693:100701 VST.msl.seplog <> now_later meth
R100724:100735 VST.msl.seplog <> later_sepcon meth
R100724:100735 VST.msl.seplog <> later_sepcon meth
R100724:100735 VST.msl.seplog <> later_sepcon meth
R100750:100762 VST.msl.log_normalize <> later_derives thm
R100750:100762 VST.msl.log_normalize <> later_derives thm
R100777:100786 VST.msl.seplog <> andp_right meth
R100796:100805 VST.msl.seplog <> andp_right meth
R100815:100824 VST.msl.seplog <> andp_right meth
R100777:100786 VST.msl.seplog <> andp_right meth
R100796:100805 VST.msl.seplog <> andp_right meth
R100815:100824 VST.msl.seplog <> andp_right meth
R100848:100860 VST.msl.seplog <> derives_trans meth
R100870:100883 VST.msl.seplog <> sepcon_derives meth
R100895:100906 VST.msl.seplog <> derives_refl meth
R100916:100925 VST.msl.seplog <> andp_left1 meth
R100928:100937 VST.msl.seplog <> andp_left1 meth
R100940:100949 VST.msl.seplog <> andp_left1 meth
R100952:100963 VST.msl.seplog <> derives_refl meth
R100848:100860 VST.msl.seplog <> derives_trans meth
R100870:100883 VST.msl.seplog <> sepcon_derives meth
R100895:100906 VST.msl.seplog <> derives_refl meth
R100916:100925 VST.msl.seplog <> andp_left1 meth
R100928:100937 VST.msl.seplog <> andp_left1 meth
R100940:100949 VST.msl.seplog <> andp_left1 meth
R100952:100963 VST.msl.seplog <> derives_refl meth
R101010:101036 VST.msl.predicates_sl <> extend_sepcon thm
R101039:101064 VST.veric.extend_tc <> extend_tc_lvalue thm
R101010:101036 VST.msl.predicates_sl <> extend_sepcon thm
R101039:101064 VST.veric.extend_tc <> extend_tc_lvalue thm
R101096:101100 VST.veric.SeparationLogic <> local def
R101103:101107 VST.veric.mpred <> lift1 def
R101156:101168 VST.msl.seplog <> derives_trans meth
R101178:101191 VST.msl.seplog <> sepcon_derives meth
R101203:101214 VST.msl.seplog <> derives_refl meth
R101224:101233 VST.msl.seplog <> andp_left1 meth
R101236:101245 VST.msl.seplog <> andp_left1 meth
R101248:101257 VST.msl.seplog <> andp_left2 meth
R101260:101271 VST.msl.seplog <> derives_refl meth
R101156:101168 VST.msl.seplog <> derives_trans meth
R101178:101191 VST.msl.seplog <> sepcon_derives meth
R101203:101214 VST.msl.seplog <> derives_refl meth
R101224:101233 VST.msl.seplog <> andp_left1 meth
R101236:101245 VST.msl.seplog <> andp_left1 meth
R101248:101257 VST.msl.seplog <> andp_left2 meth
R101260:101271 VST.msl.seplog <> derives_refl meth
R101297:101303 VST.msl.log_normalize <> andp_TT thm
R101306:101309 VST.msl.seplog <> prop meth
R101297:101303 VST.msl.log_normalize <> andp_TT thm
R101306:101309 VST.msl.seplog <> prop meth
R101297:101303 VST.msl.log_normalize <> andp_TT thm
R101306:101309 VST.msl.seplog <> prop meth
R101355:101367 VST.msl.seplog <> derives_trans meth
R101377:101390 VST.msl.seplog <> sepcon_derives meth
R101402:101413 VST.msl.seplog <> derives_refl meth
R101423:101432 VST.msl.seplog <> andp_left1 meth
R101435:101444 VST.msl.seplog <> andp_left2 meth
R101447:101458 VST.msl.seplog <> derives_refl meth
R101355:101367 VST.msl.seplog <> derives_trans meth
R101377:101390 VST.msl.seplog <> sepcon_derives meth
R101402:101413 VST.msl.seplog <> derives_refl meth
R101423:101432 VST.msl.seplog <> andp_left1 meth
R101435:101444 VST.msl.seplog <> andp_left2 meth
R101447:101458 VST.msl.seplog <> derives_refl meth
R101480:101491 VST.msl.seplog <> sepcon_assoc meth
R101480:101491 VST.msl.seplog <> sepcon_assoc meth
R101480:101491 VST.msl.seplog <> sepcon_assoc meth
R101508:101521 VST.msl.seplog <> sepcon_derives meth
R101508:101521 VST.msl.seplog <> sepcon_derives meth
R101545:101557 VST.msl.seplog <> derives_trans meth
R101567:101580 VST.msl.seplog <> sepcon_derives meth
R101592:101603 VST.msl.seplog <> derives_refl meth
R101613:101622 VST.msl.seplog <> andp_left2 meth
R101625:101636 VST.msl.seplog <> derives_refl meth
R101545:101557 VST.msl.seplog <> derives_trans meth
R101567:101580 VST.msl.seplog <> sepcon_derives meth
R101592:101603 VST.msl.seplog <> derives_refl meth
R101613:101622 VST.msl.seplog <> andp_left2 meth
R101625:101636 VST.msl.seplog <> derives_refl meth
R101658:101669 VST.floyd.assert_lemmas <> subst_sepcon thm
R101658:101669 VST.floyd.assert_lemmas <> subst_sepcon thm
R101658:101669 VST.floyd.assert_lemmas <> subst_sepcon thm
R101689:101704 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R101689:101704 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R101689:101704 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R101689:101704 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R101735:101752 VST.veric.SeparationLogic <> closed_wrt_modvars def
R101779:101794 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux thm
R101779:101794 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux thm
R101779:101794 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux thm
R101825:101835 VST.msl.log_normalize <> exp_sepcon1 thm
R101844:101854 VST.floyd.SeparationLogicFacts <> exp_derives thm
R101825:101835 VST.msl.log_normalize <> exp_sepcon1 thm
R101825:101835 VST.msl.log_normalize <> exp_sepcon1 thm
R101844:101854 VST.floyd.SeparationLogicFacts <> exp_derives thm
R101882:101892 VST.msl.log_normalize <> exp_sepcon1 thm
R101901:101911 VST.floyd.SeparationLogicFacts <> exp_derives thm
R101882:101892 VST.msl.log_normalize <> exp_sepcon1 thm
R101882:101892 VST.msl.log_normalize <> exp_sepcon1 thm
R101901:101911 VST.floyd.SeparationLogicFacts <> exp_derives thm
R101939:101949 VST.msl.log_normalize <> exp_sepcon1 thm
R101958:101968 VST.floyd.SeparationLogicFacts <> exp_derives thm
R101939:101949 VST.msl.log_normalize <> exp_sepcon1 thm
R101939:101949 VST.msl.log_normalize <> exp_sepcon1 thm
R101958:101968 VST.floyd.SeparationLogicFacts <> exp_derives thm
R101996:102006 VST.msl.log_normalize <> exp_sepcon1 thm
R102015:102025 VST.floyd.SeparationLogicFacts <> exp_derives thm
R101996:102006 VST.msl.log_normalize <> exp_sepcon1 thm
R101996:102006 VST.msl.log_normalize <> exp_sepcon1 thm
R102015:102025 VST.floyd.SeparationLogicFacts <> exp_derives thm
R102069:102081 VST.msl.seplog <> derives_trans meth
R102091:102104 VST.msl.seplog <> sepcon_derives meth
R102114:102125 VST.msl.seplog <> derives_refl meth
R102137:102145 VST.msl.seplog <> now_later meth
R102069:102081 VST.msl.seplog <> derives_trans meth
R102091:102104 VST.msl.seplog <> sepcon_derives meth
R102114:102125 VST.msl.seplog <> derives_refl meth
R102137:102145 VST.msl.seplog <> now_later meth
R102168:102179 VST.msl.seplog <> later_sepcon meth
R102168:102179 VST.msl.seplog <> later_sepcon meth
R102168:102179 VST.msl.seplog <> later_sepcon meth
R102194:102206 VST.msl.log_normalize <> later_derives thm
R102194:102206 VST.msl.log_normalize <> later_derives thm
R102221:102230 VST.msl.seplog <> andp_right meth
R102240:102249 VST.msl.seplog <> andp_right meth
R102259:102268 VST.msl.seplog <> andp_right meth
R102221:102230 VST.msl.seplog <> andp_right meth
R102240:102249 VST.msl.seplog <> andp_right meth
R102259:102268 VST.msl.seplog <> andp_right meth
R102292:102304 VST.msl.seplog <> derives_trans meth
R102314:102327 VST.msl.seplog <> sepcon_derives meth
R102339:102350 VST.msl.seplog <> derives_refl meth
R102360:102369 VST.msl.seplog <> andp_left1 meth
R102372:102381 VST.msl.seplog <> andp_left1 meth
R102384:102393 VST.msl.seplog <> andp_left1 meth
R102396:102407 VST.msl.seplog <> derives_refl meth
R102292:102304 VST.msl.seplog <> derives_trans meth
R102314:102327 VST.msl.seplog <> sepcon_derives meth
R102339:102350 VST.msl.seplog <> derives_refl meth
R102360:102369 VST.msl.seplog <> andp_left1 meth
R102372:102381 VST.msl.seplog <> andp_left1 meth
R102384:102393 VST.msl.seplog <> andp_left1 meth
R102396:102407 VST.msl.seplog <> derives_refl meth
R102454:102480 VST.msl.predicates_sl <> extend_sepcon thm
R102483:102508 VST.veric.extend_tc <> extend_tc_lvalue thm
R102454:102480 VST.msl.predicates_sl <> extend_sepcon thm
R102483:102508 VST.veric.extend_tc <> extend_tc_lvalue thm
R102541:102545 VST.veric.SeparationLogic <> local def
R102548:102552 VST.veric.mpred <> lift1 def
R102601:102613 VST.msl.seplog <> derives_trans meth
R102623:102636 VST.msl.seplog <> sepcon_derives meth
R102648:102659 VST.msl.seplog <> derives_refl meth
R102669:102678 VST.msl.seplog <> andp_left1 meth
R102681:102690 VST.msl.seplog <> andp_left1 meth
R102693:102702 VST.msl.seplog <> andp_left2 meth
R102705:102716 VST.msl.seplog <> derives_refl meth
R102601:102613 VST.msl.seplog <> derives_trans meth
R102623:102636 VST.msl.seplog <> sepcon_derives meth
R102648:102659 VST.msl.seplog <> derives_refl meth
R102669:102678 VST.msl.seplog <> andp_left1 meth
R102681:102690 VST.msl.seplog <> andp_left1 meth
R102693:102702 VST.msl.seplog <> andp_left2 meth
R102705:102716 VST.msl.seplog <> derives_refl meth
R102742:102748 VST.msl.log_normalize <> andp_TT thm
R102751:102754 VST.msl.seplog <> prop meth
R102742:102748 VST.msl.log_normalize <> andp_TT thm
R102751:102754 VST.msl.seplog <> prop meth
R102742:102748 VST.msl.log_normalize <> andp_TT thm
R102751:102754 VST.msl.seplog <> prop meth
R102800:102812 VST.msl.seplog <> derives_trans meth
R102822:102835 VST.msl.seplog <> sepcon_derives meth
R102847:102858 VST.msl.seplog <> derives_refl meth
R102868:102877 VST.msl.seplog <> andp_left1 meth
R102880:102889 VST.msl.seplog <> andp_left2 meth
R102892:102903 VST.msl.seplog <> derives_refl meth
R102800:102812 VST.msl.seplog <> derives_trans meth
R102822:102835 VST.msl.seplog <> sepcon_derives meth
R102847:102858 VST.msl.seplog <> derives_refl meth
R102868:102877 VST.msl.seplog <> andp_left1 meth
R102880:102889 VST.msl.seplog <> andp_left2 meth
R102892:102903 VST.msl.seplog <> derives_refl meth
R102925:102936 VST.msl.seplog <> sepcon_assoc meth
R102925:102936 VST.msl.seplog <> sepcon_assoc meth
R102925:102936 VST.msl.seplog <> sepcon_assoc meth
R102953:102966 VST.msl.seplog <> sepcon_derives meth
R102953:102966 VST.msl.seplog <> sepcon_derives meth
R102990:103002 VST.msl.seplog <> derives_trans meth
R103012:103025 VST.msl.seplog <> sepcon_derives meth
R103037:103048 VST.msl.seplog <> derives_refl meth
R103058:103067 VST.msl.seplog <> andp_left2 meth
R103070:103081 VST.msl.seplog <> derives_refl meth
R102990:103002 VST.msl.seplog <> derives_trans meth
R103012:103025 VST.msl.seplog <> sepcon_derives meth
R103037:103048 VST.msl.seplog <> derives_refl meth
R103058:103067 VST.msl.seplog <> andp_left2 meth
R103070:103081 VST.msl.seplog <> derives_refl meth
R103103:103114 VST.floyd.assert_lemmas <> subst_sepcon thm
R103103:103114 VST.floyd.assert_lemmas <> subst_sepcon thm
R103103:103114 VST.floyd.assert_lemmas <> subst_sepcon thm
R103134:103149 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R103134:103149 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R103134:103149 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R103134:103149 VST.floyd.SeparationLogicFacts <> closed_wrt_subst thm
R103180:103197 VST.veric.SeparationLogic <> closed_wrt_modvars def
R103224:103239 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux thm
R103224:103239 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux thm
R103224:103239 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic modifiedvars_aux thm
R103268:103279 VST.floyd.assert_lemmas <> frame_normal thm
R103268:103279 VST.floyd.assert_lemmas <> frame_normal thm
R103268:103279 VST.floyd.assert_lemmas <> frame_normal thm
R103293:103301 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R103313:103357 VST.floyd.SeparationLogicAsLogic AuxDefs semax_store_store_union_hack_backward constr
R103293:103301 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R103313:103357 VST.floyd.SeparationLogicAsLogic AuxDefs semax_store_store_union_hack_backward constr
R103371:103380 VST.msl.seplog <> andp_left2 meth
R103371:103380 VST.msl.seplog <> andp_left2 meth
R103395:103412 VST.msl.log_normalize <> distrib_orp_sepcon thm
R103395:103412 VST.msl.log_normalize <> distrib_orp_sepcon thm
R103395:103412 VST.msl.log_normalize <> distrib_orp_sepcon thm
R103425:103435 VST.msl.log_normalize <> orp_derives thm
R103425:103435 VST.msl.log_normalize <> orp_derives thm
R103452:103462 VST.msl.log_normalize <> exp_sepcon1 thm
R103471:103481 VST.floyd.SeparationLogicFacts <> exp_derives thm
R103452:103462 VST.msl.log_normalize <> exp_sepcon1 thm
R103452:103462 VST.msl.log_normalize <> exp_sepcon1 thm
R103471:103481 VST.floyd.SeparationLogicFacts <> exp_derives thm
R103525:103537 VST.msl.seplog <> derives_trans meth
R103547:103560 VST.msl.seplog <> sepcon_derives meth
R103570:103581 VST.msl.seplog <> derives_refl meth
R103593:103601 VST.msl.seplog <> now_later meth
R103525:103537 VST.msl.seplog <> derives_trans meth
R103547:103560 VST.msl.seplog <> sepcon_derives meth
R103570:103581 VST.msl.seplog <> derives_refl meth
R103593:103601 VST.msl.seplog <> now_later meth
R103624:103635 VST.msl.seplog <> later_sepcon meth
R103624:103635 VST.msl.seplog <> later_sepcon meth
R103624:103635 VST.msl.seplog <> later_sepcon meth
R103650:103662 VST.msl.log_normalize <> later_derives thm
R103650:103662 VST.msl.log_normalize <> later_derives thm
R103677:103686 VST.msl.seplog <> andp_right meth
R103677:103686 VST.msl.seplog <> andp_right meth
R103704:103716 VST.msl.seplog <> derives_trans meth
R103726:103739 VST.msl.seplog <> sepcon_derives meth
R103751:103762 VST.msl.seplog <> derives_refl meth
R103772:103781 VST.msl.seplog <> andp_left1 meth
R103784:103795 VST.msl.seplog <> derives_refl meth
R103704:103716 VST.msl.seplog <> derives_trans meth
R103726:103739 VST.msl.seplog <> sepcon_derives meth
R103751:103762 VST.msl.seplog <> derives_refl meth
R103772:103781 VST.msl.seplog <> andp_left1 meth
R103784:103795 VST.msl.seplog <> derives_refl meth
R103842:103868 VST.msl.predicates_sl <> extend_sepcon thm
R103871:103891 VST.veric.extend_tc <> extend_andp thm
R103940:103963 VST.veric.extend_tc <> extend_tc_expr thm
R103972:103976 compcert.cfrontend.Clight <> Ecast constr
R103982:103987 compcert.cfrontend.Clight <> typeof def
R103898:103923 VST.veric.extend_tc <> extend_tc_lvalue thm
R103842:103868 VST.msl.predicates_sl <> extend_sepcon thm
R103871:103891 VST.veric.extend_tc <> extend_andp thm
R103940:103963 VST.veric.extend_tc <> extend_tc_expr thm
R103972:103976 compcert.cfrontend.Clight <> Ecast constr
R103982:103987 compcert.cfrontend.Clight <> typeof def
R103898:103923 VST.veric.extend_tc <> extend_tc_lvalue thm
R104017:104029 VST.msl.seplog <> derives_trans meth
R104039:104052 VST.msl.seplog <> sepcon_derives meth
R104064:104075 VST.msl.seplog <> derives_refl meth
R104085:104094 VST.msl.seplog <> andp_left2 meth
R104097:104108 VST.msl.seplog <> derives_refl meth
R104017:104029 VST.msl.seplog <> derives_trans meth
R104039:104052 VST.msl.seplog <> sepcon_derives meth
R104064:104075 VST.msl.seplog <> derives_refl meth
R104085:104094 VST.msl.seplog <> andp_left2 meth
R104097:104108 VST.msl.seplog <> derives_refl meth
R104130:104141 VST.msl.seplog <> sepcon_assoc meth
R104150:104163 VST.msl.seplog <> sepcon_derives meth
R104130:104141 VST.msl.seplog <> sepcon_assoc meth
R104130:104141 VST.msl.seplog <> sepcon_assoc meth
R104150:104163 VST.msl.seplog <> sepcon_derives meth
R104192:104201 VST.msl.seplog <> sepcon_emp meth
R104204:104207 VST.veric.lift LiftNotation :::'`'_x not
R104229:104337 VST.veric.lift LiftNotation :::'`'_x not
R104208:104213 VST.veric.SeparationLogic <> mapsto def
R104219:104224 compcert.cfrontend.Clight <> typeof def
R104271:104274 VST.veric.lift LiftNotation :::'`'_x not
R104320:104336 VST.veric.lift LiftNotation :::'`'_x not
R104284:104287 VST.floyd.assert_lemmas <> :::x_'oo'_x not
R104275:104283 VST.veric.val_lemmas <> force_val def
R104288:104295 VST.veric.Clight_Cop2 <> sem_cast def
R104310:104315 compcert.cfrontend.Clight <> typeof def
R104298:104303 compcert.cfrontend.Clight <> typeof def
R104324:104332 VST.veric.expr <> eval_expr def
R104233:104243 VST.veric.expr <> eval_lvalue def
R104192:104201 VST.msl.seplog <> sepcon_emp meth
R104204:104207 VST.veric.lift LiftNotation :::'`'_x not
R104229:104337 VST.veric.lift LiftNotation :::'`'_x not
R104208:104213 VST.veric.SeparationLogic <> mapsto def
R104219:104224 compcert.cfrontend.Clight <> typeof def
R104271:104274 VST.veric.lift LiftNotation :::'`'_x not
R104320:104336 VST.veric.lift LiftNotation :::'`'_x not
R104284:104287 VST.floyd.assert_lemmas <> :::x_'oo'_x not
R104275:104283 VST.veric.val_lemmas <> force_val def
R104288:104295 VST.veric.Clight_Cop2 <> sem_cast def
R104310:104315 compcert.cfrontend.Clight <> typeof def
R104298:104303 compcert.cfrontend.Clight <> typeof def
R104324:104332 VST.veric.expr <> eval_expr def
R104233:104243 VST.veric.expr <> eval_lvalue def
R104192:104201 VST.msl.seplog <> sepcon_emp meth
R104204:104207 VST.veric.lift LiftNotation :::'`'_x not
R104229:104337 VST.veric.lift LiftNotation :::'`'_x not
R104208:104213 VST.veric.SeparationLogic <> mapsto def
R104219:104224 compcert.cfrontend.Clight <> typeof def
R104271:104274 VST.veric.lift LiftNotation :::'`'_x not
R104320:104336 VST.veric.lift LiftNotation :::'`'_x not
R104284:104287 VST.floyd.assert_lemmas <> :::x_'oo'_x not
R104275:104283 VST.veric.val_lemmas <> force_val def
R104288:104295 VST.veric.Clight_Cop2 <> sem_cast def
R104310:104315 compcert.cfrontend.Clight <> typeof def
R104298:104303 compcert.cfrontend.Clight <> typeof def
R104324:104332 VST.veric.expr <> eval_expr def
R104233:104243 VST.veric.expr <> eval_lvalue def
R104362:104374 VST.msl.seplog <> derives_trans meth
R104386:104399 VST.msl.wand_frame <> wand_frame_hor thm
R104362:104374 VST.msl.seplog <> derives_trans meth
R104386:104399 VST.msl.wand_frame <> wand_frame_hor thm
R104417:104430 VST.msl.seplog <> sepcon_derives meth
R104440:104451 VST.msl.seplog <> derives_refl meth
R104417:104430 VST.msl.seplog <> sepcon_derives meth
R104440:104451 VST.msl.seplog <> derives_refl meth
R104476:104494 VST.msl.seplog <> wand_sepcon_adjoint meth
R104476:104494 VST.msl.seplog <> wand_sepcon_adjoint meth
R104476:104494 VST.msl.seplog <> wand_sepcon_adjoint meth
R104513:104522 VST.msl.seplog <> sepcon_emp meth
R104513:104522 VST.msl.seplog <> sepcon_emp meth
R104513:104522 VST.msl.seplog <> sepcon_emp meth
R104545:104555 VST.msl.log_normalize <> exp_sepcon1 thm
R104564:104574 VST.floyd.SeparationLogicFacts <> exp_derives thm
R104545:104555 VST.msl.log_normalize <> exp_sepcon1 thm
R104545:104555 VST.msl.log_normalize <> exp_sepcon1 thm
R104564:104574 VST.floyd.SeparationLogicFacts <> exp_derives thm
R104602:104612 VST.msl.log_normalize <> exp_sepcon1 thm
R104621:104631 VST.floyd.SeparationLogicFacts <> exp_derives thm
R104602:104612 VST.msl.log_normalize <> exp_sepcon1 thm
R104602:104612 VST.msl.log_normalize <> exp_sepcon1 thm
R104621:104631 VST.floyd.SeparationLogicFacts <> exp_derives thm
R104659:104669 VST.msl.log_normalize <> exp_sepcon1 thm
R104678:104688 VST.floyd.SeparationLogicFacts <> exp_derives thm
R104659:104669 VST.msl.log_normalize <> exp_sepcon1 thm
R104659:104669 VST.msl.log_normalize <> exp_sepcon1 thm
R104678:104688 VST.floyd.SeparationLogicFacts <> exp_derives thm
R104717:104727 VST.msl.log_normalize <> exp_sepcon1 thm
R104736:104746 VST.floyd.SeparationLogicFacts <> exp_derives thm
R104717:104727 VST.msl.log_normalize <> exp_sepcon1 thm
R104717:104727 VST.msl.log_normalize <> exp_sepcon1 thm
R104736:104746 VST.floyd.SeparationLogicFacts <> exp_derives thm
R104790:104802 VST.msl.seplog <> derives_trans meth
R104812:104825 VST.msl.seplog <> sepcon_derives meth
R104835:104846 VST.msl.seplog <> derives_refl meth
R104858:104866 VST.msl.seplog <> now_later meth
R104790:104802 VST.msl.seplog <> derives_trans meth
R104812:104825 VST.msl.seplog <> sepcon_derives meth
R104835:104846 VST.msl.seplog <> derives_refl meth
R104858:104866 VST.msl.seplog <> now_later meth
R104889:104900 VST.msl.seplog <> later_sepcon meth
R104889:104900 VST.msl.seplog <> later_sepcon meth
R104889:104900 VST.msl.seplog <> later_sepcon meth
R104915:104927 VST.msl.log_normalize <> later_derives thm
R104915:104927 VST.msl.log_normalize <> later_derives thm
R104942:104951 VST.msl.seplog <> andp_right meth
R104942:104951 VST.msl.seplog <> andp_right meth
R104969:104981 VST.msl.seplog <> derives_trans meth
R104991:105004 VST.msl.seplog <> sepcon_derives meth
R105016:105027 VST.msl.seplog <> derives_refl meth
R105037:105046 VST.msl.seplog <> andp_left1 meth
R105049:105060 VST.msl.seplog <> derives_refl meth
R104969:104981 VST.msl.seplog <> derives_trans meth
R104991:105004 VST.msl.seplog <> sepcon_derives meth
R105016:105027 VST.msl.seplog <> derives_refl meth
R105037:105046 VST.msl.seplog <> andp_left1 meth
R105049:105060 VST.msl.seplog <> derives_refl meth
R105107:105133 VST.msl.predicates_sl <> extend_sepcon thm
R105136:105156 VST.veric.extend_tc <> extend_andp thm
R105205:105228 VST.veric.extend_tc <> extend_tc_expr thm
R105237:105241 compcert.cfrontend.Clight <> Ecast constr
R105247:105252 compcert.cfrontend.Clight <> typeof def
R105163:105188 VST.veric.extend_tc <> extend_tc_lvalue thm
R105107:105133 VST.msl.predicates_sl <> extend_sepcon thm
R105136:105156 VST.veric.extend_tc <> extend_andp thm
R105205:105228 VST.veric.extend_tc <> extend_tc_expr thm
R105237:105241 compcert.cfrontend.Clight <> Ecast constr
R105247:105252 compcert.cfrontend.Clight <> typeof def
R105163:105188 VST.veric.extend_tc <> extend_tc_lvalue thm
R105282:105294 VST.msl.seplog <> derives_trans meth
R105304:105317 VST.msl.seplog <> sepcon_derives meth
R105329:105340 VST.msl.seplog <> derives_refl meth
R105350:105359 VST.msl.seplog <> andp_left2 meth
R105362:105373 VST.msl.seplog <> derives_refl meth
R105282:105294 VST.msl.seplog <> derives_trans meth
R105304:105317 VST.msl.seplog <> sepcon_derives meth
R105329:105340 VST.msl.seplog <> derives_refl meth
R105350:105359 VST.msl.seplog <> andp_left2 meth
R105362:105373 VST.msl.seplog <> derives_refl meth
R105395:105406 VST.msl.seplog <> sepcon_assoc meth
R105415:105428 VST.msl.seplog <> sepcon_derives meth
R105395:105406 VST.msl.seplog <> sepcon_assoc meth
R105395:105406 VST.msl.seplog <> sepcon_assoc meth
R105415:105428 VST.msl.seplog <> sepcon_derives meth
R105451:105460 VST.msl.seplog <> allp_right meth
R105451:105460 VST.msl.seplog <> allp_right meth
R105488:105506 VST.msl.seplog <> wand_sepcon_adjoint meth
R105488:105506 VST.msl.seplog <> wand_sepcon_adjoint meth
R105523:105531 VST.msl.seplog <> allp_left meth
R105523:105531 VST.msl.seplog <> allp_left meth
R105556:105574 VST.msl.seplog <> wand_sepcon_adjoint meth
R105556:105574 VST.msl.seplog <> wand_sepcon_adjoint meth
R105597:105604 VST.msl.log_normalize <> emp_wand thm
R105597:105604 VST.msl.log_normalize <> emp_wand thm
R105597:105604 VST.msl.log_normalize <> emp_wand thm
R105630:105642 VST.msl.seplog <> derives_trans meth
R105652:105665 VST.msl.wand_frame <> wand_frame_hor thm
R105630:105642 VST.msl.seplog <> derives_trans meth
R105652:105665 VST.msl.wand_frame <> wand_frame_hor thm
R105685:105696 VST.msl.log_normalize <> wand_derives thm
R105708:105717 VST.msl.seplog <> sepcon_emp meth
R105685:105696 VST.msl.log_normalize <> wand_derives thm
R105708:105717 VST.msl.seplog <> sepcon_emp meth
R105708:105717 VST.msl.seplog <> sepcon_emp meth
R105743:105758 VST.msl.seplog <> imp_andp_adjoint meth
R105743:105758 VST.msl.seplog <> imp_andp_adjoint meth
R105829:105840 VST.msl.seplog <> corable_prop meth
R105777:105785 VST.msl.log_normalize <> andp_comm thm
R105791:105810 VST.msl.log_normalize <> corable_andp_sepcon2 thm
R105777:105785 VST.msl.log_normalize <> andp_comm thm
R105777:105785 VST.msl.log_normalize <> andp_comm thm
R105791:105810 VST.msl.log_normalize <> corable_andp_sepcon2 thm
R105829:105840 VST.msl.seplog <> corable_prop meth
R105791:105810 VST.msl.log_normalize <> corable_andp_sepcon2 thm
R105858:105871 VST.msl.seplog <> sepcon_derives meth
R105858:105871 VST.msl.seplog <> sepcon_derives meth
R105894:105909 VST.msl.seplog <> imp_andp_adjoint meth
R105894:105909 VST.msl.seplog <> imp_andp_adjoint meth
R105938:105949 VST.floyd.assert_lemmas <> frame_normal thm
R105938:105949 VST.floyd.assert_lemmas <> frame_normal thm
R105938:105949 VST.floyd.assert_lemmas <> frame_normal thm
R105962:105979 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R105962:105979 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R105994:106002 VST.msl.log_normalize <> FF_sepcon thm
R105994:106002 VST.msl.log_normalize <> FF_sepcon thm
R105994:106002 VST.msl.log_normalize <> FF_sepcon thm
R106015:106035 VST.floyd.SeparationLogicAsLogic AuxDefs semax_builtin constr
R106015:106035 VST.floyd.SeparationLogicAsLogic AuxDefs semax_builtin constr
R106048:106066 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
R106048:106066 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
R106106:106114 VST.msl.log_normalize <> FF_sepcon thm
R106106:106114 VST.msl.log_normalize <> FF_sepcon thm
R106106:106114 VST.msl.log_normalize <> FF_sepcon thm
R106127:106144 VST.floyd.SeparationLogicAsLogic AuxDefs semax_goto constr
R106127:106144 VST.floyd.SeparationLogicAsLogic AuxDefs semax_goto constr
R106158:106169 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_conseq def
R106158:106169 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_conseq def
R106212:106230 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic sepcon_derives_full thm
R106212:106230 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic sepcon_derives_full thm
R106315:106333 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic sepcon_derives_full thm
R106315:106333 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic sepcon_derives_full thm
R106418:106436 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic sepcon_derives_full thm
R106418:106436 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic sepcon_derives_full thm
R106521:106539 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic sepcon_derives_full thm
R106521:106539 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic sepcon_derives_full thm
R106632:106650 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic sepcon_derives_full thm
R106632:106650 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic sepcon_derives_full thm
prf 106713:106729 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_adapt_frame
binder 106732:106733 <> cs:732
binder 106735:106739 <> Espec:733
binder 106742:106746 <> Delta:734
binder 106748:106748 <> c:735
R106757:106762 VST.veric.mpred <> assert def
binder 106751:106751 <> P:736
binder 106753:106754 <> P':737
R106773:106782 VST.veric.tycontext <> ret_assert rec
binder 106766:106766 <> Q:738
binder 106768:106769 <> Q':739
binder 106799:106801 <> rho:740
R106805:106811 VST.msl.seplog <> derives meth
R106903:106905 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R106915:106917 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R107635:107635 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R106909:106914 VST.veric.mpred <> assert def
binder 106906:106906 <> F:741
R107461:107489 VST.msl.seplog <> ::logic:x_'&&'_x not
R107292:107320 VST.msl.seplog <> ::logic:x_'&&'_x not
R107129:107157 VST.msl.seplog <> ::logic:x_'&&'_x not
R106964:106992 VST.msl.seplog <> ::logic:x_'&&'_x not
R106944:106948 VST.msl.seplog <> ::logic:x_'&&'_x not
R106963:106963 VST.msl.seplog <> ::logic:x_'&&'_x not
R106918:106920 VST.msl.seplog <> ::logic:'!!'_x not
R106943:106943 VST.msl.seplog <> ::logic:'!!'_x not
R106921:106938 VST.veric.SeparationLogic <> closed_wrt_modvars def
R106942:106942 VST.floyd.SeparationLogicAsLogic <> F:741 var
R106940:106940 VST.floyd.SeparationLogicAsLogic <> c:735 var
R106955:106957 VST.msl.seplog <> ::logic:x_'*'_x not
R106949:106950 VST.floyd.SeparationLogicAsLogic <> P':737 var
R106952:106954 VST.floyd.SeparationLogicAsLogic <> rho:740 var
R106958:106958 VST.floyd.SeparationLogicAsLogic <> F:741 var
R106960:106962 VST.floyd.SeparationLogicAsLogic <> rho:740 var
R106993:106995 VST.msl.seplog <> ::logic:'!!'_x not
R107128:107128 VST.msl.seplog <> ::logic:'!!'_x not
binder 107003:107005 <> rho:742
R107108:107112 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R107067:107070 VST.msl.seplog <> ::logic:x_'&&'_x not
R107008:107008 VST.msl.seplog <> ::logic:x_'&&'_x not
R107037:107043 VST.msl.seplog <> ::logic:x_'&&'_x not
R107065:107066 VST.msl.seplog <> ::logic:x_'&&'_x not
R107009:107013 VST.veric.SeparationLogic <> local def
R107034:107036 VST.floyd.SeparationLogicAsLogic <> rho:742 var
R107016:107025 VST.veric.SeparationLogic <> tc_environ def
R107027:107031 VST.floyd.SeparationLogicAsLogic <> Delta:734 var
R107044:107054 VST.veric.SeparationLogic <> allp_fun_id def
R107062:107064 VST.floyd.SeparationLogicAsLogic <> rho:742 var
R107056:107060 VST.floyd.SeparationLogicAsLogic <> Delta:734 var
R107071:107079 VST.veric.tycontext <> RA_normal proj
R107105:107107 VST.floyd.SeparationLogicAsLogic <> rho:742 var
R107082:107097 VST.veric.SeparationLogic <> frame_ret_assert def
R107102:107102 VST.floyd.SeparationLogicAsLogic <> F:741 var
R107099:107100 VST.floyd.SeparationLogicAsLogic <> Q':739 var
R107113:107121 VST.veric.tycontext <> RA_normal proj
R107125:107127 VST.floyd.SeparationLogicAsLogic <> rho:742 var
R107123:107123 VST.floyd.SeparationLogicAsLogic <> Q:738 var
R107158:107160 VST.msl.seplog <> ::logic:'!!'_x not
R107291:107291 VST.msl.seplog <> ::logic:'!!'_x not
binder 107168:107170 <> rho:743
R107272:107276 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R107232:107235 VST.msl.seplog <> ::logic:x_'&&'_x not
R107173:107173 VST.msl.seplog <> ::logic:x_'&&'_x not
R107202:107208 VST.msl.seplog <> ::logic:x_'&&'_x not
R107230:107231 VST.msl.seplog <> ::logic:x_'&&'_x not
R107174:107178 VST.veric.SeparationLogic <> local def
R107199:107201 VST.floyd.SeparationLogicAsLogic <> rho:743 var
R107181:107190 VST.veric.SeparationLogic <> tc_environ def
R107192:107196 VST.floyd.SeparationLogicAsLogic <> Delta:734 var
R107209:107219 VST.veric.SeparationLogic <> allp_fun_id def
R107227:107229 VST.floyd.SeparationLogicAsLogic <> rho:743 var
R107221:107225 VST.floyd.SeparationLogicAsLogic <> Delta:734 var
R107236:107243 VST.veric.tycontext <> RA_break proj
R107269:107271 VST.floyd.SeparationLogicAsLogic <> rho:743 var
R107246:107261 VST.veric.SeparationLogic <> frame_ret_assert def
R107266:107266 VST.floyd.SeparationLogicAsLogic <> F:741 var
R107263:107264 VST.floyd.SeparationLogicAsLogic <> Q':739 var
R107277:107284 VST.veric.tycontext <> RA_break proj
R107288:107290 VST.floyd.SeparationLogicAsLogic <> rho:743 var
R107286:107286 VST.floyd.SeparationLogicAsLogic <> Q:738 var
R107321:107323 VST.msl.seplog <> ::logic:'!!'_x not
R107460:107460 VST.msl.seplog <> ::logic:'!!'_x not
binder 107331:107333 <> rho:744
R107438:107442 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R107395:107398 VST.msl.seplog <> ::logic:x_'&&'_x not
R107336:107336 VST.msl.seplog <> ::logic:x_'&&'_x not
R107365:107371 VST.msl.seplog <> ::logic:x_'&&'_x not
R107393:107394 VST.msl.seplog <> ::logic:x_'&&'_x not
R107337:107341 VST.veric.SeparationLogic <> local def
R107362:107364 VST.floyd.SeparationLogicAsLogic <> rho:744 var
R107344:107353 VST.veric.SeparationLogic <> tc_environ def
R107355:107359 VST.floyd.SeparationLogicAsLogic <> Delta:734 var
R107372:107382 VST.veric.SeparationLogic <> allp_fun_id def
R107390:107392 VST.floyd.SeparationLogicAsLogic <> rho:744 var
R107384:107388 VST.floyd.SeparationLogicAsLogic <> Delta:734 var
R107399:107409 VST.veric.tycontext <> RA_continue proj
R107435:107437 VST.floyd.SeparationLogicAsLogic <> rho:744 var
R107412:107427 VST.veric.SeparationLogic <> frame_ret_assert def
R107432:107432 VST.floyd.SeparationLogicAsLogic <> F:741 var
R107429:107430 VST.floyd.SeparationLogicAsLogic <> Q':739 var
R107443:107453 VST.veric.tycontext <> RA_continue proj
R107457:107459 VST.floyd.SeparationLogicAsLogic <> rho:744 var
R107455:107455 VST.floyd.SeparationLogicAsLogic <> Q:738 var
R107490:107492 VST.msl.seplog <> ::logic:'!!'_x not
R107634:107634 VST.msl.seplog <> ::logic:'!!'_x not
binder 107500:107501 <> vl:745
binder 107503:107505 <> rho:746
R107611:107615 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R107567:107570 VST.msl.seplog <> ::logic:x_'&&'_x not
R107508:107508 VST.msl.seplog <> ::logic:x_'&&'_x not
R107537:107543 VST.msl.seplog <> ::logic:x_'&&'_x not
R107565:107566 VST.msl.seplog <> ::logic:x_'&&'_x not
R107509:107513 VST.veric.SeparationLogic <> local def
R107534:107536 VST.floyd.SeparationLogicAsLogic <> rho:746 var
R107516:107525 VST.veric.SeparationLogic <> tc_environ def
R107527:107531 VST.floyd.SeparationLogicAsLogic <> Delta:734 var
R107544:107554 VST.veric.SeparationLogic <> allp_fun_id def
R107562:107564 VST.floyd.SeparationLogicAsLogic <> rho:746 var
R107556:107560 VST.floyd.SeparationLogicAsLogic <> Delta:734 var
R107571:107579 VST.veric.tycontext <> RA_return proj
R107608:107610 VST.floyd.SeparationLogicAsLogic <> rho:746 var
R107605:107606 VST.floyd.SeparationLogicAsLogic <> vl:745 var
R107582:107597 VST.veric.SeparationLogic <> frame_ret_assert def
R107602:107602 VST.floyd.SeparationLogicAsLogic <> F:741 var
R107599:107600 VST.floyd.SeparationLogicAsLogic <> Q':739 var
R107616:107624 VST.veric.tycontext <> RA_return proj
R107631:107633 VST.floyd.SeparationLogicAsLogic <> rho:746 var
R107628:107629 VST.floyd.SeparationLogicAsLogic <> vl:745 var
R107626:107626 VST.floyd.SeparationLogicAsLogic <> Q:738 var
R106845:106849 VST.msl.seplog <> ::logic:x_'&&'_x not
R106880:106880 VST.msl.seplog <> ::logic:x_'&&'_x not
R106814:106816 VST.msl.seplog <> ::logic:'!!'_x not
R106844:106844 VST.msl.seplog <> ::logic:'!!'_x not
R106817:106833 VST.veric.seplog <> typecheck_environ def
R106841:106843 VST.floyd.SeparationLogicAsLogic <> rho:740 var
R106835:106839 VST.floyd.SeparationLogicAsLogic <> Delta:734 var
R106871:106874 VST.msl.seplog <> ::logic:x_'&&'_x not
R106850:106860 VST.veric.SeparationLogic <> allp_fun_id def
R106868:106870 VST.floyd.SeparationLogicAsLogic <> rho:740 var
R106862:106866 VST.floyd.SeparationLogicAsLogic <> Delta:734 var
R106875:106875 VST.floyd.SeparationLogicAsLogic <> P:736 var
R106877:106879 VST.floyd.SeparationLogicAsLogic <> rho:740 var
binder 106789:106789 <> H:747
R107649:107653 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R107675:107676 VST.floyd.SeparationLogicAsLogic <> Q':739 var
R107673:107673 VST.floyd.SeparationLogicAsLogic <> c:735 var
R107670:107671 VST.floyd.SeparationLogicAsLogic <> P':737 var
R107664:107668 VST.floyd.SeparationLogicAsLogic <> Delta:734 var
R107658:107662 VST.floyd.SeparationLogicAsLogic <> Espec:733 var
R107655:107656 VST.floyd.SeparationLogicAsLogic <> cs:732 var
binder 107643:107645 <> SEM:748
R107684:107688 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R107709:107709 VST.floyd.SeparationLogicAsLogic <> Q:738 var
R107707:107707 VST.floyd.SeparationLogicAsLogic <> c:735 var
R107705:107705 VST.floyd.SeparationLogicAsLogic <> P:736 var
R107699:107703 VST.floyd.SeparationLogicAsLogic <> Delta:734 var
R107693:107697 VST.floyd.SeparationLogicAsLogic <> Espec:733 var
R107690:107691 VST.floyd.SeparationLogicAsLogic <> cs:732 var
R107736:107747 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_conseq def
binder 107769:107771 <> rho:749
R107776:107778 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R107788:107789 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R107782:107787 VST.veric.mpred <> assert def
binder 107779:107779 <> F:750
R107816:107820 VST.msl.seplog <> ::logic:x_'&&'_x not
R108525:108525 VST.msl.seplog <> ::logic:x_'&&'_x not
R107790:107792 VST.msl.seplog <> ::logic:'!!'_x not
R107815:107815 VST.msl.seplog <> ::logic:'!!'_x not
R107793:107810 VST.veric.SeparationLogic <> closed_wrt_modvars def
R107814:107814 VST.floyd.SeparationLogicAsLogic <> F:750 var
R107821:107821 VST.msl.seplog <> ::logic:x_'&&'_x not
R107845:107875 VST.msl.seplog <> ::logic:x_'&&'_x not
R108524:108524 VST.msl.seplog <> ::logic:x_'&&'_x not
R107822:107827 VST.msl.seplog <> sepcon meth
R107839:107839 VST.floyd.SeparationLogicAsLogic <> F:750 var
R107841:107843 VST.floyd.SeparationLogicAsLogic <> rho:749 var
R107833:107835 VST.floyd.SeparationLogicAsLogic <> rho:749 var
R108012:108041 VST.msl.seplog <> ::logic:x_'&&'_x not
R108523:108523 VST.msl.seplog <> ::logic:x_'&&'_x not
R107876:107878 VST.msl.seplog <> ::logic:'!!'_x not
R108011:108011 VST.msl.seplog <> ::logic:'!!'_x not
binder 107886:107888 <> rho:751
R107991:107995 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R107950:107953 VST.msl.seplog <> ::logic:x_'&&'_x not
R107891:107891 VST.msl.seplog <> ::logic:x_'&&'_x not
R107920:107926 VST.msl.seplog <> ::logic:x_'&&'_x not
R107948:107949 VST.msl.seplog <> ::logic:x_'&&'_x not
R107892:107896 VST.veric.SeparationLogic <> local def
R107917:107919 VST.floyd.SeparationLogicAsLogic <> rho:751 var
R107899:107908 VST.veric.SeparationLogic <> tc_environ def
R107927:107937 VST.veric.SeparationLogic <> allp_fun_id def
R107945:107947 VST.floyd.SeparationLogicAsLogic <> rho:751 var
R107954:107962 VST.veric.tycontext <> RA_normal proj
R107988:107990 VST.floyd.SeparationLogicAsLogic <> rho:751 var
R107965:107980 VST.veric.SeparationLogic <> frame_ret_assert def
R107985:107985 VST.floyd.SeparationLogicAsLogic <> F:750 var
R107996:108004 VST.veric.tycontext <> RA_normal proj
R108008:108010 VST.floyd.SeparationLogicAsLogic <> rho:751 var
R108176:108205 VST.msl.seplog <> ::logic:x_'&&'_x not
R108522:108522 VST.msl.seplog <> ::logic:x_'&&'_x not
R108042:108044 VST.msl.seplog <> ::logic:'!!'_x not
R108175:108175 VST.msl.seplog <> ::logic:'!!'_x not
binder 108052:108054 <> rho:752
R108156:108160 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R108116:108119 VST.msl.seplog <> ::logic:x_'&&'_x not
R108057:108057 VST.msl.seplog <> ::logic:x_'&&'_x not
R108086:108092 VST.msl.seplog <> ::logic:x_'&&'_x not
R108114:108115 VST.msl.seplog <> ::logic:x_'&&'_x not
R108058:108062 VST.veric.SeparationLogic <> local def
R108083:108085 VST.floyd.SeparationLogicAsLogic <> rho:752 var
R108065:108074 VST.veric.SeparationLogic <> tc_environ def
R108093:108103 VST.veric.SeparationLogic <> allp_fun_id def
R108111:108113 VST.floyd.SeparationLogicAsLogic <> rho:752 var
R108120:108127 VST.veric.tycontext <> RA_break proj
R108153:108155 VST.floyd.SeparationLogicAsLogic <> rho:752 var
R108130:108145 VST.veric.SeparationLogic <> frame_ret_assert def
R108150:108150 VST.floyd.SeparationLogicAsLogic <> F:750 var
R108161:108168 VST.veric.tycontext <> RA_break proj
R108172:108174 VST.floyd.SeparationLogicAsLogic <> rho:752 var
R108346:108375 VST.msl.seplog <> ::logic:x_'&&'_x not
R108521:108521 VST.msl.seplog <> ::logic:x_'&&'_x not
R108206:108208 VST.msl.seplog <> ::logic:'!!'_x not
R108345:108345 VST.msl.seplog <> ::logic:'!!'_x not
binder 108216:108218 <> rho:753
R108323:108327 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R108280:108283 VST.msl.seplog <> ::logic:x_'&&'_x not
R108221:108221 VST.msl.seplog <> ::logic:x_'&&'_x not
R108250:108256 VST.msl.seplog <> ::logic:x_'&&'_x not
R108278:108279 VST.msl.seplog <> ::logic:x_'&&'_x not
R108222:108226 VST.veric.SeparationLogic <> local def
R108247:108249 VST.floyd.SeparationLogicAsLogic <> rho:753 var
R108229:108238 VST.veric.SeparationLogic <> tc_environ def
R108257:108267 VST.veric.SeparationLogic <> allp_fun_id def
R108275:108277 VST.floyd.SeparationLogicAsLogic <> rho:753 var
R108284:108294 VST.veric.tycontext <> RA_continue proj
R108320:108322 VST.floyd.SeparationLogicAsLogic <> rho:753 var
R108297:108312 VST.veric.SeparationLogic <> frame_ret_assert def
R108317:108317 VST.floyd.SeparationLogicAsLogic <> F:750 var
R108328:108338 VST.veric.tycontext <> RA_continue proj
R108342:108344 VST.floyd.SeparationLogicAsLogic <> rho:753 var
R108376:108378 VST.msl.seplog <> ::logic:'!!'_x not
R108520:108520 VST.msl.seplog <> ::logic:'!!'_x not
binder 108386:108387 <> vl:754
binder 108389:108391 <> rho:755
R108497:108501 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R108453:108456 VST.msl.seplog <> ::logic:x_'&&'_x not
R108394:108394 VST.msl.seplog <> ::logic:x_'&&'_x not
R108423:108429 VST.msl.seplog <> ::logic:x_'&&'_x not
R108451:108452 VST.msl.seplog <> ::logic:x_'&&'_x not
R108395:108399 VST.veric.SeparationLogic <> local def
R108420:108422 VST.floyd.SeparationLogicAsLogic <> rho:755 var
R108402:108411 VST.veric.SeparationLogic <> tc_environ def
R108430:108440 VST.veric.SeparationLogic <> allp_fun_id def
R108448:108450 VST.floyd.SeparationLogicAsLogic <> rho:755 var
R108457:108465 VST.veric.tycontext <> RA_return proj
R108494:108496 VST.floyd.SeparationLogicAsLogic <> rho:755 var
R108491:108492 VST.floyd.SeparationLogicAsLogic <> vl:754 var
R108468:108483 VST.veric.SeparationLogic <> frame_ret_assert def
R108488:108488 VST.floyd.SeparationLogicAsLogic <> F:750 var
R108502:108510 VST.veric.tycontext <> RA_return proj
R108517:108519 VST.floyd.SeparationLogicAsLogic <> rho:755 var
R108514:108515 VST.floyd.SeparationLogicAsLogic <> vl:754 var
R107736:107747 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_conseq def
binder 107769:107771 <> rho:756
R107776:107778 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R107788:107789 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R107782:107787 VST.veric.mpred <> assert def
binder 107779:107779 <> F:757
R107816:107820 VST.msl.seplog <> ::logic:x_'&&'_x not
R108525:108525 VST.msl.seplog <> ::logic:x_'&&'_x not
R107790:107792 VST.msl.seplog <> ::logic:'!!'_x not
R107815:107815 VST.msl.seplog <> ::logic:'!!'_x not
R107793:107810 VST.veric.SeparationLogic <> closed_wrt_modvars def
R107814:107814 VST.floyd.SeparationLogicAsLogic <> F:757 var
R107821:107821 VST.msl.seplog <> ::logic:x_'&&'_x not
R107845:107875 VST.msl.seplog <> ::logic:x_'&&'_x not
R108524:108524 VST.msl.seplog <> ::logic:x_'&&'_x not
R107822:107827 VST.msl.seplog <> sepcon meth
R107839:107839 VST.floyd.SeparationLogicAsLogic <> F:757 var
R107841:107843 VST.floyd.SeparationLogicAsLogic <> rho:756 var
R107833:107835 VST.floyd.SeparationLogicAsLogic <> rho:756 var
R108012:108041 VST.msl.seplog <> ::logic:x_'&&'_x not
R108523:108523 VST.msl.seplog <> ::logic:x_'&&'_x not
R107876:107878 VST.msl.seplog <> ::logic:'!!'_x not
R108011:108011 VST.msl.seplog <> ::logic:'!!'_x not
binder 107886:107888 <> rho:758
R107991:107995 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R107950:107953 VST.msl.seplog <> ::logic:x_'&&'_x not
R107891:107891 VST.msl.seplog <> ::logic:x_'&&'_x not
R107920:107926 VST.msl.seplog <> ::logic:x_'&&'_x not
R107948:107949 VST.msl.seplog <> ::logic:x_'&&'_x not
R107892:107896 VST.veric.SeparationLogic <> local def
R107917:107919 VST.floyd.SeparationLogicAsLogic <> rho:758 var
R107899:107908 VST.veric.SeparationLogic <> tc_environ def
R107927:107937 VST.veric.SeparationLogic <> allp_fun_id def
R107945:107947 VST.floyd.SeparationLogicAsLogic <> rho:758 var
R107954:107962 VST.veric.tycontext <> RA_normal proj
R107988:107990 VST.floyd.SeparationLogicAsLogic <> rho:758 var
R107965:107980 VST.veric.SeparationLogic <> frame_ret_assert def
R107985:107985 VST.floyd.SeparationLogicAsLogic <> F:757 var
R107996:108004 VST.veric.tycontext <> RA_normal proj
R108008:108010 VST.floyd.SeparationLogicAsLogic <> rho:758 var
R108176:108205 VST.msl.seplog <> ::logic:x_'&&'_x not
R108522:108522 VST.msl.seplog <> ::logic:x_'&&'_x not
R108042:108044 VST.msl.seplog <> ::logic:'!!'_x not
R108175:108175 VST.msl.seplog <> ::logic:'!!'_x not
binder 108052:108054 <> rho:759
R108156:108160 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R108116:108119 VST.msl.seplog <> ::logic:x_'&&'_x not
R108057:108057 VST.msl.seplog <> ::logic:x_'&&'_x not
R108086:108092 VST.msl.seplog <> ::logic:x_'&&'_x not
R108114:108115 VST.msl.seplog <> ::logic:x_'&&'_x not
R108058:108062 VST.veric.SeparationLogic <> local def
R108083:108085 VST.floyd.SeparationLogicAsLogic <> rho:759 var
R108065:108074 VST.veric.SeparationLogic <> tc_environ def
R108093:108103 VST.veric.SeparationLogic <> allp_fun_id def
R108111:108113 VST.floyd.SeparationLogicAsLogic <> rho:759 var
R108120:108127 VST.veric.tycontext <> RA_break proj
R108153:108155 VST.floyd.SeparationLogicAsLogic <> rho:759 var
R108130:108145 VST.veric.SeparationLogic <> frame_ret_assert def
R108150:108150 VST.floyd.SeparationLogicAsLogic <> F:757 var
R108161:108168 VST.veric.tycontext <> RA_break proj
R108172:108174 VST.floyd.SeparationLogicAsLogic <> rho:759 var
R108346:108375 VST.msl.seplog <> ::logic:x_'&&'_x not
R108521:108521 VST.msl.seplog <> ::logic:x_'&&'_x not
R108206:108208 VST.msl.seplog <> ::logic:'!!'_x not
R108345:108345 VST.msl.seplog <> ::logic:'!!'_x not
binder 108216:108218 <> rho:760
R108323:108327 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R108280:108283 VST.msl.seplog <> ::logic:x_'&&'_x not
R108221:108221 VST.msl.seplog <> ::logic:x_'&&'_x not
R108250:108256 VST.msl.seplog <> ::logic:x_'&&'_x not
R108278:108279 VST.msl.seplog <> ::logic:x_'&&'_x not
R108222:108226 VST.veric.SeparationLogic <> local def
R108247:108249 VST.floyd.SeparationLogicAsLogic <> rho:760 var
R108229:108238 VST.veric.SeparationLogic <> tc_environ def
R108257:108267 VST.veric.SeparationLogic <> allp_fun_id def
R108275:108277 VST.floyd.SeparationLogicAsLogic <> rho:760 var
R108284:108294 VST.veric.tycontext <> RA_continue proj
R108320:108322 VST.floyd.SeparationLogicAsLogic <> rho:760 var
R108297:108312 VST.veric.SeparationLogic <> frame_ret_assert def
R108317:108317 VST.floyd.SeparationLogicAsLogic <> F:757 var
R108328:108338 VST.veric.tycontext <> RA_continue proj
R108342:108344 VST.floyd.SeparationLogicAsLogic <> rho:760 var
R108376:108378 VST.msl.seplog <> ::logic:'!!'_x not
R108520:108520 VST.msl.seplog <> ::logic:'!!'_x not
binder 108386:108387 <> vl:761
binder 108389:108391 <> rho:762
R108497:108501 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R108453:108456 VST.msl.seplog <> ::logic:x_'&&'_x not
R108394:108394 VST.msl.seplog <> ::logic:x_'&&'_x not
R108423:108429 VST.msl.seplog <> ::logic:x_'&&'_x not
R108451:108452 VST.msl.seplog <> ::logic:x_'&&'_x not
R108395:108399 VST.veric.SeparationLogic <> local def
R108420:108422 VST.floyd.SeparationLogicAsLogic <> rho:762 var
R108402:108411 VST.veric.SeparationLogic <> tc_environ def
R108430:108440 VST.veric.SeparationLogic <> allp_fun_id def
R108448:108450 VST.floyd.SeparationLogicAsLogic <> rho:762 var
R108457:108465 VST.veric.tycontext <> RA_return proj
R108494:108496 VST.floyd.SeparationLogicAsLogic <> rho:762 var
R108491:108492 VST.floyd.SeparationLogicAsLogic <> vl:761 var
R108468:108483 VST.veric.SeparationLogic <> frame_ret_assert def
R108488:108488 VST.floyd.SeparationLogicAsLogic <> F:757 var
R108502:108510 VST.veric.tycontext <> RA_return proj
R108517:108519 VST.floyd.SeparationLogicAsLogic <> rho:762 var
R108514:108515 VST.floyd.SeparationLogicAsLogic <> vl:761 var
R108552:108556 VST.veric.SeparationLogic <> local def
R108559:108568 VST.veric.SeparationLogic <> tc_environ def
R108571:108575 VST.veric.mpred <> lift1 def
R108578:108581 VST.veric.lift <> lift def
R108607:108619 VST.msl.seplog <> derives_trans meth
R108607:108619 VST.msl.seplog <> derives_trans meth
R108649:108661 VST.msl.seplog <> derives_trans meth
R108649:108661 VST.msl.seplog <> derives_trans meth
R108673:108686 VST.veric.own <> bupd_intro thm
R108673:108686 VST.veric.own <> bupd_intro thm
R108697:108706 VST.msl.seplog <> orp_right2 meth
R108697:108706 VST.msl.seplog <> orp_right2 meth
R108715:108725 VST.floyd.SeparationLogicFacts <> exp_derives thm
R108715:108725 VST.floyd.SeparationLogicFacts <> exp_derives thm
R108776:108788 VST.msl.seplog <> derives_trans meth
R108776:108788 VST.msl.seplog <> derives_trans meth
R108800:108809 VST.msl.ghost_seplog <> bupd_intro meth
R108800:108809 VST.msl.ghost_seplog <> bupd_intro meth
R108820:108829 VST.msl.seplog <> orp_right2 meth
R108820:108829 VST.msl.seplog <> orp_right2 meth
R108843:108852 VST.msl.seplog <> andp_left2 meth
R108843:108852 VST.msl.seplog <> andp_left2 meth
R108843:108852 VST.msl.seplog <> andp_left2 meth
R108890:108902 VST.msl.seplog <> derives_trans meth
R108890:108902 VST.msl.seplog <> derives_trans meth
R108914:108923 VST.msl.ghost_seplog <> bupd_intro meth
R108914:108923 VST.msl.ghost_seplog <> bupd_intro meth
R108934:108943 VST.msl.seplog <> orp_right2 meth
R108934:108943 VST.msl.seplog <> orp_right2 meth
R108957:108966 VST.msl.seplog <> andp_left2 meth
R108957:108966 VST.msl.seplog <> andp_left2 meth
R108957:108966 VST.msl.seplog <> andp_left2 meth
R109004:109016 VST.msl.seplog <> derives_trans meth
R109004:109016 VST.msl.seplog <> derives_trans meth
R109028:109037 VST.msl.ghost_seplog <> bupd_intro meth
R109028:109037 VST.msl.ghost_seplog <> bupd_intro meth
R109048:109057 VST.msl.seplog <> orp_right2 meth
R109048:109057 VST.msl.seplog <> orp_right2 meth
R109071:109080 VST.msl.seplog <> andp_left2 meth
R109071:109080 VST.msl.seplog <> andp_left2 meth
R109071:109080 VST.msl.seplog <> andp_left2 meth
R109118:109130 VST.msl.seplog <> derives_trans meth
R109118:109130 VST.msl.seplog <> derives_trans meth
R109142:109151 VST.msl.ghost_seplog <> bupd_intro meth
R109142:109151 VST.msl.ghost_seplog <> bupd_intro meth
R109162:109171 VST.msl.seplog <> orp_right2 meth
R109162:109171 VST.msl.seplog <> orp_right2 meth
R109185:109194 VST.msl.seplog <> andp_left2 meth
R109185:109194 VST.msl.seplog <> andp_left2 meth
R109185:109194 VST.msl.seplog <> andp_left2 meth
R109214:109234 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists' thm
R109214:109234 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists' thm
R109264:109282 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_prop' thm
R109264:109282 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_prop' thm
R109302:109310 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R109302:109310 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R109329:109346 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R109329:109346 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R109329:109346 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R109329:109346 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R109329:109346 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R109370:109381 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_conseq def
R109370:109381 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_conseq def
R109394:109404 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_frame thm
R109394:109404 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_frame thm
R109454:109466 VST.msl.seplog <> derives_trans meth
R109479:109488 VST.msl.ghost_seplog <> bupd_intro meth
R109454:109466 VST.msl.seplog <> derives_trans meth
R109479:109488 VST.msl.ghost_seplog <> bupd_intro meth
R109502:109511 VST.msl.seplog <> orp_right2 meth
R109502:109511 VST.msl.seplog <> orp_right2 meth
R109551:109563 VST.msl.seplog <> derives_trans meth
R109576:109585 VST.msl.ghost_seplog <> bupd_intro meth
R109551:109563 VST.msl.seplog <> derives_trans meth
R109576:109585 VST.msl.ghost_seplog <> bupd_intro meth
R109599:109608 VST.msl.seplog <> orp_right2 meth
R109599:109608 VST.msl.seplog <> orp_right2 meth
R109648:109660 VST.msl.seplog <> derives_trans meth
R109673:109682 VST.msl.ghost_seplog <> bupd_intro meth
R109648:109660 VST.msl.seplog <> derives_trans meth
R109673:109682 VST.msl.ghost_seplog <> bupd_intro meth
R109696:109705 VST.msl.seplog <> orp_right2 meth
R109696:109705 VST.msl.seplog <> orp_right2 meth
R109745:109757 VST.msl.seplog <> derives_trans meth
R109770:109779 VST.msl.ghost_seplog <> bupd_intro meth
R109745:109757 VST.msl.seplog <> derives_trans meth
R109770:109779 VST.msl.ghost_seplog <> bupd_intro meth
R109793:109802 VST.msl.seplog <> orp_right2 meth
R109793:109802 VST.msl.seplog <> orp_right2 meth
R109850:109862 VST.msl.seplog <> derives_trans meth
R109875:109884 VST.msl.ghost_seplog <> bupd_intro meth
R109850:109862 VST.msl.seplog <> derives_trans meth
R109875:109884 VST.msl.ghost_seplog <> bupd_intro meth
R109898:109907 VST.msl.seplog <> orp_right2 meth
R109898:109907 VST.msl.seplog <> orp_right2 meth
R109916:109925 VST.msl.seplog <> andp_left2 meth
R109916:109925 VST.msl.seplog <> andp_left2 meth
R109934:109943 VST.msl.seplog <> andp_left2 meth
R109934:109943 VST.msl.seplog <> andp_left2 meth
R109952:109963 VST.msl.seplog <> derives_refl meth
R109952:109963 VST.msl.seplog <> derives_refl meth
R109984:109993 VST.msl.seplog <> andp_left2 meth
R109984:109993 VST.msl.seplog <> andp_left2 meth
R110024:110032 VST.msl.log_normalize <> andp_comm thm
R110041:110043 VST.msl.seplog <> ::logic:x_'*'_x not
R110024:110032 VST.msl.log_normalize <> andp_comm thm
R110041:110043 VST.msl.seplog <> ::logic:x_'*'_x not
R110024:110032 VST.msl.log_normalize <> andp_comm thm
R110041:110043 VST.msl.seplog <> ::logic:x_'*'_x not
R110062:110066 VST.veric.SeparationLogic <> local def
R110069:110073 VST.veric.lift <> liftx def
R110076:110080 VST.veric.mpred <> lift1 def
R110083:110092 VST.veric.SeparationLogic <> tc_environ def
R110118:110127 VST.msl.log_normalize <> andp_assoc thm
R110118:110127 VST.msl.log_normalize <> andp_assoc thm
R110118:110127 VST.msl.log_normalize <> andp_assoc thm
R110118:110127 VST.msl.log_normalize <> andp_assoc thm
R110118:110127 VST.msl.log_normalize <> andp_assoc thm
R110118:110127 VST.msl.log_normalize <> andp_assoc thm
R110118:110127 VST.msl.log_normalize <> andp_assoc thm
R110118:110127 VST.msl.log_normalize <> andp_assoc thm
R110143:110154 VST.msl.log_normalize <> andp_derives thm
R110143:110154 VST.msl.log_normalize <> andp_derives thm
R110143:110154 VST.msl.log_normalize <> andp_derives thm
R110143:110154 VST.msl.log_normalize <> andp_derives thm
R110143:110154 VST.msl.log_normalize <> andp_derives thm
R110143:110154 VST.msl.log_normalize <> andp_derives thm
R110143:110154 VST.msl.log_normalize <> andp_derives thm
R110143:110154 VST.msl.log_normalize <> andp_derives thm
R110143:110154 VST.msl.log_normalize <> andp_derives thm
R110143:110154 VST.msl.log_normalize <> andp_derives thm
R110171:110182 VST.msl.log_normalize <> prop_derives thm
R110171:110182 VST.msl.log_normalize <> prop_derives thm
R110204:110213 VST.msl.log_normalize <> andp_assoc thm
R110204:110213 VST.msl.log_normalize <> andp_assoc thm
R110204:110213 VST.msl.log_normalize <> andp_assoc thm
R110234:110245 VST.msl.log_normalize <> prop_derives thm
R110234:110245 VST.msl.log_normalize <> prop_derives thm
R110267:110276 VST.msl.log_normalize <> andp_assoc thm
R110267:110276 VST.msl.log_normalize <> andp_assoc thm
R110267:110276 VST.msl.log_normalize <> andp_assoc thm
R110297:110308 VST.msl.log_normalize <> prop_derives thm
R110297:110308 VST.msl.log_normalize <> prop_derives thm
R110330:110339 VST.msl.log_normalize <> andp_assoc thm
R110330:110339 VST.msl.log_normalize <> andp_assoc thm
R110330:110339 VST.msl.log_normalize <> andp_assoc thm
R110360:110371 VST.msl.log_normalize <> prop_derives thm
R110360:110371 VST.msl.log_normalize <> prop_derives thm
R110393:110402 VST.msl.log_normalize <> andp_assoc thm
R110393:110402 VST.msl.log_normalize <> andp_assoc thm
R110393:110402 VST.msl.log_normalize <> andp_assoc thm
prf 110427:110437 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_adapt
binder 110448:110449 <> cs:763
binder 110451:110455 <> Espec:764
binder 110458:110462 <> Delta:765
binder 110464:110464 <> c:766
R110473:110478 VST.veric.mpred <> assert def
binder 110467:110467 <> P:767
binder 110469:110470 <> P':768
R110489:110498 VST.veric.tycontext <> ret_assert rec
binder 110482:110482 <> Q:769
binder 110484:110485 <> Q':770
binder 110515:110517 <> rho:771
R110588:110612 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R110950:110950 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R110552:110556 VST.msl.seplog <> ::logic:x_'&&'_x not
R110587:110587 VST.msl.seplog <> ::logic:x_'&&'_x not
R110521:110523 VST.msl.seplog <> ::logic:'!!'_x not
R110551:110551 VST.msl.seplog <> ::logic:'!!'_x not
R110524:110540 VST.veric.seplog <> typecheck_environ def
R110548:110550 VST.floyd.SeparationLogicAsLogic <> rho:771 var
R110542:110546 VST.floyd.SeparationLogicAsLogic <> Delta:765 var
R110578:110581 VST.msl.seplog <> ::logic:x_'&&'_x not
R110557:110567 VST.veric.SeparationLogic <> allp_fun_id def
R110575:110577 VST.floyd.SeparationLogicAsLogic <> rho:771 var
R110569:110573 VST.floyd.SeparationLogicAsLogic <> Delta:765 var
R110582:110582 VST.floyd.SeparationLogicAsLogic <> P:767 var
R110584:110586 VST.floyd.SeparationLogicAsLogic <> rho:771 var
R110861:110888 VST.msl.seplog <> ::logic:x_'&&'_x not
R110777:110804 VST.msl.seplog <> ::logic:x_'&&'_x not
R110699:110726 VST.msl.seplog <> ::logic:x_'&&'_x not
R110619:110646 VST.msl.seplog <> ::logic:x_'&&'_x not
R110613:110614 VST.floyd.SeparationLogicAsLogic <> P':768 var
R110616:110618 VST.floyd.SeparationLogicAsLogic <> rho:771 var
R110647:110649 VST.msl.seplog <> ::logic:'!!'_x not
R110698:110698 VST.msl.seplog <> ::logic:'!!'_x not
binder 110657:110659 <> rho:772
R110678:110682 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R110662:110670 VST.veric.tycontext <> RA_normal proj
R110675:110677 VST.floyd.SeparationLogicAsLogic <> rho:772 var
R110672:110673 VST.floyd.SeparationLogicAsLogic <> Q':770 var
R110683:110691 VST.veric.tycontext <> RA_normal proj
R110695:110697 VST.floyd.SeparationLogicAsLogic <> rho:772 var
R110693:110693 VST.floyd.SeparationLogicAsLogic <> Q:769 var
R110727:110729 VST.msl.seplog <> ::logic:'!!'_x not
R110776:110776 VST.msl.seplog <> ::logic:'!!'_x not
binder 110737:110739 <> rho:773
R110757:110761 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R110742:110749 VST.veric.tycontext <> RA_break proj
R110754:110756 VST.floyd.SeparationLogicAsLogic <> rho:773 var
R110751:110752 VST.floyd.SeparationLogicAsLogic <> Q':770 var
R110762:110769 VST.veric.tycontext <> RA_break proj
R110773:110775 VST.floyd.SeparationLogicAsLogic <> rho:773 var
R110771:110771 VST.floyd.SeparationLogicAsLogic <> Q:769 var
R110805:110807 VST.msl.seplog <> ::logic:'!!'_x not
R110860:110860 VST.msl.seplog <> ::logic:'!!'_x not
binder 110815:110817 <> rho:774
R110838:110842 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R110820:110830 VST.veric.tycontext <> RA_continue proj
R110835:110837 VST.floyd.SeparationLogicAsLogic <> rho:774 var
R110832:110833 VST.floyd.SeparationLogicAsLogic <> Q':770 var
R110843:110853 VST.veric.tycontext <> RA_continue proj
R110857:110859 VST.floyd.SeparationLogicAsLogic <> rho:774 var
R110855:110855 VST.floyd.SeparationLogicAsLogic <> Q:769 var
R110889:110891 VST.msl.seplog <> ::logic:'!!'_x not
R110949:110949 VST.msl.seplog <> ::logic:'!!'_x not
binder 110899:110900 <> vl:775
binder 110902:110904 <> rho:776
R110926:110930 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R110907:110915 VST.veric.tycontext <> RA_return proj
R110923:110925 VST.floyd.SeparationLogicAsLogic <> rho:776 var
R110920:110921 VST.floyd.SeparationLogicAsLogic <> vl:775 var
R110917:110918 VST.floyd.SeparationLogicAsLogic <> Q':770 var
R110931:110939 VST.veric.tycontext <> RA_return proj
R110946:110948 VST.floyd.SeparationLogicAsLogic <> rho:776 var
R110943:110944 VST.floyd.SeparationLogicAsLogic <> vl:775 var
R110941:110941 VST.floyd.SeparationLogicAsLogic <> Q:769 var
binder 110505:110505 <> H:777
R110963:110967 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R110989:110990 VST.floyd.SeparationLogicAsLogic <> Q':770 var
R110987:110987 VST.floyd.SeparationLogicAsLogic <> c:766 var
R110984:110985 VST.floyd.SeparationLogicAsLogic <> P':768 var
R110978:110982 VST.floyd.SeparationLogicAsLogic <> Delta:765 var
R110972:110976 VST.floyd.SeparationLogicAsLogic <> Espec:764 var
R110969:110970 VST.floyd.SeparationLogicAsLogic <> cs:763 var
binder 110957:110959 <> SEM:778
R110998:111002 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R111023:111023 VST.floyd.SeparationLogicAsLogic <> Q:769 var
R111021:111021 VST.floyd.SeparationLogicAsLogic <> c:766 var
R111019:111019 VST.floyd.SeparationLogicAsLogic <> P:767 var
R111013:111017 VST.floyd.SeparationLogicAsLogic <> Delta:765 var
R111007:111011 VST.floyd.SeparationLogicAsLogic <> Espec:764 var
R111004:111005 VST.floyd.SeparationLogicAsLogic <> cs:763 var
R111050:111066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_adapt_frame thm
R111050:111066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_adapt_frame thm
R111091:111099 VST.msl.seplog <> exp_right meth
binder 111106:111108 <> rho:779
R111113:111115 VST.msl.seplog <> emp meth
R111091:111099 VST.msl.seplog <> exp_right meth
binder 111106:111108 <> rho:780
R111113:111115 VST.msl.seplog <> emp meth
R111129:111141 VST.msl.seplog <> derives_trans meth
R111129:111141 VST.msl.seplog <> derives_trans meth
R111172:111181 VST.msl.log_normalize <> andp_assoc thm
R111172:111181 VST.msl.log_normalize <> andp_assoc thm
R111172:111181 VST.msl.log_normalize <> andp_assoc thm
R111172:111181 VST.msl.log_normalize <> andp_assoc thm
R111172:111181 VST.msl.log_normalize <> andp_assoc thm
R111172:111181 VST.msl.log_normalize <> andp_assoc thm
R111172:111181 VST.msl.log_normalize <> andp_assoc thm
R111172:111181 VST.msl.log_normalize <> andp_assoc thm
R111172:111181 VST.msl.log_normalize <> andp_assoc thm
R111172:111181 VST.msl.log_normalize <> andp_assoc thm
R111204:111213 VST.msl.seplog <> andp_right meth
R111204:111213 VST.msl.seplog <> andp_right meth
R111222:111231 VST.msl.seplog <> prop_right meth
R111222:111231 VST.msl.seplog <> prop_right meth
R111276:111285 VST.msl.seplog <> andp_right meth
R111276:111285 VST.msl.seplog <> andp_right meth
R111305:111314 VST.msl.seplog <> andp_right meth
R111305:111314 VST.msl.seplog <> andp_right meth
R111327:111336 VST.msl.seplog <> prop_right meth
R111327:111336 VST.msl.seplog <> prop_right meth
R111353:111362 VST.msl.seplog <> andp_left2 meth
R111353:111362 VST.msl.seplog <> andp_left2 meth
R111372:111384 VST.msl.seplog <> derives_trans meth
R111372:111384 VST.msl.seplog <> derives_trans meth
R111433:111442 VST.msl.seplog <> sepcon_emp meth
R111433:111442 VST.msl.seplog <> sepcon_emp meth
R111433:111442 VST.msl.seplog <> sepcon_emp meth
R111464:111473 VST.msl.seplog <> andp_right meth
R111464:111473 VST.msl.seplog <> andp_right meth
R111486:111495 VST.msl.seplog <> prop_right meth
R111486:111495 VST.msl.seplog <> prop_right meth
R111512:111521 VST.msl.seplog <> andp_left2 meth
R111512:111521 VST.msl.seplog <> andp_left2 meth
R111531:111543 VST.msl.seplog <> derives_trans meth
R111531:111543 VST.msl.seplog <> derives_trans meth
R111593:111602 VST.msl.seplog <> sepcon_emp meth
R111593:111602 VST.msl.seplog <> sepcon_emp meth
R111593:111602 VST.msl.seplog <> sepcon_emp meth
R111624:111633 VST.msl.seplog <> andp_right meth
R111624:111633 VST.msl.seplog <> andp_right meth
R111646:111655 VST.msl.seplog <> prop_right meth
R111646:111655 VST.msl.seplog <> prop_right meth
R111672:111681 VST.msl.seplog <> andp_left2 meth
R111672:111681 VST.msl.seplog <> andp_left2 meth
R111691:111703 VST.msl.seplog <> derives_trans meth
R111691:111703 VST.msl.seplog <> derives_trans meth
R111753:111762 VST.msl.seplog <> sepcon_emp meth
R111753:111762 VST.msl.seplog <> sepcon_emp meth
R111753:111762 VST.msl.seplog <> sepcon_emp meth
R111786:111795 VST.msl.seplog <> prop_right meth
R111786:111795 VST.msl.seplog <> prop_right meth
R111812:111821 VST.msl.seplog <> andp_left2 meth
R111812:111821 VST.msl.seplog <> andp_left2 meth
R111831:111843 VST.msl.seplog <> derives_trans meth
R111831:111843 VST.msl.seplog <> derives_trans meth
R111893:111902 VST.msl.seplog <> sepcon_emp meth
R111893:111902 VST.msl.seplog <> sepcon_emp meth
R111893:111902 VST.msl.seplog <> sepcon_emp meth
prf 111928:111957 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic typecheck_environ_globals_only
binder 111959:111959 <> t:781
binder 111961:111963 <> rho:782
R111966:111982 VST.veric.seplog <> typecheck_environ def
R112007:112018 VST.veric.SeparationLogic <> globals_only def
R112020:112022 VST.floyd.SeparationLogicAsLogic <> rho:782 var
R111985:112001 VST.veric.seplog <> rettype_tycontext def
R112003:112003 VST.floyd.SeparationLogicAsLogic <> t:781 var
R112071:112082 compcert.lib.Maps PTree gempty thm
R112071:112082 compcert.lib.Maps PTree gempty thm
R112071:112082 compcert.lib.Maps PTree gempty thm
R112127:112138 compcert.lib.Maps PTree gempty thm
R112127:112138 compcert.lib.Maps PTree gempty thm
R112127:112138 compcert.lib.Maps PTree gempty thm
R112187:112198 compcert.lib.Maps PTree gempty thm
R112187:112198 compcert.lib.Maps PTree gempty thm
R112187:112198 compcert.lib.Maps PTree gempty thm
prf 112231:112267 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic typecheck_environ_env_setglobals_only
binder 112269:112269 <> t:783
binder 112271:112273 <> rho:784
binder 112275:112275 <> x:785
binder 112277:112277 <> v:786
R112280:112296 VST.veric.seplog <> typecheck_environ def
R112321:112327 VST.veric.mpred <> env_set def
R112350:112350 VST.floyd.SeparationLogicAsLogic <> v:786 var
R112348:112348 VST.floyd.SeparationLogicAsLogic <> x:785 var
R112330:112341 VST.veric.SeparationLogic <> globals_only def
R112343:112345 VST.floyd.SeparationLogicAsLogic <> rho:784 var
R112299:112315 VST.veric.seplog <> rettype_tycontext def
R112317:112317 VST.floyd.SeparationLogicAsLogic <> t:783 var
R112399:112410 compcert.lib.Maps PTree gempty thm
R112399:112410 compcert.lib.Maps PTree gempty thm
R112399:112410 compcert.lib.Maps PTree gempty thm
R112455:112466 compcert.lib.Maps PTree gempty thm
R112455:112466 compcert.lib.Maps PTree gempty thm
R112455:112466 compcert.lib.Maps PTree gempty thm
R112515:112526 compcert.lib.Maps PTree gempty thm
R112515:112526 compcert.lib.Maps PTree gempty thm
R112515:112526 compcert.lib.Maps PTree gempty thm
prf 112666:112687 DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_body_funspec_sub
binder 112690:112690 <> V:787
binder 112692:112692 <> G:788
binder 112694:112695 <> cs:789
binder 112697:112697 <> f:790
binder 112699:112699 <> i:791
binder 112701:112703 <> phi:792
binder 112705:112708 <> phi':793
R112717:112726 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDefs semax_body def
R112737:112737 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R112739:112740 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R112744:112744 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R112738:112738 VST.floyd.SeparationLogicAsLogic <> i:791 var
R112741:112743 VST.floyd.SeparationLogicAsLogic <> phi:792 var
R112735:112735 VST.floyd.SeparationLogicAsLogic <> f:790 var
R112732:112733 VST.floyd.SeparationLogicAsLogic <> cs:789 var
R112730:112730 VST.floyd.SeparationLogicAsLogic <> G:788 var
R112728:112728 VST.floyd.SeparationLogicAsLogic <> V:787 var
binder 112712:112713 <> SB:794
R112755:112765 VST.veric.SeparationLogic <> funspec_sub def
R112771:112774 VST.floyd.SeparationLogicAsLogic <> phi':793 var
R112767:112769 VST.floyd.SeparationLogicAsLogic <> phi:792 var
binder 112750:112752 <> Sub:795
R112785:112796 compcert.lib.Coqlib <> list_norepet ind
R112820:112823 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R112799:112801 Coq.Lists.List <> map def
R112808:112816 compcert.cfrontend.Clight <> fn_params proj
R112818:112818 VST.floyd.SeparationLogicAsLogic <> f:790 var
R112803:112805 Coq.Init.Datatypes <> fst def
R112824:112826 Coq.Lists.List <> map def
R112833:112840 compcert.cfrontend.Clight <> fn_temps proj
R112842:112842 VST.floyd.SeparationLogicAsLogic <> f:790 var
R112828:112830 Coq.Init.Datatypes <> fst def
binder 112780:112782 <> LNR:796
R112851:112860 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDefs semax_body def
R112871:112871 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R112873:112874 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R112879:112879 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R112872:112872 VST.floyd.SeparationLogicAsLogic <> i:791 var
R112875:112878 VST.floyd.SeparationLogicAsLogic <> phi':793 var
R112869:112869 VST.floyd.SeparationLogicAsLogic <> f:790 var
R112866:112867 VST.floyd.SeparationLogicAsLogic <> cs:789 var
R112864:112864 VST.floyd.SeparationLogicAsLogic <> G:788 var
R112862:112862 VST.floyd.SeparationLogicAsLogic <> V:787 var
R113250:113265 VST.veric.SeparationLogic <> frame_ret_assert def
R113330:113342 VST.veric.SeparationLogic <> stackframe_of def
R113268:113291 VST.veric.SeparationLogic <> function_body_ret_assert def
R113294:113302 compcert.cfrontend.Clight <> fn_return proj
R113358:113360 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113374:113379 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113366:113369 Coq.Init.Datatypes <> list ind
R113371:113373 compcert.common.Values <> val ind
binder 113361:113364 <> vals:797
R113380:113382 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113396:113397 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113387:113390 Coq.Init.Datatypes <> list ind
binder 113383:113385 <> ts1:798
R113398:113400 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113407:113412 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 113401:113402 <> x1:799
R113413:113415 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113425:113431 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113420:113424 VST.veric.mpred <> mpred def
binder 113416:113417 <> FR:800
R113773:113783 VST.msl.seplog <> ::logic:x_'&&'_x not
R113944:113944 VST.msl.seplog <> ::logic:x_'&&'_x not
R113432:113434 VST.msl.seplog <> ::logic:'!!'_x not
R113772:113772 VST.msl.seplog <> ::logic:'!!'_x not
R113435:113435 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R113472:113483 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R113436:113442 VST.veric.Cop2 <> tc_vals def
R113468:113471 VST.floyd.SeparationLogicAsLogic <> vals:797 var
R113445:113447 Coq.Lists.List <> map def
R113454:113462 compcert.cfrontend.Clight <> fn_params proj
R113449:113451 Coq.Init.Datatypes <> snd def
binder 113491:113493 <> tau:801
R113497:113503 VST.msl.seplog <> derives meth
R113768:113770 VST.floyd.SeparationLogicAsLogic <> tau:801 var
R113527:113530 VST.msl.seplog <> andp meth
R113712:113717 VST.msl.seplog <> sepcon meth
R113752:113754 VST.floyd.SeparationLogicAsLogic <> tau:801 var
R113749:113750 VST.floyd.SeparationLogicAsLogic <> x1:799 var
R113745:113747 VST.floyd.SeparationLogicAsLogic <> ts1:798 var
R113739:113740 VST.floyd.SeparationLogicAsLogic <> FR:800 var
R113732:113737 VST.veric.SeparationLogic <> Sveric inst
R113725:113730 VST.veric.SeparationLogic <> Nveric inst
R113719:113723 VST.veric.mpred <> mpred def
R113557:113560 VST.msl.seplog <> prop meth
R113589:113605 VST.veric.seplog <> tc_environ def
R113694:113696 VST.floyd.SeparationLogicAsLogic <> tau:801 var
R113624:113640 VST.veric.seplog <> rettype_tycontext def
R113644:113646 Coq.Init.Datatypes <> snd def
R113679:113687 VST.veric.SeparationLogic <> fn_funsig def
R113673:113676 compcert.cfrontend.Ctypes <> type ind
R113649:113652 Coq.Init.Datatypes <> list ind
R113655:113658 Coq.Init.Datatypes <> prod ind
R113666:113669 compcert.cfrontend.Ctypes <> type ind
R113660:113664 compcert.common.AST <> ident def
R113568:113573 VST.veric.SeparationLogic <> Nveric inst
R113562:113566 VST.veric.mpred <> mpred def
R113538:113543 VST.veric.SeparationLogic <> Nveric inst
R113532:113536 VST.veric.mpred <> mpred def
R113511:113516 VST.veric.SeparationLogic <> Nveric inst
R113505:113509 VST.veric.mpred <> mpred def
R113846:113860 VST.msl.seplog <> ::logic:x_'&&'_x not
R113943:113943 VST.msl.seplog <> ::logic:x_'&&'_x not
R113799:113802 VST.msl.seplog <> ::logic:x_'*'_x not
R113845:113845 VST.msl.seplog <> ::logic:x_'*'_x not
R113784:113796 VST.veric.SeparationLogic <> stackframe_of def
binder 113807:113809 <> tau:802
R113816:113818 VST.msl.seplog <> ::logic:x_'*'_x not
R113814:113815 VST.floyd.SeparationLogicAsLogic <> FR:800 var
R113828:113828 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113838:113839 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113844:113844 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113829:113833 VST.veric.mpred <> ge_of def
R113835:113837 VST.floyd.SeparationLogicAsLogic <> tau:802 var
R113840:113843 VST.floyd.SeparationLogicAsLogic <> vals:797 var
R113825:113826 VST.floyd.SeparationLogicAsLogic <> x1:799 var
R113821:113823 VST.floyd.SeparationLogicAsLogic <> ts1:798 var
binder 113865:113867 <> tau:803
R113873:113876 VST.msl.seplog <> ::logic:'!!'_x not
R113942:113942 VST.msl.seplog <> ::logic:'!!'_x not
R113926:113928 Coq.Init.Logic <> ::type_scope:x_'='_x not
R113877:113879 Coq.Lists.List <> map def
R113904:113906 Coq.Lists.List <> map def
R113913:113921 compcert.cfrontend.Clight <> fn_params proj
R113908:113910 Coq.Init.Datatypes <> fst def
R113882:113888 VST.veric.mpred Map get def
R113891:113895 VST.veric.mpred <> te_of def
R113897:113899 VST.floyd.SeparationLogicAsLogic <> tau:803 var
R113929:113931 Coq.Lists.List <> map def
R113938:113941 VST.floyd.SeparationLogicAsLogic <> vals:797 var
R113933:113936 Coq.Init.Datatypes <> Some constr
R113223:113233 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_adapt thm
R113250:113265 VST.veric.SeparationLogic <> frame_ret_assert def
R113330:113342 VST.veric.SeparationLogic <> stackframe_of def
R113268:113291 VST.veric.SeparationLogic <> function_body_ret_assert def
R113294:113302 compcert.cfrontend.Clight <> fn_return proj
R113358:113360 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113374:113379 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113366:113369 Coq.Init.Datatypes <> list ind
R113371:113373 compcert.common.Values <> val ind
binder 113361:113364 <> vals:804
R113380:113382 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113396:113397 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113387:113390 Coq.Init.Datatypes <> list ind
binder 113383:113385 <> ts1:805
R113398:113400 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113407:113412 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 113401:113402 <> x1:806
R113413:113415 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113425:113431 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R113420:113424 VST.veric.mpred <> mpred def
binder 113416:113417 <> FR:807
R113773:113783 VST.msl.seplog <> ::logic:x_'&&'_x not
R113944:113944 VST.msl.seplog <> ::logic:x_'&&'_x not
R113432:113434 VST.msl.seplog <> ::logic:'!!'_x not
R113772:113772 VST.msl.seplog <> ::logic:'!!'_x not
R113435:113435 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R113472:113483 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R113436:113442 VST.veric.Cop2 <> tc_vals def
R113468:113471 VST.floyd.SeparationLogicAsLogic <> vals:804 var
R113445:113447 Coq.Lists.List <> map def
R113454:113462 compcert.cfrontend.Clight <> fn_params proj
R113449:113451 Coq.Init.Datatypes <> snd def
binder 113491:113493 <> tau:808
R113497:113503 VST.msl.seplog <> derives meth
R113768:113770 VST.floyd.SeparationLogicAsLogic <> tau:808 var
R113527:113530 VST.msl.seplog <> andp meth
R113712:113717 VST.msl.seplog <> sepcon meth
R113752:113754 VST.floyd.SeparationLogicAsLogic <> tau:808 var
R113749:113750 VST.floyd.SeparationLogicAsLogic <> x1:806 var
R113745:113747 VST.floyd.SeparationLogicAsLogic <> ts1:805 var
R113739:113740 VST.floyd.SeparationLogicAsLogic <> FR:807 var
R113732:113737 VST.veric.SeparationLogic <> Sveric inst
R113725:113730 VST.veric.SeparationLogic <> Nveric inst
R113719:113723 VST.veric.mpred <> mpred def
R113557:113560 VST.msl.seplog <> prop meth
R113589:113605 VST.veric.seplog <> tc_environ def
R113694:113696 VST.floyd.SeparationLogicAsLogic <> tau:808 var
R113624:113640 VST.veric.seplog <> rettype_tycontext def
R113644:113646 Coq.Init.Datatypes <> snd def
R113679:113687 VST.veric.SeparationLogic <> fn_funsig def
R113673:113676 compcert.cfrontend.Ctypes <> type ind
R113649:113652 Coq.Init.Datatypes <> list ind
R113655:113658 Coq.Init.Datatypes <> prod ind
R113666:113669 compcert.cfrontend.Ctypes <> type ind
R113660:113664 compcert.common.AST <> ident def
R113568:113573 VST.veric.SeparationLogic <> Nveric inst
R113562:113566 VST.veric.mpred <> mpred def
R113538:113543 VST.veric.SeparationLogic <> Nveric inst
R113532:113536 VST.veric.mpred <> mpred def
R113511:113516 VST.veric.SeparationLogic <> Nveric inst
R113505:113509 VST.veric.mpred <> mpred def
R113846:113860 VST.msl.seplog <> ::logic:x_'&&'_x not
R113943:113943 VST.msl.seplog <> ::logic:x_'&&'_x not
R113799:113802 VST.msl.seplog <> ::logic:x_'*'_x not
R113845:113845 VST.msl.seplog <> ::logic:x_'*'_x not
R113784:113796 VST.veric.SeparationLogic <> stackframe_of def
binder 113807:113809 <> tau:809
R113816:113818 VST.msl.seplog <> ::logic:x_'*'_x not
R113814:113815 VST.floyd.SeparationLogicAsLogic <> FR:807 var
R113828:113828 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113838:113839 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113844:113844 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113829:113833 VST.veric.mpred <> ge_of def
R113835:113837 VST.floyd.SeparationLogicAsLogic <> tau:809 var
R113840:113843 VST.floyd.SeparationLogicAsLogic <> vals:804 var
R113825:113826 VST.floyd.SeparationLogicAsLogic <> x1:806 var
R113821:113823 VST.floyd.SeparationLogicAsLogic <> ts1:805 var
binder 113865:113867 <> tau:810
R113873:113876 VST.msl.seplog <> ::logic:'!!'_x not
R113942:113942 VST.msl.seplog <> ::logic:'!!'_x not
R113926:113928 Coq.Init.Logic <> ::type_scope:x_'='_x not
R113877:113879 Coq.Lists.List <> map def
R113904:113906 Coq.Lists.List <> map def
R113913:113921 compcert.cfrontend.Clight <> fn_params proj
R113908:113910 Coq.Init.Datatypes <> fst def
R113882:113888 VST.veric.mpred Map get def
R113891:113895 VST.veric.mpred <> te_of def
R113897:113899 VST.floyd.SeparationLogicAsLogic <> tau:810 var
R113929:113931 Coq.Lists.List <> map def
R113938:113941 VST.floyd.SeparationLogicAsLogic <> vals:804 var
R113933:113936 Coq.Init.Datatypes <> Some constr
R113223:113233 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_adapt thm
R114041:114050 VST.msl.seplog <> andp_left2 meth
R114041:114050 VST.msl.seplog <> andp_left2 meth
R114064:114076 VST.msl.seplog <> derives_trans meth
R114064:114076 VST.msl.seplog <> derives_trans meth
R114085:114098 VST.msl.seplog <> sepcon_derives meth
R114085:114098 VST.msl.seplog <> sepcon_derives meth
R114107:114127 VST.veric.SeparationLogic <> close_precondition_e' thm
R114107:114127 VST.veric.SeparationLogic <> close_precondition_e' thm
R114136:114147 VST.msl.seplog <> derives_refl meth
R114136:114147 VST.msl.seplog <> derives_refl meth
R114212:114247 VST.veric.semax_prog <> typecheck_environ_eval_id thm
R114212:114247 VST.veric.semax_prog <> typecheck_environ_eval_id thm
R114279:114287 VST.msl.seplog <> exp_right meth
R114290:114292 Coq.Lists.List <> map def
R114330:114332 Coq.Lists.List <> map def
R114339:114347 compcert.cfrontend.Clight <> fn_params proj
R114334:114336 Coq.Init.Datatypes <> fst def
R114304:114308 compcert.common.AST <> ident def
binder 114299:114300 <> i0:811
R114313:114319 VST.veric.mpred <> eval_id def
R114321:114322 VST.floyd.SeparationLogicAsLogic <> i0:811 var
R114279:114287 VST.msl.seplog <> exp_right meth
R114290:114292 Coq.Lists.List <> map def
R114330:114332 Coq.Lists.List <> map def
R114339:114347 compcert.cfrontend.Clight <> fn_params proj
R114334:114336 Coq.Init.Datatypes <> fst def
R114304:114308 compcert.common.AST <> ident def
binder 114299:114300 <> i0:812
R114313:114319 VST.veric.mpred <> eval_id def
R114321:114322 VST.floyd.SeparationLogicAsLogic <> i0:812 var
R114376:114376 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R114386:114388 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R114451:114451 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R114377:114381 VST.veric.mpred <> ge_of def
R114389:114391 Coq.Lists.List <> map def
R114429:114431 Coq.Lists.List <> map def
R114438:114446 compcert.cfrontend.Clight <> fn_params proj
R114433:114435 Coq.Init.Datatypes <> fst def
R114403:114407 compcert.common.AST <> ident def
binder 114398:114399 <> i0:813
R114412:114418 VST.veric.mpred <> eval_id def
R114420:114421 VST.floyd.SeparationLogicAsLogic <> i0:813 var
R114376:114376 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R114386:114388 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R114451:114451 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R114377:114381 VST.veric.mpred <> ge_of def
R114389:114391 Coq.Lists.List <> map def
R114429:114431 Coq.Lists.List <> map def
R114438:114446 compcert.cfrontend.Clight <> fn_params proj
R114433:114435 Coq.Init.Datatypes <> fst def
R114403:114407 compcert.common.AST <> ident def
binder 114398:114399 <> i0:814
R114412:114418 VST.veric.mpred <> eval_id def
R114420:114421 VST.floyd.SeparationLogicAsLogic <> i0:814 var
R114485:114507 VST.veric.semax_prog <> map_Some_inv thm
R114485:114507 VST.veric.semax_prog <> map_Some_inv thm
R114546:114558 VST.msl.seplog <> derives_trans meth
R114546:114558 VST.msl.seplog <> derives_trans meth
R114567:114580 VST.msl.seplog <> sepcon_derives meth
R114567:114580 VST.msl.seplog <> sepcon_derives meth
R114592:114603 VST.msl.seplog <> derives_refl meth
R114592:114603 VST.msl.seplog <> derives_refl meth
R114617:114629 VST.msl.seplog <> derives_trans meth
R114617:114629 VST.msl.seplog <> derives_trans meth
R114677:114686 VST.msl.seplog <> andp_right meth
R114677:114686 VST.msl.seplog <> andp_right meth
R114710:114719 VST.msl.seplog <> prop_right meth
R114710:114719 VST.msl.seplog <> prop_right meth
R114831:114839 VST.veric.SeparationLogic <> fn_funsig def
R114871:114890 VST.veric.seplog <> tc_temp_environ_elim thm
R114907:114914 compcert.cfrontend.Clight <> fn_temps proj
R114893:114901 compcert.cfrontend.Clight <> fn_params proj
R114871:114890 VST.veric.seplog <> tc_temp_environ_elim thm
R114907:114914 compcert.cfrontend.Clight <> fn_temps proj
R114893:114901 compcert.cfrontend.Clight <> fn_params proj
R114986:114994 compcert.cfrontend.Clight <> fn_params proj
R114986:114994 compcert.cfrontend.Clight <> fn_params proj
R115149:115151 Coq.Init.Datatypes <> snd def
R115141:115143 Coq.Init.Datatypes <> fst def
R115149:115151 Coq.Init.Datatypes <> snd def
R115141:115143 Coq.Init.Datatypes <> fst def
R115238:115244 VST.veric.mpred <> eval_id def
R115290:115304 VST.veric.Cop2 <> tc_val_has_type thm
R115290:115304 VST.veric.Cop2 <> tc_val_has_type thm
R116175:116183 VST.msl.seplog <> exp_right meth
R116175:116183 VST.msl.seplog <> exp_right meth
R116215:116223 VST.msl.seplog <> exp_right meth
R116215:116223 VST.msl.seplog <> exp_right meth
R116254:116262 VST.msl.seplog <> exp_right meth
R116254:116262 VST.msl.seplog <> exp_right meth
R116287:116297 VST.msl.seplog <> sepcon_comm meth
R116287:116297 VST.msl.seplog <> sepcon_comm meth
R116287:116297 VST.msl.seplog <> sepcon_comm meth
R116312:116321 VST.msl.seplog <> andp_right meth
R116334:116343 VST.msl.seplog <> prop_right meth
R116312:116321 VST.msl.seplog <> andp_right meth
R116334:116343 VST.msl.seplog <> prop_right meth
R116368:116377 VST.msl.seplog <> andp_right meth
R116390:116399 VST.msl.seplog <> prop_right meth
R116368:116377 VST.msl.seplog <> andp_right meth
R116390:116399 VST.msl.seplog <> prop_right meth
R116434:116443 VST.msl.seplog <> andp_right meth
R116456:116465 VST.msl.seplog <> prop_right meth
R116434:116443 VST.msl.seplog <> andp_right meth
R116456:116465 VST.msl.seplog <> prop_right meth
R116501:116510 VST.msl.seplog <> andp_right meth
R116521:116530 VST.msl.seplog <> andp_right meth
R116540:116549 VST.msl.seplog <> prop_right meth
R116501:116510 VST.msl.seplog <> andp_right meth
R116521:116530 VST.msl.seplog <> andp_right meth
R116540:116549 VST.msl.seplog <> prop_right meth
R116574:116583 VST.msl.seplog <> prop_right meth
R116574:116583 VST.msl.seplog <> prop_right meth
R116711:116719 compcert.cfrontend.Clight <> fn_params proj
R116711:116719 compcert.cfrontend.Clight <> fn_params proj
R116880:116882 Coq.Init.Datatypes <> snd def
R116872:116874 Coq.Init.Datatypes <> fst def
R116880:116882 Coq.Init.Datatypes <> snd def
R116872:116874 Coq.Init.Datatypes <> fst def
R116909:116917 compcert.lib.Maps PTree gss thm
R116909:116917 compcert.lib.Maps PTree gss thm
R116938:116944 VST.veric.mpred <> eval_id def
R117095:117103 compcert.lib.Maps PTree gso thm
R117095:117103 compcert.lib.Maps PTree gso thm
R117095:117103 compcert.lib.Maps PTree gso thm
R117095:117103 compcert.lib.Maps PTree gso thm
R117163:117180 VST.veric.seplog <> make_context_t_get thm
R117163:117180 VST.veric.seplog <> make_context_t_get thm
R117209:117221 VST.msl.seplog <> derives_trans meth
R117209:117221 VST.msl.seplog <> derives_trans meth
R117251:117262 VST.msl.log_normalize <> andp_derives thm
R117251:117262 VST.msl.log_normalize <> andp_derives thm
R117280:117291 VST.msl.log_normalize <> prop_derives thm
R117280:117291 VST.msl.log_normalize <> prop_derives thm
R117342:117348 VST.veric.mpred Map ext thm
R117342:117348 VST.veric.mpred Map ext thm
R117465:117471 VST.veric.mpred Map get def
R117465:117471 VST.veric.mpred Map get def
R117582:117593 compcert.lib.Maps PTree gempty thm
R117582:117593 compcert.lib.Maps PTree gempty thm
R117582:117593 compcert.lib.Maps PTree gempty thm
R117644:117663 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists def
R117644:117663 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists def
R117689:117708 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists def
R117689:117708 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists def
R117733:117752 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists def
R117733:117752 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists def
R117776:117795 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists def
R117776:117795 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_extract_exists def
R117820:117837 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R117820:117837 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R117874:117882 VST.veric.SeparationLogic <> fn_funsig def
R117942:117952 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_frame thm
binder 118239:118241 <> rho:815
R118140:118155 VST.veric.SeparationLogic <> frame_ret_assert def
R118210:118222 VST.veric.SeparationLogic <> stackframe_of def
R118158:118181 VST.veric.SeparationLogic <> function_body_ret_assert def
R118184:118192 compcert.cfrontend.Clight <> fn_return proj
R118122:118128 compcert.cfrontend.Clight <> fn_body proj
R117998:118004 VST.veric.mpred <> environ ind
binder 117992:117994 <> rho:816
R118078:118093 VST.msl.seplog <> ::logic:x_'*'_x not
R118021:118038 VST.veric.SeparationLogic <> close_precondition def
R118075:118077 VST.floyd.SeparationLogicAsLogic <> rho:816 var
R118041:118043 Coq.Lists.List <> map def
R118050:118058 compcert.cfrontend.Clight <> fn_params proj
R118045:118047 Coq.Init.Datatypes <> fst def
R118094:118106 VST.veric.SeparationLogic <> stackframe_of def
R118110:118112 VST.floyd.SeparationLogicAsLogic <> rho:816 var
R117955:117968 VST.veric.tycontext <> func_tycontext def
R117976:117978 Coq.Init.Datatypes <> nil constr
R117942:117952 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_frame thm
binder 118239:118241 <> rho:817
R118140:118155 VST.veric.SeparationLogic <> frame_ret_assert def
R118210:118222 VST.veric.SeparationLogic <> stackframe_of def
R118158:118181 VST.veric.SeparationLogic <> function_body_ret_assert def
R118184:118192 compcert.cfrontend.Clight <> fn_return proj
R118122:118128 compcert.cfrontend.Clight <> fn_body proj
R117998:118004 VST.veric.mpred <> environ ind
binder 117992:117994 <> rho:818
R118078:118093 VST.msl.seplog <> ::logic:x_'*'_x not
R118021:118038 VST.veric.SeparationLogic <> close_precondition def
R118075:118077 VST.floyd.SeparationLogicAsLogic <> rho:818 var
R118041:118043 Coq.Lists.List <> map def
R118050:118058 compcert.cfrontend.Clight <> fn_params proj
R118045:118047 Coq.Init.Datatypes <> fst def
R118094:118106 VST.veric.SeparationLogic <> stackframe_of def
R118110:118112 VST.floyd.SeparationLogicAsLogic <> rho:818 var
R117955:117968 VST.veric.tycontext <> func_tycontext def
R117976:117978 Coq.Init.Datatypes <> nil constr
R118273:118286 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Conseq semax_pre_post prfax
R118273:118286 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Conseq semax_pre_post prfax
R118404:118408 VST.veric.SeparationLogic <> local def
R118411:118415 VST.veric.mpred <> lift1 def
R118505:118516 VST.msl.seplog <> sepcon_assoc meth
R118519:118529 VST.msl.seplog <> sepcon_comm meth
R118532:118543 VST.msl.seplog <> sepcon_assoc meth
R118505:118516 VST.msl.seplog <> sepcon_assoc meth
R118505:118516 VST.msl.seplog <> sepcon_assoc meth
R118519:118529 VST.msl.seplog <> sepcon_comm meth
R118519:118529 VST.msl.seplog <> sepcon_comm meth
R118532:118543 VST.msl.seplog <> sepcon_assoc meth
R118532:118543 VST.msl.seplog <> sepcon_assoc meth
R118561:118573 VST.msl.seplog <> derives_trans meth
R118561:118573 VST.msl.seplog <> derives_trans meth
R118594:118607 VST.msl.seplog <> sepcon_derives meth
R118620:118631 VST.msl.seplog <> derives_refl meth
R118594:118607 VST.msl.seplog <> sepcon_derives meth
R118620:118631 VST.msl.seplog <> derives_refl meth
R118654:118669 VST.veric.SeparationLogic <> close_argsassert thm
R118654:118669 VST.veric.SeparationLogic <> close_argsassert thm
R118715:118728 VST.msl.seplog <> sepcon_derives meth
R118715:118728 VST.msl.seplog <> sepcon_derives meth
R118754:118763 VST.msl.seplog <> andp_right meth
R118754:118763 VST.msl.seplog <> andp_right meth
R118783:118792 VST.msl.seplog <> prop_right meth
R118783:118792 VST.msl.seplog <> prop_right meth
R118824:118840 VST.veric.SeparationLogic <> argsassert2assert def
R118866:118906 VST.veric.semax_prog <> typecheck_temp_environ_eval_id thm
R118866:118906 VST.veric.semax_prog <> typecheck_temp_environ_eval_id thm
R118963:118985 VST.veric.semax_prog <> map_Some_inv thm
R118963:118985 VST.veric.semax_prog <> map_Some_inv thm
R119069:119077 compcert.cfrontend.Clight <> fn_return proj
R119069:119077 compcert.cfrontend.Clight <> fn_return proj
R119117:119121 VST.veric.SeparationLogic <> local def
R119124:119133 VST.veric.SeparationLogic <> tc_environ def
R119136:119140 VST.veric.mpred <> lift1 def
R119170:119180 VST.msl.seplog <> sepcon_comm meth
R119186:119197 VST.msl.seplog <> sepcon_assoc meth
R119170:119180 VST.msl.seplog <> sepcon_comm meth
R119170:119180 VST.msl.seplog <> sepcon_comm meth
R119186:119197 VST.msl.seplog <> sepcon_assoc meth
R119186:119197 VST.msl.seplog <> sepcon_assoc meth
R119214:119227 VST.msl.seplog <> sepcon_derives meth
R119214:119227 VST.msl.seplog <> sepcon_derives meth
R119254:119266 VST.msl.seplog <> derives_trans meth
R119254:119266 VST.msl.seplog <> derives_trans meth
R119299:119308 VST.msl.seplog <> andp_right meth
R119299:119308 VST.msl.seplog <> andp_right meth
R119317:119326 VST.msl.seplog <> prop_right meth
R119317:119326 VST.msl.seplog <> prop_right meth
R119340:119369 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic typecheck_environ_globals_only thm
R119340:119369 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic typecheck_environ_globals_only thm
R119386:119397 VST.msl.seplog <> derives_refl meth
R119386:119397 VST.msl.seplog <> derives_refl meth
R119441:119450 VST.msl.seplog <> andp_left2 meth
R119441:119450 VST.msl.seplog <> andp_left2 meth
R119470:119480 VST.msl.seplog <> sepcon_comm meth
R119486:119497 VST.msl.seplog <> sepcon_assoc meth
R119470:119480 VST.msl.seplog <> sepcon_comm meth
R119470:119480 VST.msl.seplog <> sepcon_comm meth
R119486:119497 VST.msl.seplog <> sepcon_assoc meth
R119486:119497 VST.msl.seplog <> sepcon_assoc meth
R119506:119519 VST.msl.seplog <> sepcon_derives meth
R119506:119519 VST.msl.seplog <> sepcon_derives meth
R119588:119600 VST.msl.seplog <> derives_trans meth
R119627:119636 VST.msl.seplog <> andp_right meth
R119588:119600 VST.msl.seplog <> derives_trans meth
R119627:119636 VST.msl.seplog <> andp_right meth
R119665:119674 VST.msl.seplog <> prop_right meth
R119665:119674 VST.msl.seplog <> prop_right meth
R119683:119719 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic typecheck_environ_env_setglobals_only thm
R119683:119719 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic typecheck_environ_env_setglobals_only thm
R119728:119739 VST.msl.seplog <> derives_refl meth
R119728:119739 VST.msl.seplog <> derives_refl meth
R119763:119771 compcert.cfrontend.Clight <> fn_return proj
R119763:119771 compcert.cfrontend.Clight <> fn_return proj
R119807:119819 VST.msl.seplog <> derives_trans meth
R119846:119855 VST.msl.seplog <> andp_right meth
R119807:119819 VST.msl.seplog <> derives_trans meth
R119846:119855 VST.msl.seplog <> andp_right meth
R119884:119893 VST.msl.seplog <> prop_right meth
R119884:119893 VST.msl.seplog <> prop_right meth
R119902:119931 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic typecheck_environ_globals_only thm
R119902:119931 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic typecheck_environ_globals_only thm
R119940:119951 VST.msl.seplog <> derives_refl meth
R119940:119951 VST.msl.seplog <> derives_refl meth
R120004:120037 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic <> mod
R120078:120116 VST.veric.SeparationLogic PRACTICAL_CLIGHT_SEPARATION_HOARE_LOGIC <> mod
mod 120048:120073 <> DeepEmbedded.DeepEmbeddedPracticalLogic
R120139:120153 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef <> modtype
mod 120127:120134 <> DeepEmbedded.DeepEmbeddedPracticalLogic.CSHL_Def
R120177:120192 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDefs <> modtype
mod 120164:120172 <> DeepEmbedded.DeepEmbeddedPracticalLogic.CSHL_Defs
R120224:120257 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic <> modtype
mod 120203:120219 <> DeepEmbedded.DeepEmbeddedPracticalLogic.CSHL_MinimumLogic
def 120272:120280 DeepEmbedded.DeepEmbeddedPracticalLogic semax_set
R120286:120343 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic.SetB semax_set_backward prfax
R120357:120361 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R120357:120361 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
prf 120387:120407 DeepEmbedded.DeepEmbeddedPracticalLogic semax_loop_nocontinue
R120424:120432 VST.veric.mpred <> compspecs class
binder 120420:120421 <> CS:819
R120443:120452 VST.veric.juicy_extspec <> OracleKind class
binder 120436:120440 <> Espec:820
binder 120464:120468 <> Delta:821
binder 120470:120470 <> P:822
binder 120472:120475 <> body:823
binder 120477:120480 <> incr:824
binder 120482:120482 <> R:825
R120564:120568 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R120570:120574 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R120611:120611 VST.floyd.SeparationLogicAsLogic <> R:825 var
R120594:120598 compcert.cfrontend.Clight <> Sloop constr
R120605:120608 VST.floyd.SeparationLogicAsLogic <> incr:824 var
R120600:120603 VST.floyd.SeparationLogicAsLogic <> body:823 var
R120591:120591 VST.floyd.SeparationLogicAsLogic <> P:822 var
R120585:120589 VST.floyd.SeparationLogicAsLogic <> Delta:821 var
R120579:120583 VST.floyd.SeparationLogicAsLogic <> Espec:820 var
R120576:120577 VST.floyd.SeparationLogicAsLogic <> CS:819 var
R120487:120491 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R120533:120558 VST.veric.SeparationLogic <> loop_nocontinue_ret_assert def
R120562:120562 VST.floyd.SeparationLogicAsLogic <> R:825 var
R120560:120560 VST.floyd.SeparationLogicAsLogic <> P:822 var
R120511:120519 compcert.cfrontend.Clight <> Ssequence constr
R120526:120529 VST.floyd.SeparationLogicAsLogic <> incr:824 var
R120521:120524 VST.floyd.SeparationLogicAsLogic <> body:823 var
R120508:120508 VST.floyd.SeparationLogicAsLogic <> P:822 var
R120502:120506 VST.floyd.SeparationLogicAsLogic <> Delta:821 var
R120496:120500 VST.floyd.SeparationLogicAsLogic <> Espec:820 var
R120493:120494 VST.floyd.SeparationLogicAsLogic <> CS:819 var
R120639:120651 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R120639:120651 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R120696:120713 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R120696:120713 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R120749:120760 VST.veric.SeparationLogic <> overridePost def
R120763:120788 VST.veric.SeparationLogic <> loop_nocontinue_ret_assert def
R120791:120806 VST.veric.SeparationLogic <> loop1_ret_assert def
R120825:120834 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R120825:120834 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R120868:120877 VST.msl.seplog <> andp_left2 meth
R120868:120877 VST.msl.seplog <> andp_left2 meth
R120910:120921 VST.msl.seplog <> derives_refl meth
R120910:120921 VST.msl.seplog <> derives_refl meth
R120936:120945 VST.msl.seplog <> andp_left2 meth
R120936:120945 VST.msl.seplog <> andp_left2 meth
R120978:120989 VST.msl.seplog <> derives_refl meth
R120978:120989 VST.msl.seplog <> derives_refl meth
R121004:121013 VST.msl.seplog <> andp_left2 meth
R121004:121013 VST.msl.seplog <> andp_left2 meth
R121046:121052 VST.msl.log_normalize <> FF_left thm
R121046:121052 VST.msl.log_normalize <> FF_left thm
R121080:121089 VST.msl.seplog <> andp_left2 meth
R121080:121089 VST.msl.seplog <> andp_left2 meth
R121122:121133 VST.msl.seplog <> derives_refl meth
R121122:121133 VST.msl.seplog <> derives_refl meth
R121163:121174 VST.veric.SeparationLogic <> overridePost def
R121177:121202 VST.veric.SeparationLogic <> loop_nocontinue_ret_assert def
R121205:121220 VST.veric.SeparationLogic <> loop2_ret_assert def
prf 121250:121261 DeepEmbedded.DeepEmbeddedPracticalLogic semax_if_seq
R121277:121285 VST.veric.mpred <> compspecs class
binder 121273:121274 <> CS:826
R121296:121305 VST.veric.juicy_extspec <> OracleKind class
binder 121289:121293 <> Espec:827
binder 121308:121312 <> Delta:828
binder 121314:121314 <> P:829
binder 121316:121316 <> e:830
binder 121318:121319 <> c1:831
binder 121321:121322 <> c2:832
binder 121324:121324 <> c:833
binder 121326:121326 <> Q:834
R121395:121399 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R121400:121404 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R121450:121450 VST.floyd.SeparationLogicAsLogic <> Q:834 var
R121415:121423 compcert.cfrontend.Clight <> Ssequence constr
R121447:121447 VST.floyd.SeparationLogicAsLogic <> c:833 var
R121426:121436 compcert.cfrontend.Clight <> Sifthenelse constr
R121443:121444 VST.floyd.SeparationLogicAsLogic <> c2:832 var
R121440:121441 VST.floyd.SeparationLogicAsLogic <> c1:831 var
R121438:121438 VST.floyd.SeparationLogicAsLogic <> e:830 var
R121412:121412 VST.floyd.SeparationLogicAsLogic <> P:829 var
R121406:121410 VST.floyd.SeparationLogicAsLogic <> Delta:828 var
R121330:121334 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R121394:121394 VST.floyd.SeparationLogicAsLogic <> Q:834 var
R121345:121355 compcert.cfrontend.Clight <> Sifthenelse constr
R121377:121385 compcert.cfrontend.Clight <> Ssequence constr
R121390:121390 VST.floyd.SeparationLogicAsLogic <> c:833 var
R121387:121388 VST.floyd.SeparationLogicAsLogic <> c2:832 var
R121360:121368 compcert.cfrontend.Clight <> Ssequence constr
R121373:121373 VST.floyd.SeparationLogicAsLogic <> c:833 var
R121370:121371 VST.floyd.SeparationLogicAsLogic <> c1:831 var
R121357:121357 VST.floyd.SeparationLogicAsLogic <> e:830 var
R121342:121342 VST.floyd.SeparationLogicAsLogic <> P:829 var
R121336:121340 VST.floyd.SeparationLogicAsLogic <> Delta:828 var
R121478:121497 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_ifthenelse_inv thm
R121478:121497 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_ifthenelse_inv thm
R121514:121525 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R121553:121569 VST.floyd.assert_lemmas <> derives_full_refl thm
R121514:121525 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R121553:121569 VST.floyd.assert_lemmas <> derives_full_refl thm
R121553:121569 VST.floyd.assert_lemmas <> derives_full_refl thm
R121553:121569 VST.floyd.assert_lemmas <> derives_full_refl thm
R121553:121569 VST.floyd.assert_lemmas <> derives_full_refl thm
R121588:121596 VST.msl.log_normalize <> exp_andp2 thm
R121588:121596 VST.msl.log_normalize <> exp_andp2 thm
R121588:121596 VST.msl.log_normalize <> exp_andp2 thm
R121607:121626 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R121607:121626 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R121652:121660 VST.msl.log_normalize <> andp_comm thm
R121663:121672 VST.msl.log_normalize <> andp_assoc thm
R121652:121660 VST.msl.log_normalize <> andp_comm thm
R121652:121660 VST.msl.log_normalize <> andp_comm thm
R121663:121672 VST.msl.log_normalize <> andp_assoc thm
R121663:121672 VST.msl.log_normalize <> andp_assoc thm
R121683:121700 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R121683:121700 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R121727:121735 VST.msl.log_normalize <> andp_comm thm
R121727:121735 VST.msl.log_normalize <> andp_comm thm
R121727:121735 VST.msl.log_normalize <> andp_comm thm
R121746:121758 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R121746:121758 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R121775:121787 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R121775:121787 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R121875:121877 VST.msl.seplog <> orp meth
R121851:121867 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R121894:121917 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R121875:121877 VST.msl.seplog <> orp meth
R121851:121867 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R121894:121917 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R121934:121943 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R121934:121943 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R121990:121999 VST.msl.seplog <> andp_left2 meth
R122002:122011 VST.msl.seplog <> orp_right1 meth
R122014:122025 VST.msl.seplog <> derives_refl meth
R121990:121999 VST.msl.seplog <> andp_left2 meth
R122002:122011 VST.msl.seplog <> orp_right1 meth
R122014:122025 VST.msl.seplog <> derives_refl meth
R122052:122061 VST.msl.seplog <> andp_left2 meth
R122064:122075 VST.msl.seplog <> derives_refl meth
R122052:122061 VST.msl.seplog <> andp_left2 meth
R122064:122075 VST.msl.seplog <> derives_refl meth
R122102:122111 VST.msl.seplog <> andp_left2 meth
R122114:122125 VST.msl.seplog <> derives_refl meth
R122102:122111 VST.msl.seplog <> andp_left2 meth
R122114:122125 VST.msl.seplog <> derives_refl meth
R122159:122168 VST.msl.seplog <> andp_left2 meth
R122171:122182 VST.msl.seplog <> derives_refl meth
R122159:122168 VST.msl.seplog <> andp_left2 meth
R122171:122182 VST.msl.seplog <> derives_refl meth
R122196:122205 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R122196:122205 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R122252:122261 VST.msl.seplog <> andp_left2 meth
R122264:122273 VST.msl.seplog <> orp_right2 meth
R122276:122287 VST.msl.seplog <> derives_refl meth
R122252:122261 VST.msl.seplog <> andp_left2 meth
R122264:122273 VST.msl.seplog <> orp_right2 meth
R122276:122287 VST.msl.seplog <> derives_refl meth
R122314:122323 VST.msl.seplog <> andp_left2 meth
R122326:122337 VST.msl.seplog <> derives_refl meth
R122314:122323 VST.msl.seplog <> andp_left2 meth
R122326:122337 VST.msl.seplog <> derives_refl meth
R122364:122373 VST.msl.seplog <> andp_left2 meth
R122376:122387 VST.msl.seplog <> derives_refl meth
R122364:122373 VST.msl.seplog <> andp_left2 meth
R122376:122387 VST.msl.seplog <> derives_refl meth
R122421:122430 VST.msl.seplog <> andp_left2 meth
R122433:122444 VST.msl.seplog <> derives_refl meth
R122421:122430 VST.msl.seplog <> andp_left2 meth
R122433:122444 VST.msl.seplog <> derives_refl meth
R122459:122468 VST.msl.log_normalize <> orp_is_exp thm
R122459:122468 VST.msl.log_normalize <> orp_is_exp thm
R122459:122468 VST.msl.log_normalize <> orp_is_exp thm
R122481:122500 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R122481:122500 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
prf 122548:122565 DeepEmbedded.DeepEmbeddedPracticalLogic semax_loop_unroll1
R122582:122590 VST.veric.mpred <> compspecs class
binder 122578:122579 <> CS:835
R122601:122610 VST.veric.juicy_extspec <> OracleKind class
binder 122594:122598 <> Espec:836
binder 122613:122617 <> Delta:837
binder 122619:122619 <> P:838
binder 122621:122622 <> P':839
binder 122624:122624 <> Q:840
binder 122626:122629 <> body:841
binder 122631:122634 <> incr:842
binder 122636:122636 <> R:843
R122693:122698 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R122751:122756 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R122800:122805 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R122807:122811 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R122848:122848 VST.floyd.SeparationLogicAsLogic <> R:843 var
R122831:122835 compcert.cfrontend.Clight <> Sloop constr
R122842:122845 VST.floyd.SeparationLogicAsLogic <> incr:842 var
R122837:122840 VST.floyd.SeparationLogicAsLogic <> body:841 var
R122828:122828 VST.floyd.SeparationLogicAsLogic <> P:838 var
R122822:122826 VST.floyd.SeparationLogicAsLogic <> Delta:837 var
R122816:122820 VST.floyd.SeparationLogicAsLogic <> Espec:836 var
R122813:122814 VST.floyd.SeparationLogicAsLogic <> CS:835 var
R122758:122762 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R122799:122799 VST.floyd.SeparationLogicAsLogic <> R:843 var
R122782:122786 compcert.cfrontend.Clight <> Sloop constr
R122793:122796 VST.floyd.SeparationLogicAsLogic <> incr:842 var
R122788:122791 VST.floyd.SeparationLogicAsLogic <> body:841 var
R122779:122779 VST.floyd.SeparationLogicAsLogic <> Q:840 var
R122773:122777 VST.floyd.SeparationLogicAsLogic <> Delta:837 var
R122767:122771 VST.floyd.SeparationLogicAsLogic <> Espec:836 var
R122764:122765 VST.floyd.SeparationLogicAsLogic <> CS:835 var
R122700:122704 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R122730:122745 VST.veric.SeparationLogic <> loop2_ret_assert def
R122749:122749 VST.floyd.SeparationLogicAsLogic <> R:843 var
R122747:122747 VST.floyd.SeparationLogicAsLogic <> Q:840 var
R122724:122727 VST.floyd.SeparationLogicAsLogic <> incr:842 var
R122721:122722 VST.floyd.SeparationLogicAsLogic <> P':839 var
R122715:122719 VST.floyd.SeparationLogicAsLogic <> Delta:837 var
R122709:122713 VST.floyd.SeparationLogicAsLogic <> Espec:836 var
R122706:122707 VST.floyd.SeparationLogicAsLogic <> CS:835 var
R122642:122646 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R122671:122686 VST.veric.SeparationLogic <> loop1_ret_assert def
R122691:122691 VST.floyd.SeparationLogicAsLogic <> R:843 var
R122688:122689 VST.floyd.SeparationLogicAsLogic <> P':839 var
R122665:122668 VST.floyd.SeparationLogicAsLogic <> body:841 var
R122663:122663 VST.floyd.SeparationLogicAsLogic <> P:838 var
R122657:122661 VST.floyd.SeparationLogicAsLogic <> Delta:837 var
R122651:122655 VST.floyd.SeparationLogicAsLogic <> Espec:836 var
R122648:122649 VST.floyd.SeparationLogicAsLogic <> CS:835 var
R122876:122889 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_loop_inv thm
R122876:122889 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_loop_inv thm
R122928:122950 VST.msl.seplog <> ::logic:x_'||'_x not
R123168:123168 VST.msl.seplog <> ::logic:x_'||'_x not
R122923:122926 VST.msl.seplog <> ::logic:x_'||'_x not
R122951:122953 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R122974:122996 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123167:123167 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R122965:122968 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R122969:122973 VST.veric.mpred <> mpred def
R122958:122964 VST.veric.mpred <> environ ind
binder 122954:122954 <> Q:844
R122997:122999 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123021:123043 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123012:123015 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R123016:123020 VST.veric.mpred <> mpred def
R123005:123011 VST.veric.mpred <> environ ind
binder 123000:123001 <> Q':845
R123162:123165 VST.msl.seplog <> ::logic:x_'&&'_x not
R123044:123047 VST.msl.seplog <> ::logic:'!!'_x not
R123161:123161 VST.msl.seplog <> ::logic:'!!'_x not
R123090:123118 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R123048:123052 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R123068:123083 VST.veric.SeparationLogic <> loop1_ret_assert def
R123085:123086 VST.floyd.SeparationLogicAsLogic <> Q':845 var
R123060:123060 VST.floyd.SeparationLogicAsLogic <> Q:844 var
R123119:123123 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R123140:123155 VST.veric.SeparationLogic <> loop2_ret_assert def
R123157:123157 VST.floyd.SeparationLogicAsLogic <> Q:844 var
R123131:123132 VST.floyd.SeparationLogicAsLogic <> Q':845 var
R123166:123166 VST.floyd.SeparationLogicAsLogic <> Q:844 var
R122906:122914 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R122928:122950 VST.msl.seplog <> ::logic:x_'||'_x not
R123168:123168 VST.msl.seplog <> ::logic:x_'||'_x not
R122923:122926 VST.msl.seplog <> ::logic:x_'||'_x not
R122951:122953 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R122974:122996 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123167:123167 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R122965:122968 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R122969:122973 VST.veric.mpred <> mpred def
R122958:122964 VST.veric.mpred <> environ ind
binder 122954:122954 <> Q:846
R122997:122999 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123021:123043 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123012:123015 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R123016:123020 VST.veric.mpred <> mpred def
R123005:123011 VST.veric.mpred <> environ ind
binder 123000:123001 <> Q':847
R123162:123165 VST.msl.seplog <> ::logic:x_'&&'_x not
R123044:123047 VST.msl.seplog <> ::logic:'!!'_x not
R123161:123161 VST.msl.seplog <> ::logic:'!!'_x not
R123090:123118 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R123048:123052 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R123068:123083 VST.veric.SeparationLogic <> loop1_ret_assert def
R123085:123086 VST.floyd.SeparationLogicAsLogic <> Q':847 var
R123060:123060 VST.floyd.SeparationLogicAsLogic <> Q:846 var
R123119:123123 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R123140:123155 VST.veric.SeparationLogic <> loop2_ret_assert def
R123157:123157 VST.floyd.SeparationLogicAsLogic <> Q:846 var
R123131:123132 VST.floyd.SeparationLogicAsLogic <> Q':847 var
R123166:123166 VST.floyd.SeparationLogicAsLogic <> Q:846 var
R122906:122914 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_pre thm
R123182:123191 VST.msl.seplog <> andp_left2 meth
R123194:123203 VST.msl.seplog <> orp_right1 meth
R123206:123215 VST.msl.seplog <> orp_right1 meth
R123218:123229 VST.msl.seplog <> derives_refl meth
R123182:123191 VST.msl.seplog <> andp_left2 meth
R123194:123203 VST.msl.seplog <> orp_right1 meth
R123206:123215 VST.msl.seplog <> orp_right1 meth
R123218:123229 VST.msl.seplog <> derives_refl meth
R123269:123291 VST.msl.seplog <> ::logic:x_'||'_x not
R123510:123510 VST.msl.seplog <> ::logic:x_'||'_x not
R123292:123294 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123315:123337 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123509:123509 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123306:123309 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R123310:123314 VST.veric.mpred <> mpred def
R123299:123305 VST.veric.mpred <> environ ind
binder 123295:123295 <> Q:848
R123338:123340 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123362:123384 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123353:123356 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R123357:123361 VST.veric.mpred <> mpred def
R123346:123352 VST.veric.mpred <> environ ind
binder 123341:123342 <> Q':849
R123503:123506 VST.msl.seplog <> ::logic:x_'&&'_x not
R123385:123388 VST.msl.seplog <> ::logic:'!!'_x not
R123502:123502 VST.msl.seplog <> ::logic:'!!'_x not
R123431:123459 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R123389:123393 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R123409:123424 VST.veric.SeparationLogic <> loop1_ret_assert def
R123426:123427 VST.floyd.SeparationLogicAsLogic <> Q':849 var
R123401:123401 VST.floyd.SeparationLogicAsLogic <> Q:848 var
R123460:123464 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R123481:123496 VST.veric.SeparationLogic <> loop2_ret_assert def
R123498:123498 VST.floyd.SeparationLogicAsLogic <> Q:848 var
R123472:123473 VST.floyd.SeparationLogicAsLogic <> Q':849 var
R123507:123508 VST.floyd.SeparationLogicAsLogic <> Q':849 var
R123242:123259 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R123269:123291 VST.msl.seplog <> ::logic:x_'||'_x not
R123510:123510 VST.msl.seplog <> ::logic:x_'||'_x not
R123292:123294 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123315:123337 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123509:123509 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123306:123309 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R123310:123314 VST.veric.mpred <> mpred def
R123299:123305 VST.veric.mpred <> environ ind
binder 123295:123295 <> Q:850
R123338:123340 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123362:123384 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R123353:123356 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R123357:123361 VST.veric.mpred <> mpred def
R123346:123352 VST.veric.mpred <> environ ind
binder 123341:123342 <> Q':851
R123503:123506 VST.msl.seplog <> ::logic:x_'&&'_x not
R123385:123388 VST.msl.seplog <> ::logic:'!!'_x not
R123502:123502 VST.msl.seplog <> ::logic:'!!'_x not
R123431:123459 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R123389:123393 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R123409:123424 VST.veric.SeparationLogic <> loop1_ret_assert def
R123426:123427 VST.floyd.SeparationLogicAsLogic <> Q':851 var
R123401:123401 VST.floyd.SeparationLogicAsLogic <> Q:850 var
R123460:123464 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R123481:123496 VST.veric.SeparationLogic <> loop2_ret_assert def
R123498:123498 VST.floyd.SeparationLogicAsLogic <> Q:850 var
R123472:123473 VST.floyd.SeparationLogicAsLogic <> Q':851 var
R123507:123508 VST.floyd.SeparationLogicAsLogic <> Q':851 var
R123242:123259 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R123524:123532 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_orp thm
R123542:123550 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_orp thm
R123524:123532 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_orp thm
R123542:123550 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_orp thm
R123569:123578 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R123569:123578 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R123612:123627 VST.veric.SeparationLogic <> loop1_ret_assert def
R123656:123665 VST.msl.seplog <> andp_left2 meth
R123668:123677 VST.msl.seplog <> orp_right1 meth
R123680:123691 VST.msl.seplog <> derives_refl meth
R123656:123665 VST.msl.seplog <> andp_left2 meth
R123668:123677 VST.msl.seplog <> orp_right1 meth
R123680:123691 VST.msl.seplog <> derives_refl meth
R123709:123724 VST.veric.SeparationLogic <> loop1_ret_assert def
R123753:123762 VST.msl.seplog <> andp_left2 meth
R123765:123776 VST.msl.seplog <> derives_refl meth
R123753:123762 VST.msl.seplog <> andp_left2 meth
R123765:123776 VST.msl.seplog <> derives_refl meth
R123794:123809 VST.veric.SeparationLogic <> loop1_ret_assert def
R123838:123847 VST.msl.seplog <> andp_left2 meth
R123850:123859 VST.msl.seplog <> orp_right1 meth
R123862:123873 VST.msl.seplog <> derives_refl meth
R123838:123847 VST.msl.seplog <> andp_left2 meth
R123850:123859 VST.msl.seplog <> orp_right1 meth
R123862:123873 VST.msl.seplog <> derives_refl meth
R123907:123922 VST.veric.SeparationLogic <> loop1_ret_assert def
R123951:123960 VST.msl.seplog <> andp_left2 meth
R123963:123974 VST.msl.seplog <> derives_refl meth
R123951:123960 VST.msl.seplog <> andp_left2 meth
R123963:123974 VST.msl.seplog <> derives_refl meth
R123990:124001 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R124030:124046 VST.floyd.assert_lemmas <> derives_full_refl thm
R123990:124001 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R124030:124046 VST.floyd.assert_lemmas <> derives_full_refl thm
R124030:124046 VST.floyd.assert_lemmas <> derives_full_refl thm
R124030:124046 VST.floyd.assert_lemmas <> derives_full_refl thm
R124030:124046 VST.floyd.assert_lemmas <> derives_full_refl thm
R124067:124086 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R124067:124086 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R124112:124131 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R124112:124131 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R124158:124175 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R124158:124175 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R124223:124238 VST.veric.SeparationLogic <> loop1_ret_assert def
R124206:124215 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R124223:124238 VST.veric.SeparationLogic <> loop1_ret_assert def
R124206:124215 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R124269:124284 VST.veric.SeparationLogic <> loop1_ret_assert def
R124313:124322 VST.msl.seplog <> andp_left2 meth
R124325:124334 VST.msl.seplog <> orp_right2 meth
R124338:124346 VST.msl.seplog <> exp_right meth
R124354:124362 VST.msl.seplog <> exp_right meth
R124313:124322 VST.msl.seplog <> andp_left2 meth
R124325:124334 VST.msl.seplog <> orp_right2 meth
R124338:124346 VST.msl.seplog <> exp_right meth
R124354:124362 VST.msl.seplog <> exp_right meth
R124384:124393 VST.msl.seplog <> andp_right meth
R124403:124412 VST.msl.seplog <> prop_right meth
R124428:124439 VST.msl.seplog <> derives_refl meth
R124384:124393 VST.msl.seplog <> andp_right meth
R124403:124412 VST.msl.seplog <> prop_right meth
R124428:124439 VST.msl.seplog <> derives_refl meth
R124458:124473 VST.veric.SeparationLogic <> loop1_ret_assert def
R124502:124511 VST.msl.seplog <> andp_left2 meth
R124514:124525 VST.msl.seplog <> derives_refl meth
R124502:124511 VST.msl.seplog <> andp_left2 meth
R124514:124525 VST.msl.seplog <> derives_refl meth
R124543:124558 VST.veric.SeparationLogic <> loop1_ret_assert def
R124587:124596 VST.msl.seplog <> andp_left2 meth
R124599:124608 VST.msl.seplog <> orp_right2 meth
R124612:124620 VST.msl.seplog <> exp_right meth
R124628:124636 VST.msl.seplog <> exp_right meth
R124587:124596 VST.msl.seplog <> andp_left2 meth
R124599:124608 VST.msl.seplog <> orp_right2 meth
R124612:124620 VST.msl.seplog <> exp_right meth
R124628:124636 VST.msl.seplog <> exp_right meth
R124658:124667 VST.msl.seplog <> andp_right meth
R124677:124686 VST.msl.seplog <> prop_right meth
R124702:124713 VST.msl.seplog <> derives_refl meth
R124658:124667 VST.msl.seplog <> andp_right meth
R124677:124686 VST.msl.seplog <> prop_right meth
R124702:124713 VST.msl.seplog <> derives_refl meth
R124748:124763 VST.veric.SeparationLogic <> loop1_ret_assert def
R124792:124801 VST.msl.seplog <> andp_left2 meth
R124804:124815 VST.msl.seplog <> derives_refl meth
R124792:124801 VST.msl.seplog <> andp_left2 meth
R124804:124815 VST.msl.seplog <> derives_refl meth
R124830:124849 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R124830:124849 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R124875:124894 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R124875:124894 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R124921:124938 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R124921:124938 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R124986:125001 VST.veric.SeparationLogic <> loop1_ret_assert def
R124969:124978 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R124986:125001 VST.veric.SeparationLogic <> loop1_ret_assert def
R124969:124978 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R125032:125047 VST.veric.SeparationLogic <> loop1_ret_assert def
R125076:125085 VST.msl.seplog <> andp_left2 meth
R125088:125097 VST.msl.seplog <> orp_right2 meth
R125101:125109 VST.msl.seplog <> exp_right meth
R125117:125125 VST.msl.seplog <> exp_right meth
R125076:125085 VST.msl.seplog <> andp_left2 meth
R125088:125097 VST.msl.seplog <> orp_right2 meth
R125101:125109 VST.msl.seplog <> exp_right meth
R125117:125125 VST.msl.seplog <> exp_right meth
R125147:125156 VST.msl.seplog <> andp_right meth
R125166:125175 VST.msl.seplog <> prop_right meth
R125191:125202 VST.msl.seplog <> derives_refl meth
R125147:125156 VST.msl.seplog <> andp_right meth
R125166:125175 VST.msl.seplog <> prop_right meth
R125191:125202 VST.msl.seplog <> derives_refl meth
R125221:125236 VST.veric.SeparationLogic <> loop1_ret_assert def
R125265:125274 VST.msl.seplog <> andp_left2 meth
R125277:125288 VST.msl.seplog <> derives_refl meth
R125265:125274 VST.msl.seplog <> andp_left2 meth
R125277:125288 VST.msl.seplog <> derives_refl meth
R125306:125321 VST.veric.SeparationLogic <> loop1_ret_assert def
R125350:125359 VST.msl.seplog <> andp_left2 meth
R125362:125371 VST.msl.seplog <> orp_right2 meth
R125375:125383 VST.msl.seplog <> exp_right meth
R125391:125399 VST.msl.seplog <> exp_right meth
R125350:125359 VST.msl.seplog <> andp_left2 meth
R125362:125371 VST.msl.seplog <> orp_right2 meth
R125375:125383 VST.msl.seplog <> exp_right meth
R125391:125399 VST.msl.seplog <> exp_right meth
R125421:125430 VST.msl.seplog <> andp_right meth
R125440:125449 VST.msl.seplog <> prop_right meth
R125465:125476 VST.msl.seplog <> derives_refl meth
R125421:125430 VST.msl.seplog <> andp_right meth
R125440:125449 VST.msl.seplog <> prop_right meth
R125465:125476 VST.msl.seplog <> derives_refl meth
R125511:125526 VST.veric.SeparationLogic <> loop1_ret_assert def
R125555:125564 VST.msl.seplog <> andp_left2 meth
R125567:125578 VST.msl.seplog <> derives_refl meth
R125555:125564 VST.msl.seplog <> andp_left2 meth
R125567:125578 VST.msl.seplog <> derives_refl meth
R125591:125599 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_orp thm
R125591:125599 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_orp thm
R125631:125646 VST.veric.SeparationLogic <> loop2_ret_assert def
R125614:125623 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R125631:125646 VST.veric.SeparationLogic <> loop2_ret_assert def
R125614:125623 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R125675:125690 VST.veric.SeparationLogic <> loop2_ret_assert def
R125719:125728 VST.msl.seplog <> andp_left2 meth
R125731:125740 VST.msl.seplog <> orp_right1 meth
R125743:125752 VST.msl.seplog <> orp_right2 meth
R125755:125766 VST.msl.seplog <> derives_refl meth
R125719:125728 VST.msl.seplog <> andp_left2 meth
R125731:125740 VST.msl.seplog <> orp_right1 meth
R125743:125752 VST.msl.seplog <> orp_right2 meth
R125755:125766 VST.msl.seplog <> derives_refl meth
R125784:125799 VST.veric.SeparationLogic <> loop2_ret_assert def
R125828:125837 VST.msl.seplog <> andp_left2 meth
R125840:125851 VST.msl.seplog <> derives_refl meth
R125828:125837 VST.msl.seplog <> andp_left2 meth
R125840:125851 VST.msl.seplog <> derives_refl meth
R125869:125884 VST.veric.SeparationLogic <> loop2_ret_assert def
R125913:125922 VST.msl.seplog <> andp_left2 meth
R125925:125936 VST.msl.seplog <> derives_refl meth
R125913:125922 VST.msl.seplog <> andp_left2 meth
R125925:125936 VST.msl.seplog <> derives_refl meth
R125970:125985 VST.veric.SeparationLogic <> loop1_ret_assert def
R126014:126023 VST.msl.seplog <> andp_left2 meth
R126026:126037 VST.msl.seplog <> derives_refl meth
R126014:126023 VST.msl.seplog <> andp_left2 meth
R126026:126037 VST.msl.seplog <> derives_refl meth
R126052:126071 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R126052:126071 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R126097:126116 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R126097:126116 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R126143:126160 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R126143:126160 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R126208:126223 VST.veric.SeparationLogic <> loop2_ret_assert def
R126191:126200 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R126208:126223 VST.veric.SeparationLogic <> loop2_ret_assert def
R126191:126200 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R126253:126268 VST.veric.SeparationLogic <> loop1_ret_assert def
R126297:126306 VST.msl.seplog <> andp_left2 meth
R126309:126318 VST.msl.seplog <> orp_right2 meth
R126322:126330 VST.msl.seplog <> exp_right meth
R126338:126346 VST.msl.seplog <> exp_right meth
R126297:126306 VST.msl.seplog <> andp_left2 meth
R126309:126318 VST.msl.seplog <> orp_right2 meth
R126322:126330 VST.msl.seplog <> exp_right meth
R126338:126346 VST.msl.seplog <> exp_right meth
R126368:126377 VST.msl.seplog <> andp_right meth
R126387:126396 VST.msl.seplog <> prop_right meth
R126412:126423 VST.msl.seplog <> derives_refl meth
R126368:126377 VST.msl.seplog <> andp_right meth
R126387:126396 VST.msl.seplog <> prop_right meth
R126412:126423 VST.msl.seplog <> derives_refl meth
R126442:126457 VST.veric.SeparationLogic <> loop1_ret_assert def
R126486:126495 VST.msl.seplog <> andp_left2 meth
R126498:126509 VST.msl.seplog <> derives_refl meth
R126486:126495 VST.msl.seplog <> andp_left2 meth
R126498:126509 VST.msl.seplog <> derives_refl meth
R126527:126542 VST.veric.SeparationLogic <> loop1_ret_assert def
R126571:126580 VST.msl.seplog <> andp_left2 meth
R126583:126594 VST.msl.seplog <> derives_refl meth
R126571:126580 VST.msl.seplog <> andp_left2 meth
R126583:126594 VST.msl.seplog <> derives_refl meth
R126628:126643 VST.veric.SeparationLogic <> loop1_ret_assert def
R126672:126681 VST.msl.seplog <> andp_left2 meth
R126684:126695 VST.msl.seplog <> derives_refl meth
R126672:126681 VST.msl.seplog <> andp_left2 meth
R126684:126695 VST.msl.seplog <> derives_refl meth
prf 126712:126720 DeepEmbedded.DeepEmbeddedPracticalLogic seq_assoc
R126737:126745 VST.veric.mpred <> compspecs class
binder 126733:126734 <> CS:852
R126756:126765 VST.veric.juicy_extspec <> OracleKind class
binder 126749:126753 <> Espec:853
binder 126779:126783 <> Delta:854
binder 126785:126785 <> P:855
binder 126787:126788 <> s1:856
binder 126790:126791 <> s2:857
binder 126793:126794 <> s3:858
binder 126796:126796 <> R:859
R126865:126877 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R126808:126812 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R126864:126864 VST.floyd.SeparationLogicAsLogic <> R:859 var
R126832:126840 compcert.cfrontend.Clight <> Ssequence constr
R126846:126854 compcert.cfrontend.Clight <> Ssequence constr
R126859:126860 VST.floyd.SeparationLogicAsLogic <> s3:858 var
R126856:126857 VST.floyd.SeparationLogicAsLogic <> s2:857 var
R126842:126843 VST.floyd.SeparationLogicAsLogic <> s1:856 var
R126829:126829 VST.floyd.SeparationLogicAsLogic <> P:855 var
R126823:126827 VST.floyd.SeparationLogicAsLogic <> Delta:854 var
R126817:126821 VST.floyd.SeparationLogicAsLogic <> Espec:853 var
R126814:126815 VST.floyd.SeparationLogicAsLogic <> CS:852 var
R126879:126883 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R126935:126935 VST.floyd.SeparationLogicAsLogic <> R:859 var
R126903:126911 compcert.cfrontend.Clight <> Ssequence constr
R126931:126932 VST.floyd.SeparationLogicAsLogic <> s3:858 var
R126914:126922 compcert.cfrontend.Clight <> Ssequence constr
R126927:126928 VST.floyd.SeparationLogicAsLogic <> s2:857 var
R126924:126925 VST.floyd.SeparationLogicAsLogic <> s1:856 var
R126900:126900 VST.floyd.SeparationLogicAsLogic <> P:855 var
R126894:126898 VST.floyd.SeparationLogicAsLogic <> Delta:854 var
R126888:126892 VST.floyd.SeparationLogicAsLogic <> Espec:853 var
R126885:126886 VST.floyd.SeparationLogicAsLogic <> CS:852 var
R126982:126994 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R126982:126994 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R127041:127053 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R127041:127053 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R127103:127119 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R127103:127119 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R127140:127156 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R127140:127156 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R127198:127210 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R127198:127210 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R127257:127269 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R127257:127269 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R127317:127333 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R127317:127333 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R127380:127396 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R127380:127396 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
prf 127420:127433 DeepEmbedded.DeepEmbeddedPracticalLogic semax_seq_skip
R127450:127458 VST.veric.mpred <> compspecs class
binder 127446:127447 <> CS:860
R127469:127478 VST.veric.juicy_extspec <> OracleKind class
binder 127462:127466 <> Espec:861
binder 127491:127495 <> Delta:862
binder 127497:127497 <> P:863
binder 127499:127499 <> s:864
binder 127501:127501 <> Q:865
R127535:127539 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R127509:127513 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R127534:127534 VST.floyd.SeparationLogicAsLogic <> Q:865 var
R127532:127532 VST.floyd.SeparationLogicAsLogic <> s:864 var
R127530:127530 VST.floyd.SeparationLogicAsLogic <> P:863 var
R127524:127528 VST.floyd.SeparationLogicAsLogic <> Delta:862 var
R127518:127522 VST.floyd.SeparationLogicAsLogic <> Espec:861 var
R127515:127516 VST.floyd.SeparationLogicAsLogic <> CS:860 var
R127541:127545 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R127584:127584 VST.floyd.SeparationLogicAsLogic <> Q:865 var
R127565:127573 compcert.cfrontend.Clight <> Ssequence constr
R127577:127581 compcert.cfrontend.Clight <> Sskip constr
R127575:127575 VST.floyd.SeparationLogicAsLogic <> s:864 var
R127562:127562 VST.floyd.SeparationLogicAsLogic <> P:863 var
R127556:127560 VST.floyd.SeparationLogicAsLogic <> Delta:862 var
R127550:127554 VST.floyd.SeparationLogicAsLogic <> Espec:861 var
R127547:127548 VST.floyd.SeparationLogicAsLogic <> CS:860 var
R127655:127663 VST.veric.tycontext <> RA_normal proj
R127631:127647 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R127655:127663 VST.veric.tycontext <> RA_normal proj
R127631:127647 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R127706:127715 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R127730:127747 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R127706:127715 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R127730:127747 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R127765:127775 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R127765:127775 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R127792:127801 VST.msl.seplog <> andp_left2 meth
R127804:127810 VST.msl.log_normalize <> FF_left thm
R127792:127801 VST.msl.seplog <> andp_left2 meth
R127804:127810 VST.msl.log_normalize <> FF_left thm
R127827:127836 VST.msl.seplog <> andp_left2 meth
R127839:127845 VST.msl.log_normalize <> FF_left thm
R127827:127836 VST.msl.seplog <> andp_left2 meth
R127839:127845 VST.msl.log_normalize <> FF_left thm
R127870:127879 VST.msl.seplog <> andp_left2 meth
R127882:127888 VST.msl.log_normalize <> FF_left thm
R127870:127879 VST.msl.seplog <> andp_left2 meth
R127882:127888 VST.msl.log_normalize <> FF_left thm
R127901:127913 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R127901:127913 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R127960:127973 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_skip_inv thm
R127960:127973 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_skip_inv thm
R127993:128004 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R128014:128030 VST.floyd.assert_lemmas <> derives_full_refl thm
R127993:128004 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R128014:128030 VST.floyd.assert_lemmas <> derives_full_refl thm
R128097:128113 VST.floyd.assert_lemmas <> derives_full_refl thm
R128097:128113 VST.floyd.assert_lemmas <> derives_full_refl thm
R128140:128156 VST.floyd.assert_lemmas <> derives_full_refl thm
R128140:128156 VST.floyd.assert_lemmas <> derives_full_refl thm
R128191:128207 VST.floyd.assert_lemmas <> derives_full_refl thm
R128191:128207 VST.floyd.assert_lemmas <> derives_full_refl thm
prf 128224:128237 DeepEmbedded.DeepEmbeddedPracticalLogic semax_skip_seq
R128254:128262 VST.veric.mpred <> compspecs class
binder 128250:128251 <> CS:866
R128273:128282 VST.veric.juicy_extspec <> OracleKind class
binder 128266:128270 <> Espec:867
binder 128295:128299 <> Delta:868
binder 128301:128301 <> P:869
binder 128303:128303 <> s:870
binder 128305:128305 <> Q:871
R128339:128343 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R128313:128317 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R128338:128338 VST.floyd.SeparationLogicAsLogic <> Q:871 var
R128336:128336 VST.floyd.SeparationLogicAsLogic <> s:870 var
R128334:128334 VST.floyd.SeparationLogicAsLogic <> P:869 var
R128328:128332 VST.floyd.SeparationLogicAsLogic <> Delta:868 var
R128322:128326 VST.floyd.SeparationLogicAsLogic <> Espec:867 var
R128319:128320 VST.floyd.SeparationLogicAsLogic <> CS:866 var
R128345:128349 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R128388:128388 VST.floyd.SeparationLogicAsLogic <> Q:871 var
R128369:128377 compcert.cfrontend.Clight <> Ssequence constr
R128385:128385 VST.floyd.SeparationLogicAsLogic <> s:870 var
R128379:128383 compcert.cfrontend.Clight <> Sskip constr
R128366:128366 VST.floyd.SeparationLogicAsLogic <> P:869 var
R128360:128364 VST.floyd.SeparationLogicAsLogic <> Delta:868 var
R128354:128358 VST.floyd.SeparationLogicAsLogic <> Espec:867 var
R128351:128352 VST.floyd.SeparationLogicAsLogic <> CS:866 var
R128435:128451 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R128435:128451 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R128478:128487 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R128502:128519 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R128478:128487 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R128502:128519 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R128547:128557 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R128547:128557 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R128572:128581 VST.msl.seplog <> andp_left2 meth
R128584:128590 VST.msl.log_normalize <> FF_left thm
R128572:128581 VST.msl.seplog <> andp_left2 meth
R128584:128590 VST.msl.log_normalize <> FF_left thm
R128605:128614 VST.msl.seplog <> andp_left2 meth
R128617:128623 VST.msl.log_normalize <> FF_left thm
R128605:128614 VST.msl.seplog <> andp_left2 meth
R128617:128623 VST.msl.log_normalize <> FF_left thm
R128646:128655 VST.msl.seplog <> andp_left2 meth
R128658:128664 VST.msl.log_normalize <> FF_left thm
R128646:128655 VST.msl.seplog <> andp_left2 meth
R128658:128664 VST.msl.log_normalize <> FF_left thm
R128677:128689 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R128677:128689 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R128736:128749 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_skip_inv thm
R128736:128749 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_skip_inv thm
R128768:128779 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R128799:128815 VST.floyd.assert_lemmas <> derives_full_refl thm
R128768:128779 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R128799:128815 VST.floyd.assert_lemmas <> derives_full_refl thm
R128799:128815 VST.floyd.assert_lemmas <> derives_full_refl thm
R128799:128815 VST.floyd.assert_lemmas <> derives_full_refl thm
R128799:128815 VST.floyd.assert_lemmas <> derives_full_refl thm
prf 128869:128884 DeepEmbedded.DeepEmbeddedPracticalLogic semax_seq_Slabel
R128901:128909 VST.veric.mpred <> compspecs class
binder 128898:128899 <> CS:872
R128920:128929 VST.veric.juicy_extspec <> OracleKind class
binder 128913:128917 <> Espec:873
binder 128945:128949 <> Delta:874
R128961:128964 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R128965:128969 VST.veric.mpred <> mpred def
R128954:128960 VST.veric.mpred <> environ ind
binder 128952:128952 <> P:875
R128979:128987 compcert.cfrontend.Clight <> statement ind
binder 128973:128974 <> c1:876
binder 128976:128977 <> c2:877
R128993:129002 VST.veric.tycontext <> ret_assert rec
binder 128991:128991 <> Q:878
binder 129005:129005 <> l:879
R129065:129073 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R129012:129016 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R129064:129064 VST.floyd.SeparationLogicAsLogic <> Q:878 var
R129036:129044 compcert.cfrontend.Clight <> Ssequence constr
R129060:129061 VST.floyd.SeparationLogicAsLogic <> c2:877 var
R129047:129052 compcert.cfrontend.Clight <> Slabel constr
R129056:129057 VST.floyd.SeparationLogicAsLogic <> c1:876 var
R129054:129054 VST.floyd.SeparationLogicAsLogic <> l:879 var
R129033:129033 VST.floyd.SeparationLogicAsLogic <> P:875 var
R129027:129031 VST.floyd.SeparationLogicAsLogic <> Delta:874 var
R129021:129025 VST.floyd.SeparationLogicAsLogic <> Espec:873 var
R129018:129019 VST.floyd.SeparationLogicAsLogic <> CS:872 var
R129075:129079 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R129127:129127 VST.floyd.SeparationLogicAsLogic <> Q:878 var
R129099:129104 compcert.cfrontend.Clight <> Slabel constr
R129109:129117 compcert.cfrontend.Clight <> Ssequence constr
R129122:129123 VST.floyd.SeparationLogicAsLogic <> c2:877 var
R129119:129120 VST.floyd.SeparationLogicAsLogic <> c1:876 var
R129106:129106 VST.floyd.SeparationLogicAsLogic <> l:879 var
R129096:129096 VST.floyd.SeparationLogicAsLogic <> P:875 var
R129090:129094 VST.floyd.SeparationLogicAsLogic <> Delta:874 var
R129084:129088 VST.floyd.SeparationLogicAsLogic <> Espec:873 var
R129081:129082 VST.floyd.SeparationLogicAsLogic <> CS:872 var
R129174:129186 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R129174:129186 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R129233:129248 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_Slabel_inv thm
R129233:129248 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_Slabel_inv thm
R129266:129284 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
R129266:129284 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
R129298:129314 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R129298:129314 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R129334:129349 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_Slabel_inv thm
R129334:129349 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_Slabel_inv thm
R129367:129379 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R129367:129379 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R129427:129443 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R129427:129443 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R129463:129481 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
R129463:129481 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
def 129505:129518 DeepEmbedded.DeepEmbeddedPracticalLogic fold_Ssequence
binder 129520:129521 <> lc:880
R129534:129535 VST.floyd.SeparationLogicAsLogic <> lc:880 var
R129546:129548 Coq.Init.Datatypes <> nil constr
R129553:129557 compcert.cfrontend.Clight <> Sskip constr
R129565:129568 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R129569:129571 Coq.Init.Datatypes <> nil constr
R129584:129587 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R129595:129603 compcert.cfrontend.Clight <> Ssequence constr
R129608:129621 VST.floyd.SeparationLogicAsLogic <> fold_Ssequence:881 def
def 129647:129654 DeepEmbedded.DeepEmbeddedPracticalLogic non_Sseq
binder 129656:129656 <> c:883
R129669:129669 VST.floyd.SeparationLogicAsLogic <> c:883 var
R129680:129688 compcert.cfrontend.Clight <> Ssequence constr
R129697:129701 Coq.Init.Logic <> False ind
R129712:129715 Coq.Init.Logic <> True ind
ind 129735:129749 DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Sseq_rel
constr 129795:129803 DeepEmbedded.DeepEmbeddedPracticalLogic singleton
constr 129863:129869 DeepEmbedded.DeepEmbeddedPracticalLogic tl_step
constr 129995:130001 DeepEmbedded.DeepEmbeddedPracticalLogic hd_step
R129761:129764 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R129779:129782 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R129765:129768 Coq.Init.Datatypes <> list ind
R129770:129778 compcert.cfrontend.Clight <> statement ind
R129752:129760 compcert.cfrontend.Clight <> statement ind
binder 129813:129813 <> c:887
R129826:129829 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R129830:129844 VST.floyd.SeparationLogicAsLogic <> unfold_Sseq_rel:885 ind
R129850:129853 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R129849:129849 VST.floyd.SeparationLogicAsLogic <> c:887 var
R129854:129856 Coq.Init.Datatypes <> nil constr
R129846:129846 VST.floyd.SeparationLogicAsLogic <> c:887 var
R129816:129823 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic non_Sseq def
R129825:129825 VST.floyd.SeparationLogicAsLogic <> c:887 var
binder 129879:129880 <> c1:888
binder 129882:129883 <> c2:889
binder 129885:129886 <> lc:890
R129900:129903 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R129925:129945 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R129946:129960 VST.floyd.SeparationLogicAsLogic <> unfold_Sseq_rel:885 ind
R129983:129986 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R129981:129982 VST.floyd.SeparationLogicAsLogic <> c1:888 var
R129987:129988 VST.floyd.SeparationLogicAsLogic <> lc:890 var
R129963:129971 compcert.cfrontend.Clight <> Ssequence constr
R129976:129977 VST.floyd.SeparationLogicAsLogic <> c2:889 var
R129973:129974 VST.floyd.SeparationLogicAsLogic <> c1:888 var
R129904:129918 VST.floyd.SeparationLogicAsLogic <> unfold_Sseq_rel:885 ind
R129923:129924 VST.floyd.SeparationLogicAsLogic <> lc:890 var
R129920:129921 VST.floyd.SeparationLogicAsLogic <> c2:889 var
R129889:129896 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic non_Sseq def
R129898:129899 VST.floyd.SeparationLogicAsLogic <> c1:888 var
binder 130011:130012 <> c1:891
binder 130014:130015 <> c2:892
binder 130017:130018 <> c3:893
binder 130020:130021 <> lc:894
R130075:130095 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R130096:130110 VST.floyd.SeparationLogicAsLogic <> unfold_Sseq_rel:885 ind
R130145:130146 VST.floyd.SeparationLogicAsLogic <> lc:894 var
R130113:130121 compcert.cfrontend.Clight <> Ssequence constr
R130141:130142 VST.floyd.SeparationLogicAsLogic <> c3:893 var
R130124:130132 compcert.cfrontend.Clight <> Ssequence constr
R130137:130138 VST.floyd.SeparationLogicAsLogic <> c2:892 var
R130134:130135 VST.floyd.SeparationLogicAsLogic <> c1:891 var
R130024:130038 VST.floyd.SeparationLogicAsLogic <> unfold_Sseq_rel:885 ind
R130073:130074 VST.floyd.SeparationLogicAsLogic <> lc:894 var
R130041:130049 compcert.cfrontend.Clight <> Ssequence constr
R130055:130063 compcert.cfrontend.Clight <> Ssequence constr
R130068:130069 VST.floyd.SeparationLogicAsLogic <> c3:893 var
R130065:130066 VST.floyd.SeparationLogicAsLogic <> c2:892 var
R130051:130052 VST.floyd.SeparationLogicAsLogic <> c1:891 var
prf 130159:130181 DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Sseq_rel_non_nil
binder 130192:130192 <> c:895
binder 130196:130196 <> P:896
R130227:130230 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R130231:130231 VST.floyd.SeparationLogicAsLogic <> P:896 var
R130206:130220 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Sseq_rel ind
R130224:130226 Coq.Init.Datatypes <> nil constr
R130222:130222 VST.floyd.SeparationLogicAsLogic <> c:895 var
R130262:130264 Coq.Init.Datatypes <> nil constr
R130262:130264 Coq.Init.Datatypes <> nil constr
def 130347:130357 DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv
R130364:130372 VST.veric.mpred <> compspecs class
binder 130360:130361 <> CS:897
R130383:130392 VST.veric.juicy_extspec <> OracleKind class
binder 130376:130380 <> Espec:898
binder 130395:130396 <> c1:899
binder 130398:130399 <> c2:900
binder 130417:130421 <> Delta:901
binder 130423:130423 <> P:902
binder 130425:130425 <> Q:903
R130446:130450 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R130428:130432 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R130445:130445 VST.floyd.SeparationLogicAsLogic <> Q:903 var
R130442:130443 VST.floyd.SeparationLogicAsLogic <> c1:899 var
R130440:130440 VST.floyd.SeparationLogicAsLogic <> P:902 var
R130434:130438 VST.floyd.SeparationLogicAsLogic <> Delta:901 var
R130451:130455 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R130468:130468 VST.floyd.SeparationLogicAsLogic <> Q:903 var
R130465:130466 VST.floyd.SeparationLogicAsLogic <> c2:900 var
R130463:130463 VST.floyd.SeparationLogicAsLogic <> P:902 var
R130457:130461 VST.floyd.SeparationLogicAsLogic <> Delta:901 var
prf 130478:130492 DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv_seq
R130507:130515 VST.veric.mpred <> compspecs class
binder 130503:130504 <> CS:904
R130526:130535 VST.veric.juicy_extspec <> OracleKind class
binder 130519:130523 <> Espec:905
binder 130538:130539 <> c1:906
binder 130541:130542 <> c2:907
binder 130544:130545 <> c3:908
binder 130547:130548 <> c4:909
R130570:130575 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R130593:130598 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R130599:130609 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv def
R130630:130638 compcert.cfrontend.Clight <> Ssequence constr
R130643:130644 VST.floyd.SeparationLogicAsLogic <> c4:909 var
R130640:130641 VST.floyd.SeparationLogicAsLogic <> c2:907 var
R130612:130620 compcert.cfrontend.Clight <> Ssequence constr
R130625:130626 VST.floyd.SeparationLogicAsLogic <> c3:908 var
R130622:130623 VST.floyd.SeparationLogicAsLogic <> c1:906 var
R130576:130586 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv def
R130591:130592 VST.floyd.SeparationLogicAsLogic <> c4:909 var
R130588:130589 VST.floyd.SeparationLogicAsLogic <> c3:908 var
R130553:130563 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv def
R130568:130569 VST.floyd.SeparationLogicAsLogic <> c2:907 var
R130565:130566 VST.floyd.SeparationLogicAsLogic <> c1:906 var
R130705:130717 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R130705:130717 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R130834:130850 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R130834:130850 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R130870:130882 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R130870:130882 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R131005:131021 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R131005:131021 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
prf 131043:131057 DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv_sym
R131072:131080 VST.veric.mpred <> compspecs class
binder 131068:131069 <> CS:910
R131091:131100 VST.veric.juicy_extspec <> OracleKind class
binder 131084:131088 <> Espec:911
binder 131103:131104 <> c1:912
binder 131106:131107 <> c2:913
R131127:131130 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R131131:131141 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv def
R131146:131147 VST.floyd.SeparationLogicAsLogic <> c1:912 var
R131143:131144 VST.floyd.SeparationLogicAsLogic <> c2:913 var
R131110:131120 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv def
R131125:131126 VST.floyd.SeparationLogicAsLogic <> c2:913 var
R131122:131123 VST.floyd.SeparationLogicAsLogic <> c1:912 var
prf 131243:131259 DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv_trans
R131274:131282 VST.veric.mpred <> compspecs class
binder 131270:131271 <> CS:914
R131293:131302 VST.veric.juicy_extspec <> OracleKind class
binder 131286:131290 <> Espec:915
binder 131305:131306 <> c1:916
binder 131308:131309 <> c2:917
binder 131311:131312 <> c3:918
R131332:131335 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R131353:131356 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R131357:131367 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv def
R131372:131373 VST.floyd.SeparationLogicAsLogic <> c3:918 var
R131369:131370 VST.floyd.SeparationLogicAsLogic <> c1:916 var
R131336:131346 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv def
R131351:131352 VST.floyd.SeparationLogicAsLogic <> c3:918 var
R131348:131349 VST.floyd.SeparationLogicAsLogic <> c2:917 var
R131315:131325 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv def
R131330:131331 VST.floyd.SeparationLogicAsLogic <> c2:917 var
R131327:131328 VST.floyd.SeparationLogicAsLogic <> c1:916 var
prf 131504:131524 DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Sseq_rel_sound
R131539:131547 VST.veric.mpred <> compspecs class
binder 131535:131536 <> CS:919
R131558:131567 VST.veric.juicy_extspec <> OracleKind class
binder 131551:131555 <> Espec:920
binder 131570:131570 <> c:921
binder 131572:131573 <> lc:922
R131598:131601 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R131602:131612 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv def
R131634:131634 VST.floyd.SeparationLogicAsLogic <> c:921 var
R131615:131628 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic fold_Ssequence def
R131630:131631 VST.floyd.SeparationLogicAsLogic <> lc:922 var
R131578:131592 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Sseq_rel ind
R131596:131597 VST.floyd.SeparationLogicAsLogic <> lc:922 var
R131594:131594 VST.floyd.SeparationLogicAsLogic <> c:921 var
R131740:131762 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Sseq_rel_non_nil thm
R131740:131762 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Sseq_rel_non_nil thm
R131782:131796 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv_seq thm
R131782:131796 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv_seq thm
R131845:131861 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv_trans thm
R131845:131861 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv_trans thm
R131902:131910 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic seq_assoc thm
R131902:131910 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic seq_assoc thm
prf 131925:131956 DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Ssequence_unfold_Sseq_rel
binder 131966:131966 <> c:923
R131969:131983 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Sseq_rel ind
R131988:132003 VST.veric.SeparationLogic <> unfold_Ssequence def
R132005:132005 VST.floyd.SeparationLogicAsLogic <> c:923 var
R131985:131985 VST.floyd.SeparationLogicAsLogic <> c:923 var
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132058:132066 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic singleton constr
R132069:132069 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132146:132152 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic tl_step constr
R132162:132162 Coq.Init.Logic <> I constr
R132182:132188 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic hd_step constr
R132182:132188 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic hd_step constr
R132202:132217 VST.veric.SeparationLogic <> unfold_Ssequence def
R132220:132228 compcert.cfrontend.Clight <> Ssequence constr
R132231:132239 compcert.cfrontend.Clight <> Ssequence constr
R132267:132282 VST.veric.SeparationLogic <> unfold_Ssequence def
R132285:132293 compcert.cfrontend.Clight <> Ssequence constr
R132301:132309 compcert.cfrontend.Clight <> Ssequence constr
R132202:132217 VST.veric.SeparationLogic <> unfold_Ssequence def
R132220:132228 compcert.cfrontend.Clight <> Ssequence constr
R132231:132239 compcert.cfrontend.Clight <> Ssequence constr
R132267:132282 VST.veric.SeparationLogic <> unfold_Ssequence def
R132285:132293 compcert.cfrontend.Clight <> Ssequence constr
R132301:132309 compcert.cfrontend.Clight <> Ssequence constr
R132355:132363 Coq.Lists.List <> app_assoc thm
R132355:132363 Coq.Lists.List <> app_assoc thm
R132355:132363 Coq.Lists.List <> app_assoc thm
prf 132445:132466 DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Ssequence_sound
R132481:132489 VST.veric.mpred <> compspecs class
binder 132477:132478 <> CS:924
R132500:132509 VST.veric.juicy_extspec <> OracleKind class
binder 132493:132497 <> Espec:925
binder 132512:132512 <> c:926
R132515:132525 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv def
R132565:132565 VST.floyd.SeparationLogicAsLogic <> c:926 var
R132528:132541 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic fold_Ssequence def
R132544:132559 VST.veric.SeparationLogic <> unfold_Ssequence def
R132561:132561 VST.floyd.SeparationLogicAsLogic <> c:926 var
R132593:132613 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Sseq_rel_sound thm
R132593:132613 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Sseq_rel_sound thm
R132624:132655 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Ssequence_unfold_Sseq_rel thm
R132624:132655 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Ssequence_unfold_Sseq_rel thm
prf 132670:132692 DeepEmbedded.DeepEmbeddedPracticalLogic semax_unfold_Ssequence'
R132707:132715 VST.veric.mpred <> compspecs class
binder 132703:132704 <> CS:927
R132726:132735 VST.veric.juicy_extspec <> OracleKind class
binder 132719:132723 <> Espec:928
binder 132738:132739 <> c1:929
binder 132741:132742 <> c2:930
R132788:132794 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R132854:132854 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 132802:132802 <> P:931
binder 132804:132804 <> Q:932
binder 132806:132810 <> Delta:933
R132831:132835 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R132813:132817 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R132830:132830 VST.floyd.SeparationLogicAsLogic <> Q:932 var
R132827:132828 VST.floyd.SeparationLogicAsLogic <> c1:929 var
R132825:132825 VST.floyd.SeparationLogicAsLogic <> P:931 var
R132819:132823 VST.floyd.SeparationLogicAsLogic <> Delta:933 var
R132836:132840 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R132853:132853 VST.floyd.SeparationLogicAsLogic <> Q:932 var
R132850:132851 VST.floyd.SeparationLogicAsLogic <> c2:930 var
R132848:132848 VST.floyd.SeparationLogicAsLogic <> P:931 var
R132842:132846 VST.floyd.SeparationLogicAsLogic <> Delta:933 var
R132766:132768 Coq.Init.Logic <> ::type_scope:x_'='_x not
R132747:132762 VST.veric.SeparationLogic <> unfold_Ssequence def
R132764:132765 VST.floyd.SeparationLogicAsLogic <> c1:929 var
R132769:132784 VST.veric.SeparationLogic <> unfold_Ssequence def
R132786:132787 VST.floyd.SeparationLogicAsLogic <> c2:930 var
R132883:132899 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv_trans thm
R132883:132899 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv_trans thm
R132912:132926 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv_sym thm
R132912:132926 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_equiv_sym thm
R132939:132960 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Ssequence_sound thm
R132939:132960 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Ssequence_sound thm
R132988:133009 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Ssequence_sound thm
R132988:133009 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic unfold_Ssequence_sound thm
prf 133024:133045 DeepEmbedded.DeepEmbeddedPracticalLogic semax_unfold_Ssequence
R133060:133068 VST.veric.mpred <> compspecs class
binder 133056:133057 <> CS:934
R133079:133088 VST.veric.juicy_extspec <> OracleKind class
binder 133072:133076 <> Espec:935
binder 133091:133092 <> c1:936
binder 133094:133095 <> c2:937
R133141:133147 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R133226:133226 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 133155:133155 <> P:938
binder 133157:133157 <> Q:939
binder 133159:133163 <> Delta:940
R133194:133197 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R133199:133203 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R133225:133225 VST.floyd.SeparationLogicAsLogic <> Q:939 var
R133222:133223 VST.floyd.SeparationLogicAsLogic <> c2:937 var
R133220:133220 VST.floyd.SeparationLogicAsLogic <> P:938 var
R133214:133218 VST.floyd.SeparationLogicAsLogic <> Delta:940 var
R133208:133212 VST.floyd.SeparationLogicAsLogic <> Espec:935 var
R133205:133206 VST.floyd.SeparationLogicAsLogic <> CS:934 var
R133167:133171 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R133193:133193 VST.floyd.SeparationLogicAsLogic <> Q:939 var
R133190:133191 VST.floyd.SeparationLogicAsLogic <> c1:936 var
R133188:133188 VST.floyd.SeparationLogicAsLogic <> P:938 var
R133182:133186 VST.floyd.SeparationLogicAsLogic <> Delta:940 var
R133176:133180 VST.floyd.SeparationLogicAsLogic <> Espec:935 var
R133173:133174 VST.floyd.SeparationLogicAsLogic <> CS:934 var
R133119:133121 Coq.Init.Logic <> ::type_scope:x_'='_x not
R133100:133115 VST.veric.SeparationLogic <> unfold_Ssequence def
R133117:133118 VST.floyd.SeparationLogicAsLogic <> c1:936 var
R133122:133137 VST.veric.SeparationLogic <> unfold_Ssequence def
R133139:133140 VST.floyd.SeparationLogicAsLogic <> c2:937 var
R133259:133281 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_unfold_Ssequence' thm
R133259:133281 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_unfold_Ssequence' thm
prf 133333:133344 DeepEmbedded.DeepEmbeddedPracticalLogic semax_fun_id
R133361:133369 VST.veric.mpred <> compspecs class
binder 133357:133358 <> CS:941
R133380:133389 VST.veric.juicy_extspec <> OracleKind class
binder 133373:133377 <> Espec:942
binder 133406:133407 <> id:943
binder 133409:133409 <> f:944
binder 133411:133415 <> Delta:945
binder 133417:133417 <> P:946
binder 133419:133419 <> Q:947
binder 133421:133421 <> c:948
R133457:133464 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R133497:133504 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R133555:133562 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R133661:133668 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R133670:133674 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R133695:133695 VST.floyd.SeparationLogicAsLogic <> Q:947 var
R133693:133693 VST.floyd.SeparationLogicAsLogic <> c:948 var
R133691:133691 VST.floyd.SeparationLogicAsLogic <> P:946 var
R133685:133689 VST.floyd.SeparationLogicAsLogic <> Delta:945 var
R133679:133683 VST.floyd.SeparationLogicAsLogic <> Espec:942 var
R133676:133677 VST.floyd.SeparationLogicAsLogic <> CS:941 var
R133564:133568 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R133660:133660 VST.floyd.SeparationLogicAsLogic <> Q:947 var
R133658:133658 VST.floyd.SeparationLogicAsLogic <> c:948 var
R133587:133590 VST.msl.seplog <> ::logic:x_'&&'_x not
R133586:133586 VST.floyd.SeparationLogicAsLogic <> P:946 var
R133591:133592 VST.veric.lift LiftNotation :::'`('_x_')' not
R133603:133637 VST.veric.lift LiftNotation :::'`('_x_')' not
R133593:133600 VST.veric.SeparationLogic <> func_ptr def
R133602:133602 VST.floyd.SeparationLogicAsLogic <> f:944 var
R133606:133613 VST.veric.expr <> eval_var def
R133619:133633 VST.veric.mpred <> type_of_funspec def
R133635:133635 VST.floyd.SeparationLogicAsLogic <> f:944 var
R133615:133616 VST.floyd.SeparationLogicAsLogic <> id:943 var
R133579:133583 VST.floyd.SeparationLogicAsLogic <> Delta:945 var
R133573:133577 VST.floyd.SeparationLogicAsLogic <> Espec:942 var
R133570:133571 VST.floyd.SeparationLogicAsLogic <> CS:941 var
R133528:133530 Coq.Init.Logic <> ::type_scope:x_'='_x not
R133505:133505 compcert.lib.Maps <> :::x_'!'_x not
R133522:133525 compcert.lib.Maps <> :::x_'!'_x not
R133526:133527 VST.floyd.SeparationLogicAsLogic <> id:943 var
R133506:133515 VST.veric.seplog <> glob_types def
R133517:133521 VST.floyd.SeparationLogicAsLogic <> Delta:945 var
R133531:133534 Coq.Init.Datatypes <> Some constr
R133537:133551 VST.veric.mpred <> type_of_funspec def
R133553:133553 VST.floyd.SeparationLogicAsLogic <> f:944 var
R133488:133490 Coq.Init.Logic <> ::type_scope:x_'='_x not
R133465:133465 compcert.lib.Maps <> :::x_'!'_x not
R133482:133485 compcert.lib.Maps <> :::x_'!'_x not
R133486:133487 VST.floyd.SeparationLogicAsLogic <> id:943 var
R133466:133475 VST.veric.seplog <> glob_specs def
R133477:133481 VST.floyd.SeparationLogicAsLogic <> Delta:945 var
R133491:133494 Coq.Init.Datatypes <> Some constr
R133496:133496 VST.floyd.SeparationLogicAsLogic <> f:944 var
R133450:133452 Coq.Init.Logic <> ::type_scope:x_'='_x not
R133428:133428 compcert.lib.Maps <> :::x_'!'_x not
R133444:133447 compcert.lib.Maps <> :::x_'!'_x not
R133448:133449 VST.floyd.SeparationLogicAsLogic <> id:943 var
R133429:133437 VST.veric.seplog <> var_types def
R133439:133443 VST.floyd.SeparationLogicAsLogic <> Delta:945 var
R133453:133456 Coq.Init.Datatypes <> None constr
R133724:133735 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R133755:133771 VST.floyd.assert_lemmas <> derives_full_refl thm
R133724:133735 VST.floyd.SeparationLogicAsLogic DeepEmbedded.CConseq semax_conseq prfax
R133755:133771 VST.floyd.assert_lemmas <> derives_full_refl thm
R133755:133771 VST.floyd.assert_lemmas <> derives_full_refl thm
R133755:133771 VST.floyd.assert_lemmas <> derives_full_refl thm
R133755:133771 VST.floyd.assert_lemmas <> derives_full_refl thm
R133808:133817 VST.msl.seplog <> andp_right meth
R133808:133817 VST.msl.seplog <> andp_right meth
R133846:133854 VST.msl.log_normalize <> andp_comm thm
R133846:133854 VST.msl.log_normalize <> andp_comm thm
R133846:133854 VST.msl.log_normalize <> andp_comm thm
R133867:133882 VST.msl.seplog <> imp_andp_adjoint meth
R133867:133882 VST.msl.seplog <> imp_andp_adjoint meth
R133867:133882 VST.msl.seplog <> imp_andp_adjoint meth
R133895:133910 VST.msl.seplog <> imp_andp_adjoint meth
R133895:133910 VST.msl.seplog <> imp_andp_adjoint meth
R133895:133910 VST.msl.seplog <> imp_andp_adjoint meth
R133936:133944 VST.msl.seplog <> allp_left meth
R133936:133944 VST.msl.seplog <> allp_left meth
R133962:133970 VST.msl.seplog <> allp_left meth
R133962:133970 VST.msl.seplog <> allp_left meth
R133988:133995 VST.msl.log_normalize <> prop_imp thm
R133988:133995 VST.msl.log_normalize <> prop_imp thm
R133988:133995 VST.msl.log_normalize <> prop_imp thm
R134014:134021 VST.msl.seplog <> exp_left meth
R134014:134021 VST.msl.seplog <> exp_left meth
R134043:134047 VST.veric.SeparationLogic <> local def
R134050:134054 VST.veric.mpred <> lift1 def
R134101:134116 VST.msl.seplog <> imp_andp_adjoint meth
R134101:134116 VST.msl.seplog <> imp_andp_adjoint meth
R134101:134116 VST.msl.seplog <> imp_andp_adjoint meth
R134132:134147 VST.msl.seplog <> imp_andp_adjoint meth
R134132:134147 VST.msl.seplog <> imp_andp_adjoint meth
R134132:134147 VST.msl.seplog <> imp_andp_adjoint meth
R134171:134177 VST.msl.seplog <> derives meth
R134186:134211 VST.msl.predicates_hered <> exp_right thm
R134186:134211 VST.msl.predicates_hered <> exp_right thm
R134233:134264 VST.msl.predicates_hered <> prop_andp_right thm
R134233:134264 VST.msl.predicates_hered <> prop_andp_right thm
R134278:134285 VST.veric.expr <> eval_var def
R134389:134395 VST.veric.mpred Map get def
R134398:134402 VST.veric.mpred <> ve_of def
R134389:134395 VST.veric.mpred Map get def
R134398:134402 VST.veric.mpred <> ve_of def
R134560:134567 VST.veric.SeparationLogic <> func_ptr def
R134570:134584 VST.veric.seplog <> func_ptr def
R134649:134675 VST.msl.predicates_hered <> andp_left1 thm
R134649:134675 VST.msl.predicates_hered <> andp_left1 thm
R134689:134713 VST.msl.predicates_hered <> exp_left thm
R134689:134713 VST.msl.predicates_hered <> exp_left thm
R134737:134766 VST.msl.normalize <> derives_extract_prop thm
R134737:134766 VST.msl.normalize <> derives_extract_prop thm
prf 136832:136849 DeepEmbedded.DeepEmbeddedPracticalLogic nocontinue_ls_spec
binder 136859:136860 <> sl:949
R136886:136889 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R136930:136932 Coq.Init.Logic <> ::type_scope:x_'='_x not
R136890:136899 VST.veric.SeparationLogic <> nocontinue def
R136902:136925 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R136927:136928 VST.floyd.SeparationLogicAsLogic <> sl:949 var
R136933:136936 Coq.Init.Datatypes <> true constr
R136879:136881 Coq.Init.Logic <> ::type_scope:x_'='_x not
R136863:136875 VST.veric.SeparationLogic <> nocontinue_ls def
R136877:136878 VST.floyd.SeparationLogicAsLogic <> sl:949 var
R136882:136885 Coq.Init.Datatypes <> true constr
R137019:137028 VST.veric.SeparationLogic <> nocontinue def
R137019:137028 VST.veric.SeparationLogic <> nocontinue def
prf 137067:137085 DeepEmbedded.DeepEmbeddedPracticalLogic nocontinue_ls_spec'
binder 137095:137096 <> sl:950
binder 137098:137098 <> n:951
R137124:137127 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R137186:137188 Coq.Init.Logic <> ::type_scope:x_'='_x not
R137128:137137 VST.veric.SeparationLogic <> nocontinue def
R137140:137163 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R137166:137178 compcert.cfrontend.Clight <> select_switch def
R137182:137183 VST.floyd.SeparationLogicAsLogic <> sl:950 var
R137180:137180 VST.floyd.SeparationLogicAsLogic <> n:951 var
R137189:137192 Coq.Init.Datatypes <> true constr
R137117:137119 Coq.Init.Logic <> ::type_scope:x_'='_x not
R137101:137113 VST.veric.SeparationLogic <> nocontinue_ls def
R137115:137116 VST.floyd.SeparationLogicAsLogic <> sl:950 var
R137120:137123 Coq.Init.Datatypes <> true constr
R137220:137237 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic nocontinue_ls_spec thm
R137220:137237 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic nocontinue_ls_spec thm
R137254:137266 compcert.cfrontend.Clight <> select_switch def
R137281:137298 compcert.cfrontend.Clight <> select_switch_case def
R137281:137298 compcert.cfrontend.Clight <> select_switch_case def
R137403:137405 compcert.lib.Coqlib <> zeq def
R137403:137405 compcert.lib.Coqlib <> zeq def
R137530:137532 Coq.Init.Logic <> ::type_scope:x_'='_x not
R137486:137489 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R137474:137483 VST.veric.SeparationLogic <> nocontinue def
R137490:137499 VST.veric.SeparationLogic <> nocontinue def
R137502:137525 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R137533:137536 Coq.Init.Datatypes <> true constr
R137530:137532 Coq.Init.Logic <> ::type_scope:x_'='_x not
R137486:137489 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R137474:137483 VST.veric.SeparationLogic <> nocontinue def
R137490:137499 VST.veric.SeparationLogic <> nocontinue def
R137502:137525 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R137533:137536 Coq.Init.Datatypes <> true constr
R137566:137578 Coq.Bool.Bool <> andb_true_iff thm
R137566:137578 Coq.Bool.Bool <> andb_true_iff thm
R137566:137578 Coq.Bool.Bool <> andb_true_iff thm
R137699:137701 Coq.Init.Logic <> ::type_scope:x_'='_x not
R137655:137658 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R137643:137652 VST.veric.SeparationLogic <> nocontinue def
R137659:137668 VST.veric.SeparationLogic <> nocontinue def
R137671:137694 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R137702:137705 Coq.Init.Datatypes <> true constr
R137699:137701 Coq.Init.Logic <> ::type_scope:x_'='_x not
R137655:137658 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R137643:137652 VST.veric.SeparationLogic <> nocontinue def
R137659:137668 VST.veric.SeparationLogic <> nocontinue def
R137671:137694 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R137702:137705 Coq.Init.Datatypes <> true constr
R137735:137747 Coq.Bool.Bool <> andb_true_iff thm
R137735:137747 Coq.Bool.Bool <> andb_true_iff thm
R137735:137747 Coq.Bool.Bool <> andb_true_iff thm
R137947:137949 Coq.Init.Logic <> ::type_scope:x_'='_x not
R137903:137906 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R137891:137900 VST.veric.SeparationLogic <> nocontinue def
R137907:137916 VST.veric.SeparationLogic <> nocontinue def
R137919:137942 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R137950:137953 Coq.Init.Datatypes <> true constr
R137947:137949 Coq.Init.Logic <> ::type_scope:x_'='_x not
R137903:137906 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R137891:137900 VST.veric.SeparationLogic <> nocontinue def
R137907:137916 VST.veric.SeparationLogic <> nocontinue def
R137919:137942 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R137950:137953 Coq.Init.Datatypes <> true constr
R137983:137995 Coq.Bool.Bool <> andb_true_iff thm
R137983:137995 Coq.Bool.Bool <> andb_true_iff thm
R137983:137995 Coq.Bool.Bool <> andb_true_iff thm
prf 138102:138121 DeepEmbedded.DeepEmbeddedPracticalLogic semax_nocontinue_inv
binder 138133:138134 <> CS:952
binder 138136:138140 <> Espec:953
binder 138142:138146 <> Delta:954
binder 138148:138150 <> Pre:955
binder 138152:138152 <> s:956
binder 138154:138157 <> Post:957
binder 138159:138163 <> Post':958
R138189:138196 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R138229:138236 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R138267:138274 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R138307:138314 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R138347:138350 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R138352:138356 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R138379:138383 VST.floyd.SeparationLogicAsLogic <> Post':958 var
R138377:138377 VST.floyd.SeparationLogicAsLogic <> s:956 var
R138373:138375 VST.floyd.SeparationLogicAsLogic <> Pre:955 var
R138367:138371 VST.floyd.SeparationLogicAsLogic <> Delta:954 var
R138361:138365 VST.floyd.SeparationLogicAsLogic <> Espec:953 var
R138358:138359 VST.floyd.SeparationLogicAsLogic <> CS:952 var
R138316:138320 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R138343:138346 VST.floyd.SeparationLogicAsLogic <> Post:957 var
R138341:138341 VST.floyd.SeparationLogicAsLogic <> s:956 var
R138337:138339 VST.floyd.SeparationLogicAsLogic <> Pre:955 var
R138331:138335 VST.floyd.SeparationLogicAsLogic <> Delta:954 var
R138325:138329 VST.floyd.SeparationLogicAsLogic <> Espec:953 var
R138322:138323 VST.floyd.SeparationLogicAsLogic <> CS:952 var
R138289:138291 Coq.Init.Logic <> ::type_scope:x_'='_x not
R138275:138283 VST.veric.tycontext <> RA_return proj
R138285:138288 VST.floyd.SeparationLogicAsLogic <> Post:957 var
R138292:138300 VST.veric.tycontext <> RA_return proj
R138302:138306 VST.floyd.SeparationLogicAsLogic <> Post':958 var
R138250:138252 Coq.Init.Logic <> ::type_scope:x_'='_x not
R138237:138244 VST.veric.tycontext <> RA_break proj
R138246:138249 VST.floyd.SeparationLogicAsLogic <> Post:957 var
R138253:138260 VST.veric.tycontext <> RA_break proj
R138262:138266 VST.floyd.SeparationLogicAsLogic <> Post':958 var
R138211:138213 Coq.Init.Logic <> ::type_scope:x_'='_x not
R138197:138205 VST.veric.tycontext <> RA_normal proj
R138207:138210 VST.floyd.SeparationLogicAsLogic <> Post:957 var
R138214:138222 VST.veric.tycontext <> RA_normal proj
R138224:138228 VST.floyd.SeparationLogicAsLogic <> Post':958 var
R138182:138184 Coq.Init.Logic <> ::type_scope:x_'='_x not
R138170:138179 VST.veric.SeparationLogic <> nocontinue def
R138181:138181 VST.floyd.SeparationLogicAsLogic <> s:956 var
R138185:138188 Coq.Init.Datatypes <> true constr
R138492:138494 Coq.Init.Logic <> ::type_scope:x_'='_x not
R138476:138479 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R138464:138473 VST.veric.SeparationLogic <> nocontinue def
R138480:138489 VST.veric.SeparationLogic <> nocontinue def
R138495:138498 Coq.Init.Datatypes <> true constr
R138492:138494 Coq.Init.Logic <> ::type_scope:x_'='_x not
R138476:138479 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R138464:138473 VST.veric.SeparationLogic <> nocontinue def
R138480:138489 VST.veric.SeparationLogic <> nocontinue def
R138495:138498 Coq.Init.Datatypes <> true constr
R138524:138536 Coq.Bool.Bool <> andb_true_iff thm
R138524:138536 Coq.Bool.Bool <> andb_true_iff thm
R138524:138536 Coq.Bool.Bool <> andb_true_iff thm
R138570:138574 Coq.Init.Logic <> proj1 thm
R138570:138574 Coq.Init.Logic <> proj1 thm
R138618:138622 Coq.Init.Logic <> proj2 thm
R138618:138622 Coq.Init.Logic <> proj2 thm
R138650:138673 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R138650:138673 VST.floyd.SeparationLogicAsLogic AuxDefs semax_ifthenelse constr
R138722:138724 Coq.Init.Logic <> ::type_scope:x_'='_x not
R138706:138709 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R138694:138703 VST.veric.SeparationLogic <> nocontinue def
R138710:138719 VST.veric.SeparationLogic <> nocontinue def
R138725:138728 Coq.Init.Datatypes <> true constr
R138722:138724 Coq.Init.Logic <> ::type_scope:x_'='_x not
R138706:138709 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R138694:138703 VST.veric.SeparationLogic <> nocontinue def
R138710:138719 VST.veric.SeparationLogic <> nocontinue def
R138725:138728 Coq.Init.Datatypes <> true constr
R138754:138766 Coq.Bool.Bool <> andb_true_iff thm
R138754:138766 Coq.Bool.Bool <> andb_true_iff thm
R138754:138766 Coq.Bool.Bool <> andb_true_iff thm
R138800:138804 Coq.Init.Logic <> proj1 thm
R138800:138804 Coq.Init.Logic <> proj1 thm
R138837:138841 Coq.Init.Logic <> proj2 thm
R138837:138841 Coq.Init.Logic <> proj2 thm
R138870:138886 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R138870:138886 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R138971:138989 VST.floyd.SeparationLogicAsLogic AuxDefs semax_break constr
R138971:138989 VST.floyd.SeparationLogicAsLogic AuxDefs semax_break constr
R139045:139060 VST.veric.SeparationLogic <> loop1_ret_assert def
R139074:139089 VST.veric.SeparationLogic <> loop1_ret_assert def
R139045:139060 VST.veric.SeparationLogic <> loop1_ret_assert def
R139074:139089 VST.veric.SeparationLogic <> loop1_ret_assert def
R139173:139188 VST.veric.SeparationLogic <> loop2_ret_assert def
R139201:139216 VST.veric.SeparationLogic <> loop2_ret_assert def
R139173:139188 VST.veric.SeparationLogic <> loop2_ret_assert def
R139201:139216 VST.veric.SeparationLogic <> loop2_ret_assert def
R139298:139315 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R139298:139315 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R139335:139354 VST.floyd.SeparationLogicAsLogic AuxDefs semax_switch constr
R139335:139354 VST.floyd.SeparationLogicAsLogic AuxDefs semax_switch constr
R139423:139441 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic nocontinue_ls_spec' thm
R139446:139457 compcert.lib.Integers Int unsigned def
R139423:139441 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic nocontinue_ls_spec' thm
R139446:139457 compcert.lib.Integers Int unsigned def
R139566:139582 VST.veric.SeparationLogic <> normal_ret_assert def
R139549:139558 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R139609:139618 VST.msl.seplog <> andp_left2 meth
R139631:139637 VST.msl.log_normalize <> FF_left thm
R139566:139582 VST.veric.SeparationLogic <> normal_ret_assert def
R139549:139558 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R139609:139618 VST.msl.seplog <> andp_left2 meth
R139631:139637 VST.msl.log_normalize <> FF_left thm
R139609:139618 VST.msl.seplog <> andp_left2 meth
R139631:139637 VST.msl.log_normalize <> FF_left thm
R139609:139618 VST.msl.seplog <> andp_left2 meth
R139631:139637 VST.msl.log_normalize <> FF_left thm
R139609:139618 VST.msl.seplog <> andp_left2 meth
R139631:139637 VST.msl.log_normalize <> FF_left thm
R139674:139700 VST.floyd.SeparationLogicAsLogic AuxDefs semax_call_backward constr
R139674:139700 VST.floyd.SeparationLogicAsLogic AuxDefs semax_call_backward constr
R139729:139748 VST.floyd.SeparationLogicAsLogic AuxDefs semax_return constr
R139729:139748 VST.floyd.SeparationLogicAsLogic AuxDefs semax_return constr
R139779:139795 VST.veric.SeparationLogic <> normal_ret_assert def
R139762:139771 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R139822:139831 VST.msl.seplog <> andp_left2 meth
R139844:139850 VST.msl.log_normalize <> FF_left thm
R139779:139795 VST.veric.SeparationLogic <> normal_ret_assert def
R139762:139771 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R139822:139831 VST.msl.seplog <> andp_left2 meth
R139844:139850 VST.msl.log_normalize <> FF_left thm
R139822:139831 VST.msl.seplog <> andp_left2 meth
R139844:139850 VST.msl.log_normalize <> FF_left thm
R139822:139831 VST.msl.seplog <> andp_left2 meth
R139844:139850 VST.msl.log_normalize <> FF_left thm
R139822:139831 VST.msl.seplog <> andp_left2 meth
R139844:139850 VST.msl.log_normalize <> FF_left thm
R139887:139939 VST.floyd.SeparationLogicAsLogic AuxDefs semax_set_ptr_compare_load_cast_load_backward constr
R139887:139939 VST.floyd.SeparationLogicAsLogic AuxDefs semax_set_ptr_compare_load_cast_load_backward constr
R139970:139986 VST.veric.SeparationLogic <> normal_ret_assert def
R139953:139962 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R140013:140022 VST.msl.seplog <> andp_left2 meth
R140035:140041 VST.msl.log_normalize <> FF_left thm
R139970:139986 VST.veric.SeparationLogic <> normal_ret_assert def
R139953:139962 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R140013:140022 VST.msl.seplog <> andp_left2 meth
R140035:140041 VST.msl.log_normalize <> FF_left thm
R140013:140022 VST.msl.seplog <> andp_left2 meth
R140035:140041 VST.msl.log_normalize <> FF_left thm
R140013:140022 VST.msl.seplog <> andp_left2 meth
R140035:140041 VST.msl.log_normalize <> FF_left thm
R140013:140022 VST.msl.seplog <> andp_left2 meth
R140035:140041 VST.msl.log_normalize <> FF_left thm
R140078:140122 VST.floyd.SeparationLogicAsLogic AuxDefs semax_store_store_union_hack_backward constr
R140078:140122 VST.floyd.SeparationLogicAsLogic AuxDefs semax_store_store_union_hack_backward constr
R140153:140169 VST.veric.SeparationLogic <> normal_ret_assert def
R140136:140145 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R140196:140205 VST.msl.seplog <> andp_left2 meth
R140218:140224 VST.msl.log_normalize <> FF_left thm
R140153:140169 VST.veric.SeparationLogic <> normal_ret_assert def
R140136:140145 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ConseqFacts semax_post thm
R140196:140205 VST.msl.seplog <> andp_left2 meth
R140218:140224 VST.msl.log_normalize <> FF_left thm
R140196:140205 VST.msl.seplog <> andp_left2 meth
R140218:140224 VST.msl.log_normalize <> FF_left thm
R140196:140205 VST.msl.seplog <> andp_left2 meth
R140218:140224 VST.msl.log_normalize <> FF_left thm
R140196:140205 VST.msl.seplog <> andp_left2 meth
R140218:140224 VST.msl.log_normalize <> FF_left thm
R140261:140278 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R140261:140278 VST.floyd.SeparationLogicAsLogic AuxDefs semax_skip constr
R140291:140311 VST.floyd.SeparationLogicAsLogic AuxDefs semax_builtin constr
R140291:140311 VST.floyd.SeparationLogicAsLogic AuxDefs semax_builtin constr
R140363:140381 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
R140363:140381 VST.floyd.SeparationLogicAsLogic AuxDefs semax_label constr
R140400:140417 VST.floyd.SeparationLogicAsLogic AuxDefs semax_goto constr
R140400:140417 VST.floyd.SeparationLogicAsLogic AuxDefs semax_goto constr
R140431:140450 VST.floyd.SeparationLogicAsLogic AuxDefs semax_conseq constr
R140458:140473 VST.veric.tycontext <> Build_ret_assert constr
R140525:140533 VST.veric.tycontext <> RA_return proj
R140505:140515 VST.veric.tycontext <> RA_continue proj
R140491:140498 VST.veric.tycontext <> RA_break proj
R140476:140484 VST.veric.tycontext <> RA_normal proj
R140431:140450 VST.floyd.SeparationLogicAsLogic AuxDefs semax_conseq constr
R140458:140473 VST.veric.tycontext <> Build_ret_assert constr
R140525:140533 VST.veric.tycontext <> RA_return proj
R140505:140515 VST.veric.tycontext <> RA_continue proj
R140491:140498 VST.veric.tycontext <> RA_break proj
R140476:140484 VST.veric.tycontext <> RA_normal proj
R140632:140648 VST.floyd.assert_lemmas <> derives_full_refl thm
R140632:140648 VST.floyd.assert_lemmas <> derives_full_refl thm
prf 140734:140755 DeepEmbedded.DeepEmbeddedPracticalLogic semax_loop_nocontinue1
binder 140767:140768 <> CS:959
binder 140770:140774 <> Espec:960
binder 140776:140780 <> Delta:961
binder 140782:140784 <> Pre:962
binder 140786:140787 <> s1:963
binder 140789:140790 <> s2:964
binder 140792:140793 <> s3:965
binder 140795:140798 <> Post:966
R140823:140828 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R140849:140854 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R140875:140881 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R140959:140966 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R140968:140972 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R141022:141025 VST.floyd.SeparationLogicAsLogic <> Post:966 var
R140994:140998 compcert.cfrontend.Clight <> Sloop constr
R141018:141019 VST.floyd.SeparationLogicAsLogic <> s3:965 var
R141001:141009 compcert.cfrontend.Clight <> Ssequence constr
R141014:141015 VST.floyd.SeparationLogicAsLogic <> s2:964 var
R141011:141012 VST.floyd.SeparationLogicAsLogic <> s1:963 var
R140989:140991 VST.floyd.SeparationLogicAsLogic <> Pre:962 var
R140983:140987 VST.floyd.SeparationLogicAsLogic <> Delta:961 var
R140977:140981 VST.floyd.SeparationLogicAsLogic <> Espec:960 var
R140974:140975 VST.floyd.SeparationLogicAsLogic <> CS:959 var
R140883:140887 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R140955:140958 VST.floyd.SeparationLogicAsLogic <> Post:966 var
R140909:140913 compcert.cfrontend.Clight <> Sloop constr
R140948:140952 compcert.cfrontend.Clight <> Sskip constr
R140916:140924 compcert.cfrontend.Clight <> Ssequence constr
R140930:140938 compcert.cfrontend.Clight <> Ssequence constr
R140943:140944 VST.floyd.SeparationLogicAsLogic <> s3:965 var
R140940:140941 VST.floyd.SeparationLogicAsLogic <> s2:964 var
R140926:140927 VST.floyd.SeparationLogicAsLogic <> s1:963 var
R140904:140906 VST.floyd.SeparationLogicAsLogic <> Pre:962 var
R140898:140902 VST.floyd.SeparationLogicAsLogic <> Delta:961 var
R140892:140896 VST.floyd.SeparationLogicAsLogic <> Espec:960 var
R140889:140890 VST.floyd.SeparationLogicAsLogic <> CS:959 var
R140868:140870 Coq.Init.Logic <> ::type_scope:x_'='_x not
R140855:140864 VST.veric.SeparationLogic <> nocontinue def
R140866:140867 VST.floyd.SeparationLogicAsLogic <> s3:965 var
R140871:140874 Coq.Init.Datatypes <> true constr
R140842:140844 Coq.Init.Logic <> ::type_scope:x_'='_x not
R140829:140838 VST.veric.SeparationLogic <> nocontinue def
R140840:140841 VST.floyd.SeparationLogicAsLogic <> s2:964 var
R140845:140848 Coq.Init.Datatypes <> true constr
R140816:140818 Coq.Init.Logic <> ::type_scope:x_'='_x not
R140803:140812 VST.veric.SeparationLogic <> nocontinue def
R140814:140815 VST.floyd.SeparationLogicAsLogic <> s1:963 var
R140819:140822 Coq.Init.Datatypes <> true constr
R141089:141102 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_loop_inv thm
R141089:141102 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_loop_inv thm
R141118:141137 VST.floyd.SeparationLogicAsLogic AuxDefs semax_conseq constr
R141118:141137 VST.floyd.SeparationLogicAsLogic AuxDefs semax_conseq constr
R141197:141209 VST.msl.seplog <> derives_trans meth
R141223:141232 VST.msl.ghost_seplog <> bupd_orp_l thm
R141242:141251 VST.msl.seplog <> orp_right2 meth
R141260:141269 VST.msl.seplog <> andp_left2 meth
R141278:141287 VST.msl.seplog <> andp_left2 meth
R141296:141305 VST.msl.ghost_seplog <> bupd_intro meth
R141197:141209 VST.msl.seplog <> derives_trans meth
R141223:141232 VST.msl.ghost_seplog <> bupd_orp_l thm
R141197:141209 VST.msl.seplog <> derives_trans meth
R141223:141232 VST.msl.ghost_seplog <> bupd_orp_l thm
R141197:141209 VST.msl.seplog <> derives_trans meth
R141223:141232 VST.msl.ghost_seplog <> bupd_orp_l thm
R141197:141209 VST.msl.seplog <> derives_trans meth
R141223:141232 VST.msl.ghost_seplog <> bupd_orp_l thm
R141242:141251 VST.msl.seplog <> orp_right2 meth
R141242:141251 VST.msl.seplog <> orp_right2 meth
R141242:141251 VST.msl.seplog <> orp_right2 meth
R141242:141251 VST.msl.seplog <> orp_right2 meth
R141260:141269 VST.msl.seplog <> andp_left2 meth
R141260:141269 VST.msl.seplog <> andp_left2 meth
R141260:141269 VST.msl.seplog <> andp_left2 meth
R141260:141269 VST.msl.seplog <> andp_left2 meth
R141278:141287 VST.msl.seplog <> andp_left2 meth
R141278:141287 VST.msl.seplog <> andp_left2 meth
R141278:141287 VST.msl.seplog <> andp_left2 meth
R141278:141287 VST.msl.seplog <> andp_left2 meth
R141296:141305 VST.msl.ghost_seplog <> bupd_intro meth
R141296:141305 VST.msl.ghost_seplog <> bupd_intro meth
R141296:141305 VST.msl.ghost_seplog <> bupd_intro meth
R141296:141305 VST.msl.ghost_seplog <> bupd_intro meth
R141314:141333 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R141314:141333 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R141351:141370 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R141351:141370 VST.floyd.SeparationLogicAsLogic DeepEmbedded.Extr semax_extract_exists prfax
R141389:141406 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R141389:141406 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrFacts semax_extract_prop thm
R141429:141437 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic seq_assoc thm
R141429:141437 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic seq_assoc thm
R141452:141464 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R141452:141464 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R141506:141523 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R141506:141523 VST.floyd.SeparationLogicAsLogic AuxDefs semax_loop constr
R141572:141574 Coq.Init.Logic <> ::type_scope:x_'='_x not
R141544:141553 VST.veric.SeparationLogic <> nocontinue def
R141556:141564 compcert.cfrontend.Clight <> Ssequence constr
R141575:141578 Coq.Init.Datatypes <> true constr
R141572:141574 Coq.Init.Logic <> ::type_scope:x_'='_x not
R141544:141553 VST.veric.SeparationLogic <> nocontinue def
R141556:141564 compcert.cfrontend.Clight <> Ssequence constr
R141575:141578 Coq.Init.Datatypes <> true constr
R141617:141625 compcert.cfrontend.Clight <> Ssequence constr
R141617:141625 compcert.cfrontend.Clight <> Ssequence constr
R141672:141691 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_nocontinue_inv thm
R141672:141691 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_nocontinue_inv thm
R141759:141772 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_seq_skip thm
R141759:141772 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_seq_skip thm
R141829:141848 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_nocontinue_inv thm
R141829:141848 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_nocontinue_inv thm
prf 141901:141924 DeepEmbedded.DeepEmbeddedPracticalLogic semax_convert_for_while'
binder 141935:141936 <> CS:967
binder 141938:141942 <> Espec:968
binder 141944:141948 <> Delta:969
binder 141950:141952 <> Pre:970
binder 141954:141955 <> s1:971
binder 141957:141958 <> e2:972
binder 141960:141961 <> s3:973
binder 141963:141964 <> s4:974
binder 141966:141967 <> s5:975
binder 141969:141972 <> Post:976
R141997:142002 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R142023:142029 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R142125:142130 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R142132:142136 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R142191:142194 VST.floyd.SeparationLogicAsLogic <> Post:976 var
R142158:142166 compcert.cfrontend.Clight <> Ssequence constr
R142187:142188 VST.floyd.SeparationLogicAsLogic <> s5:975 var
R142169:142172 compcert.cfrontend.Clight <> Sfor def
R142183:142184 VST.floyd.SeparationLogicAsLogic <> s3:973 var
R142180:142181 VST.floyd.SeparationLogicAsLogic <> s4:974 var
R142177:142178 VST.floyd.SeparationLogicAsLogic <> e2:972 var
R142174:142175 VST.floyd.SeparationLogicAsLogic <> s1:971 var
R142153:142155 VST.floyd.SeparationLogicAsLogic <> Pre:970 var
R142147:142151 VST.floyd.SeparationLogicAsLogic <> Delta:969 var
R142141:142145 VST.floyd.SeparationLogicAsLogic <> Espec:968 var
R142138:142139 VST.floyd.SeparationLogicAsLogic <> CS:967 var
R142031:142035 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R142121:142124 VST.floyd.SeparationLogicAsLogic <> Post:976 var
R142062:142070 compcert.cfrontend.Clight <> Ssequence constr
R142076:142084 compcert.cfrontend.Clight <> Ssequence constr
R142116:142117 VST.floyd.SeparationLogicAsLogic <> s5:975 var
R142087:142092 compcert.cfrontend.Clight <> Swhile def
R142098:142106 compcert.cfrontend.Clight <> Ssequence constr
R142111:142112 VST.floyd.SeparationLogicAsLogic <> s3:973 var
R142108:142109 VST.floyd.SeparationLogicAsLogic <> s4:974 var
R142094:142095 VST.floyd.SeparationLogicAsLogic <> e2:972 var
R142072:142073 VST.floyd.SeparationLogicAsLogic <> s1:971 var
R142052:142054 VST.floyd.SeparationLogicAsLogic <> Pre:970 var
R142046:142050 VST.floyd.SeparationLogicAsLogic <> Delta:969 var
R142040:142044 VST.floyd.SeparationLogicAsLogic <> Espec:968 var
R142037:142038 VST.floyd.SeparationLogicAsLogic <> CS:967 var
R142016:142018 Coq.Init.Logic <> ::type_scope:x_'='_x not
R142003:142012 VST.veric.SeparationLogic <> nocontinue def
R142014:142015 VST.floyd.SeparationLogicAsLogic <> s3:973 var
R142019:142022 Coq.Init.Datatypes <> true constr
R141990:141992 Coq.Init.Logic <> ::type_scope:x_'='_x not
R141977:141986 VST.veric.SeparationLogic <> nocontinue def
R141988:141989 VST.floyd.SeparationLogicAsLogic <> s4:974 var
R141993:141996 Coq.Init.Datatypes <> true constr
R142256:142268 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R142256:142268 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R142309:142321 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R142309:142321 VST.floyd.SeparationLogicAsLogic DeepEmbedded semax_seq_inv thm
R142363:142366 compcert.cfrontend.Clight <> Sfor def
R142369:142374 compcert.cfrontend.Clight <> Swhile def
R142389:142405 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R142389:142405 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R142427:142443 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R142427:142443 VST.floyd.SeparationLogicAsLogic AuxDefs semax_seq constr
R142467:142491 VST.floyd.assert_lemmas <> overridePost_overridePost thm
R142467:142491 VST.floyd.assert_lemmas <> overridePost_overridePost thm
R142467:142491 VST.floyd.assert_lemmas <> overridePost_overridePost thm
R142565:142567 Coq.Init.Logic <> ::type_scope:x_'='_x not
R142525:142534 VST.veric.SeparationLogic <> nocontinue def
R142537:142547 compcert.cfrontend.Clight <> Sifthenelse constr
R142558:142563 compcert.cfrontend.Clight <> Sbreak constr
R142552:142556 compcert.cfrontend.Clight <> Sskip constr
R142568:142571 Coq.Init.Datatypes <> true constr
R142565:142567 Coq.Init.Logic <> ::type_scope:x_'='_x not
R142525:142534 VST.veric.SeparationLogic <> nocontinue def
R142537:142547 compcert.cfrontend.Clight <> Sifthenelse constr
R142558:142563 compcert.cfrontend.Clight <> Sbreak constr
R142552:142556 compcert.cfrontend.Clight <> Sskip constr
R142568:142571 Coq.Init.Datatypes <> true constr
R142598:142608 compcert.cfrontend.Clight <> Sifthenelse constr
R142619:142624 compcert.cfrontend.Clight <> Sbreak constr
R142613:142617 compcert.cfrontend.Clight <> Sskip constr
R142598:142608 compcert.cfrontend.Clight <> Sifthenelse constr
R142619:142624 compcert.cfrontend.Clight <> Sbreak constr
R142613:142617 compcert.cfrontend.Clight <> Sskip constr
R142642:142653 VST.veric.SeparationLogic <> overridePost def
R142642:142653 VST.veric.SeparationLogic <> overridePost def
R142695:142699 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R142695:142699 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedDef semax defax
R142708:142729 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_loop_nocontinue1 thm
R142708:142729 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic semax_loop_nocontinue1 thm
def 142756:142773 DeepEmbedded.DeepEmbeddedPracticalLogic semax_extract_prop
R142779:142806 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts.ExtrFacts semax_extract_prop thm
def 142821:142844 DeepEmbedded.DeepEmbeddedPracticalLogic semax_extract_later_prop
R142850:142884 VST.floyd.SeparationLogicAsLogic DeepEmbedded.ExtrIFacts semax_extract_later_prop thm
def 142898:142908 DeepEmbedded.DeepEmbeddedPracticalLogic semax_frame
R142913:142958 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_frame thm
def 142972:142988 DeepEmbedded.DeepEmbeddedPracticalLogic semax_adapt_frame
R142994:143045 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_adapt_frame thm
def 143059:143069 DeepEmbedded.DeepEmbeddedPracticalLogic semax_adapt
R143075:143120 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedMinimumSeparationLogic semax_adapt thm
R143128:143153 VST.floyd.SeparationLogicAsLogic DeepEmbedded.DeepEmbeddedPracticalLogic <> mod
R143161:143172 VST.floyd.SeparationLogicAsLogic DeepEmbedded <> mod
