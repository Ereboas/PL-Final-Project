DIGEST b4cc18a9151c3ec5df6d74851110ed51
FVST.floyd.canon
R15:37 Coq.Sorting.Permutation <> <> lib
R55:70 VST.veric.seplog <> <> lib
R88:102 VST.floyd.base2 <> <> lib
ind 162:169 <> localdef
constr 184:187 <> temp
constr 218:221 <> lvar
constr 283:287 <> gvars
R195:198 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R202:205 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R206:213 VST.floyd.canon <> localdef:1 ind
R199:201 compcert.common.Values <> val ind
R190:194 compcert.common.AST <> ident def
R229:232 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R237:240 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R244:247 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R248:255 VST.floyd.canon <> localdef:1 ind
R241:243 compcert.common.Values <> val ind
R233:236 compcert.cfrontend.Ctypes <> type ind
R224:228 compcert.common.AST <> ident def
R297:300 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R301:308 VST.floyd.canon <> localdef:1 ind
R290:296 VST.veric.SeparationLogic <> globals def
R358:361 VST.floyd.canon <> temp constr
R358:361 VST.floyd.canon <> temp constr
def 389:399 <> lvar_denote
R405:409 compcert.common.AST <> ident def
binder 402:402 <> i:3
R416:419 compcert.cfrontend.Ctypes <> type ind
binder 413:413 <> t:4
R426:428 compcert.common.Values <> val ind
binder 423:423 <> v:5
binder 431:433 <> rho:6
R449:455 VST.veric.mpred Map get def
R469:469 VST.floyd.canon <> i:3 var
R458:462 VST.veric.mpred <> ve_of def
R464:466 VST.floyd.canon <> rho:6 var
R487:490 Coq.Init.Datatypes <> Some constr
R492:492 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R494:495 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R499:499 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R509:512 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R505:505 Coq.Init.Logic <> ::type_scope:x_'='_x not
R504:504 VST.floyd.canon <> t:4 var
R514:516 Coq.Init.Logic <> ::type_scope:x_'='_x not
R513:513 VST.floyd.canon <> v:5 var
R517:520 compcert.common.Values <> Vptr constr
R524:534 compcert.lib.Integers Ptrofs zero def
R547:550 Coq.Init.Datatypes <> None constr
R555:559 Coq.Init.Logic <> False ind
def 587:598 <> gvars_denote
R605:611 VST.veric.SeparationLogic <> globals def
binder 601:602 <> gv:7
binder 614:616 <> rho:8
R626:629 Coq.Init.Logic <> ::type_scope:x_'='_x not
R721:721 Coq.Init.Logic <> ::type_scope:x_'='_x not
R624:625 VST.floyd.canon <> gv:7 var
binder 634:634 <> i:9
R645:651 VST.veric.mpred Map get def
R665:665 VST.floyd.canon <> i:9 var
R654:658 VST.veric.mpred <> ge_of def
R660:662 VST.floyd.canon <> rho:8 var
R672:675 Coq.Init.Datatypes <> Some constr
R682:685 compcert.common.Values <> Vptr constr
R689:699 compcert.lib.Integers Ptrofs zero def
R703:706 Coq.Init.Datatypes <> None constr
R711:716 compcert.common.Values <> Vundef constr
def 736:748 <> locald_denote
R754:761 VST.floyd.canon <> localdef ind
binder 751:751 <> d:10
R773:776 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R766:772 VST.veric.mpred <> environ ind
R792:792 VST.floyd.canon <> d:10 var
R802:805 VST.floyd.canon <> temp constr
R814:814 VST.veric.lift LiftNotation :::'`'_x not
R818:854 VST.veric.lift LiftNotation :::'`'_x not
R815:817 Coq.Init.Logic <> and ind
R841:842 VST.veric.lift LiftNotation :::'`('_x_')' not
R854:854 VST.veric.lift LiftNotation :::'`('_x_')' not
R844:847 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R848:853 compcert.common.Values <> Vundef constr
R820:821 VST.veric.lift LiftNotation :::'`('_x_')' not
R826:838 VST.veric.lift LiftNotation :::'`('_x_')' not
R822:823 Coq.Init.Logic <> eq ind
R829:835 VST.veric.mpred <> eval_id def
R859:862 VST.floyd.canon <> lvar constr
R873:883 VST.floyd.canon <> lvar_denote def
R894:898 VST.floyd.canon <> gvars constr
R906:917 VST.floyd.canon <> gvars_denote def
def 938:952 <> fold_right_andp
binder 954:956 <> rho:12
R962:965 Coq.Init.Datatypes <> list ind
R975:978 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R968:974 VST.veric.mpred <> environ ind
binder 959:959 <> l:13
R1003:1003 VST.floyd.canon <> l:13 var
R1013:1015 Coq.Init.Datatypes <> nil constr
R1020:1023 Coq.Init.Logic <> True ind
R1029:1030 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R1031:1033 Coq.Init.Datatypes <> nil constr
R1040:1042 VST.floyd.canon <> rho:12 var
R1048:1049 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R1060:1063 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R1057:1059 VST.floyd.canon <> rho:12 var
R1064:1078 VST.floyd.canon <> fold_right_andp:14 def
R1080:1082 VST.floyd.canon <> rho:12 var
def 1417:1421 <> PROPx
binder 1424:1424 <> A:16
R1431:1434 Coq.Init.Datatypes <> list ind
binder 1428:1428 <> P:17
R1455:1456 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1457:1461 VST.veric.mpred <> mpred def
R1454:1454 VST.floyd.canon <> A:16 var
binder 1451:1451 <> Q:18
R1466:1467 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1468:1472 VST.veric.mpred <> mpred def
R1465:1465 VST.floyd.canon <> A:16 var
R1482:1485 VST.msl.seplog <> andp meth
R1488:1491 VST.msl.seplog <> prop meth
R1494:1503 Coq.Lists.List <> fold_right def
R1514:1514 VST.floyd.canon <> P:17 var
R1509:1512 Coq.Init.Logic <> True ind
R1505:1507 Coq.Init.Logic <> and ind
R1853:1857 VST.floyd.canon <> PROPx def
R1860:1863 Coq.Init.Datatypes <> cons constr
R1876:1879 Coq.Init.Datatypes <> cons constr
R1888:1890 Coq.Init.Datatypes <> nil constr
not 1821:1821 <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x
R1963:1967 VST.floyd.canon <> PROPx def
R1969:1971 Coq.Init.Datatypes <> nil constr
not 1941:1941 <> ::assert:'PROP'_'()'_x
R2040:2044 VST.floyd.canon <> PROPx def
R2046:2048 Coq.Init.Datatypes <> nil constr
not 2017:2017 <> ::assert:'PROP'_'('_')'_x
R2127:2131 VST.floyd.canon <> PROPx def
R2134:2137 Coq.Init.Datatypes <> cons constr
R2150:2153 Coq.Init.Datatypes <> cons constr
R2162:2164 Coq.Init.Datatypes <> nil constr
not 2095:2095 <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x
R2228:2232 VST.floyd.canon <> PROPx def
R2234:2236 Coq.Init.Datatypes <> nil constr
not 2206:2206 <> :::'PROP'_'()'_x
R2296:2300 VST.floyd.canon <> PROPx def
R2302:2304 Coq.Init.Datatypes <> nil constr
not 2273:2273 <> :::'PROP'_'('_')'_x
def 2344:2349 <> LOCALx
R2355:2358 Coq.Init.Datatypes <> list ind
R2360:2367 VST.floyd.canon <> localdef ind
binder 2352:2352 <> Q:19
R2390:2391 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2392:2396 VST.veric.mpred <> mpred def
R2383:2389 VST.veric.mpred <> environ ind
binder 2380:2380 <> R:20
R2407:2408 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2409:2413 VST.veric.mpred <> mpred def
R2400:2406 VST.veric.mpred <> environ ind
R2435:2438 VST.msl.seplog <> andp meth
R2441:2445 VST.veric.SeparationLogic <> local def
R2448:2457 Coq.Lists.List <> fold_right def
R2475:2477 Coq.Lists.List <> map def
R2493:2493 VST.floyd.canon <> Q:19 var
R2479:2491 VST.floyd.canon <> locald_denote def
R2467:2467 VST.veric.lift LiftNotation :::'`'_x not
R2468:2471 Coq.Init.Logic <> True ind
R2460:2460 VST.veric.lift LiftNotation :::'`'_x not
R2461:2463 Coq.Init.Logic <> and ind
R2531:2536 VST.floyd.canon <> LOCALx def
R2538:2540 Coq.Init.Datatypes <> nil constr
not 2508:2508 <> ::assert3:'LOCAL'_'('_')'_x
R2609:2614 VST.floyd.canon <> LOCALx def
R2616:2618 Coq.Init.Datatypes <> nil constr
not 2587:2587 <> ::assert3:'LOCAL'_'()'_x
R2700:2705 VST.floyd.canon <> LOCALx def
R2708:2711 Coq.Init.Datatypes <> cons constr
R2724:2727 Coq.Init.Datatypes <> cons constr
R2736:2738 Coq.Init.Datatypes <> nil constr
not 2666:2666 <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x
R2821:2826 VST.floyd.canon <> LOCALx def
R2828:2830 Coq.Init.Datatypes <> nil constr
not 2800:2800 <> ::assert3:'RETURN'_'()'_x
R2898:2903 VST.floyd.canon <> LOCALx def
R2905:2907 Coq.Init.Datatypes <> nil constr
not 2876:2876 <> ::assert3:'RETURN'_'('_')'_x
R2977:2982 VST.floyd.canon <> LOCALx def
R3000:3003 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R2985:2988 VST.floyd.canon <> temp constr
R2990:2997 VST.veric.SeparationLogic <> ret_temp def
R3004:3006 Coq.Init.Datatypes <> nil constr
not 2953:2953 <> ::assert3:'RETURN'_'('_x_')'_x
def 3055:3062 <> GLOBALSx
R3070:3073 Coq.Init.Datatypes <> list ind
R3075:3081 VST.veric.SeparationLogic <> globals def
binder 3065:3066 <> gs:21
R3089:3098 VST.veric.mpred <> argsassert def
binder 3085:3085 <> X:22
R3102:3111 VST.veric.mpred <> argsassert def
R3131:3141 VST.veric.mpred <> argsEnviron def
binder 3123:3127 <> gvals:23
R3158:3163 VST.floyd.canon <> LOCALx def
R3244:3262 VST.veric.Clight_seplog <> mkEnv def
R3280:3282 Coq.Init.Datatypes <> nil constr
R3276:3278 Coq.Init.Datatypes <> nil constr
R3265:3267 Coq.Init.Datatypes <> fst def
R3269:3273 VST.floyd.canon <> gvals:23 var
R3200:3216 VST.veric.SeparationLogic <> argsassert2assert def
R3222:3222 VST.floyd.canon <> X:22 var
R3218:3220 Coq.Init.Datatypes <> nil constr
R3166:3168 Coq.Lists.List <> map def
R3176:3177 VST.floyd.canon <> gs:21 var
R3170:3174 VST.floyd.canon <> gvars constr
R3296:3303 VST.floyd.canon <> GLOBALSx def
def 3337:3343 <> PARAMSx
R3351:3354 Coq.Init.Datatypes <> list ind
R3356:3358 compcert.common.Values <> val ind
binder 3346:3349 <> vals:24
R3365:3374 VST.veric.mpred <> argsassert def
binder 3361:3361 <> X:25
R3378:3387 VST.veric.mpred <> argsassert def
R3406:3416 VST.veric.mpred <> argsEnviron def
binder 3398:3402 <> gvals:26
R3491:3494 VST.msl.seplog <> ::logic:x_'&&'_x not
R3422:3425 VST.msl.seplog <> ::logic:'!!'_x not
R3442:3490 VST.msl.seplog <> ::logic:'!!'_x not
R3435:3437 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3426:3428 Coq.Init.Datatypes <> snd def
R3430:3434 VST.floyd.canon <> gvals:26 var
R3438:3441 VST.floyd.canon <> vals:24 var
R3495:3495 VST.floyd.canon <> X:25 var
R3497:3501 VST.floyd.canon <> gvals:26 var
R3514:3520 VST.floyd.canon <> PARAMSx def
R3588:3594 VST.floyd.canon <> PARAMSx def
R3597:3600 Coq.Init.Datatypes <> cons constr
R3614:3617 Coq.Init.Datatypes <> cons constr
R3627:3629 Coq.Init.Datatypes <> nil constr
not 3554:3554 <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x
R3713:3719 VST.floyd.canon <> PARAMSx def
R3721:3723 Coq.Init.Datatypes <> nil constr
not 3690:3690 <> ::assert3:'PARAMS'_'('_')'_x
R3791:3797 VST.floyd.canon <> PARAMSx def
R3799:3801 Coq.Init.Datatypes <> nil constr
not 3769:3769 <> ::assert3:'PARAMS'_'()'_x
R3883:3890 VST.floyd.canon <> GLOBALSx def
R3893:3896 Coq.Init.Datatypes <> cons constr
R3910:3913 Coq.Init.Datatypes <> cons constr
R3923:3925 Coq.Init.Datatypes <> nil constr
not 3848:3848 <> ::assert4:'GLOBALS'_'('_x_';'_'..'_';'_x_')'_x
R4010:4017 VST.floyd.canon <> GLOBALSx def
R4019:4021 Coq.Init.Datatypes <> nil constr
not 3986:3986 <> ::assert4:'GLOBALS'_'('_')'_x
R4090:4097 VST.floyd.canon <> GLOBALSx def
R4099:4101 Coq.Init.Datatypes <> nil constr
not 4067:4067 <> ::assert4:'GLOBALS'_'()'_x
def 4150:4153 <> SEPx
binder 4156:4156 <> A:27
R4163:4166 Coq.Init.Datatypes <> list ind
R4168:4172 VST.veric.mpred <> mpred def
binder 4160:4160 <> R:28
R4178:4179 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4180:4184 VST.veric.mpred <> mpred def
R4177:4177 VST.floyd.canon <> A:27 var
R4203:4219 VST.floyd.base <> fold_right_sepcon def
R4221:4221 VST.floyd.canon <> R:28 var
R4235:4238 VST.floyd.canon <> SEPx def
R4299:4306 VST.floyd.canon <> GLOBALSx def
R4313:4316 VST.floyd.canon <> SEPx def
R4319:4322 Coq.Init.Datatypes <> cons constr
R4336:4339 Coq.Init.Datatypes <> cons constr
R4349:4351 Coq.Init.Datatypes <> nil constr
R4308:4310 Coq.Init.Datatypes <> nil constr
not 4271:4271 <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')'
R4421:4428 VST.floyd.canon <> GLOBALSx def
R4435:4438 VST.floyd.canon <> SEPx def
R4440:4442 Coq.Init.Datatypes <> nil constr
R4430:4432 Coq.Init.Datatypes <> nil constr
not 4403:4403 <> ::assert4:'SEP'_'('_')'
R4496:4503 VST.floyd.canon <> GLOBALSx def
R4510:4513 VST.floyd.canon <> SEPx def
R4515:4517 Coq.Init.Datatypes <> nil constr
R4505:4507 Coq.Init.Datatypes <> nil constr
not 4479:4479 <> ::assert4:'SEP'_'()'
R4583:4586 VST.floyd.canon <> SEPx def
R4589:4592 Coq.Init.Datatypes <> cons constr
R4606:4609 Coq.Init.Datatypes <> cons constr
R4619:4621 Coq.Init.Datatypes <> nil constr
not 4555:4555 <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')'
R4690:4693 VST.floyd.canon <> SEPx def
R4695:4697 Coq.Init.Datatypes <> nil constr
not 4672:4672 <> ::assert5:'SEP'_'('_')'
R4750:4753 VST.floyd.canon <> SEPx def
R4755:4757 Coq.Init.Datatypes <> nil constr
not 4733:4733 <> ::assert5:'SEP'_'()'
prf 4791:4807 <> PROPx_Permutation
binder 4810:4810 <> A:29
binder 4821:4821 <> P:30
binder 4823:4823 <> Q:31
R4843:4848 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4859:4861 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4850:4854 VST.floyd.canon <> PROPx def
R4858:4858 VST.floyd.canon <> P:30 var
R4856:4856 VST.floyd.canon <> A:29 var
R4862:4866 VST.floyd.canon <> PROPx def
R4868:4868 VST.floyd.canon <> Q:31 var
R4828:4838 Coq.Sorting.Permutation <> Permutation ind
R4842:4842 VST.floyd.canon <> Q:31 var
R4840:4840 VST.floyd.canon <> P:30 var
R4897:4901 VST.floyd.canon <> PROPx def
R4923:4933 VST.msl.log_normalize <> ND_prop_ext thm
R4923:4933 VST.msl.log_normalize <> ND_prop_ext thm
prf 5021:5038 <> LOCALx_Permutation
binder 5048:5048 <> P:32
binder 5050:5050 <> Q:33
R5070:5075 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5084:5086 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5076:5081 VST.floyd.canon <> LOCALx def
R5083:5083 VST.floyd.canon <> P:32 var
R5087:5092 VST.floyd.canon <> LOCALx def
R5094:5094 VST.floyd.canon <> Q:33 var
R5055:5065 Coq.Sorting.Permutation <> Permutation ind
R5069:5069 VST.floyd.canon <> Q:33 var
R5067:5067 VST.floyd.canon <> P:32 var
R5123:5128 VST.floyd.canon <> LOCALx def
R5151:5155 VST.veric.SeparationLogic <> local def
R5158:5162 VST.veric.mpred <> lift1 def
R5208:5218 VST.msl.log_normalize <> ND_prop_ext thm
R5208:5218 VST.msl.log_normalize <> ND_prop_ext thm
prf 5306:5321 <> SEPx_Permutation
binder 5324:5324 <> A:34
binder 5335:5335 <> P:35
binder 5337:5337 <> Q:36
R5357:5362 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5372:5374 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5364:5367 VST.floyd.canon <> SEPx def
R5371:5371 VST.floyd.canon <> P:35 var
R5369:5369 VST.floyd.canon <> A:34 var
R5375:5378 VST.floyd.canon <> SEPx def
R5380:5380 VST.floyd.canon <> Q:36 var
R5342:5352 Coq.Sorting.Permutation <> Permutation ind
R5356:5356 VST.floyd.canon <> Q:36 var
R5354:5354 VST.floyd.canon <> P:35 var
R5409:5412 VST.floyd.canon <> SEPx def
R5515:5526 VST.msl.seplog <> sepcon_assoc meth
R5530:5540 VST.msl.seplog <> sepcon_comm meth
R5515:5526 VST.msl.seplog <> sepcon_assoc meth
R5515:5526 VST.msl.seplog <> sepcon_assoc meth
R5515:5526 VST.msl.seplog <> sepcon_assoc meth
R5515:5526 VST.msl.seplog <> sepcon_assoc meth
R5530:5540 VST.msl.seplog <> sepcon_comm meth
R5530:5540 VST.msl.seplog <> sepcon_comm meth
prf 5586:5598 <> approx_sepcon
R5614:5618 VST.veric.mpred <> mpred def
binder 5609:5609 <> P:37
binder 5611:5611 <> Q:38
binder 5621:5621 <> n:39
R5663:5667 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5626:5652 VST.veric.compcert_rmaps RML.R approx def
R5658:5660 VST.msl.seplog <> ::logic:x_'*'_x not
R5657:5657 VST.floyd.canon <> P:37 var
R5661:5661 VST.floyd.canon <> Q:38 var
R5654:5654 VST.floyd.canon <> n:39 var
R5699:5703 VST.msl.seplog <> ::logic:x_'*'_x not
R5668:5694 VST.veric.compcert_rmaps RML.R approx def
R5698:5698 VST.floyd.canon <> P:37 var
R5696:5696 VST.floyd.canon <> n:39 var
R5704:5730 VST.veric.compcert_rmaps RML.R approx def
R5734:5734 VST.floyd.canon <> Q:38 var
R5732:5732 VST.floyd.canon <> n:39 var
R5762:5781 VST.veric.seplog <> approx_sepcon thm
R5762:5781 VST.veric.seplog <> approx_sepcon thm
prf 5796:5806 <> approx_andp
R5822:5826 VST.veric.mpred <> mpred def
binder 5817:5817 <> P:40
binder 5819:5819 <> Q:41
binder 5829:5829 <> n:42
R5872:5876 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5834:5860 VST.veric.compcert_rmaps RML.R approx def
R5866:5869 VST.msl.seplog <> ::logic:x_'&&'_x not
R5865:5865 VST.floyd.canon <> P:40 var
R5870:5870 VST.floyd.canon <> Q:41 var
R5862:5862 VST.floyd.canon <> n:42 var
R5908:5913 VST.msl.seplog <> ::logic:x_'&&'_x not
R5877:5903 VST.veric.compcert_rmaps RML.R approx def
R5907:5907 VST.floyd.canon <> P:40 var
R5905:5905 VST.floyd.canon <> n:42 var
R5914:5940 VST.veric.compcert_rmaps RML.R approx def
R5944:5944 VST.floyd.canon <> Q:41 var
R5942:5942 VST.floyd.canon <> n:42 var
R5972:5982 VST.veric.seplog <> approx_andp thm
R5972:5982 VST.veric.seplog <> approx_andp thm
prf 5997:6006 <> approx_exp
binder 6016:6016 <> A:43
R6023:6026 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6027:6031 VST.veric.mpred <> mpred def
R6022:6022 VST.floyd.canon <> A:43 var
binder 6019:6019 <> P:44
binder 6034:6034 <> n:45
R6076:6080 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6039:6065 VST.veric.compcert_rmaps RML.R approx def
R6070:6072 VST.msl.seplog <> exp meth
R6074:6074 VST.floyd.canon <> P:44 var
R6067:6067 VST.floyd.canon <> n:45 var
R6081:6083 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6088:6089 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6087:6087 VST.floyd.canon <> A:43 var
binder 6084:6084 <> a:46
R6090:6116 VST.veric.compcert_rmaps RML.R approx def
R6121:6121 VST.floyd.canon <> P:44 var
R6123:6123 VST.floyd.canon <> a:46 var
R6118:6118 VST.floyd.canon <> n:45 var
R6152:6168 VST.veric.seplog <> approx_exp thm
R6152:6168 VST.veric.seplog <> approx_exp thm
prf 6183:6193 <> approx_allp
binder 6203:6203 <> A:47
R6210:6213 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6214:6218 VST.veric.mpred <> mpred def
R6209:6209 VST.floyd.canon <> A:47 var
binder 6206:6206 <> P:48
binder 6221:6221 <> n:49
R6227:6232 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6271:6275 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6233:6259 VST.veric.compcert_rmaps RML.R approx def
R6264:6267 VST.msl.seplog <> allp meth
R6269:6269 VST.floyd.canon <> P:48 var
R6261:6261 VST.floyd.canon <> n:49 var
R6276:6279 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R6284:6285 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R6283:6283 VST.floyd.canon <> A:47 var
binder 6280:6280 <> a:50
R6286:6312 VST.veric.compcert_rmaps RML.R approx def
R6317:6317 VST.floyd.canon <> P:48 var
R6319:6319 VST.floyd.canon <> a:50 var
R6314:6314 VST.floyd.canon <> n:49 var
R6226:6226 VST.floyd.canon <> A:47 var
R6349:6366 VST.veric.seplog <> approx_allp thm
R6349:6366 VST.veric.seplog <> approx_allp thm
prf 6387:6396 <> approx_jam
binder 6399:6399 <> B:51
R6414:6417 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6413:6413 VST.floyd.canon <> B:51 var
binder 6409:6410 <> S':52
binder 6435:6435 <> l:53
R6438:6438 Coq.Init.Specif <> ::type_scope:'{'_x_'}'_'+'_'{'_x_'}' not
R6443:6445 Coq.Init.Specif <> ::type_scope:'{'_x_'}'_'+'_'{'_x_'}' not
R6452:6452 Coq.Init.Specif <> ::type_scope:'{'_x_'}'_'+'_'{'_x_'}' not
R6439:6440 VST.floyd.canon <> S':52 var
R6442:6442 VST.floyd.canon <> l:53 var
R6446:6447 Coq.Init.Logic <> ::type_scope:'~'_x not
R6448:6449 VST.floyd.canon <> S':52 var
R6451:6451 VST.floyd.canon <> l:53 var
binder 6425:6425 <> S:54
R6462:6465 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6466:6470 VST.veric.mpred <> mpred def
R6461:6461 VST.floyd.canon <> B:51 var
binder 6456:6456 <> P:55
binder 6458:6458 <> Q:56
binder 6473:6473 <> n:57
R6480:6480 VST.floyd.canon <> B:51 var
binder 6476:6476 <> b:58
R6545:6549 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6487:6513 VST.veric.compcert_rmaps RML.R approx def
R6518:6535 VST.veric.res_predicates <> jam def
R6543:6543 VST.floyd.canon <> b:58 var
R6541:6541 VST.floyd.canon <> Q:56 var
R6539:6539 VST.floyd.canon <> P:55 var
R6537:6537 VST.floyd.canon <> S:54 var
R6515:6515 VST.floyd.canon <> n:57 var
R6550:6567 VST.veric.res_predicates <> jam def
R6677:6677 VST.floyd.canon <> b:58 var
R6629:6640 VST.msl.base <> compose def
R6674:6674 VST.floyd.canon <> Q:56 var
R6643:6669 VST.veric.compcert_rmaps RML.R approx def
R6671:6671 VST.floyd.canon <> n:57 var
R6576:6587 VST.msl.base <> compose def
R6621:6621 VST.floyd.canon <> P:55 var
R6590:6616 VST.veric.compcert_rmaps RML.R approx def
R6618:6618 VST.floyd.canon <> n:57 var
R6573:6573 VST.floyd.canon <> S:54 var
R6706:6722 VST.veric.seplog <> approx_jam thm
R6706:6722 VST.veric.seplog <> approx_jam thm
R6743:6774 VST.veric.rmaps <> dependent_type_functor_rec def
prf 6802:6825 <> SEPx_super_non_expansive
binder 6835:6835 <> A:59
binder 6837:6837 <> R:60
R6910:6915 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6917:6935 VST.veric.mpred <> super_non_expansive def
binder 6944:6945 <> ts:61
binder 6947:6947 <> a:62
binder 6949:6951 <> rho:63
R6956:6959 VST.floyd.canon <> SEPx def
R6989:6991 VST.floyd.canon <> rho:63 var
R6962:6964 Coq.Lists.List <> map def
R6986:6986 VST.floyd.canon <> R:60 var
binder 6971:6972 <> R0:64
R6977:6978 VST.floyd.canon <> R0:64 var
R6983:6983 VST.floyd.canon <> a:62 var
R6980:6981 VST.floyd.canon <> ts:61 var
R6937:6937 VST.floyd.canon <> A:59 var
R6843:6848 Coq.Lists.List <> Forall ind
R6909:6909 VST.floyd.canon <> R:60 var
binder 6855:6856 <> R0:65
R6862:6880 VST.veric.mpred <> super_non_expansive def
binder 6889:6890 <> ts:66
binder 6892:6892 <> a:67
R6899:6900 VST.floyd.canon <> R0:65 var
R6905:6905 VST.floyd.canon <> a:67 var
R6902:6903 VST.floyd.canon <> ts:66 var
R6882:6882 VST.floyd.canon <> A:59 var
R7917:7920 VST.floyd.canon <> SEPx def
R7984:7996 VST.floyd.canon <> approx_sepcon thm
R7984:7996 VST.floyd.canon <> approx_sepcon thm
R7984:7996 VST.floyd.canon <> approx_sepcon thm
R7984:7996 VST.floyd.canon <> approx_sepcon thm
R7984:7996 VST.floyd.canon <> approx_sepcon thm
prf 8034:8059 <> LOCALx_super_non_expansive
binder 8069:8069 <> A:68
binder 8071:8071 <> Q:69
binder 8073:8073 <> R:70
R8099:8104 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8201:8206 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8208:8226 VST.veric.mpred <> super_non_expansive def
binder 8235:8236 <> ts:71
binder 8238:8238 <> a:72
binder 8240:8242 <> rho:73
R8247:8252 VST.floyd.canon <> LOCALx def
R8291:8293 VST.floyd.canon <> rho:73 var
R8283:8283 VST.floyd.canon <> R:70 var
R8288:8288 VST.floyd.canon <> a:72 var
R8285:8286 VST.floyd.canon <> ts:71 var
R8255:8257 Coq.Lists.List <> map def
R8279:8279 VST.floyd.canon <> Q:69 var
binder 8264:8265 <> Q0:74
R8270:8271 VST.floyd.canon <> Q0:74 var
R8276:8276 VST.floyd.canon <> a:72 var
R8273:8274 VST.floyd.canon <> ts:71 var
R8228:8228 VST.floyd.canon <> A:68 var
R8105:8110 Coq.Lists.List <> Forall ind
R8200:8200 VST.floyd.canon <> Q:69 var
binder 8117:8118 <> Q0:75
R8124:8142 VST.veric.mpred <> super_non_expansive def
binder 8151:8152 <> ts:76
binder 8154:8154 <> a:77
binder 8156:8158 <> rho:78
R8163:8166 VST.msl.seplog <> prop meth
R8169:8181 VST.floyd.canon <> locald_denote def
R8193:8195 VST.floyd.canon <> rho:78 var
R8184:8185 VST.floyd.canon <> Q0:75 var
R8190:8190 VST.floyd.canon <> a:77 var
R8187:8188 VST.floyd.canon <> ts:76 var
R8144:8144 VST.floyd.canon <> A:68 var
R8078:8096 VST.veric.mpred <> super_non_expansive def
R8098:8098 VST.floyd.canon <> R:70 var
R8338:8343 VST.floyd.canon <> LOCALx def
R8366:8376 VST.floyd.canon <> approx_andp thm
R8366:8376 VST.floyd.canon <> approx_andp thm
R8366:8376 VST.floyd.canon <> approx_andp thm
R8366:8376 VST.floyd.canon <> approx_andp thm
R8366:8376 VST.floyd.canon <> approx_andp thm
R8444:8448 VST.veric.SeparationLogic <> local def
R8451:8455 VST.veric.mpred <> lift1 def
R8488:8495 VST.msl.log_normalize <> prop_and thm
R8488:8495 VST.msl.log_normalize <> prop_and thm
R8488:8495 VST.msl.log_normalize <> prop_and thm
R8488:8495 VST.msl.log_normalize <> prop_and thm
R8488:8495 VST.msl.log_normalize <> prop_and thm
R8511:8521 VST.floyd.canon <> approx_andp thm
R8511:8521 VST.floyd.canon <> approx_andp thm
R8511:8521 VST.floyd.canon <> approx_andp thm
R8511:8521 VST.floyd.canon <> approx_andp thm
R8511:8521 VST.floyd.canon <> approx_andp thm
prf 8555:8579 <> PROPx_super_non_expansive
binder 8589:8589 <> A:79
binder 8591:8591 <> P:80
binder 8593:8593 <> Q:81
R8619:8624 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8712:8717 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8719:8737 VST.veric.mpred <> super_non_expansive def
binder 8746:8747 <> ts:82
binder 8749:8749 <> a:83
binder 8751:8753 <> rho:84
R8758:8762 VST.floyd.canon <> PROPx def
R8801:8803 VST.floyd.canon <> rho:84 var
R8793:8793 VST.floyd.canon <> Q:81 var
R8798:8798 VST.floyd.canon <> a:83 var
R8795:8796 VST.floyd.canon <> ts:82 var
R8765:8767 Coq.Lists.List <> map def
R8789:8789 VST.floyd.canon <> P:80 var
binder 8774:8775 <> P0:85
R8780:8781 VST.floyd.canon <> P0:85 var
R8786:8786 VST.floyd.canon <> a:83 var
R8783:8784 VST.floyd.canon <> ts:82 var
R8739:8739 VST.floyd.canon <> A:79 var
R8625:8630 Coq.Lists.List <> Forall ind
R8711:8711 VST.floyd.canon <> P:80 var
binder 8637:8638 <> P0:86
R8644:8662 VST.veric.mpred <> super_non_expansive def
binder 8671:8672 <> ts:87
binder 8674:8674 <> a:88
R8682:8688 VST.veric.mpred <> environ ind
binder 8677:8679 <> rho:89
R8694:8697 VST.msl.seplog <> prop meth
R8700:8701 VST.floyd.canon <> P0:86 var
R8706:8706 VST.floyd.canon <> a:88 var
R8703:8704 VST.floyd.canon <> ts:87 var
R8664:8664 VST.floyd.canon <> A:79 var
R8598:8616 VST.veric.mpred <> super_non_expansive def
R8618:8618 VST.floyd.canon <> Q:81 var
R8848:8852 VST.floyd.canon <> PROPx def
R8875:8885 VST.floyd.canon <> approx_andp thm
R8875:8885 VST.floyd.canon <> approx_andp thm
R8875:8885 VST.floyd.canon <> approx_andp thm
R8875:8885 VST.floyd.canon <> approx_andp thm
R8875:8885 VST.floyd.canon <> approx_andp thm
R8955:8962 VST.msl.log_normalize <> prop_and thm
R8955:8962 VST.msl.log_normalize <> prop_and thm
R8955:8962 VST.msl.log_normalize <> prop_and thm
R8955:8962 VST.msl.log_normalize <> prop_and thm
R8955:8962 VST.msl.log_normalize <> prop_and thm
R8978:8988 VST.floyd.canon <> approx_andp thm
R8978:8988 VST.floyd.canon <> approx_andp thm
R8978:8988 VST.floyd.canon <> approx_andp thm
R8978:8988 VST.floyd.canon <> approx_andp thm
R8978:8988 VST.floyd.canon <> approx_andp thm
prf 9022:9055 <> PROP_LOCAL_SEP_super_non_expansive
binder 9065:9065 <> A:90
binder 9067:9067 <> P:91
binder 9069:9069 <> Q:92
binder 9071:9071 <> R:93
R9150:9155 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9252:9257 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9325:9330 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9332:9350 VST.veric.mpred <> super_non_expansive def
binder 9359:9360 <> ts:94
binder 9362:9362 <> a:95
binder 9364:9366 <> rho:96
R9376:9380 VST.floyd.canon <> PROPx def
R9496:9498 VST.floyd.canon <> rho:96 var
R9417:9422 VST.floyd.canon <> LOCALx def
R9461:9464 VST.floyd.canon <> SEPx def
R9467:9469 Coq.Lists.List <> map def
R9491:9491 VST.floyd.canon <> R:93 var
binder 9476:9477 <> R0:97
R9482:9483 VST.floyd.canon <> R0:97 var
R9488:9488 VST.floyd.canon <> a:95 var
R9485:9486 VST.floyd.canon <> ts:94 var
R9425:9427 Coq.Lists.List <> map def
R9449:9449 VST.floyd.canon <> Q:92 var
binder 9434:9435 <> Q0:98
R9440:9441 VST.floyd.canon <> Q0:98 var
R9446:9446 VST.floyd.canon <> a:95 var
R9443:9444 VST.floyd.canon <> ts:94 var
R9383:9385 Coq.Lists.List <> map def
R9407:9407 VST.floyd.canon <> P:91 var
binder 9392:9393 <> P0:99
R9398:9399 VST.floyd.canon <> P0:99 var
R9404:9404 VST.floyd.canon <> a:95 var
R9401:9402 VST.floyd.canon <> ts:94 var
R9352:9352 VST.floyd.canon <> A:90 var
R9258:9263 Coq.Lists.List <> Forall ind
R9324:9324 VST.floyd.canon <> R:93 var
binder 9270:9271 <> R0:100
R9277:9295 VST.veric.mpred <> super_non_expansive def
binder 9304:9305 <> ts:101
binder 9307:9307 <> a:102
R9314:9315 VST.floyd.canon <> R0:100 var
R9320:9320 VST.floyd.canon <> a:102 var
R9317:9318 VST.floyd.canon <> ts:101 var
R9297:9297 VST.floyd.canon <> A:90 var
R9156:9161 Coq.Lists.List <> Forall ind
R9251:9251 VST.floyd.canon <> Q:92 var
binder 9168:9169 <> Q0:103
R9175:9193 VST.veric.mpred <> super_non_expansive def
binder 9202:9203 <> ts:104
binder 9205:9205 <> a:105
binder 9207:9209 <> rho:106
R9214:9217 VST.msl.seplog <> prop meth
R9220:9232 VST.floyd.canon <> locald_denote def
R9244:9246 VST.floyd.canon <> rho:106 var
R9235:9236 VST.floyd.canon <> Q0:103 var
R9241:9241 VST.floyd.canon <> a:105 var
R9238:9239 VST.floyd.canon <> ts:104 var
R9195:9195 VST.floyd.canon <> A:90 var
R9076:9081 Coq.Lists.List <> Forall ind
R9149:9149 VST.floyd.canon <> P:91 var
binder 9088:9089 <> P0:107
R9095:9113 VST.veric.mpred <> super_non_expansive def
binder 9122:9123 <> ts:108
binder 9125:9125 <> a:109
R9132:9135 VST.msl.seplog <> prop meth
R9138:9139 VST.floyd.canon <> P0:107 var
R9144:9144 VST.floyd.canon <> a:109 var
R9141:9142 VST.floyd.canon <> ts:108 var
R9115:9115 VST.floyd.canon <> A:90 var
R9527:9551 VST.floyd.canon <> PROPx_super_non_expansive thm
R9527:9551 VST.floyd.canon <> PROPx_super_non_expansive thm
R9568:9593 VST.floyd.canon <> LOCALx_super_non_expansive thm
R9568:9593 VST.floyd.canon <> LOCALx_super_non_expansive thm
R9610:9633 VST.floyd.canon <> SEPx_super_non_expansive thm
R9610:9633 VST.floyd.canon <> SEPx_super_non_expansive thm
prf 9654:9670 <> SEPx_nonexpansive
binder 9673:9673 <> A:110
binder 9684:9684 <> R:111
binder 9686:9688 <> rho:112
R9744:9749 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9750:9761 VST.msl.predicates_rec <> nonexpansive def
binder 9768:9768 <> S:113
R9774:9777 VST.floyd.canon <> SEPx def
R9806:9808 VST.floyd.canon <> rho:112 var
R9782:9784 Coq.Lists.List <> map def
R9803:9803 VST.floyd.canon <> R:111 var
binder 9791:9792 <> R0:114
R9797:9798 VST.floyd.canon <> R0:114 var
R9800:9800 VST.floyd.canon <> S:113 var
R9779:9779 VST.floyd.canon <> A:110 var
R9693:9698 Coq.Lists.List <> Forall ind
R9743:9743 VST.floyd.canon <> R:111 var
binder 9705:9706 <> R0:115
R9711:9737 VST.msl.predicates_rec <> nonexpansive def
R9739:9740 VST.floyd.canon <> R0:115 var
R9838:9841 VST.floyd.canon <> SEPx def
R9880:9897 VST.msl.contractive <> const_nonexpansive thm
R9880:9897 VST.msl.contractive <> const_nonexpansive thm
R9921:9939 VST.msl.contractive <> sepcon_nonexpansive thm
R9921:9939 VST.msl.contractive <> sepcon_nonexpansive thm
prf 10021:10039 <> LOCALx_nonexpansive
binder 10049:10049 <> Q:116
binder 10051:10051 <> R:117
binder 10053:10055 <> rho:118
R10091:10096 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10097:10108 VST.msl.predicates_rec <> nonexpansive def
binder 10115:10115 <> S:119
R10120:10125 VST.floyd.canon <> LOCALx def
R10135:10137 VST.floyd.canon <> rho:118 var
R10130:10130 VST.floyd.canon <> R:117 var
R10132:10132 VST.floyd.canon <> S:119 var
R10127:10127 VST.floyd.canon <> Q:116 var
R10060:10071 VST.msl.predicates_rec <> nonexpansive def
binder 10078:10078 <> S:120
R10083:10083 VST.floyd.canon <> R:117 var
R10087:10089 VST.floyd.canon <> rho:118 var
R10085:10085 VST.floyd.canon <> S:120 var
R10167:10172 VST.floyd.canon <> LOCALx def
R10184:10200 VST.msl.contractive <> conj_nonexpansive thm
binder 10278:10278 <> S:121
R10285:10285 VST.floyd.canon <> S:121 var
binder 10207:10207 <> S:122
R10212:10216 VST.veric.SeparationLogic <> local def
R10219:10228 Coq.Lists.List <> fold_right def
R10246:10248 Coq.Lists.List <> map def
R10250:10262 VST.floyd.canon <> locald_denote def
R10237:10238 VST.veric.lift LiftNotation :::'`('_x_')' not
R10243:10243 VST.veric.lift LiftNotation :::'`('_x_')' not
R10239:10242 Coq.Init.Logic <> True ind
R10230:10231 VST.veric.lift LiftNotation :::'`('_x_')' not
R10235:10235 VST.veric.lift LiftNotation :::'`('_x_')' not
R10232:10234 Coq.Init.Logic <> and ind
R10184:10200 VST.msl.contractive <> conj_nonexpansive thm
binder 10278:10278 <> S:123
R10285:10285 VST.floyd.canon <> S:123 var
binder 10207:10207 <> S:124
R10212:10216 VST.veric.SeparationLogic <> local def
R10219:10228 Coq.Lists.List <> fold_right def
R10246:10248 Coq.Lists.List <> map def
R10250:10262 VST.floyd.canon <> locald_denote def
R10237:10238 VST.veric.lift LiftNotation :::'`('_x_')' not
R10243:10243 VST.veric.lift LiftNotation :::'`('_x_')' not
R10239:10242 Coq.Init.Logic <> True ind
R10230:10231 VST.veric.lift LiftNotation :::'`('_x_')' not
R10235:10235 VST.veric.lift LiftNotation :::'`('_x_')' not
R10232:10234 Coq.Init.Logic <> and ind
R10312:10329 VST.msl.contractive <> const_nonexpansive thm
R10312:10329 VST.msl.contractive <> const_nonexpansive thm
prf 10344:10363 <> PARAMSx_nonexpansive
binder 10373:10373 <> Q:125
binder 10375:10375 <> R:126
binder 10377:10379 <> rho:127
R10415:10420 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10421:10432 VST.msl.predicates_rec <> nonexpansive def
binder 10439:10439 <> S:128
R10444:10450 VST.floyd.canon <> PARAMSx def
R10460:10462 VST.floyd.canon <> rho:127 var
R10455:10455 VST.floyd.canon <> R:126 var
R10457:10457 VST.floyd.canon <> S:128 var
R10452:10452 VST.floyd.canon <> Q:125 var
R10384:10395 VST.msl.predicates_rec <> nonexpansive def
binder 10402:10402 <> S:129
R10407:10407 VST.floyd.canon <> R:126 var
R10411:10413 VST.floyd.canon <> rho:127 var
R10409:10409 VST.floyd.canon <> S:129 var
R10492:10498 VST.floyd.canon <> PARAMSx def
R10515:10531 VST.msl.contractive <> conj_nonexpansive thm
binder 10572:10572 <> S:130
R10579:10579 VST.floyd.canon <> S:130 var
binder 10538:10538 <> S:131
R10543:10547 VST.msl.seplog <> ::logic:'!!'_x not
R10559:10564 VST.msl.seplog <> ::logic:'!!'_x not
R10555:10557 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10548:10550 Coq.Init.Datatypes <> snd def
R10515:10531 VST.msl.contractive <> conj_nonexpansive thm
binder 10572:10572 <> S:132
R10579:10579 VST.floyd.canon <> S:132 var
binder 10538:10538 <> S:133
R10543:10547 VST.msl.seplog <> ::logic:'!!'_x not
R10559:10564 VST.msl.seplog <> ::logic:'!!'_x not
R10555:10557 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10548:10550 Coq.Init.Datatypes <> snd def
prf 10740:10757 <> PROPx_nonexpansive
binder 10760:10760 <> A:134
binder 10771:10771 <> P:135
binder 10773:10773 <> Q:136
binder 10775:10777 <> rho:137
R10838:10843 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10875:10880 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10881:10892 VST.msl.predicates_rec <> nonexpansive def
binder 10899:10899 <> S:138
R10905:10909 VST.floyd.canon <> PROPx def
R10944:10946 VST.floyd.canon <> rho:137 var
R10939:10939 VST.floyd.canon <> Q:136 var
R10941:10941 VST.floyd.canon <> S:138 var
R10914:10916 Coq.Lists.List <> map def
R10935:10935 VST.floyd.canon <> P:135 var
binder 10923:10924 <> P0:139
R10929:10930 VST.floyd.canon <> P0:139 var
R10932:10932 VST.floyd.canon <> S:138 var
R10911:10911 VST.floyd.canon <> A:134 var
R10844:10855 VST.msl.predicates_rec <> nonexpansive def
binder 10862:10862 <> S:140
R10867:10867 VST.floyd.canon <> Q:136 var
R10871:10873 VST.floyd.canon <> rho:137 var
R10869:10869 VST.floyd.canon <> S:140 var
R10782:10787 Coq.Lists.List <> Forall ind
R10837:10837 VST.floyd.canon <> P:135 var
binder 10794:10795 <> P0:141
R10800:10811 VST.msl.predicates_rec <> nonexpansive def
binder 10818:10818 <> S:142
R10823:10826 VST.msl.seplog <> prop meth
R10829:10830 VST.floyd.canon <> P0:141 var
R10832:10832 VST.floyd.canon <> S:142 var
R10976:10980 VST.floyd.canon <> PROPx def
R10992:11008 VST.msl.contractive <> conj_nonexpansive thm
binder 11142:11142 <> S:143
R11149:11149 VST.floyd.canon <> S:143 var
binder 11015:11015 <> S:144
R11021:11024 VST.msl.seplog <> prop meth
R11040:11049 Coq.Lists.List <> fold_right def
R11070:11072 Coq.Lists.List <> map def
R11101:11104 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11096:11100 VST.veric.mpred <> mpred def
binder 11091:11092 <> P0:145
R11126:11127 VST.floyd.canon <> P0:145 var
R11129:11129 VST.floyd.canon <> S:144 var
R11055:11058 Coq.Init.Logic <> True ind
R11051:11053 Coq.Init.Logic <> and ind
R11032:11037 VST.veric.SeparationLogic <> Nveric inst
R11026:11030 VST.veric.mpred <> mpred def
R10992:11008 VST.msl.contractive <> conj_nonexpansive thm
binder 11142:11142 <> S:146
R11149:11149 VST.floyd.canon <> S:146 var
binder 11015:11015 <> S:147
R11021:11024 VST.msl.seplog <> prop meth
R11040:11049 Coq.Lists.List <> fold_right def
R11070:11072 Coq.Lists.List <> map def
R11101:11104 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11096:11100 VST.veric.mpred <> mpred def
binder 11091:11092 <> P0:148
R11126:11127 VST.floyd.canon <> P0:148 var
R11129:11129 VST.floyd.canon <> S:147 var
R11055:11058 Coq.Init.Logic <> True ind
R11051:11053 Coq.Init.Logic <> and ind
R11032:11037 VST.veric.SeparationLogic <> Nveric inst
R11026:11030 VST.veric.mpred <> mpred def
R11217:11234 VST.msl.contractive <> const_nonexpansive thm
R11217:11234 VST.msl.contractive <> const_nonexpansive thm
binder 11271:11272 <> P0:149
R11278:11281 VST.msl.seplog <> prop meth
R11288:11291 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R11286:11287 VST.floyd.canon <> P0:149 var
R11292:11301 Coq.Lists.List <> fold_right def
R11313:11315 Coq.Lists.List <> map def
binder 11322:11323 <> P1:150
R11328:11329 VST.floyd.canon <> P1:150 var
R11331:11332 VST.floyd.canon <> P0:149 var
R11307:11310 Coq.Init.Logic <> True ind
R11303:11305 Coq.Init.Logic <> and ind
binder 11367:11368 <> P0:151
R11385:11388 VST.msl.seplog <> ::logic:x_'&&'_x not
R11374:11377 VST.msl.seplog <> prop meth
R11382:11383 VST.floyd.canon <> P0:151 var
R11389:11392 VST.msl.seplog <> prop meth
R11395:11404 Coq.Lists.List <> fold_right def
R11416:11418 Coq.Lists.List <> map def
binder 11425:11426 <> P1:152
R11431:11432 VST.floyd.canon <> P1:152 var
R11434:11435 VST.floyd.canon <> P0:151 var
R11410:11413 Coq.Init.Logic <> True ind
R11406:11408 Coq.Init.Logic <> and ind
binder 11271:11272 <> P0:153
R11278:11281 VST.msl.seplog <> prop meth
R11288:11291 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R11286:11287 VST.floyd.canon <> P0:153 var
R11292:11301 Coq.Lists.List <> fold_right def
R11313:11315 Coq.Lists.List <> map def
binder 11322:11323 <> P1:154
R11328:11329 VST.floyd.canon <> P1:154 var
R11331:11332 VST.floyd.canon <> P0:153 var
R11307:11310 Coq.Init.Logic <> True ind
R11303:11305 Coq.Init.Logic <> and ind
binder 11367:11368 <> P0:155
R11385:11388 VST.msl.seplog <> ::logic:x_'&&'_x not
R11374:11377 VST.msl.seplog <> prop meth
R11382:11383 VST.floyd.canon <> P0:155 var
R11389:11392 VST.msl.seplog <> prop meth
R11395:11404 Coq.Lists.List <> fold_right def
R11416:11418 Coq.Lists.List <> map def
binder 11425:11426 <> P1:156
R11431:11432 VST.floyd.canon <> P1:156 var
R11434:11435 VST.floyd.canon <> P0:155 var
R11410:11413 Coq.Init.Logic <> True ind
R11406:11408 Coq.Init.Logic <> and ind
R11498:11505 VST.msl.log_normalize <> prop_and thm
R11498:11505 VST.msl.log_normalize <> prop_and thm
R11498:11505 VST.msl.log_normalize <> prop_and thm
R11531:11547 VST.msl.contractive <> conj_nonexpansive thm
binder 11554:11554 <> S:157
R11560:11563 VST.msl.seplog <> prop meth
R11581:11581 VST.floyd.canon <> S:157 var
R11571:11576 VST.veric.SeparationLogic <> Nveric inst
R11565:11569 VST.veric.mpred <> mpred def
R11531:11547 VST.msl.contractive <> conj_nonexpansive thm
binder 11554:11554 <> S:158
R11560:11563 VST.msl.seplog <> prop meth
R11581:11581 VST.floyd.canon <> S:158 var
R11571:11576 VST.veric.SeparationLogic <> Nveric inst
R11565:11569 VST.veric.mpred <> mpred def
prf 11668:11694 <> PROP_LOCAL_SEP_nonexpansive
binder 11704:11704 <> P:159
binder 11706:11706 <> Q:160
binder 11708:11708 <> R:161
binder 11710:11712 <> rho:162
R11773:11778 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11815:11820 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11821:11832 VST.msl.predicates_rec <> nonexpansive def
binder 11839:11839 <> S:163
R11844:11848 VST.floyd.canon <> PROPx def
R11918:11920 VST.floyd.canon <> rho:162 var
R11876:11881 VST.floyd.canon <> LOCALx def
R11886:11889 VST.floyd.canon <> SEPx def
R11892:11894 Coq.Lists.List <> map def
R11913:11913 VST.floyd.canon <> R:161 var
binder 11901:11902 <> R0:164
R11907:11908 VST.floyd.canon <> R0:164 var
R11910:11910 VST.floyd.canon <> S:163 var
R11883:11883 VST.floyd.canon <> Q:160 var
R11851:11853 Coq.Lists.List <> map def
R11872:11872 VST.floyd.canon <> P:159 var
binder 11860:11861 <> P0:165
R11866:11867 VST.floyd.canon <> P0:165 var
R11869:11869 VST.floyd.canon <> S:163 var
R11779:11784 Coq.Lists.List <> Forall ind
R11814:11814 VST.floyd.canon <> R:161 var
binder 11791:11792 <> R0:166
R11797:11808 VST.msl.predicates_rec <> nonexpansive def
R11810:11811 VST.floyd.canon <> R0:166 var
R11717:11722 Coq.Lists.List <> Forall ind
R11772:11772 VST.floyd.canon <> P:159 var
binder 11729:11730 <> P0:167
R11735:11746 VST.msl.predicates_rec <> nonexpansive def
binder 11753:11753 <> S:168
R11758:11761 VST.msl.seplog <> prop meth
R11764:11765 VST.floyd.canon <> P0:167 var
R11767:11767 VST.floyd.canon <> S:168 var
R11949:11966 VST.floyd.canon <> PROPx_nonexpansive thm
R11949:11966 VST.floyd.canon <> PROPx_nonexpansive thm
R11983:12001 VST.floyd.canon <> LOCALx_nonexpansive thm
R11983:12001 VST.floyd.canon <> LOCALx_nonexpansive thm
R12012:12028 VST.floyd.canon <> SEPx_nonexpansive thm
R12012:12028 VST.floyd.canon <> SEPx_nonexpansive thm
prf 12049:12084 <> PROP_PARAMS_GLOBALS_SEP_nonexpansive
binder 12094:12094 <> P:169
binder 12096:12096 <> U:170
binder 12098:12098 <> Q:171
binder 12100:12100 <> R:172
binder 12102:12104 <> rho:173
R12165:12170 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12207:12212 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12213:12224 VST.msl.predicates_rec <> nonexpansive def
binder 12231:12231 <> S:174
R12236:12240 VST.floyd.canon <> PROPx def
R12324:12326 VST.floyd.canon <> rho:173 var
R12268:12274 VST.floyd.canon <> PARAMSx def
R12279:12286 VST.floyd.canon <> GLOBALSx def
R12291:12294 VST.floyd.canon <> SEPx def
R12297:12299 Coq.Lists.List <> map def
R12318:12318 VST.floyd.canon <> R:172 var
binder 12306:12307 <> R0:175
R12312:12313 VST.floyd.canon <> R0:175 var
R12315:12315 VST.floyd.canon <> S:174 var
R12288:12288 VST.floyd.canon <> Q:171 var
R12276:12276 VST.floyd.canon <> U:170 var
R12243:12245 Coq.Lists.List <> map def
R12264:12264 VST.floyd.canon <> P:169 var
binder 12252:12253 <> P0:176
R12258:12259 VST.floyd.canon <> P0:176 var
R12261:12261 VST.floyd.canon <> S:174 var
R12171:12176 Coq.Lists.List <> Forall ind
R12206:12206 VST.floyd.canon <> R:172 var
binder 12183:12184 <> R0:177
R12189:12200 VST.msl.predicates_rec <> nonexpansive def
R12202:12203 VST.floyd.canon <> R0:177 var
R12109:12114 Coq.Lists.List <> Forall ind
R12164:12164 VST.floyd.canon <> P:169 var
binder 12121:12122 <> P0:178
R12127:12138 VST.msl.predicates_rec <> nonexpansive def
binder 12145:12145 <> S:179
R12150:12153 VST.msl.seplog <> prop meth
R12156:12157 VST.floyd.canon <> P0:178 var
R12159:12159 VST.floyd.canon <> S:179 var
R12355:12372 VST.floyd.canon <> PROPx_nonexpansive thm
R12355:12372 VST.floyd.canon <> PROPx_nonexpansive thm
R12389:12408 VST.floyd.canon <> PARAMSx_nonexpansive thm
R12389:12408 VST.floyd.canon <> PARAMSx_nonexpansive thm
R12419:12437 VST.floyd.canon <> LOCALx_nonexpansive thm
R12419:12437 VST.floyd.canon <> LOCALx_nonexpansive thm
R12448:12464 VST.floyd.canon <> SEPx_nonexpansive thm
R12448:12464 VST.floyd.canon <> SEPx_nonexpansive thm
R12514:12516 VST.msl.seplog <> exp meth
binder 12544:12544 <> x:180
R12562:12564 VST.msl.seplog <> exp meth
binder 12592:12592 <> y:181
R12574:12575 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12576:12580 VST.veric.mpred <> mpred def
R12567:12573 VST.veric.mpred <> environ ind
R12526:12527 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12528:12532 VST.veric.mpred <> mpred def
R12519:12525 VST.veric.mpred <> environ ind
not 12488:12488 <> ::assert:'EX'_x_'..'_x_','_x
R12733:12739 VST.msl.seplog <> derives meth
R12761:12764 VST.msl.seplog <> andp meth
R12767:12771 VST.veric.SeparationLogic <> local def
R12774:12783 VST.veric.SeparationLogic <> tc_environ def
R12749:12750 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12751:12755 VST.veric.mpred <> mpred def
R12742:12748 VST.veric.mpred <> environ ind
not 12697:12697 <> :::'ENTAIL'_x_','_x_'|--'_x
R12865:12869 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R12865:12869 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R12865:12869 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
prf 12925:12935 <> insert_prop
binder 12947:12947 <> P:182
binder 12956:12957 <> PP:183
binder 12959:12960 <> QR:184
R12986:12988 Coq.Init.Logic <> ::type_scope:x_'='_x not
R12969:12973 VST.msl.seplog <> ::logic:x_'&&'_x not
R12985:12985 VST.msl.seplog <> ::logic:x_'&&'_x not
R12963:12966 VST.msl.seplog <> prop meth
R12968:12968 VST.floyd.canon <> P:182 var
R12974:12978 VST.floyd.canon <> PROPx def
R12983:12984 VST.floyd.canon <> QR:184 var
R12980:12981 VST.floyd.canon <> PP:183 var
R12989:12993 VST.floyd.canon <> PROPx def
R13003:13004 VST.floyd.canon <> QR:184 var
R12997:12998 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R12996:12996 VST.floyd.canon <> P:182 var
R12999:13000 VST.floyd.canon <> PP:183 var
R13029:13033 VST.floyd.canon <> PROPx def
R13069:13076 VST.msl.seplog <> pred_ext meth
R13069:13076 VST.msl.seplog <> pred_ext meth
R13085:13104 VST.msl.log_normalize <> derives_extract_prop thm
R13085:13104 VST.msl.log_normalize <> derives_extract_prop thm
R13120:13139 VST.msl.log_normalize <> derives_extract_prop thm
R13120:13139 VST.msl.log_normalize <> derives_extract_prop thm
R13155:13164 VST.msl.seplog <> andp_right meth
R13155:13164 VST.msl.seplog <> andp_right meth
R13179:13188 VST.msl.seplog <> prop_right meth
R13179:13188 VST.msl.seplog <> prop_right meth
R13203:13222 VST.msl.log_normalize <> derives_extract_prop thm
R13203:13222 VST.msl.log_normalize <> derives_extract_prop thm
R13252:13261 VST.msl.seplog <> andp_right meth
R13252:13261 VST.msl.seplog <> andp_right meth
R13252:13261 VST.msl.seplog <> andp_right meth
R13252:13261 VST.msl.seplog <> andp_right meth
R13252:13261 VST.msl.seplog <> andp_right meth
R13252:13261 VST.msl.seplog <> andp_right meth
R13276:13285 VST.msl.seplog <> prop_right meth
R13276:13285 VST.msl.seplog <> prop_right meth
R13300:13309 VST.msl.seplog <> prop_right meth
R13300:13309 VST.msl.seplog <> prop_right meth
prf 13330:13342 <> insert_local'
R13357:13364 VST.floyd.canon <> localdef ind
binder 13353:13354 <> Q1:185
binder 13367:13367 <> P:186
binder 13369:13369 <> Q:187
binder 13371:13371 <> R:188
R13426:13429 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13458:13458 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13400:13404 VST.msl.seplog <> ::logic:x_'&&'_x not
R13425:13425 VST.msl.seplog <> ::logic:x_'&&'_x not
R13376:13380 VST.veric.SeparationLogic <> local def
R13383:13395 VST.floyd.canon <> locald_denote def
R13397:13398 VST.floyd.canon <> Q1:185 var
R13405:13409 VST.floyd.canon <> PROPx def
R13414:13419 VST.floyd.canon <> LOCALx def
R13423:13423 VST.floyd.canon <> R:188 var
R13421:13421 VST.floyd.canon <> Q:187 var
R13411:13411 VST.floyd.canon <> P:186 var
R13430:13434 VST.floyd.canon <> PROPx def
R13439:13444 VST.floyd.canon <> LOCALx def
R13456:13456 VST.floyd.canon <> R:188 var
R13449:13452 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R13447:13448 VST.floyd.canon <> Q1:185 var
R13453:13453 VST.floyd.canon <> Q:187 var
R13436:13436 VST.floyd.canon <> P:186 var
R13503:13507 VST.floyd.canon <> PROPx def
R13510:13515 VST.floyd.canon <> LOCALx def
R13518:13522 VST.veric.SeparationLogic <> local def
R13557:13564 VST.msl.seplog <> pred_ext meth
R13557:13564 VST.msl.seplog <> pred_ext meth
R13604:13613 VST.msl.seplog <> andp_right meth
R13604:13613 VST.msl.seplog <> andp_right meth
R13604:13613 VST.msl.seplog <> andp_right meth
R13604:13613 VST.msl.seplog <> andp_right meth
R13628:13637 VST.msl.seplog <> prop_right meth
R13628:13637 VST.msl.seplog <> prop_right meth
R13666:13675 VST.msl.seplog <> andp_right meth
R13666:13675 VST.msl.seplog <> andp_right meth
R13690:13699 VST.msl.seplog <> prop_right meth
R13690:13699 VST.msl.seplog <> prop_right meth
prf 13734:13745 <> insert_local
binder 13755:13756 <> Q1:189
binder 13758:13758 <> P:190
binder 13760:13760 <> Q:191
binder 13762:13762 <> R:192
R13824:13827 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13863:13863 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13791:13795 VST.msl.seplog <> ::logic:x_'&&'_x not
R13823:13823 VST.msl.seplog <> ::logic:x_'&&'_x not
R13767:13771 VST.veric.SeparationLogic <> local def
R13774:13786 VST.floyd.canon <> locald_denote def
R13788:13789 VST.floyd.canon <> Q1:189 var
R13796:13800 VST.floyd.canon <> PROPx def
R13805:13810 VST.floyd.canon <> LOCALx def
R13815:13818 VST.floyd.canon <> SEPx def
R13820:13820 VST.floyd.canon <> R:192 var
R13812:13812 VST.floyd.canon <> Q:191 var
R13802:13802 VST.floyd.canon <> P:190 var
R13828:13832 VST.floyd.canon <> PROPx def
R13837:13842 VST.floyd.canon <> LOCALx def
R13855:13858 VST.floyd.canon <> SEPx def
R13860:13860 VST.floyd.canon <> R:192 var
R13847:13850 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R13845:13846 VST.floyd.canon <> Q1:189 var
R13851:13851 VST.floyd.canon <> Q:191 var
R13834:13834 VST.floyd.canon <> P:190 var
R13887:13899 VST.floyd.canon <> insert_local' thm
R13887:13899 VST.floyd.canon <> insert_local' thm
R14124:14135 VST.floyd.canon <> insert_local thm
prf 14169:14182 <> go_lower_lem20
binder 14194:14195 <> QR:193
binder 14197:14199 <> QR':194
R14216:14223 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14236:14240 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R14224:14228 VST.floyd.canon <> PROPx def
R14234:14235 VST.floyd.canon <> QR:193 var
R14230:14232 Coq.Init.Datatypes <> nil constr
R14241:14243 VST.floyd.canon <> QR':194 var
R14208:14212 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R14206:14207 VST.floyd.canon <> QR:193 var
R14213:14215 VST.floyd.canon <> QR':194 var
R14260:14264 VST.floyd.canon <> PROPx def
R14342:14346 VST.floyd.canon <> PROPx def
R14349:14354 VST.floyd.canon <> LOCALx def
R14356:14359 VST.floyd.canon <> SEPx def
R14362:14366 VST.veric.SeparationLogic <> local def
R14369:14373 VST.veric.mpred <> lift1 def
R14429:14438 VST.msl.log_normalize <> andp_assoc thm
R14519:14539 VST.msl.log_normalize <> derives_extract_prop' thm
R14489:14508 VST.msl.log_normalize <> derives_extract_prop thm
R14466:14478 VST.floyd.seplog_tactics <> go_lower_lem1 thm
R14564:14572 VST.msl.seplog <> prop_left meth
R14593:14606 VST.msl.log_normalize <> prop_true_andp thm
R14636:14647 VST.msl.seplog <> derives_refl meth
prf 14740:14751 <> grab_nth_SEP
binder 14764:14764 <> n:195
binder 14766:14766 <> P:196
binder 14768:14768 <> Q:197
binder 14770:14770 <> R:198
R14804:14807 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14865:14865 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14777:14781 VST.floyd.canon <> PROPx def
R14786:14791 VST.floyd.canon <> LOCALx def
R14796:14799 VST.floyd.canon <> SEPx def
R14801:14801 VST.floyd.canon <> R:198 var
R14793:14793 VST.floyd.canon <> Q:197 var
R14783:14783 VST.floyd.canon <> P:196 var
R14808:14812 VST.floyd.canon <> PROPx def
R14817:14822 VST.floyd.canon <> LOCALx def
R14827:14830 VST.floyd.canon <> SEPx def
R14844:14847 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R14833:14835 Coq.Lists.List <> nth def
R14841:14843 VST.msl.seplog <> emp meth
R14839:14839 VST.floyd.canon <> R:198 var
R14837:14837 VST.floyd.canon <> n:195 var
R14848:14857 VST.floyd.find_nth_tactic <> delete_nth def
R14861:14861 VST.floyd.canon <> R:198 var
R14859:14859 VST.floyd.canon <> n:195 var
R14824:14824 VST.floyd.canon <> Q:197 var
R14814:14814 VST.floyd.canon <> P:196 var
R14928:14931 VST.floyd.canon <> SEPx def
R14992:15001 VST.msl.seplog <> sepcon_emp meth
R14992:15001 VST.msl.seplog <> sepcon_emp meth
R14992:15001 VST.msl.seplog <> sepcon_emp meth
R15028:15037 VST.floyd.find_nth_tactic <> delete_nth def
R15061:15070 VST.msl.seplog <> sepcon_emp meth
R15061:15070 VST.msl.seplog <> sepcon_emp meth
R15061:15070 VST.msl.seplog <> sepcon_emp meth
R15124:15135 VST.msl.seplog <> sepcon_assoc meth
R15124:15135 VST.msl.seplog <> sepcon_assoc meth
R15124:15135 VST.msl.seplog <> sepcon_assoc meth
R15124:15135 VST.msl.seplog <> sepcon_assoc meth
R15124:15135 VST.msl.seplog <> sepcon_assoc meth
R15124:15135 VST.msl.seplog <> sepcon_assoc meth
R15153:15163 VST.msl.seplog <> sepcon_comm meth
R15153:15163 VST.msl.seplog <> sepcon_comm meth
R15216:15219 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15216:15219 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15241:15244 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15241:15244 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15297:15299 Coq.Init.Datatypes <> nil constr
R15297:15299 Coq.Init.Datatypes <> nil constr
R15288:15288 Coq.Init.Datatypes <> S constr
R15233:15233 Coq.Init.Datatypes <> O constr
R15356:15358 Coq.Init.Datatypes <> nil constr
R15356:15358 Coq.Init.Datatypes <> nil constr
R15380:15382 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15380:15382 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15423:15423 Coq.Init.Datatypes <> S constr
R15371:15371 Coq.Init.Datatypes <> O constr
def 15444:15449 <> insert
binder 15452:15452 <> A:199
R15459:15461 Coq.Init.Datatypes <> nat ind
binder 15456:15456 <> n:200
R15468:15468 VST.floyd.canon <> A:199 var
binder 15465:15465 <> x:201
R15476:15479 Coq.Init.Datatypes <> list ind
R15481:15481 VST.floyd.canon <> A:199 var
binder 15472:15473 <> ys:202
R15497:15500 Coq.Init.Datatypes <> list ind
R15502:15502 VST.floyd.canon <> A:199 var
R15514:15514 VST.floyd.canon <> n:200 var
R15524:15524 Coq.Init.Datatypes <> O constr
R15530:15531 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15529:15529 VST.floyd.canon <> x:201 var
R15532:15533 VST.floyd.canon <> ys:202 var
R15538:15538 Coq.Init.Datatypes <> S constr
R15552:15553 VST.floyd.canon <> ys:202 var
R15560:15562 Coq.Init.Datatypes <> nil constr
R15568:15569 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15567:15567 VST.floyd.canon <> x:201 var
R15570:15571 VST.floyd.canon <> ys:202 var
R15576:15577 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15586:15587 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15588:15593 VST.floyd.canon <> insert:203 def
R15598:15598 VST.floyd.canon <> x:201 var
def 15865:15877 <> grab_indexes'
binder 15880:15880 <> A:206
R15888:15891 Coq.Init.Datatypes <> list ind
R15894:15899 Coq.Init.Datatypes <> option ind
R15901:15903 Coq.Init.Datatypes <> nat ind
binder 15884:15885 <> ns:207
R15912:15915 Coq.Init.Datatypes <> list ind
R15917:15917 VST.floyd.canon <> A:206 var
binder 15908:15909 <> xs:208
R15940:15942 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R15934:15937 Coq.Init.Datatypes <> list ind
R15939:15939 VST.floyd.canon <> A:206 var
R15943:15946 Coq.Init.Datatypes <> list ind
R15948:15948 VST.floyd.canon <> A:206 var
R15963:15964 VST.floyd.canon <> xs:208 var
R15959:15960 VST.floyd.canon <> ns:207 var
R15973:15975 Coq.Init.Datatypes <> nil constr
R15984:15984 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15988:15989 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15992:15992 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15985:15987 Coq.Init.Datatypes <> nil constr
R15990:15991 VST.floyd.canon <> xs:208 var
R15999:16001 Coq.Init.Datatypes <> nil constr
R16006:16006 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16010:16010 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16014:16014 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16007:16009 Coq.Init.Datatypes <> nil constr
R16011:16013 Coq.Init.Datatypes <> nil constr
R16024:16025 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16018:16021 Coq.Init.Datatypes <> Some constr
R16032:16033 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16056:16068 VST.floyd.canon <> grab_indexes':209 def
binder 16046:16047 <> al:212
binder 16049:16050 <> bl:213
R16112:16112 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16126:16127 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16130:16130 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16113:16118 VST.floyd.canon <> insert def
R16124:16125 VST.floyd.canon <> al:212 var
R16128:16129 VST.floyd.canon <> bl:213 var
R16138:16141 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16134:16137 Coq.Init.Datatypes <> None constr
R16148:16149 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16172:16184 VST.floyd.canon <> grab_indexes':209 def
binder 16162:16163 <> al:214
binder 16165:16166 <> bl:215
R16231:16231 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16234:16235 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16241:16241 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16232:16233 VST.floyd.canon <> al:214 var
R16237:16238 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16239:16240 VST.floyd.canon <> bl:215 var
def 16258:16267 <> grab_calc'
R16273:16273 Coq.Numbers.BinNums <> Z ind
binder 16270:16270 <> k:216
R16280:16282 Coq.Init.Datatypes <> nat ind
binder 16277:16277 <> z:217
R16290:16293 Coq.Init.Datatypes <> list ind
R16296:16301 Coq.Init.Datatypes <> option ind
R16303:16305 Coq.Init.Datatypes <> nat ind
binder 16286:16287 <> ns:218
R16310:16313 Coq.Init.Datatypes <> list ind
R16316:16321 Coq.Init.Datatypes <> option ind
R16323:16325 Coq.Init.Datatypes <> nat ind
R16340:16341 VST.floyd.canon <> ns:218 var
R16337:16337 VST.floyd.canon <> z:217 var
R16350:16350 Coq.Init.Datatypes <> O constr
R16354:16355 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16380:16383 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16363:16366 Coq.Init.Datatypes <> Some constr
R16369:16376 Coq.ZArith.BinInt Z to_nat def
R16378:16378 VST.floyd.canon <> k:216 var
R16390:16390 Coq.Init.Datatypes <> S constr
R16400:16401 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16396:16399 Coq.Init.Datatypes <> None constr
R16413:16416 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16409:16412 Coq.Init.Datatypes <> None constr
R16417:16426 VST.floyd.canon <> grab_calc':219 def
R16428:16428 VST.floyd.canon <> k:216 var
R16439:16439 Coq.Init.Datatypes <> S constr
R16451:16454 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16445:16448 Coq.Init.Datatypes <> Some constr
R16467:16470 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16461:16464 Coq.Init.Datatypes <> Some constr
R16471:16480 VST.floyd.canon <> grab_calc':219 def
R16491:16492 VST.floyd.canon <> ns:218 var
R16484:16484 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R16483:16483 VST.floyd.canon <> k:216 var
R16496:16496 Coq.Init.Datatypes <> O constr
R16499:16501 Coq.Init.Datatypes <> nil constr
R16512:16515 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16506:16509 Coq.Init.Datatypes <> Some constr
R16511:16511 Coq.Init.Datatypes <> O constr
R16516:16518 Coq.Init.Datatypes <> nil constr
R16522:16522 Coq.Init.Datatypes <> S constr
R16528:16530 Coq.Init.Datatypes <> nil constr
R16539:16542 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16535:16538 Coq.Init.Datatypes <> None constr
R16543:16552 VST.floyd.canon <> grab_calc':219 def
R16559:16561 Coq.Init.Datatypes <> nil constr
R16554:16554 VST.floyd.canon <> k:216 var
def 16578:16586 <> grab_calc
R16592:16592 Coq.Numbers.BinNums <> Z ind
binder 16589:16589 <> k:222
R16600:16603 Coq.Init.Datatypes <> list ind
R16605:16605 Coq.Numbers.BinNums <> Z ind
binder 16596:16597 <> zs:223
R16613:16616 Coq.Init.Datatypes <> list ind
R16619:16624 Coq.Init.Datatypes <> option ind
R16626:16628 Coq.Init.Datatypes <> nat ind
binder 16609:16610 <> ns:224
R16634:16637 Coq.Init.Datatypes <> list ind
R16640:16645 Coq.Init.Datatypes <> option ind
R16647:16649 Coq.Init.Datatypes <> nat ind
R16661:16662 VST.floyd.canon <> zs:223 var
R16671:16673 Coq.Init.Datatypes <> nil constr
R16678:16679 VST.floyd.canon <> ns:224 var
R16684:16685 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R16693:16701 VST.floyd.canon <> grab_calc:225 def
R16714:16723 VST.floyd.canon <> grab_calc' def
R16740:16741 VST.floyd.canon <> ns:224 var
R16728:16735 Coq.ZArith.BinInt Z to_nat def
R16725:16725 VST.floyd.canon <> k:222 var
R16705:16705 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R16704:16704 VST.floyd.canon <> k:222 var
def 16913:16919 <> app_alt
binder 16922:16922 <> A:227
R16949:16952 Coq.Init.Datatypes <> list ind
R16954:16954 VST.floyd.canon <> A:227 var
binder 16943:16943 <> l:228
binder 16945:16945 <> m:229
R16959:16962 Coq.Init.Datatypes <> list ind
R16964:16964 VST.floyd.canon <> A:227 var
R16977:16977 VST.floyd.canon <> l:228 var
R16988:16990 Coq.Init.Datatypes <> nil constr
R16995:16995 VST.floyd.canon <> m:229 var
R17002:17005 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R17013:17016 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R17017:17019 VST.floyd.canon <> app:230 var
R17024:17024 VST.floyd.canon <> m:229 var
def 17045:17056 <> grab_indexes
binder 17059:17059 <> A:232
R17067:17070 Coq.Init.Datatypes <> list ind
R17072:17072 Coq.Numbers.BinNums <> Z ind
binder 17063:17064 <> ns:233
R17080:17083 Coq.Init.Datatypes <> list ind
R17085:17085 VST.floyd.canon <> A:232 var
binder 17076:17077 <> xs:234
R17090:17093 Coq.Init.Datatypes <> list ind
R17095:17095 VST.floyd.canon <> A:232 var
R17119:17131 VST.floyd.canon <> grab_indexes' def
R17154:17155 VST.floyd.canon <> xs:234 var
R17134:17142 VST.floyd.canon <> grab_calc def
R17149:17151 Coq.Init.Datatypes <> nil constr
R17146:17147 VST.floyd.canon <> ns:233 var
binder 17109:17110 <> al:235
binder 17112:17113 <> bl:236
R17160:17166 VST.floyd.canon <> app_alt def
R17171:17172 VST.floyd.canon <> bl:236 var
R17168:17169 VST.floyd.canon <> al:235 var
prf 17401:17414 <> fold_right_nil
binder 17425:17425 <> A:237
binder 17427:17427 <> B:238
R17435:17438 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17440:17443 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17444:17444 VST.floyd.canon <> B:238 var
R17439:17439 VST.floyd.canon <> B:238 var
R17434:17434 VST.floyd.canon <> A:237 var
binder 17431:17431 <> f:239
R17451:17451 VST.floyd.canon <> B:238 var
binder 17448:17448 <> z:240
R17476:17478 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17458:17467 Coq.Lists.List <> fold_right def
R17473:17475 Coq.Init.Datatypes <> nil constr
R17471:17471 VST.floyd.canon <> z:240 var
R17469:17469 VST.floyd.canon <> f:239 var
R17479:17479 VST.floyd.canon <> z:240 var
R17521:17534 VST.floyd.canon <> fold_right_nil thm
R17559:17572 VST.floyd.canon <> fold_right_nil thm
prf 17590:17604 <> fold_right_cons
binder 17615:17615 <> A:241
binder 17617:17617 <> B:242
R17625:17628 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17630:17633 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17634:17634 VST.floyd.canon <> B:242 var
R17629:17629 VST.floyd.canon <> B:242 var
R17624:17624 VST.floyd.canon <> A:241 var
binder 17621:17621 <> f:243
R17641:17641 VST.floyd.canon <> B:242 var
binder 17638:17638 <> z:244
binder 17644:17644 <> x:245
binder 17646:17646 <> y:246
R17673:17675 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17652:17661 Coq.Lists.List <> fold_right def
R17669:17670 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R17668:17668 VST.floyd.canon <> x:245 var
R17671:17671 VST.floyd.canon <> y:246 var
R17665:17665 VST.floyd.canon <> z:244 var
R17663:17663 VST.floyd.canon <> f:243 var
R17676:17676 VST.floyd.canon <> f:243 var
R17681:17690 Coq.Lists.List <> fold_right def
R17696:17696 VST.floyd.canon <> y:246 var
R17694:17694 VST.floyd.canon <> z:244 var
R17692:17692 VST.floyd.canon <> f:243 var
R17678:17678 VST.floyd.canon <> x:245 var
R17739:17753 VST.floyd.canon <> fold_right_cons thm
R17778:17792 VST.floyd.canon <> fold_right_cons thm
prf 17810:17827 <> fold_right_and_app
R17847:17850 Coq.Init.Datatypes <> list ind
R17860:17863 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17853:17859 VST.veric.mpred <> environ ind
binder 17840:17841 <> Q1:247
binder 17843:17844 <> Q2:248
binder 17871:17873 <> rho:249
R17919:17925 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17995:17995 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17879:17888 Coq.Lists.List <> fold_right def
R17916:17918 VST.floyd.canon <> rho:249 var
R17908:17911 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R17906:17907 VST.floyd.canon <> Q1:247 var
R17912:17913 VST.floyd.canon <> Q2:248 var
R17897:17898 VST.veric.lift LiftNotation :::'`('_x_')' not
R17903:17903 VST.veric.lift LiftNotation :::'`('_x_')' not
R17899:17902 Coq.Init.Logic <> True ind
R17890:17891 VST.veric.lift LiftNotation :::'`('_x_')' not
R17895:17895 VST.veric.lift LiftNotation :::'`('_x_')' not
R17892:17894 Coq.Init.Logic <> and ind
R17958:17962 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R17926:17935 Coq.Lists.List <> fold_right def
R17955:17957 VST.floyd.canon <> rho:249 var
R17952:17953 VST.floyd.canon <> Q1:247 var
R17944:17945 VST.veric.lift LiftNotation :::'`('_x_')' not
R17950:17950 VST.veric.lift LiftNotation :::'`('_x_')' not
R17946:17949 Coq.Init.Logic <> True ind
R17937:17938 VST.veric.lift LiftNotation :::'`('_x_')' not
R17942:17942 VST.veric.lift LiftNotation :::'`('_x_')' not
R17939:17941 Coq.Init.Logic <> and ind
R17963:17972 Coq.Lists.List <> fold_right def
R17992:17994 VST.floyd.canon <> rho:249 var
R17989:17990 VST.floyd.canon <> Q2:248 var
R17981:17982 VST.veric.lift LiftNotation :::'`('_x_')' not
R17987:17987 VST.veric.lift LiftNotation :::'`('_x_')' not
R17983:17986 Coq.Init.Logic <> True ind
R17974:17975 VST.veric.lift LiftNotation :::'`('_x_')' not
R17979:17979 VST.veric.lift LiftNotation :::'`('_x_')' not
R17976:17978 Coq.Init.Logic <> and ind
R18046:18053 VST.msl.Axioms <> prop_ext prfax
R18046:18053 VST.msl.Axioms <> prop_ext prfax
R18128:18135 VST.msl.Axioms <> prop_ext prfax
R18128:18135 VST.msl.Axioms <> prop_ext prfax
prf 18157:18177 <> fold_right_sepcon_app
binder 18189:18189 <> P:250
binder 18191:18191 <> Q:251
R18218:18228 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18194:18210 VST.floyd.base <> fold_right_sepcon def
R18214:18215 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R18213:18213 VST.floyd.canon <> P:250 var
R18216:18216 VST.floyd.canon <> Q:251 var
R18248:18250 VST.msl.seplog <> ::logic:x_'*'_x not
R18229:18245 VST.floyd.base <> fold_right_sepcon def
R18247:18247 VST.floyd.canon <> P:250 var
R18251:18267 VST.floyd.base <> fold_right_sepcon def
R18269:18269 VST.floyd.canon <> Q:251 var
R18315:18324 VST.msl.log_normalize <> emp_sepcon thm
R18315:18324 VST.msl.log_normalize <> emp_sepcon thm
R18315:18324 VST.msl.log_normalize <> emp_sepcon thm
R18341:18352 VST.msl.seplog <> sepcon_assoc meth
R18341:18352 VST.msl.seplog <> sepcon_assoc meth
R18341:18352 VST.msl.seplog <> sepcon_assoc meth
prf 18382:18397 <> grab_indexes_SEP
binder 18400:18400 <> A:252
R18418:18421 Coq.Init.Datatypes <> list ind
R18423:18423 Coq.Numbers.BinNums <> Z ind
binder 18414:18415 <> ns:253
binder 18426:18427 <> xs:254
R18440:18442 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18431:18434 VST.floyd.canon <> SEPx def
R18438:18439 VST.floyd.canon <> xs:254 var
R18436:18436 VST.floyd.canon <> A:252 var
R18443:18446 VST.floyd.canon <> SEPx def
R18449:18460 VST.floyd.canon <> grab_indexes def
R18465:18466 VST.floyd.canon <> xs:254 var
R18462:18463 VST.floyd.canon <> ns:253 var
R18492:18495 VST.floyd.canon <> SEPx def
R18525:18536 VST.floyd.canon <> grab_indexes def
R18547:18553 VST.floyd.canon <> app_alt def
R18562:18564 Coq.Init.Datatypes <> app def
R18547:18553 VST.floyd.canon <> app_alt def
R18562:18564 Coq.Init.Datatypes <> app def
R18575:18583 VST.floyd.canon <> grab_calc def
R18590:18592 Coq.Init.Datatypes <> nil constr
R18575:18583 VST.floyd.canon <> grab_calc def
R18590:18592 Coq.Init.Datatypes <> nil constr
R18641:18653 VST.floyd.canon <> grab_indexes' def
R18718:18730 VST.floyd.canon <> grab_indexes' def
R18739:18751 VST.floyd.canon <> grab_indexes' def
R18739:18751 VST.floyd.canon <> grab_indexes' def
R18810:18822 VST.floyd.canon <> grab_indexes' def
R18810:18822 VST.floyd.canon <> grab_indexes' def
R18867:18887 VST.floyd.canon <> fold_right_sepcon_app thm
R18867:18887 VST.floyd.canon <> fold_right_sepcon_app thm
R18867:18887 VST.floyd.canon <> fold_right_sepcon_app thm
R18974:18994 VST.floyd.canon <> fold_right_sepcon_app thm
R18974:18994 VST.floyd.canon <> fold_right_sepcon_app thm
R18974:18994 VST.floyd.canon <> fold_right_sepcon_app thm
R19005:19021 VST.floyd.base <> fold_right_sepcon def
R19005:19021 VST.floyd.base <> fold_right_sepcon def
R19044:19055 VST.msl.seplog <> sepcon_assoc meth
R19044:19055 VST.msl.seplog <> sepcon_assoc meth
R19044:19055 VST.msl.seplog <> sepcon_assoc meth
R19231:19242 VST.msl.seplog <> sepcon_assoc meth
R19231:19242 VST.msl.seplog <> sepcon_assoc meth
R19231:19242 VST.msl.seplog <> sepcon_assoc meth
R19254:19264 VST.msl.seplog <> sepcon_comm meth
R19254:19264 VST.msl.seplog <> sepcon_comm meth
R19254:19264 VST.msl.seplog <> sepcon_comm meth
R19278:19289 VST.msl.seplog <> sepcon_assoc meth
R19278:19289 VST.msl.seplog <> sepcon_assoc meth
R19278:19289 VST.msl.seplog <> sepcon_assoc meth
R19374:19386 VST.floyd.canon <> grab_indexes' def
R19395:19407 VST.floyd.canon <> grab_indexes' def
R19395:19407 VST.floyd.canon <> grab_indexes' def
R19448:19460 VST.floyd.canon <> grab_indexes' def
R19448:19460 VST.floyd.canon <> grab_indexes' def
R19611:19622 VST.msl.seplog <> sepcon_assoc meth
R19611:19622 VST.msl.seplog <> sepcon_assoc meth
R19611:19622 VST.msl.seplog <> sepcon_assoc meth
R19611:19622 VST.msl.seplog <> sepcon_assoc meth
R19611:19622 VST.msl.seplog <> sepcon_assoc meth
R19611:19622 VST.msl.seplog <> sepcon_assoc meth
R19642:19652 VST.msl.seplog <> sepcon_comm meth
R19642:19652 VST.msl.seplog <> sepcon_comm meth
R19642:19652 VST.msl.seplog <> sepcon_comm meth
R19894:19901 Coq.PArith.BinPos <> nat_of_P syndef
R19894:19901 Coq.PArith.BinPos <> nat_of_P syndef
R19925:19926 Coq.Numbers.BinNums <> xI constr
R19925:19926 Coq.Numbers.BinNums <> xI constr
R19941:19942 Coq.Numbers.BinNums <> xO constr
R19941:19942 Coq.Numbers.BinNums <> xO constr
R19957:19958 Coq.Numbers.BinNums <> xH constr
R19957:19958 Coq.Numbers.BinNums <> xH constr
R20021:20028 Coq.PArith.BinPos <> nat_of_P syndef
R20059:20059 Coq.Numbers.BinNums <> N ind
R20115:20130 VST.floyd.canon <> grab_indexes_SEP thm
R20148:20159 VST.floyd.canon <> grab_indexes def
R20189:20201 VST.floyd.canon <> grab_indexes' def
R20204:20209 VST.floyd.canon <> insert def
R20263:20269 VST.floyd.canon <> app_alt def
R20278:20284 VST.floyd.canon <> app_alt def
R20350:20351 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20352:20354 Coq.Init.Datatypes <> nil constr
R20430:20431 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20433:20434 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20435:20437 Coq.Init.Datatypes <> nil constr
R20523:20524 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20526:20527 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20529:20530 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20531:20533 Coq.Init.Datatypes <> nil constr
R20629:20630 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20632:20633 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20635:20636 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20638:20639 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20640:20642 Coq.Init.Datatypes <> nil constr
R20748:20749 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20751:20752 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20754:20755 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20757:20758 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20760:20761 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20762:20764 Coq.Init.Datatypes <> nil constr
R20880:20881 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20883:20884 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20886:20887 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20889:20890 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20892:20893 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20895:20896 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20897:20899 Coq.Init.Datatypes <> nil constr
R21025:21026 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21028:21029 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21031:21032 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21034:21035 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21037:21038 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21040:21041 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21043:21044 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21045:21047 Coq.Init.Datatypes <> nil constr
R21183:21184 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21186:21187 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21189:21190 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21192:21193 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21195:21196 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21198:21199 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21201:21202 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21204:21205 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21206:21208 Coq.Init.Datatypes <> nil constr
R21354:21355 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21357:21358 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21360:21361 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21363:21364 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21366:21367 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21369:21370 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21372:21373 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21375:21376 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21378:21379 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21380:21382 Coq.Init.Datatypes <> nil constr
R21538:21539 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21541:21542 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21544:21545 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21547:21548 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21550:21551 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21553:21554 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21556:21557 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21559:21560 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21562:21563 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21565:21566 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21567:21569 Coq.Init.Datatypes <> nil constr
prf 22121:22132 <> local_unfold
binder 22142:22142 <> P:255
binder 22144:22146 <> rho:256
R22160:22162 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22149:22153 VST.veric.SeparationLogic <> local def
R22157:22159 VST.floyd.canon <> rho:256 var
R22155:22155 VST.floyd.canon <> P:255 var
R22163:22166 VST.msl.seplog <> ::logic:'!!'_x not
R22172:22172 VST.msl.seplog <> ::logic:'!!'_x not
R22167:22167 VST.floyd.canon <> P:255 var
R22169:22171 VST.floyd.canon <> rho:256 var
R22213:22224 VST.floyd.canon <> local_unfold thm
prf 22242:22253 <> lower_sepcon
binder 22265:22265 <> P:257
binder 22267:22267 <> Q:258
binder 22269:22271 <> rho:259
R22310:22312 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22275:22280 VST.msl.seplog <> sepcon meth
R22307:22309 VST.floyd.canon <> rho:259 var
R22305:22305 VST.floyd.canon <> Q:258 var
R22303:22303 VST.floyd.canon <> P:257 var
R22290:22291 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22292:22296 VST.veric.mpred <> mpred def
R22283:22289 VST.veric.mpred <> environ ind
R22313:22318 VST.msl.seplog <> sepcon meth
R22329:22329 VST.floyd.canon <> Q:258 var
R22331:22333 VST.floyd.canon <> rho:259 var
R22321:22321 VST.floyd.canon <> P:257 var
R22323:22325 VST.floyd.canon <> rho:259 var
prf 22368:22377 <> lower_andp
binder 22389:22389 <> P:260
binder 22391:22391 <> Q:261
binder 22393:22395 <> rho:262
R22430:22432 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22399:22402 VST.msl.seplog <> andp meth
R22427:22429 VST.floyd.canon <> rho:262 var
R22425:22425 VST.floyd.canon <> Q:261 var
R22423:22423 VST.floyd.canon <> P:260 var
R22412:22413 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22414:22418 VST.veric.mpred <> mpred def
R22405:22411 VST.veric.mpred <> environ ind
R22433:22436 VST.msl.seplog <> andp meth
R22447:22447 VST.floyd.canon <> Q:261 var
R22449:22451 VST.floyd.canon <> rho:262 var
R22439:22439 VST.floyd.canon <> P:260 var
R22441:22443 VST.floyd.canon <> rho:262 var
R22493:22504 VST.floyd.canon <> lower_sepcon thm
R22506:22515 VST.floyd.canon <> lower_andp thm
prf 22533:22548 <> lift_prop_unfold
binder 22561:22561 <> P:263
binder 22563:22563 <> z:264
R22595:22597 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22568:22571 VST.msl.seplog <> prop meth
R22594:22594 VST.floyd.canon <> z:264 var
R22592:22592 VST.floyd.canon <> P:263 var
R22581:22582 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22583:22587 VST.veric.mpred <> mpred def
R22574:22580 VST.veric.mpred <> environ ind
R22599:22602 VST.msl.seplog <> prop meth
R22617:22617 VST.floyd.canon <> P:263 var
R22610:22615 VST.veric.SeparationLogic <> Nveric inst
R22604:22608 VST.veric.mpred <> mpred def
R22659:22674 VST.floyd.canon <> lift_prop_unfold thm
prf 22691:22701 <> andp_unfold
R22724:22725 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22726:22730 VST.veric.mpred <> mpred def
R22717:22723 VST.veric.mpred <> environ ind
binder 22712:22712 <> P:265
binder 22714:22714 <> Q:266
binder 22733:22735 <> rho:267
R22772:22774 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22741:22744 VST.msl.seplog <> andp meth
R22769:22771 VST.floyd.canon <> rho:267 var
R22767:22767 VST.floyd.canon <> Q:266 var
R22765:22765 VST.floyd.canon <> P:265 var
R22754:22755 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22756:22760 VST.veric.mpred <> mpred def
R22747:22753 VST.veric.mpred <> environ ind
R22776:22779 VST.msl.seplog <> andp meth
R22803:22803 VST.floyd.canon <> Q:266 var
R22805:22807 VST.floyd.canon <> rho:267 var
R22795:22795 VST.floyd.canon <> P:265 var
R22797:22799 VST.floyd.canon <> rho:267 var
R22787:22792 VST.veric.SeparationLogic <> Nveric inst
R22781:22785 VST.veric.mpred <> mpred def
R22849:22859 VST.floyd.canon <> andp_unfold thm
prf 22876:22886 <> refold_andp
R22911:22914 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22915:22919 VST.veric.mpred <> mpred def
R22904:22910 VST.veric.mpred <> environ ind
binder 22899:22899 <> P:268
binder 22901:22901 <> Q:269
R22928:22928 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22963:22967 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22974:22974 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22938:22944 VST.veric.mpred <> environ ind
binder 22933:22935 <> rho:270
R22954:22957 VST.msl.seplog <> ::logic:x_'&&'_x not
R22949:22949 VST.floyd.canon <> P:268 var
R22951:22953 VST.floyd.canon <> rho:270 var
R22958:22958 VST.floyd.canon <> Q:269 var
R22960:22962 VST.floyd.canon <> rho:270 var
R22969:22972 VST.msl.seplog <> ::logic:x_'&&'_x not
R22968:22968 VST.floyd.canon <> P:268 var
R22973:22973 VST.floyd.canon <> Q:269 var
R23015:23025 VST.floyd.canon <> refold_andp thm
prf 23043:23052 <> exp_unfold
binder 23063:23063 <> A:271
binder 23065:23065 <> P:272
binder 23067:23069 <> rho:273
R23104:23106 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23074:23076 VST.msl.seplog <> exp meth
R23101:23103 VST.floyd.canon <> rho:273 var
R23099:23099 VST.floyd.canon <> P:272 var
R23097:23097 VST.floyd.canon <> A:271 var
R23086:23087 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23088:23092 VST.veric.mpred <> mpred def
R23079:23085 VST.veric.mpred <> environ ind
R23108:23110 VST.msl.seplog <> exp meth
binder 23132:23132 <> x:274
R23137:23137 VST.floyd.canon <> P:272 var
R23141:23143 VST.floyd.canon <> rho:273 var
R23139:23139 VST.floyd.canon <> x:274 var
R23125:23125 VST.floyd.canon <> A:271 var
R23118:23123 VST.veric.SeparationLogic <> Nveric inst
R23112:23116 VST.veric.mpred <> mpred def
R23193:23202 VST.floyd.canon <> exp_unfold thm
R23238:23273 VST.floyd.SeparationLogicFacts GenCConseqFacts <> modtype
R23280:23369 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def <> modtype
R23377:23457 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic <> modtype
mod 23220:23231 <> CConseqFacts
R23481:23510 VST.floyd.SeparationLogicFacts GenConseq <> modtype
R23517:23606 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def <> modtype
R23614:23694 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic <> modtype
mod 23469:23474 <> Conseq
R23723:23757 VST.floyd.SeparationLogicFacts GenConseqFacts <> modtype
R23764:23853 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def <> modtype
R23861:23866 VST.floyd.canon Conseq <> modtype
mod 23706:23716 <> ConseqFacts
prf 23877:23900 <> extract_exists_pre_later
R23907:23915 VST.veric.mpred <> compspecs class
binder 23903:23904 <> CS:275
R23926:23935 VST.veric.juicy_extspec <> OracleKind class
binder 23919:23923 <> Espec:276
binder 23950:23950 <> A:277
R23964:23969 VST.veric.mpred <> assert def
binder 23961:23961 <> Q:278
R23978:23981 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23982:23987 VST.veric.mpred <> assert def
R23977:23977 VST.floyd.canon <> A:277 var
binder 23973:23973 <> P:279
binder 23990:23990 <> c:280
binder 23992:23996 <> Delta:281
R24002:24011 VST.veric.tycontext <> ret_assert rec
binder 23999:23999 <> R:282
R24017:24017 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24057:24063 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24064:24068 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R24094:24094 VST.floyd.canon <> R:282 var
R24092:24092 VST.floyd.canon <> c:280 var
R24078:24081 VST.msl.seplog <> ::logic:x_'&&'_x not
R24077:24077 VST.floyd.canon <> Q:278 var
R24082:24084 VST.msl.seplog <> ::logic:'|>'_x not
R24085:24087 VST.msl.seplog <> exp meth
R24089:24089 VST.floyd.canon <> P:279 var
R24070:24074 VST.floyd.canon <> Delta:281 var
binder 24025:24025 <> x:283
R24028:24032 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R24056:24056 VST.floyd.canon <> R:282 var
R24054:24054 VST.floyd.canon <> c:280 var
R24042:24045 VST.msl.seplog <> ::logic:x_'&&'_x not
R24041:24041 VST.floyd.canon <> Q:278 var
R24046:24048 VST.msl.seplog <> ::logic:'|>'_x not
R24049:24049 VST.floyd.canon <> P:279 var
R24051:24051 VST.floyd.canon <> x:283 var
R24034:24038 VST.floyd.canon <> Delta:281 var
R24122:24139 VST.floyd.base <> extract_exists_pre def
R24122:24139 VST.floyd.base <> extract_exists_pre def
R24156:24167 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_conseq prfax
R24156:24167 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_conseq prfax
R24210:24222 VST.msl.seplog <> derives_trans meth
R24234:24243 VST.msl.ghost_seplog <> bupd_intro meth
R24210:24222 VST.msl.seplog <> derives_trans meth
R24234:24243 VST.msl.ghost_seplog <> bupd_intro meth
R24259:24267 VST.msl.log_normalize <> andp_comm thm
R24259:24267 VST.msl.log_normalize <> andp_comm thm
R24259:24267 VST.msl.log_normalize <> andp_comm thm
R24280:24295 VST.msl.seplog <> imp_andp_adjoint meth
R24280:24295 VST.msl.seplog <> imp_andp_adjoint meth
R24309:24321 VST.msl.seplog <> derives_trans meth
R24331:24341 VST.msl.seplog <> later_exp'' meth
R24309:24321 VST.msl.seplog <> derives_trans meth
R24331:24341 VST.msl.seplog <> later_exp'' meth
R24357:24364 VST.msl.seplog <> orp_left meth
R24357:24364 VST.msl.seplog <> orp_left meth
R24379:24394 VST.msl.seplog <> imp_andp_adjoint meth
R24379:24394 VST.msl.seplog <> imp_andp_adjoint meth
R24411:24419 VST.msl.log_normalize <> andp_comm thm
R24411:24419 VST.msl.log_normalize <> andp_comm thm
R24411:24419 VST.msl.log_normalize <> andp_comm thm
R24434:24443 VST.msl.seplog <> orp_right2 meth
R24434:24443 VST.msl.seplog <> orp_right2 meth
R24460:24468 VST.msl.log_normalize <> exp_andp2 thm
R24460:24468 VST.msl.log_normalize <> exp_andp2 thm
R24460:24468 VST.msl.log_normalize <> exp_andp2 thm
R24483:24494 VST.msl.seplog <> derives_refl meth
R24483:24494 VST.msl.seplog <> derives_refl meth
R24509:24524 VST.msl.seplog <> imp_andp_adjoint meth
R24509:24524 VST.msl.seplog <> imp_andp_adjoint meth
R24539:24548 VST.msl.seplog <> andp_left1 meth
R24551:24560 VST.msl.seplog <> orp_right1 meth
R24563:24574 VST.msl.seplog <> derives_refl meth
R24539:24548 VST.msl.seplog <> andp_left1 meth
R24551:24560 VST.msl.seplog <> orp_right1 meth
R24563:24574 VST.msl.seplog <> derives_refl meth
R24603:24614 VST.msl.seplog <> derives_refl meth
R24603:24614 VST.msl.seplog <> derives_refl meth
R24643:24654 VST.msl.seplog <> derives_refl meth
R24643:24654 VST.msl.seplog <> derives_refl meth
R24683:24694 VST.msl.seplog <> derives_refl meth
R24683:24694 VST.msl.seplog <> derives_refl meth
R24731:24742 VST.msl.seplog <> derives_refl meth
R24731:24742 VST.msl.seplog <> derives_refl meth
prf 24761:24779 <> semax_pre_post_bupd
R24796:24804 VST.veric.mpred <> compspecs class
binder 24792:24793 <> CS:284
R24815:24824 VST.veric.juicy_extspec <> OracleKind class
binder 24808:24812 <> Espec:285
R24835:24843 VST.veric.seplog <> tycontext ind
binder 24828:24832 <> Delta:286
binder 24855:24856 <> P':287
R24863:24872 VST.veric.tycontext <> ret_assert rec
binder 24859:24860 <> R':288
binder 24875:24875 <> P:289
binder 24877:24877 <> c:290
R24883:24892 VST.veric.tycontext <> ret_assert rec
binder 24880:24880 <> R:291
R24942:24949 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25011:25018 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25078:25085 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25151:25158 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25159:25159 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25238:25245 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25275:25278 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25280:25284 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R25305:25305 VST.floyd.canon <> R:291 var
R25303:25303 VST.floyd.canon <> c:290 var
R25301:25301 VST.floyd.canon <> P:289 var
R25295:25299 VST.floyd.canon <> Delta:286 var
R25289:25293 VST.floyd.canon <> Espec:285 var
R25286:25287 VST.floyd.canon <> CS:284 var
R25247:25251 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R25273:25274 VST.floyd.canon <> R':288 var
R25271:25271 VST.floyd.canon <> c:290 var
R25268:25269 VST.floyd.canon <> P':287 var
R25262:25266 VST.floyd.canon <> Delta:286 var
R25256:25260 VST.floyd.canon <> Espec:285 var
R25253:25254 VST.floyd.canon <> CS:284 var
binder 25167:25168 <> vl:292
R25214:25218 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R25195:25198 VST.msl.seplog <> ::logic:x_'&&'_x not
R25171:25175 VST.veric.SeparationLogic <> local def
R25178:25187 VST.veric.SeparationLogic <> tc_environ def
R25189:25193 VST.floyd.canon <> Delta:286 var
R25199:25207 VST.veric.tycontext <> RA_return proj
R25212:25213 VST.floyd.canon <> vl:292 var
R25209:25210 VST.floyd.canon <> R':288 var
R25219:25223 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R25224:25232 VST.veric.tycontext <> RA_return proj
R25236:25237 VST.floyd.canon <> vl:292 var
R25234:25234 VST.floyd.canon <> R:291 var
R25128:25132 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R25110:25113 VST.msl.seplog <> ::logic:x_'&&'_x not
R25086:25090 VST.veric.SeparationLogic <> local def
R25093:25102 VST.veric.SeparationLogic <> tc_environ def
R25104:25108 VST.floyd.canon <> Delta:286 var
R25114:25124 VST.veric.tycontext <> RA_continue proj
R25126:25127 VST.floyd.canon <> R':288 var
R25133:25137 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R25138:25148 VST.veric.tycontext <> RA_continue proj
R25150:25150 VST.floyd.canon <> R:291 var
R25058:25062 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R25043:25046 VST.msl.seplog <> ::logic:x_'&&'_x not
R25019:25023 VST.veric.SeparationLogic <> local def
R25026:25035 VST.veric.SeparationLogic <> tc_environ def
R25037:25041 VST.floyd.canon <> Delta:286 var
R25047:25054 VST.veric.tycontext <> RA_break proj
R25056:25057 VST.floyd.canon <> R':288 var
R25063:25067 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R25068:25075 VST.veric.tycontext <> RA_break proj
R25077:25077 VST.floyd.canon <> R:291 var
R24990:24994 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R24974:24977 VST.msl.seplog <> ::logic:x_'&&'_x not
R24950:24954 VST.veric.SeparationLogic <> local def
R24957:24966 VST.veric.SeparationLogic <> tc_environ def
R24968:24972 VST.floyd.canon <> Delta:286 var
R24978:24986 VST.veric.tycontext <> RA_normal proj
R24988:24989 VST.floyd.canon <> R':288 var
R24995:24999 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R25000:25008 VST.veric.tycontext <> RA_normal proj
R25010:25010 VST.floyd.canon <> R:291 var
R24930:24934 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R24925:24928 VST.msl.seplog <> ::logic:x_'&&'_x not
R24901:24905 VST.veric.SeparationLogic <> local def
R24908:24917 VST.veric.SeparationLogic <> tc_environ def
R24919:24923 VST.floyd.canon <> Delta:286 var
R24929:24929 VST.floyd.canon <> P:289 var
R24935:24939 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R24940:24941 VST.floyd.canon <> P':287 var
R25322:25353 VST.floyd.canon <> semax_pre_post_bupd thm
R25322:25353 VST.floyd.canon <> semax_pre_post_bupd thm
prf 25368:25381 <> semax_pre_bupd
binder 25392:25393 <> P':293
binder 25395:25399 <> Espec:294
R25406:25414 VST.veric.mpred <> compspecs class
binder 25402:25403 <> cs:295
binder 25417:25421 <> Delta:296
binder 25423:25423 <> P:297
binder 25425:25425 <> c:298
binder 25427:25427 <> R:299
R25463:25471 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25500:25504 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25506:25510 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R25531:25531 VST.floyd.canon <> R:299 var
R25529:25529 VST.floyd.canon <> c:298 var
R25527:25527 VST.floyd.canon <> P:297 var
R25521:25525 VST.floyd.canon <> Delta:296 var
R25515:25519 VST.floyd.canon <> Espec:294 var
R25512:25513 VST.floyd.canon <> cs:295 var
R25473:25477 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R25499:25499 VST.floyd.canon <> R:299 var
R25497:25497 VST.floyd.canon <> c:298 var
R25494:25495 VST.floyd.canon <> P':293 var
R25488:25492 VST.floyd.canon <> Delta:296 var
R25482:25486 VST.floyd.canon <> Espec:294 var
R25479:25480 VST.floyd.canon <> cs:295 var
R25435:25441 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R25447:25449 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R25451:25455 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R25442:25446 VST.floyd.canon <> Delta:296 var
R25450:25450 VST.floyd.canon <> P:297 var
R25456:25460 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R25461:25462 VST.floyd.canon <> P':293 var
R25548:25574 VST.floyd.canon <> semax_pre_bupd thm
R25548:25574 VST.floyd.canon <> semax_pre_bupd thm
prf 25589:25597 <> semax_pre
binder 25608:25609 <> P':300
binder 25611:25615 <> Espec:301
R25622:25630 VST.veric.mpred <> compspecs class
binder 25618:25619 <> cs:302
binder 25633:25637 <> Delta:303
binder 25639:25639 <> P:304
binder 25641:25641 <> c:305
binder 25643:25643 <> R:306
R25674:25682 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25711:25715 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25717:25721 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R25742:25742 VST.floyd.canon <> R:306 var
R25740:25740 VST.floyd.canon <> c:305 var
R25738:25738 VST.floyd.canon <> P:304 var
R25732:25736 VST.floyd.canon <> Delta:303 var
R25726:25730 VST.floyd.canon <> Espec:301 var
R25723:25724 VST.floyd.canon <> cs:302 var
R25684:25688 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R25710:25710 VST.floyd.canon <> R:306 var
R25708:25708 VST.floyd.canon <> c:305 var
R25705:25706 VST.floyd.canon <> P':300 var
R25699:25703 VST.floyd.canon <> Delta:303 var
R25693:25697 VST.floyd.canon <> Espec:301 var
R25690:25691 VST.floyd.canon <> cs:302 var
R25651:25657 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R25663:25665 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R25667:25671 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R25658:25662 VST.floyd.canon <> Delta:303 var
R25666:25666 VST.floyd.canon <> P:304 var
R25672:25673 VST.floyd.canon <> P':300 var
R25772:25792 VST.floyd.canon <> semax_pre thm
R25772:25792 VST.floyd.canon <> semax_pre thm
prf 25807:25822 <> semax_pre_simple
binder 25833:25834 <> P':307
binder 25836:25840 <> Espec:308
R25847:25855 VST.veric.mpred <> compspecs class
binder 25843:25844 <> cs:309
binder 25858:25862 <> Delta:310
binder 25864:25864 <> P:311
binder 25866:25866 <> c:312
binder 25868:25868 <> R:313
R25899:25907 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25936:25940 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25942:25946 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R25967:25967 VST.floyd.canon <> R:313 var
R25965:25965 VST.floyd.canon <> c:312 var
R25963:25963 VST.floyd.canon <> P:311 var
R25957:25961 VST.floyd.canon <> Delta:310 var
R25951:25955 VST.floyd.canon <> Espec:308 var
R25948:25949 VST.floyd.canon <> cs:309 var
R25909:25913 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R25935:25935 VST.floyd.canon <> R:313 var
R25933:25933 VST.floyd.canon <> c:312 var
R25930:25931 VST.floyd.canon <> P':307 var
R25924:25928 VST.floyd.canon <> Delta:310 var
R25918:25922 VST.floyd.canon <> Espec:308 var
R25915:25916 VST.floyd.canon <> cs:309 var
R25876:25882 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R25888:25890 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R25892:25896 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R25883:25887 VST.floyd.canon <> Delta:310 var
R25891:25891 VST.floyd.canon <> P:311 var
R25897:25898 VST.floyd.canon <> P':307 var
R25983:25991 VST.floyd.canon <> semax_pre thm
R25983:25991 VST.floyd.canon <> semax_pre thm
prf 26006:26015 <> semax_pre0
binder 26026:26027 <> P':314
binder 26029:26033 <> Espec:315
R26041:26049 VST.veric.mpred <> compspecs class
binder 26037:26038 <> cs:316
binder 26052:26056 <> Delta:317
binder 26058:26058 <> P:318
binder 26060:26060 <> c:319
binder 26062:26062 <> R:320
R26078:26086 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26115:26124 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26126:26130 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R26151:26151 VST.floyd.canon <> R:320 var
R26149:26149 VST.floyd.canon <> c:319 var
R26147:26147 VST.floyd.canon <> P:318 var
R26141:26145 VST.floyd.canon <> Delta:317 var
R26135:26139 VST.floyd.canon <> Espec:315 var
R26132:26133 VST.floyd.canon <> cs:316 var
R26088:26092 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R26114:26114 VST.floyd.canon <> R:320 var
R26112:26112 VST.floyd.canon <> c:319 var
R26109:26110 VST.floyd.canon <> P':314 var
R26103:26107 VST.floyd.canon <> Delta:317 var
R26097:26101 VST.floyd.canon <> Espec:315 var
R26094:26095 VST.floyd.canon <> cs:316 var
R26071:26075 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R26070:26070 VST.floyd.canon <> P:318 var
R26076:26077 VST.floyd.canon <> P':314 var
R26176:26191 VST.floyd.canon <> semax_pre_simple thm
R26176:26191 VST.floyd.canon <> semax_pre_simple thm
R26215:26224 VST.msl.seplog <> andp_left2 meth
R26215:26224 VST.msl.seplog <> andp_left2 meth
prf 26245:26258 <> semax_pre_post
R26277:26286 VST.veric.juicy_extspec <> OracleKind class
binder 26270:26274 <> Espec:321
R26293:26301 VST.veric.mpred <> compspecs class
binder 26289:26290 <> CS:322
binder 26313:26314 <> P':323
R26321:26330 VST.veric.tycontext <> ret_assert rec
binder 26317:26318 <> R':324
binder 26333:26337 <> Delta:325
binder 26339:26339 <> P:326
binder 26341:26341 <> c:327
R26347:26356 VST.veric.tycontext <> ret_assert rec
binder 26344:26344 <> R:328
R26365:26365 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26402:26410 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26467:26474 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26529:26536 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26597:26604 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26605:26605 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26679:26686 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26716:26719 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26721:26725 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R26746:26746 VST.floyd.canon <> R:328 var
R26744:26744 VST.floyd.canon <> c:327 var
R26742:26742 VST.floyd.canon <> P:326 var
R26736:26740 VST.floyd.canon <> Delta:325 var
R26730:26734 VST.floyd.canon <> Espec:321 var
R26727:26728 VST.floyd.canon <> CS:322 var
R26688:26692 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R26714:26715 VST.floyd.canon <> R':324 var
R26712:26712 VST.floyd.canon <> c:327 var
R26709:26710 VST.floyd.canon <> P':323 var
R26703:26707 VST.floyd.canon <> Delta:325 var
R26697:26701 VST.floyd.canon <> Espec:321 var
R26694:26695 VST.floyd.canon <> CS:322 var
binder 26613:26614 <> vl:329
R26660:26664 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R26641:26644 VST.msl.seplog <> ::logic:x_'&&'_x not
R26617:26621 VST.veric.SeparationLogic <> local def
R26624:26633 VST.veric.SeparationLogic <> tc_environ def
R26635:26639 VST.floyd.canon <> Delta:325 var
R26645:26653 VST.veric.tycontext <> RA_return proj
R26658:26659 VST.floyd.canon <> vl:329 var
R26655:26656 VST.floyd.canon <> R':324 var
R26665:26673 VST.veric.tycontext <> RA_return proj
R26677:26678 VST.floyd.canon <> vl:329 var
R26675:26675 VST.floyd.canon <> R:328 var
R26579:26583 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R26561:26564 VST.msl.seplog <> ::logic:x_'&&'_x not
R26537:26541 VST.veric.SeparationLogic <> local def
R26544:26553 VST.veric.SeparationLogic <> tc_environ def
R26555:26559 VST.floyd.canon <> Delta:325 var
R26565:26575 VST.veric.tycontext <> RA_continue proj
R26577:26578 VST.floyd.canon <> R':324 var
R26584:26594 VST.veric.tycontext <> RA_continue proj
R26596:26596 VST.floyd.canon <> R:328 var
R26514:26518 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R26499:26502 VST.msl.seplog <> ::logic:x_'&&'_x not
R26475:26479 VST.veric.SeparationLogic <> local def
R26482:26491 VST.veric.SeparationLogic <> tc_environ def
R26493:26497 VST.floyd.canon <> Delta:325 var
R26503:26510 VST.veric.tycontext <> RA_break proj
R26512:26513 VST.floyd.canon <> R':324 var
R26519:26526 VST.veric.tycontext <> RA_break proj
R26528:26528 VST.floyd.canon <> R:328 var
R26451:26455 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R26435:26438 VST.msl.seplog <> ::logic:x_'&&'_x not
R26411:26415 VST.veric.SeparationLogic <> local def
R26418:26427 VST.veric.SeparationLogic <> tc_environ def
R26429:26433 VST.floyd.canon <> Delta:325 var
R26439:26447 VST.veric.tycontext <> RA_normal proj
R26449:26450 VST.floyd.canon <> R':324 var
R26456:26464 VST.veric.tycontext <> RA_normal proj
R26466:26466 VST.floyd.canon <> R:328 var
R26395:26399 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R26390:26393 VST.msl.seplog <> ::logic:x_'&&'_x not
R26366:26370 VST.veric.SeparationLogic <> local def
R26373:26382 VST.veric.SeparationLogic <> tc_environ def
R26384:26388 VST.floyd.canon <> Delta:325 var
R26394:26394 VST.floyd.canon <> P:326 var
R26400:26401 VST.floyd.canon <> P':323 var
R26773:26791 VST.floyd.canon <> semax_pre_post_bupd thm
R26816:26828 VST.msl.seplog <> derives_trans meth
R26831:26840 VST.msl.ghost_seplog <> bupd_intro meth
R26773:26791 VST.floyd.canon <> semax_pre_post_bupd thm
R26816:26828 VST.msl.seplog <> derives_trans meth
R26831:26840 VST.msl.ghost_seplog <> bupd_intro meth
R26816:26828 VST.msl.seplog <> derives_trans meth
R26831:26840 VST.msl.ghost_seplog <> bupd_intro meth
R26816:26828 VST.msl.seplog <> derives_trans meth
R26831:26840 VST.msl.ghost_seplog <> bupd_intro meth
R26816:26828 VST.msl.seplog <> derives_trans meth
R26831:26840 VST.msl.ghost_seplog <> bupd_intro meth
R26816:26828 VST.msl.seplog <> derives_trans meth
R26831:26840 VST.msl.ghost_seplog <> bupd_intro meth
prf 26861:26875 <> semax_frame_PQR
binder 26887:26888 <> Q2:330
binder 26890:26891 <> R2:331
binder 26893:26897 <> Espec:332
R26904:26912 VST.veric.mpred <> compspecs class
binder 26900:26901 <> cs:333
binder 26915:26919 <> Delta:334
binder 26921:26922 <> R1:335
binder 26924:26924 <> P:336
binder 26926:26926 <> Q:337
binder 26928:26929 <> P':338
binder 26931:26932 <> Q':339
binder 26934:26936 <> R1':340
binder 26938:26938 <> c:341
R26988:26996 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27126:27134 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27136:27140 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R27224:27240 VST.veric.SeparationLogic <> normal_ret_assert def
R27243:27247 VST.floyd.canon <> PROPx def
R27253:27258 VST.floyd.canon <> LOCALx def
R27270:27273 VST.floyd.canon <> SEPx def
R27279:27280 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R27276:27278 VST.floyd.canon <> R1':340 var
R27281:27282 VST.floyd.canon <> R2:331 var
R27263:27264 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R27261:27262 VST.floyd.canon <> Q':339 var
R27265:27266 VST.floyd.canon <> Q2:330 var
R27249:27250 VST.floyd.canon <> P':338 var
R27200:27200 VST.floyd.canon <> c:341 var
R27158:27162 VST.floyd.canon <> PROPx def
R27167:27172 VST.floyd.canon <> LOCALx def
R27183:27186 VST.floyd.canon <> SEPx def
R27191:27192 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R27189:27190 VST.floyd.canon <> R1:335 var
R27193:27194 VST.floyd.canon <> R2:331 var
R27176:27177 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R27175:27175 VST.floyd.canon <> Q:337 var
R27178:27179 VST.floyd.canon <> Q2:330 var
R27164:27164 VST.floyd.canon <> P:336 var
R27151:27155 VST.floyd.canon <> Delta:334 var
R27145:27149 VST.floyd.canon <> Espec:332 var
R27142:27143 VST.floyd.canon <> cs:333 var
R26998:27002 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R27074:27090 VST.veric.SeparationLogic <> normal_ret_assert def
R27093:27097 VST.floyd.canon <> PROPx def
R27103:27108 VST.floyd.canon <> LOCALx def
R27114:27117 VST.floyd.canon <> SEPx def
R27119:27121 VST.floyd.canon <> R1':340 var
R27110:27111 VST.floyd.canon <> Q':339 var
R27099:27100 VST.floyd.canon <> P':338 var
R27050:27050 VST.floyd.canon <> c:341 var
R27020:27024 VST.floyd.canon <> PROPx def
R27029:27034 VST.floyd.canon <> LOCALx def
R27039:27042 VST.floyd.canon <> SEPx def
R27044:27045 VST.floyd.canon <> R1:335 var
R27036:27036 VST.floyd.canon <> Q:337 var
R27026:27026 VST.floyd.canon <> P:336 var
R27013:27017 VST.floyd.canon <> Delta:334 var
R27007:27011 VST.floyd.canon <> Espec:332 var
R27004:27005 VST.floyd.canon <> cs:333 var
R26946:26963 VST.veric.SeparationLogic <> closed_wrt_modvars def
R26968:26973 VST.floyd.canon <> LOCALx def
R26979:26982 VST.floyd.canon <> SEPx def
R26984:26985 VST.floyd.canon <> R2:331 var
R26975:26976 VST.floyd.canon <> Q2:330 var
R26965:26965 VST.floyd.canon <> c:341 var
R27314:27318 VST.floyd.canon <> PROPx def
R27323:27328 VST.floyd.canon <> LOCALx def
R27339:27342 VST.floyd.canon <> SEPx def
R27347:27350 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R27332:27333 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R27397:27400 VST.msl.seplog <> ::logic:x_'*'_x not
R27420:27420 VST.msl.seplog <> ::logic:x_'*'_x not
R27367:27371 VST.floyd.canon <> PROPx def
R27376:27381 VST.floyd.canon <> LOCALx def
R27386:27389 VST.floyd.canon <> SEPx def
R27401:27406 VST.floyd.canon <> LOCALx def
R27412:27415 VST.floyd.canon <> SEPx def
R27314:27318 VST.floyd.canon <> PROPx def
R27323:27328 VST.floyd.canon <> LOCALx def
R27339:27342 VST.floyd.canon <> SEPx def
R27347:27350 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R27332:27333 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R27397:27400 VST.msl.seplog <> ::logic:x_'*'_x not
R27420:27420 VST.msl.seplog <> ::logic:x_'*'_x not
R27367:27371 VST.floyd.canon <> PROPx def
R27376:27381 VST.floyd.canon <> LOCALx def
R27386:27389 VST.floyd.canon <> SEPx def
R27401:27406 VST.floyd.canon <> LOCALx def
R27412:27415 VST.floyd.canon <> SEPx def
R27431:27444 VST.floyd.canon <> semax_pre_post thm
R27458:27468 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_frame prfax
R27431:27444 VST.floyd.canon <> semax_pre_post thm
R27458:27468 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_frame prfax
R27458:27468 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_frame prfax
R27458:27468 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_frame prfax
R27458:27468 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_frame prfax
R27458:27468 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_frame prfax
R27458:27468 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_frame prfax
R27495:27504 VST.msl.seplog <> andp_left2 meth
R27495:27504 VST.msl.seplog <> andp_left2 meth
R27519:27528 VST.msl.seplog <> andp_left2 meth
R27519:27528 VST.msl.seplog <> andp_left2 meth
R27568:27572 VST.floyd.canon <> PROPx def
R27575:27578 VST.floyd.canon <> SEPx def
R27581:27586 VST.floyd.canon <> LOCALx def
R27589:27593 VST.veric.SeparationLogic <> local def
R27596:27600 VST.veric.mpred <> lift1 def
R27622:27642 VST.floyd.canon <> fold_right_sepcon_app thm
R27622:27642 VST.floyd.canon <> fold_right_sepcon_app thm
R27622:27642 VST.floyd.canon <> fold_right_sepcon_app thm
R27705:27718 VST.msl.log_normalize <> prop_true_andp thm
R27705:27718 VST.msl.log_normalize <> prop_true_andp thm
R27705:27718 VST.msl.log_normalize <> prop_true_andp thm
R27705:27718 VST.msl.log_normalize <> prop_true_andp thm
R27735:27741 Coq.Lists.List <> map_app thm
R27735:27741 Coq.Lists.List <> map_app thm
R27735:27741 Coq.Lists.List <> map_app thm
R27752:27769 VST.floyd.canon <> fold_right_and_app thm
R27752:27769 VST.floyd.canon <> fold_right_and_app thm
R27752:27769 VST.floyd.canon <> fold_right_and_app thm
R27791:27800 VST.msl.seplog <> andp_left2 meth
R27791:27800 VST.msl.seplog <> andp_left2 meth
R27827:27836 VST.msl.seplog <> andp_left2 meth
R27827:27836 VST.msl.seplog <> andp_left2 meth
R27870:27879 VST.msl.seplog <> andp_left2 meth
R27870:27879 VST.msl.seplog <> andp_left2 meth
R27941:27945 VST.floyd.canon <> PROPx def
R27948:27953 VST.floyd.canon <> LOCALx def
R27956:27960 VST.veric.SeparationLogic <> local def
R27963:27967 VST.veric.mpred <> lift1 def
R27970:27973 VST.floyd.canon <> SEPx def
R27984:28004 VST.floyd.canon <> fold_right_sepcon_app thm
R27984:28004 VST.floyd.canon <> fold_right_sepcon_app thm
R27984:28004 VST.floyd.canon <> fold_right_sepcon_app thm
R28042:28048 Coq.Lists.List <> map_app thm
R28042:28048 Coq.Lists.List <> map_app thm
R28042:28048 Coq.Lists.List <> map_app thm
R28059:28076 VST.floyd.canon <> fold_right_and_app thm
R28059:28076 VST.floyd.canon <> fold_right_and_app thm
R28059:28076 VST.floyd.canon <> fold_right_and_app thm
R28085:28092 VST.msl.seplog <> pred_ext meth
R28085:28092 VST.msl.seplog <> pred_ext meth
prf 28118:28129 <> semax_frame1
R28148:28157 VST.veric.juicy_extspec <> OracleKind class
binder 28141:28145 <> Espec:342
R28165:28173 VST.veric.mpred <> compspecs class
binder 28161:28162 <> cs:343
binder 28176:28181 <> QFrame:344
binder 28183:28187 <> Frame:345
binder 28189:28193 <> Delta:346
binder 28195:28200 <> Delta1:347
binder 28207:28207 <> P:348
binder 28209:28209 <> Q:349
binder 28211:28211 <> c:350
binder 28213:28213 <> R:351
binder 28215:28216 <> P1:352
binder 28218:28219 <> Q1:353
binder 28221:28222 <> R1:354
binder 28224:28225 <> P2:355
binder 28227:28228 <> Q2:356
binder 28230:28231 <> R2:357
R28360:28367 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R28382:28389 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R28491:28498 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R28548:28555 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R28556:28560 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R28623:28639 VST.veric.SeparationLogic <> normal_ret_assert def
R28642:28646 VST.floyd.canon <> PROPx def
R28652:28657 VST.floyd.canon <> LOCALx def
R28673:28676 VST.floyd.canon <> SEPx def
R28681:28682 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R28679:28680 VST.floyd.canon <> R2:357 var
R28683:28687 VST.floyd.canon <> Frame:345 var
R28662:28663 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R28660:28661 VST.floyd.canon <> Q2:356 var
R28664:28669 VST.floyd.canon <> QFrame:344 var
R28648:28649 VST.floyd.canon <> P2:355 var
R28598:28598 VST.floyd.canon <> c:350 var
R28569:28573 VST.floyd.canon <> PROPx def
R28578:28583 VST.floyd.canon <> LOCALx def
R28588:28591 VST.floyd.canon <> SEPx def
R28593:28593 VST.floyd.canon <> R:351 var
R28585:28585 VST.floyd.canon <> Q:349 var
R28575:28575 VST.floyd.canon <> P:348 var
R28562:28566 VST.floyd.canon <> Delta:346 var
R28499:28516 VST.veric.SeparationLogic <> closed_wrt_modvars def
R28521:28526 VST.floyd.canon <> LOCALx def
R28536:28539 VST.floyd.canon <> SEPx def
R28541:28545 VST.floyd.canon <> Frame:345 var
R28528:28533 VST.floyd.canon <> QFrame:344 var
R28518:28518 VST.floyd.canon <> c:350 var
R28390:28396 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28402:28403 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28431:28439 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28397:28401 VST.floyd.canon <> Delta:346 var
R28404:28408 VST.floyd.canon <> PROPx def
R28413:28418 VST.floyd.canon <> LOCALx def
R28423:28426 VST.floyd.canon <> SEPx def
R28428:28428 VST.floyd.canon <> R:351 var
R28420:28420 VST.floyd.canon <> Q:349 var
R28410:28410 VST.floyd.canon <> P:348 var
R28440:28444 VST.floyd.canon <> PROPx def
R28450:28455 VST.floyd.canon <> LOCALx def
R28471:28474 VST.floyd.canon <> SEPx def
R28479:28482 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R28477:28478 VST.floyd.canon <> R1:354 var
R28483:28487 VST.floyd.canon <> Frame:345 var
R28460:28461 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R28458:28459 VST.floyd.canon <> Q1:353 var
R28462:28467 VST.floyd.canon <> QFrame:344 var
R28446:28447 VST.floyd.canon <> P1:352 var
R28374:28376 Coq.Init.Logic <> ::type_scope:x_'='_x not
R28368:28373 VST.floyd.canon <> Delta1:347 var
R28377:28381 VST.floyd.canon <> Delta:346 var
R28238:28242 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R28309:28325 VST.veric.SeparationLogic <> normal_ret_assert def
R28328:28332 VST.floyd.canon <> PROPx def
R28338:28343 VST.floyd.canon <> LOCALx def
R28349:28352 VST.floyd.canon <> SEPx def
R28354:28355 VST.floyd.canon <> R2:357 var
R28345:28346 VST.floyd.canon <> Q2:356 var
R28334:28335 VST.floyd.canon <> P2:355 var
R28284:28284 VST.floyd.canon <> c:350 var
R28252:28256 VST.floyd.canon <> PROPx def
R28262:28267 VST.floyd.canon <> LOCALx def
R28273:28276 VST.floyd.canon <> SEPx def
R28278:28279 VST.floyd.canon <> R1:354 var
R28269:28270 VST.floyd.canon <> Q1:353 var
R28258:28259 VST.floyd.canon <> P1:352 var
R28244:28249 VST.floyd.canon <> Delta1:347 var
R28724:28732 VST.floyd.canon <> semax_pre thm
R28724:28732 VST.floyd.canon <> semax_pre thm
R28751:28765 VST.floyd.canon <> semax_frame_PQR thm
R28751:28765 VST.floyd.canon <> semax_frame_PQR thm
prf 28786:28800 <> semax_post_bupd
R28816:28825 VST.veric.tycontext <> ret_assert rec
binder 28812:28813 <> R':358
binder 28828:28832 <> Espec:359
R28839:28847 VST.veric.mpred <> compspecs class
binder 28835:28836 <> cs:360
binder 28850:28854 <> Delta:361
R28860:28869 VST.veric.tycontext <> ret_assert rec
binder 28857:28857 <> R:362
binder 28872:28872 <> P:363
binder 28874:28874 <> c:364
R28927:28933 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R28979:28985 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29037:29043 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29044:29044 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29109:29116 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29145:29149 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29151:29155 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R29176:29176 VST.floyd.canon <> R:362 var
R29174:29174 VST.floyd.canon <> c:364 var
R29172:29172 VST.floyd.canon <> P:363 var
R29166:29170 VST.floyd.canon <> Delta:361 var
R29160:29164 VST.floyd.canon <> Espec:359 var
R29157:29158 VST.floyd.canon <> cs:360 var
R29118:29122 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R29143:29144 VST.floyd.canon <> R':358 var
R29141:29141 VST.floyd.canon <> c:364 var
R29139:29139 VST.floyd.canon <> P:363 var
R29133:29137 VST.floyd.canon <> Delta:361 var
R29127:29131 VST.floyd.canon <> Espec:359 var
R29124:29125 VST.floyd.canon <> cs:360 var
binder 29052:29053 <> vl:365
R29056:29062 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29068:29069 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29085:29089 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29063:29067 VST.floyd.canon <> Delta:361 var
R29070:29078 VST.veric.tycontext <> RA_return proj
R29083:29084 VST.floyd.canon <> vl:365 var
R29080:29081 VST.floyd.canon <> R':358 var
R29090:29094 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R29095:29103 VST.veric.tycontext <> RA_return proj
R29107:29108 VST.floyd.canon <> vl:365 var
R29105:29105 VST.floyd.canon <> R:362 var
R28986:28992 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28998:28999 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29014:29018 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28993:28997 VST.floyd.canon <> Delta:361 var
R29000:29010 VST.veric.tycontext <> RA_continue proj
R29012:29013 VST.floyd.canon <> R':358 var
R29019:29023 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R29024:29034 VST.veric.tycontext <> RA_continue proj
R29036:29036 VST.floyd.canon <> R:362 var
R28934:28940 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28946:28947 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28959:28963 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28941:28945 VST.floyd.canon <> Delta:361 var
R28948:28955 VST.veric.tycontext <> RA_break proj
R28957:28958 VST.floyd.canon <> R':358 var
R28964:28968 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R28969:28976 VST.veric.tycontext <> RA_break proj
R28978:28978 VST.floyd.canon <> R:362 var
R28880:28886 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28892:28893 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28906:28910 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28887:28891 VST.floyd.canon <> Delta:361 var
R28894:28902 VST.veric.tycontext <> RA_normal proj
R28904:28905 VST.floyd.canon <> R':358 var
R28911:28915 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R28916:28924 VST.veric.tycontext <> RA_normal proj
R28926:28926 VST.floyd.canon <> R:362 var
R29201:29219 VST.floyd.canon <> semax_pre_post_bupd thm
R29201:29219 VST.floyd.canon <> semax_pre_post_bupd thm
R29245:29254 VST.msl.seplog <> andp_left2 meth
R29257:29266 VST.msl.ghost_seplog <> bupd_intro meth
R29245:29254 VST.msl.seplog <> andp_left2 meth
R29257:29266 VST.msl.ghost_seplog <> bupd_intro meth
prf 29287:29296 <> semax_post
R29312:29321 VST.veric.tycontext <> ret_assert rec
binder 29308:29309 <> R':366
binder 29324:29328 <> Espec:367
R29335:29343 VST.veric.mpred <> compspecs class
binder 29331:29332 <> cs:368
binder 29346:29350 <> Delta:369
R29356:29365 VST.veric.tycontext <> ret_assert rec
binder 29353:29353 <> R:370
binder 29368:29368 <> P:371
binder 29370:29370 <> c:372
R29418:29424 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29465:29471 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29518:29524 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29525:29525 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29585:29592 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29621:29625 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29627:29631 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R29652:29652 VST.floyd.canon <> R:370 var
R29650:29650 VST.floyd.canon <> c:372 var
R29648:29648 VST.floyd.canon <> P:371 var
R29642:29646 VST.floyd.canon <> Delta:369 var
R29636:29640 VST.floyd.canon <> Espec:367 var
R29633:29634 VST.floyd.canon <> cs:368 var
R29594:29598 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R29619:29620 VST.floyd.canon <> R':366 var
R29617:29617 VST.floyd.canon <> c:372 var
R29615:29615 VST.floyd.canon <> P:371 var
R29609:29613 VST.floyd.canon <> Delta:369 var
R29603:29607 VST.floyd.canon <> Espec:367 var
R29600:29601 VST.floyd.canon <> cs:368 var
binder 29533:29534 <> vl:373
R29537:29543 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29549:29550 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29566:29570 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29544:29548 VST.floyd.canon <> Delta:369 var
R29551:29559 VST.veric.tycontext <> RA_return proj
R29564:29565 VST.floyd.canon <> vl:373 var
R29561:29562 VST.floyd.canon <> R':366 var
R29571:29579 VST.veric.tycontext <> RA_return proj
R29583:29584 VST.floyd.canon <> vl:373 var
R29581:29581 VST.floyd.canon <> R:370 var
R29472:29478 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29484:29485 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29500:29504 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29479:29483 VST.floyd.canon <> Delta:369 var
R29486:29496 VST.veric.tycontext <> RA_continue proj
R29498:29499 VST.floyd.canon <> R':366 var
R29505:29515 VST.veric.tycontext <> RA_continue proj
R29517:29517 VST.floyd.canon <> R:370 var
R29425:29431 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29437:29438 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29450:29454 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29432:29436 VST.floyd.canon <> Delta:369 var
R29439:29446 VST.veric.tycontext <> RA_break proj
R29448:29449 VST.floyd.canon <> R':366 var
R29455:29462 VST.veric.tycontext <> RA_break proj
R29464:29464 VST.floyd.canon <> R:370 var
R29376:29382 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29388:29389 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29402:29406 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29383:29387 VST.floyd.canon <> Delta:369 var
R29390:29398 VST.veric.tycontext <> RA_normal proj
R29400:29401 VST.floyd.canon <> R':366 var
R29407:29415 VST.veric.tycontext <> RA_normal proj
R29417:29417 VST.floyd.canon <> R:370 var
R29677:29690 VST.floyd.canon <> semax_pre_post thm
R29677:29690 VST.floyd.canon <> semax_pre_post thm
R29716:29725 VST.msl.seplog <> andp_left2 meth
R29716:29725 VST.msl.seplog <> andp_left2 meth
prf 29746:29763 <> semax_post_flipped
R29781:29790 VST.veric.tycontext <> ret_assert rec
binder 29776:29777 <> R':374
binder 29793:29797 <> Espec:375
R29804:29812 VST.veric.mpred <> compspecs class
binder 29800:29801 <> cs:376
R29824:29832 VST.veric.seplog <> tycontext ind
binder 29816:29820 <> Delta:377
R29840:29849 VST.veric.tycontext <> ret_assert rec
binder 29836:29836 <> R:378
R29873:29874 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29875:29879 VST.veric.mpred <> mpred def
R29866:29872 VST.veric.mpred <> environ ind
binder 29862:29862 <> P:379
R29887:29895 compcert.cfrontend.Clight <> statement ind
binder 29883:29883 <> c:380
R29930:29936 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29979:29985 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30026:30032 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30079:30085 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30086:30086 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30146:30157 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30159:30163 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R30184:30184 VST.floyd.canon <> R:378 var
R30182:30182 VST.floyd.canon <> c:380 var
R30180:30180 VST.floyd.canon <> P:379 var
R30174:30178 VST.floyd.canon <> Delta:377 var
R30168:30172 VST.floyd.canon <> Espec:375 var
R30165:30166 VST.floyd.canon <> cs:376 var
binder 30094:30095 <> vl:381
R30098:30104 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30110:30111 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30127:30131 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30105:30109 VST.floyd.canon <> Delta:377 var
R30112:30120 VST.veric.tycontext <> RA_return proj
R30125:30126 VST.floyd.canon <> vl:381 var
R30122:30123 VST.floyd.canon <> R':374 var
R30132:30140 VST.veric.tycontext <> RA_return proj
R30144:30145 VST.floyd.canon <> vl:381 var
R30142:30142 VST.floyd.canon <> R:378 var
R30033:30039 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30045:30046 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30061:30065 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30040:30044 VST.floyd.canon <> Delta:377 var
R30047:30057 VST.veric.tycontext <> RA_continue proj
R30059:30060 VST.floyd.canon <> R':374 var
R30066:30076 VST.veric.tycontext <> RA_continue proj
R30078:30078 VST.floyd.canon <> R:378 var
R29986:29992 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29998:29999 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30011:30015 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29993:29997 VST.floyd.canon <> Delta:377 var
R30000:30007 VST.veric.tycontext <> RA_break proj
R30009:30010 VST.floyd.canon <> R':374 var
R30016:30023 VST.veric.tycontext <> RA_break proj
R30025:30025 VST.floyd.canon <> R:378 var
R29937:29943 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29949:29950 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29963:29967 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29944:29948 VST.floyd.canon <> Delta:377 var
R29951:29959 VST.veric.tycontext <> RA_normal proj
R29961:29962 VST.floyd.canon <> R':374 var
R29968:29976 VST.veric.tycontext <> RA_normal proj
R29978:29978 VST.floyd.canon <> R:378 var
R29903:29907 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R29928:29929 VST.floyd.canon <> R':374 var
R29926:29926 VST.floyd.canon <> c:380 var
R29924:29924 VST.floyd.canon <> P:379 var
R29918:29922 VST.floyd.canon <> Delta:377 var
R29912:29916 VST.floyd.canon <> Espec:375 var
R29909:29910 VST.floyd.canon <> cs:376 var
R30209:30218 VST.floyd.canon <> semax_post thm
R30209:30218 VST.floyd.canon <> semax_post thm
prf 30247:30257 <> semax_post'
binder 30267:30268 <> R':382
binder 30270:30274 <> Espec:383
R30281:30289 VST.veric.mpred <> compspecs class
binder 30277:30278 <> cs:384
binder 30292:30296 <> Delta:385
binder 30298:30298 <> R:386
binder 30300:30300 <> P:387
binder 30302:30302 <> c:388
R30338:30347 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30396:30405 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30407:30411 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R30433:30449 VST.veric.SeparationLogic <> normal_ret_assert def
R30451:30451 VST.floyd.canon <> R:386 var
R30430:30430 VST.floyd.canon <> c:388 var
R30428:30428 VST.floyd.canon <> P:387 var
R30422:30426 VST.floyd.canon <> Delta:385 var
R30416:30420 VST.floyd.canon <> Espec:383 var
R30413:30414 VST.floyd.canon <> cs:384 var
R30349:30353 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R30375:30391 VST.veric.SeparationLogic <> normal_ret_assert def
R30393:30394 VST.floyd.canon <> R':382 var
R30372:30372 VST.floyd.canon <> c:388 var
R30370:30370 VST.floyd.canon <> P:387 var
R30364:30368 VST.floyd.canon <> Delta:385 var
R30358:30362 VST.floyd.canon <> Espec:383 var
R30355:30356 VST.floyd.canon <> cs:384 var
R30316:30322 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30328:30329 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30332:30336 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30323:30327 VST.floyd.canon <> Delta:385 var
R30330:30331 VST.floyd.canon <> R':382 var
R30337:30337 VST.floyd.canon <> R:386 var
R30477:30486 VST.floyd.canon <> semax_post thm
R30477:30486 VST.floyd.canon <> semax_post thm
prf 30630:30644 <> semax_pre_post'
binder 30654:30655 <> P':389
binder 30657:30658 <> R':390
binder 30660:30664 <> Espec:391
R30671:30679 VST.veric.mpred <> compspecs class
binder 30667:30668 <> cs:392
binder 30682:30686 <> Delta:393
binder 30688:30688 <> R:394
binder 30690:30690 <> P:395
binder 30692:30692 <> c:396
R30723:30732 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30755:30764 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30814:30823 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30825:30829 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R30851:30867 VST.veric.SeparationLogic <> normal_ret_assert def
R30869:30869 VST.floyd.canon <> R:394 var
R30848:30848 VST.floyd.canon <> c:396 var
R30846:30846 VST.floyd.canon <> P:395 var
R30840:30844 VST.floyd.canon <> Delta:393 var
R30834:30838 VST.floyd.canon <> Espec:391 var
R30831:30832 VST.floyd.canon <> cs:392 var
R30766:30770 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R30793:30809 VST.veric.SeparationLogic <> normal_ret_assert def
R30811:30812 VST.floyd.canon <> R':390 var
R30790:30790 VST.floyd.canon <> c:396 var
R30787:30788 VST.floyd.canon <> P':389 var
R30781:30785 VST.floyd.canon <> Delta:393 var
R30775:30779 VST.floyd.canon <> Espec:391 var
R30772:30773 VST.floyd.canon <> cs:392 var
R30733:30739 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30745:30746 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30749:30753 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30740:30744 VST.floyd.canon <> Delta:393 var
R30747:30748 VST.floyd.canon <> R':390 var
R30754:30754 VST.floyd.canon <> R:394 var
R30701:30707 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30713:30714 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30716:30720 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R30708:30712 VST.floyd.canon <> Delta:393 var
R30715:30715 VST.floyd.canon <> P:395 var
R30721:30722 VST.floyd.canon <> P':389 var
R30896:30904 VST.floyd.canon <> semax_pre thm
R30896:30904 VST.floyd.canon <> semax_pre thm
R30922:30932 VST.floyd.canon <> semax_post' thm
R30922:30932 VST.floyd.canon <> semax_post' thm
prf 31339:31348 <> sequential
binder 31360:31364 <> Espec:397
R31371:31379 VST.veric.mpred <> compspecs class
binder 31367:31368 <> cs:398
binder 31382:31386 <> Delta:399
binder 31388:31388 <> P:400
binder 31390:31390 <> c:401
binder 31392:31392 <> Q:402
R31462:31475 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31477:31481 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R31502:31502 VST.floyd.canon <> Q:402 var
R31500:31500 VST.floyd.canon <> c:401 var
R31498:31498 VST.floyd.canon <> P:400 var
R31492:31496 VST.floyd.canon <> Delta:399 var
R31486:31490 VST.floyd.canon <> Espec:397 var
R31483:31484 VST.floyd.canon <> cs:398 var
R31404:31408 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R31430:31446 VST.veric.SeparationLogic <> normal_ret_assert def
R31449:31457 VST.veric.tycontext <> RA_normal proj
R31459:31459 VST.floyd.canon <> Q:402 var
R31427:31427 VST.floyd.canon <> c:401 var
R31425:31425 VST.floyd.canon <> P:400 var
R31419:31423 VST.floyd.canon <> Delta:399 var
R31413:31417 VST.floyd.canon <> Espec:397 var
R31410:31411 VST.floyd.canon <> cs:398 var
R31551:31560 VST.floyd.canon <> semax_post thm
R31584:31593 VST.msl.seplog <> andp_left2 meth
R31551:31560 VST.floyd.canon <> semax_post thm
R31584:31593 VST.msl.seplog <> andp_left2 meth
R31584:31593 VST.msl.seplog <> andp_left2 meth
R31584:31593 VST.msl.seplog <> andp_left2 meth
R31584:31593 VST.msl.seplog <> andp_left2 meth
prf 31632:31642 <> sequential'
binder 31656:31656 <> Q:403
binder 31658:31662 <> Espec:404
R31669:31677 VST.veric.mpred <> compspecs class
binder 31665:31666 <> cs:405
binder 31680:31684 <> Delta:406
binder 31686:31686 <> P:407
binder 31688:31688 <> c:408
binder 31690:31690 <> R:409
R31755:31773 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31775:31779 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R31801:31812 VST.veric.SeparationLogic <> overridePost def
R31816:31816 VST.floyd.canon <> R:409 var
R31814:31814 VST.floyd.canon <> Q:403 var
R31798:31798 VST.floyd.canon <> c:408 var
R31796:31796 VST.floyd.canon <> P:407 var
R31790:31794 VST.floyd.canon <> Delta:406 var
R31784:31788 VST.floyd.canon <> Espec:404 var
R31781:31782 VST.floyd.canon <> cs:405 var
R31709:31713 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R31735:31751 VST.veric.SeparationLogic <> normal_ret_assert def
R31753:31753 VST.floyd.canon <> Q:403 var
R31732:31732 VST.floyd.canon <> c:408 var
R31730:31730 VST.floyd.canon <> P:407 var
R31724:31728 VST.floyd.canon <> Delta:406 var
R31718:31722 VST.floyd.canon <> Espec:404 var
R31715:31716 VST.floyd.canon <> cs:405 var
R31858:31874 VST.veric.SeparationLogic <> normal_ret_assert def
R31841:31850 VST.floyd.canon <> semax_post thm
R31908:31917 VST.msl.seplog <> andp_left2 meth
R31858:31874 VST.veric.SeparationLogic <> normal_ret_assert def
R31841:31850 VST.floyd.canon <> semax_post thm
R31908:31917 VST.msl.seplog <> andp_left2 meth
R31908:31917 VST.msl.seplog <> andp_left2 meth
R31908:31917 VST.msl.seplog <> andp_left2 meth
R31908:31917 VST.msl.seplog <> andp_left2 meth
prf 31975:31984 <> semax_seq'
binder 31995:31999 <> Espec:410
R32006:32014 VST.veric.mpred <> compspecs class
binder 32002:32003 <> cs:411
binder 32017:32021 <> Delta:412
binder 32023:32023 <> P:413
binder 32025:32026 <> c1:414
binder 32028:32029 <> P':415
binder 32031:32032 <> c2:416
binder 32034:32034 <> Q:417
R32095:32107 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32137:32149 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32151:32155 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R32192:32192 VST.floyd.canon <> Q:417 var
R32175:32183 compcert.cfrontend.Clight <> Ssequence constr
R32188:32189 VST.floyd.canon <> c2:416 var
R32185:32186 VST.floyd.canon <> c1:414 var
R32172:32172 VST.floyd.canon <> P:413 var
R32166:32170 VST.floyd.canon <> Delta:412 var
R32160:32164 VST.floyd.canon <> Espec:410 var
R32157:32158 VST.floyd.canon <> cs:411 var
R32109:32113 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R32136:32136 VST.floyd.canon <> Q:417 var
R32133:32134 VST.floyd.canon <> c2:416 var
R32130:32131 VST.floyd.canon <> P':415 var
R32124:32128 VST.floyd.canon <> Delta:412 var
R32118:32122 VST.floyd.canon <> Espec:410 var
R32115:32116 VST.floyd.canon <> cs:411 var
R32047:32051 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R32074:32090 VST.veric.SeparationLogic <> normal_ret_assert def
R32092:32093 VST.floyd.canon <> P':415 var
R32070:32071 VST.floyd.canon <> c1:414 var
R32068:32068 VST.floyd.canon <> P:413 var
R32062:32066 VST.floyd.canon <> Delta:412 var
R32056:32060 VST.floyd.canon <> Espec:410 var
R32053:32054 VST.floyd.canon <> cs:411 var
R32217:32225 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R32217:32225 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R32249:32259 VST.floyd.canon <> sequential' thm
R32249:32259 VST.floyd.canon <> sequential' thm
prf 32280:32294 <> semax_frame_seq
R32313:32322 VST.veric.juicy_extspec <> OracleKind class
binder 32306:32310 <> Espec:418
R32330:32338 VST.veric.mpred <> compspecs class
binder 32326:32327 <> cs:419
binder 32341:32346 <> QFrame:420
binder 32348:32352 <> Frame:421
binder 32354:32358 <> Delta:422
binder 32365:32365 <> P:423
binder 32367:32367 <> Q:424
binder 32369:32370 <> c1:425
binder 32372:32373 <> c2:426
binder 32375:32375 <> R:427
binder 32377:32378 <> P1:428
binder 32380:32381 <> Q1:429
binder 32383:32384 <> R1:430
binder 32386:32387 <> P2:431
binder 32389:32390 <> Q2:432
binder 32392:32393 <> R2:433
binder 32395:32396 <> R3:434
R32525:32532 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32634:32641 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32692:32699 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32780:32787 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32788:32792 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R32848:32849 VST.floyd.canon <> R3:434 var
R32831:32839 compcert.cfrontend.Clight <> Ssequence constr
R32844:32845 VST.floyd.canon <> c2:426 var
R32841:32842 VST.floyd.canon <> c1:425 var
R32801:32805 VST.floyd.canon <> PROPx def
R32810:32815 VST.floyd.canon <> LOCALx def
R32820:32823 VST.floyd.canon <> SEPx def
R32825:32825 VST.floyd.canon <> R:427 var
R32817:32817 VST.floyd.canon <> Q:424 var
R32807:32807 VST.floyd.canon <> P:423 var
R32794:32798 VST.floyd.canon <> Delta:422 var
R32700:32704 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R32778:32779 VST.floyd.canon <> R3:434 var
R32775:32776 VST.floyd.canon <> c2:426 var
R32722:32726 VST.floyd.canon <> PROPx def
R32732:32737 VST.floyd.canon <> LOCALx def
R32753:32756 VST.floyd.canon <> SEPx def
R32761:32764 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R32759:32760 VST.floyd.canon <> R2:433 var
R32765:32769 VST.floyd.canon <> Frame:421 var
R32742:32743 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R32740:32741 VST.floyd.canon <> Q2:432 var
R32744:32749 VST.floyd.canon <> QFrame:420 var
R32728:32729 VST.floyd.canon <> P2:431 var
R32706:32710 VST.floyd.canon <> Delta:422 var
R32642:32659 VST.veric.SeparationLogic <> closed_wrt_modvars def
R32665:32670 VST.floyd.canon <> LOCALx def
R32680:32683 VST.floyd.canon <> SEPx def
R32685:32689 VST.floyd.canon <> Frame:421 var
R32672:32677 VST.floyd.canon <> QFrame:420 var
R32661:32662 VST.floyd.canon <> c1:425 var
R32533:32539 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R32545:32546 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R32574:32582 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R32540:32544 VST.floyd.canon <> Delta:422 var
R32547:32551 VST.floyd.canon <> PROPx def
R32556:32561 VST.floyd.canon <> LOCALx def
R32566:32569 VST.floyd.canon <> SEPx def
R32571:32571 VST.floyd.canon <> R:427 var
R32563:32563 VST.floyd.canon <> Q:424 var
R32553:32553 VST.floyd.canon <> P:423 var
R32583:32587 VST.floyd.canon <> PROPx def
R32593:32598 VST.floyd.canon <> LOCALx def
R32614:32617 VST.floyd.canon <> SEPx def
R32622:32625 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R32620:32621 VST.floyd.canon <> R1:430 var
R32626:32630 VST.floyd.canon <> Frame:421 var
R32603:32604 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R32601:32602 VST.floyd.canon <> Q1:429 var
R32605:32610 VST.floyd.canon <> QFrame:420 var
R32589:32590 VST.floyd.canon <> P1:428 var
R32403:32407 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R32474:32490 VST.veric.SeparationLogic <> normal_ret_assert def
R32493:32497 VST.floyd.canon <> PROPx def
R32503:32508 VST.floyd.canon <> LOCALx def
R32514:32517 VST.floyd.canon <> SEPx def
R32519:32520 VST.floyd.canon <> R2:433 var
R32510:32511 VST.floyd.canon <> Q2:432 var
R32499:32500 VST.floyd.canon <> P2:431 var
R32448:32449 VST.floyd.canon <> c1:425 var
R32416:32420 VST.floyd.canon <> PROPx def
R32426:32431 VST.floyd.canon <> LOCALx def
R32437:32440 VST.floyd.canon <> SEPx def
R32442:32443 VST.floyd.canon <> R1:430 var
R32433:32434 VST.floyd.canon <> Q1:429 var
R32422:32423 VST.floyd.canon <> P1:428 var
R32409:32413 VST.floyd.canon <> Delta:422 var
R32874:32883 VST.floyd.canon <> semax_seq' thm
R32874:32883 VST.floyd.canon <> semax_seq' thm
R32893:32901 VST.floyd.canon <> semax_pre thm
R32893:32901 VST.floyd.canon <> semax_pre thm
R32920:32934 VST.floyd.canon <> semax_frame_PQR thm
R32920:32934 VST.floyd.canon <> semax_frame_PQR thm
prf 32974:32990 <> derives_frame_PQR
binder 33002:33003 <> R1:435
binder 33005:33006 <> R2:436
binder 33008:33012 <> Delta:437
binder 33014:33014 <> P:438
binder 33016:33016 <> Q:439
binder 33018:33019 <> P':440
binder 33021:33022 <> Q':441
binder 33024:33026 <> R1':442
R33109:33114 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33115:33121 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R33127:33128 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R33163:33167 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R33122:33126 VST.floyd.canon <> Delta:437 var
R33129:33133 VST.floyd.canon <> PROPx def
R33138:33143 VST.floyd.canon <> LOCALx def
R33148:33151 VST.floyd.canon <> SEPx def
R33156:33157 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R33154:33155 VST.floyd.canon <> R1:435 var
R33158:33159 VST.floyd.canon <> R2:436 var
R33145:33145 VST.floyd.canon <> Q:439 var
R33135:33135 VST.floyd.canon <> P:438 var
R33168:33172 VST.floyd.canon <> PROPx def
R33178:33183 VST.floyd.canon <> LOCALx def
R33189:33192 VST.floyd.canon <> SEPx def
R33198:33199 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R33195:33197 VST.floyd.canon <> R1':442 var
R33200:33201 VST.floyd.canon <> R2:436 var
R33185:33186 VST.floyd.canon <> Q':441 var
R33174:33175 VST.floyd.canon <> P':440 var
R33031:33037 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R33043:33044 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R33073:33077 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R33038:33042 VST.floyd.canon <> Delta:437 var
R33045:33049 VST.floyd.canon <> PROPx def
R33054:33059 VST.floyd.canon <> LOCALx def
R33064:33067 VST.floyd.canon <> SEPx def
R33069:33070 VST.floyd.canon <> R1:435 var
R33061:33061 VST.floyd.canon <> Q:439 var
R33051:33051 VST.floyd.canon <> P:438 var
R33078:33082 VST.floyd.canon <> PROPx def
R33088:33093 VST.floyd.canon <> LOCALx def
R33099:33102 VST.floyd.canon <> SEPx def
R33104:33106 VST.floyd.canon <> R1':442 var
R33095:33096 VST.floyd.canon <> Q':441 var
R33084:33085 VST.floyd.canon <> P':440 var
R33229:33241 VST.msl.seplog <> derives_trans meth
R33255:33267 VST.msl.seplog <> derives_trans meth
R33229:33241 VST.msl.seplog <> derives_trans meth
R33255:33267 VST.msl.seplog <> derives_trans meth
R33280:33293 VST.msl.seplog <> sepcon_derives meth
R33315:33326 VST.msl.seplog <> derives_refl meth
R33340:33349 Coq.Lists.List <> fold_right def
R33358:33360 VST.msl.seplog <> emp meth
R33351:33356 VST.msl.seplog <> sepcon meth
R33280:33293 VST.msl.seplog <> sepcon_derives meth
R33315:33326 VST.msl.seplog <> derives_refl meth
R33340:33349 Coq.Lists.List <> fold_right def
R33358:33360 VST.msl.seplog <> emp meth
R33351:33356 VST.msl.seplog <> sepcon meth
R33377:33381 VST.floyd.canon <> PROPx def
R33384:33389 VST.floyd.canon <> LOCALx def
R33392:33395 VST.floyd.canon <> SEPx def
R33398:33402 VST.veric.SeparationLogic <> local def
R33440:33460 VST.floyd.canon <> fold_right_sepcon_app thm
R33440:33460 VST.floyd.canon <> fold_right_sepcon_app thm
R33440:33460 VST.floyd.canon <> fold_right_sepcon_app thm
R33498:33507 VST.msl.seplog <> andp_right meth
R33498:33507 VST.msl.seplog <> andp_right meth
R33522:33531 VST.msl.seplog <> prop_right meth
R33522:33531 VST.msl.seplog <> prop_right meth
R33546:33557 VST.msl.seplog <> derives_refl meth
R33546:33557 VST.msl.seplog <> derives_refl meth
R33567:33571 VST.floyd.canon <> PROPx def
R33574:33579 VST.floyd.canon <> LOCALx def
R33582:33585 VST.floyd.canon <> SEPx def
R33588:33592 VST.veric.SeparationLogic <> local def
R33630:33650 VST.floyd.canon <> fold_right_sepcon_app thm
R33630:33650 VST.floyd.canon <> fold_right_sepcon_app thm
R33630:33650 VST.floyd.canon <> fold_right_sepcon_app thm
R33688:33697 VST.msl.seplog <> andp_right meth
R33688:33697 VST.msl.seplog <> andp_right meth
R33712:33721 VST.msl.seplog <> prop_right meth
R33712:33721 VST.msl.seplog <> prop_right meth
R33736:33747 VST.msl.seplog <> derives_refl meth
R33736:33747 VST.msl.seplog <> derives_refl meth
R33892:33896 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R33905:33909 VST.floyd.canon <> PROPx def
R33914:33919 VST.floyd.canon <> LOCALx def
R33925:33928 VST.floyd.canon <> SEPx def
R33892:33896 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R33905:33909 VST.floyd.canon <> PROPx def
R33914:33919 VST.floyd.canon <> LOCALx def
R33925:33928 VST.floyd.canon <> SEPx def
R34153:34159 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R34161:34164 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R34194:34199 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R34165:34169 VST.floyd.canon <> PROPx def
R34174:34179 VST.floyd.canon <> LOCALx def
R34185:34188 VST.floyd.canon <> SEPx def
R34153:34159 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R34161:34164 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R34194:34199 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R34165:34169 VST.floyd.canon <> PROPx def
R34174:34179 VST.floyd.canon <> LOCALx def
R34185:34188 VST.floyd.canon <> SEPx def
R34219:34230 Coq.Lists.List <> firstn_skipn thm
R34233:34238 Coq.Lists.List <> length syndef
R34272:34277 Coq.Lists.List <> firstn def
R34280:34284 Coq.Lists.List <> skipn def
R34297:34313 VST.floyd.canon <> derives_frame_PQR thm
R33957:33968 Coq.Lists.List <> firstn_skipn thm
R33971:33976 Coq.Lists.List <> length syndef
R33996:34006 Coq.Lists.List <> app_nil_end thm
R34037:34042 Coq.Lists.List <> firstn def
R34045:34049 Coq.Lists.List <> skipn def
R34064:34078 VST.floyd.canon <> semax_frame_PQR thm
R34097:34114 VST.veric.SeparationLogic <> closed_wrt_modvars def
R34377:34378 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34379:34381 Coq.Init.Datatypes <> nil constr
R34451:34452 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34454:34455 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34456:34458 Coq.Init.Datatypes <> nil constr
R34538:34539 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34541:34542 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34544:34545 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34546:34548 Coq.Init.Datatypes <> nil constr
R34638:34639 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34641:34642 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34644:34645 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34647:34648 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34649:34651 Coq.Init.Datatypes <> nil constr
R34751:34752 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34754:34755 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34757:34758 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34760:34761 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34763:34764 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34765:34767 Coq.Init.Datatypes <> nil constr
R34877:34878 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34880:34881 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34883:34884 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34886:34887 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34889:34890 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34892:34893 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R34894:34896 Coq.Init.Datatypes <> nil constr
R35016:35017 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35019:35020 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35022:35023 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35025:35026 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35028:35029 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35031:35032 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35034:35035 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35036:35038 Coq.Init.Datatypes <> nil constr
R35168:35169 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35171:35172 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35174:35175 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35177:35178 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35180:35181 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35183:35184 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35186:35187 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35189:35190 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35191:35193 Coq.Init.Datatypes <> nil constr
R35333:35334 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35336:35337 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35339:35340 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35342:35343 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35345:35346 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35348:35349 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35351:35352 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35354:35355 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35357:35358 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35359:35361 Coq.Init.Datatypes <> nil constr
R35511:35512 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35514:35515 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35517:35518 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35520:35521 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35523:35524 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35526:35527 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35529:35530 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35532:35533 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35535:35536 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35538:35539 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35540:35542 Coq.Init.Datatypes <> nil constr
prf 35553:35562 <> gather_SEP
binder 35565:35565 <> A:443
binder 35578:35579 <> R1:444
binder 35581:35582 <> R2:445
R35607:35609 Coq.Init.Logic <> ::type_scope:x_'='_x not
R35590:35593 VST.floyd.canon <> SEPx def
R35600:35603 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R35598:35599 VST.floyd.canon <> R1:444 var
R35604:35605 VST.floyd.canon <> R2:445 var
R35595:35595 VST.floyd.canon <> A:443 var
R35610:35613 VST.floyd.canon <> SEPx def
R35640:35643 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R35616:35625 Coq.Lists.List <> fold_right def
R35638:35639 VST.floyd.canon <> R1:444 var
R35634:35636 VST.msl.seplog <> emp meth
R35627:35632 VST.msl.seplog <> sepcon meth
R35644:35645 VST.floyd.canon <> R2:445 var
R35671:35674 VST.floyd.canon <> SEPx def
R35726:35735 VST.msl.log_normalize <> emp_sepcon thm
R35726:35735 VST.msl.log_normalize <> emp_sepcon thm
R35726:35735 VST.msl.log_normalize <> emp_sepcon thm
R35752:35763 VST.msl.seplog <> sepcon_assoc meth
R35752:35763 VST.msl.seplog <> sepcon_assoc meth
R35752:35763 VST.msl.seplog <> sepcon_assoc meth
R35861:35864 VST.floyd.canon <> SEPx def
R35861:35864 VST.floyd.canon <> SEPx def
R35914:35917 VST.floyd.canon <> SEPx def
R35955:35966 Coq.Lists.List <> firstn_skipn thm
R35969:35974 Coq.Lists.List <> length syndef
R35996:36001 Coq.Init.Datatypes <> length def
R36024:36029 Coq.Lists.List <> firstn def
R36044:36048 Coq.Lists.List <> skipn def
R36070:36079 VST.floyd.canon <> gather_SEP thm
R36092:36101 Coq.Lists.List <> fold_right def
R36122:36131 VST.msl.seplog <> sepcon_emp meth
def 37486:37496 <> replace_nth
binder 37499:37499 <> A:446
R37506:37508 Coq.Init.Datatypes <> nat ind
binder 37503:37503 <> n:447
R37516:37519 Coq.Init.Datatypes <> list ind
R37521:37521 VST.floyd.canon <> A:446 var
binder 37512:37513 <> al:448
R37528:37528 VST.floyd.canon <> A:446 var
binder 37525:37525 <> x:449
R37543:37546 Coq.Init.Datatypes <> list ind
R37548:37548 VST.floyd.canon <> A:446 var
R37563:37564 VST.floyd.canon <> al:448 var
R37560:37560 VST.floyd.canon <> n:447 var
R37574:37574 Coq.Init.Datatypes <> O constr
R37579:37580 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R37588:37589 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R37587:37587 VST.floyd.canon <> x:449 var
R37590:37591 VST.floyd.canon <> al:448 var
R37596:37596 Coq.Init.Datatypes <> S constr
R37603:37604 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R37613:37616 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R37617:37627 VST.floyd.canon <> replace_nth:450 def
R37636:37636 VST.floyd.canon <> x:449 var
R37644:37646 Coq.Init.Datatypes <> nil constr
R37651:37653 Coq.Init.Datatypes <> nil constr
def 37671:37676 <> my_nth
binder 37678:37678 <> A:453
R37685:37687 Coq.Init.Datatypes <> nat ind
binder 37682:37682 <> n:454
R37695:37698 Coq.Init.Datatypes <> list ind
R37700:37700 VST.floyd.canon <> A:453 var
binder 37691:37692 <> al:455
R37713:37713 VST.floyd.canon <> A:453 var
binder 37704:37710 <> default:456
R37729:37729 VST.floyd.canon <> A:453 var
R37815:37816 VST.floyd.canon <> al:455 var
R37812:37812 VST.floyd.canon <> n:454 var
R37825:37825 Coq.Init.Datatypes <> O constr
R37829:37830 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R37842:37842 Coq.Init.Datatypes <> S constr
R37849:37850 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R37858:37863 VST.floyd.canon <> my_nth:457 def
R37872:37878 VST.floyd.canon <> default:456 var
R37885:37887 Coq.Init.Datatypes <> nil constr
R37892:37898 VST.floyd.canon <> default:456 var
prf 37912:37934 <> replace_nth_replace_nth
binder 37945:37945 <> A:460
binder 37954:37954 <> R:461
binder 37956:37956 <> n:462
R37967:37967 VST.floyd.canon <> A:460 var
binder 37959:37960 <> Rn:463
binder 37962:37964 <> Rn':464
R38011:38013 Coq.Init.Logic <> ::type_scope:x_'='_x not
R37973:37983 VST.floyd.canon <> replace_nth def
R38008:38010 VST.floyd.canon <> Rn':464 var
R37988:37998 VST.floyd.canon <> replace_nth def
R38004:38005 VST.floyd.canon <> Rn:463 var
R38002:38002 VST.floyd.canon <> R:461 var
R38000:38000 VST.floyd.canon <> n:462 var
R37985:37985 VST.floyd.canon <> n:462 var
R38014:38024 VST.floyd.canon <> replace_nth def
R38030:38032 VST.floyd.canon <> Rn':464 var
R38028:38028 VST.floyd.canon <> R:461 var
R38026:38026 VST.floyd.canon <> n:462 var
prf 38198:38218 <> replace_nth_nth_error
binder 38229:38229 <> A:465
binder 38237:38237 <> R:466
binder 38239:38239 <> n:467
R38245:38245 VST.floyd.canon <> A:465 var
binder 38242:38243 <> Rn:468
R38274:38279 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38281:38283 Coq.Init.Logic <> ::type_scope:x_'='_x not
R38280:38280 VST.floyd.canon <> R:466 var
R38284:38294 VST.floyd.canon <> replace_nth def
R38300:38301 VST.floyd.canon <> Rn:468 var
R38298:38298 VST.floyd.canon <> R:466 var
R38296:38296 VST.floyd.canon <> n:467 var
R38264:38266 Coq.Init.Logic <> ::type_scope:x_'='_x not
R38251:38259 Coq.Lists.List <> nth_error def
R38263:38263 VST.floyd.canon <> n:467 var
R38261:38261 VST.floyd.canon <> R:466 var
R38267:38270 Coq.Init.Datatypes <> Some constr
R38272:38273 VST.floyd.canon <> Rn:468 var
prf 38532:38552 <> nth_error_replace_nth
binder 38563:38563 <> A:469
binder 38571:38571 <> R:470
binder 38573:38573 <> n:471
R38583:38583 VST.floyd.canon <> A:469 var
binder 38576:38577 <> Rn:472
binder 38579:38581 <> Rn':473
R38612:38617 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38651:38653 Coq.Init.Logic <> ::type_scope:x_'='_x not
R38618:38626 Coq.Lists.List <> nth_error def
R38650:38650 VST.floyd.canon <> n:471 var
R38629:38639 VST.floyd.canon <> replace_nth def
R38645:38647 VST.floyd.canon <> Rn':473 var
R38643:38643 VST.floyd.canon <> R:470 var
R38641:38641 VST.floyd.canon <> n:471 var
R38654:38657 Coq.Init.Datatypes <> Some constr
R38659:38661 VST.floyd.canon <> Rn':473 var
R38602:38604 Coq.Init.Logic <> ::type_scope:x_'='_x not
R38589:38597 Coq.Lists.List <> nth_error def
R38601:38601 VST.floyd.canon <> n:471 var
R38599:38599 VST.floyd.canon <> R:470 var
R38605:38608 Coq.Init.Datatypes <> Some constr
R38610:38611 VST.floyd.canon <> Rn:472 var
prf 38851:38865 <> map_replace_nth
binder 38878:38878 <> A:474
binder 38880:38880 <> B:475
R38888:38891 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R38892:38892 VST.floyd.canon <> B:475 var
R38887:38887 VST.floyd.canon <> A:474 var
binder 38884:38884 <> f:476
binder 38895:38895 <> n:477
binder 38897:38897 <> R:478
binder 38899:38899 <> X:479
R38927:38936 Coq.Init.Logic <> ::type_scope:x_'='_x not
R38902:38904 Coq.Lists.List <> map def
R38909:38919 VST.floyd.canon <> replace_nth def
R38925:38925 VST.floyd.canon <> X:479 var
R38923:38923 VST.floyd.canon <> R:478 var
R38921:38921 VST.floyd.canon <> n:477 var
R38906:38906 VST.floyd.canon <> f:476 var
R38937:38947 VST.floyd.canon <> replace_nth def
R38962:38962 VST.floyd.canon <> f:476 var
R38964:38964 VST.floyd.canon <> X:479 var
R38952:38954 Coq.Lists.List <> map def
R38958:38958 VST.floyd.canon <> R:478 var
R38956:38956 VST.floyd.canon <> f:476 var
R38949:38949 VST.floyd.canon <> n:477 var
prf 39060:39078 <> replace_nth_commute
binder 39091:39091 <> A:480
binder 39094:39094 <> i:481
binder 39096:39096 <> j:482
binder 39098:39098 <> R:483
R39106:39106 VST.floyd.canon <> A:480 var
binder 39101:39101 <> a:484
binder 39103:39103 <> b:485
R39119:39125 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39161:39166 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39126:39136 VST.floyd.canon <> replace_nth def
R39160:39160 VST.floyd.canon <> a:484 var
R39141:39151 VST.floyd.canon <> replace_nth def
R39157:39157 VST.floyd.canon <> b:485 var
R39155:39155 VST.floyd.canon <> R:483 var
R39153:39153 VST.floyd.canon <> j:482 var
R39138:39138 VST.floyd.canon <> i:481 var
R39167:39177 VST.floyd.canon <> replace_nth def
R39201:39201 VST.floyd.canon <> b:485 var
R39182:39192 VST.floyd.canon <> replace_nth def
R39198:39198 VST.floyd.canon <> a:484 var
R39196:39196 VST.floyd.canon <> R:483 var
R39194:39194 VST.floyd.canon <> i:481 var
R39179:39179 VST.floyd.canon <> j:482 var
R39114:39117 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R39113:39113 VST.floyd.canon <> i:481 var
R39118:39118 VST.floyd.canon <> j:482 var
binder 39288:39288 <> i:486
binder 39290:39290 <> j:487
binder 39292:39292 <> R:488
binder 39295:39295 <> a:489
binder 39297:39297 <> b:490
R39326:39343 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39379:39381 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39344:39354 VST.floyd.canon <> replace_nth def
R39378:39378 VST.floyd.canon <> a:489 var
R39359:39369 VST.floyd.canon <> replace_nth def
R39375:39375 VST.floyd.canon <> b:490 var
R39373:39373 VST.floyd.canon <> R:488 var
R39371:39371 VST.floyd.canon <> j:487 var
R39356:39356 VST.floyd.canon <> i:486 var
R39382:39392 VST.floyd.canon <> replace_nth def
R39416:39416 VST.floyd.canon <> b:490 var
R39397:39407 VST.floyd.canon <> replace_nth def
R39413:39413 VST.floyd.canon <> a:489 var
R39411:39411 VST.floyd.canon <> R:488 var
R39409:39409 VST.floyd.canon <> i:486 var
R39394:39394 VST.floyd.canon <> j:487 var
R39319:39319 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R39318:39318 VST.floyd.canon <> i:486 var
R39320:39320 VST.floyd.canon <> j:487 var
binder 39288:39288 <> i:491
binder 39290:39290 <> j:492
binder 39292:39292 <> R:493
binder 39295:39295 <> a:494
binder 39297:39297 <> b:495
R39326:39343 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39379:39381 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39344:39354 VST.floyd.canon <> replace_nth def
R39378:39378 VST.floyd.canon <> a:494 var
R39359:39369 VST.floyd.canon <> replace_nth def
R39375:39375 VST.floyd.canon <> b:495 var
R39373:39373 VST.floyd.canon <> R:493 var
R39371:39371 VST.floyd.canon <> j:492 var
R39356:39356 VST.floyd.canon <> i:491 var
R39382:39392 VST.floyd.canon <> replace_nth def
R39416:39416 VST.floyd.canon <> b:495 var
R39397:39407 VST.floyd.canon <> replace_nth def
R39413:39413 VST.floyd.canon <> a:494 var
R39411:39411 VST.floyd.canon <> R:493 var
R39409:39409 VST.floyd.canon <> i:491 var
R39394:39394 VST.floyd.canon <> j:492 var
R39319:39319 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R39318:39318 VST.floyd.canon <> i:491 var
R39320:39320 VST.floyd.canon <> j:492 var
R39520:39523 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R39517:39517 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R39526:39526 Coq.Init.Peano <> ::nat_scope:x_'>'_x not
R39520:39523 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R39517:39517 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R39526:39526 Coq.Init.Peano <> ::nat_scope:x_'>'_x not
prf 39619:39640 <> nth_error_replace_nth'
binder 39653:39653 <> A:496
binder 39656:39656 <> i:497
binder 39658:39658 <> j:498
binder 39660:39660 <> R:499
R39665:39665 VST.floyd.canon <> A:496 var
binder 39663:39663 <> a:500
R39683:39686 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39718:39720 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39687:39695 Coq.Lists.List <> nth_error def
R39717:39717 VST.floyd.canon <> j:498 var
R39698:39708 VST.floyd.canon <> replace_nth def
R39714:39714 VST.floyd.canon <> a:500 var
R39712:39712 VST.floyd.canon <> R:499 var
R39710:39710 VST.floyd.canon <> i:497 var
R39721:39729 Coq.Lists.List <> nth_error def
R39733:39733 VST.floyd.canon <> j:498 var
R39731:39731 VST.floyd.canon <> R:499 var
R39673:39676 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R39672:39672 VST.floyd.canon <> i:497 var
R39677:39677 VST.floyd.canon <> j:498 var
prf 39826:39837 <> replace_SEP'
binder 39848:39848 <> n:501
binder 39850:39851 <> R':502
binder 39853:39857 <> Espec:503
R39864:39872 VST.veric.mpred <> compspecs class
binder 39860:39861 <> cs:504
binder 39875:39879 <> Delta:505
binder 39881:39881 <> P:506
binder 39883:39883 <> Q:507
binder 39885:39886 <> Rs:508
binder 39888:39888 <> c:509
binder 39890:39893 <> Post:510
R39969:39973 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R40052:40056 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R40058:40062 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R40112:40115 VST.floyd.canon <> Post:510 var
R40110:40110 VST.floyd.canon <> c:509 var
R40080:40084 VST.floyd.canon <> PROPx def
R40089:40094 VST.floyd.canon <> LOCALx def
R40099:40102 VST.floyd.canon <> SEPx def
R40104:40105 VST.floyd.canon <> Rs:508 var
R40096:40096 VST.floyd.canon <> Q:507 var
R40086:40086 VST.floyd.canon <> P:506 var
R40073:40077 VST.floyd.canon <> Delta:505 var
R40067:40071 VST.floyd.canon <> Espec:503 var
R40064:40065 VST.floyd.canon <> cs:504 var
R39975:39979 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R40048:40051 VST.floyd.canon <> Post:510 var
R40046:40046 VST.floyd.canon <> c:509 var
R39997:40001 VST.floyd.canon <> PROPx def
R40006:40011 VST.floyd.canon <> LOCALx def
R40016:40019 VST.floyd.canon <> SEPx def
R40022:40032 VST.floyd.canon <> replace_nth def
R40039:40040 VST.floyd.canon <> R':502 var
R40036:40037 VST.floyd.canon <> Rs:508 var
R40034:40034 VST.floyd.canon <> n:501 var
R40013:40013 VST.floyd.canon <> Q:507 var
R40003:40003 VST.floyd.canon <> P:506 var
R39990:39994 VST.floyd.canon <> Delta:505 var
R39984:39988 VST.floyd.canon <> Espec:503 var
R39981:39982 VST.floyd.canon <> cs:504 var
R39897:39903 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R39909:39910 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R39961:39965 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R39904:39908 VST.floyd.canon <> Delta:505 var
R39911:39915 VST.floyd.canon <> PROPx def
R39920:39925 VST.floyd.canon <> LOCALx def
R39930:39933 VST.floyd.canon <> SEPx def
R39950:39954 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R39936:39941 VST.floyd.canon <> my_nth def
R39948:39949 VST.msl.seplog <> TT meth
R39945:39946 VST.floyd.canon <> Rs:508 var
R39943:39943 VST.floyd.canon <> n:501 var
R39955:39957 Coq.Init.Datatypes <> nil constr
R39927:39927 VST.floyd.canon <> Q:507 var
R39917:39917 VST.floyd.canon <> P:506 var
R39966:39966 VST.veric.lift LiftNotation :::'`'_x not
R39967:39968 VST.floyd.canon <> R':502 var
R40140:40148 VST.floyd.canon <> semax_pre thm
R40140:40148 VST.floyd.canon <> semax_pre thm
R40184:40188 VST.floyd.canon <> PROPx def
R40191:40196 VST.floyd.canon <> LOCALx def
R40199:40202 VST.floyd.canon <> SEPx def
R40248:40252 VST.veric.SeparationLogic <> local def
R40255:40259 VST.veric.mpred <> lift1 def
R40330:40343 VST.msl.log_normalize <> prop_true_andp thm
R40330:40343 VST.msl.log_normalize <> prop_true_andp thm
R40330:40343 VST.msl.log_normalize <> prop_true_andp thm
R40330:40343 VST.msl.log_normalize <> prop_true_andp thm
R40330:40343 VST.msl.log_normalize <> prop_true_andp thm
R40330:40343 VST.msl.log_normalize <> prop_true_andp thm
R40367:40376 VST.msl.seplog <> sepcon_emp meth
R40367:40376 VST.msl.seplog <> sepcon_emp meth
R40367:40376 VST.msl.seplog <> sepcon_emp meth
R40390:40399 VST.msl.seplog <> andp_right meth
R40390:40399 VST.msl.seplog <> andp_right meth
R40414:40423 VST.msl.seplog <> prop_right meth
R40414:40423 VST.msl.seplog <> prop_right meth
R40499:40512 VST.msl.seplog <> sepcon_derives meth
R40499:40512 VST.msl.seplog <> sepcon_derives meth
R40499:40512 VST.msl.seplog <> sepcon_derives meth
prf 40533:40545 <> replace_SEP''
binder 40556:40556 <> n:511
binder 40558:40559 <> R':512
binder 40561:40565 <> Delta:513
binder 40567:40567 <> P:514
binder 40569:40569 <> Q:515
binder 40571:40572 <> Rs:516
binder 40574:40577 <> Post:517
R40653:40657 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R40728:40732 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R40733:40739 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R40745:40746 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R40775:40779 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R40740:40744 VST.floyd.canon <> Delta:513 var
R40747:40751 VST.floyd.canon <> PROPx def
R40756:40761 VST.floyd.canon <> LOCALx def
R40766:40769 VST.floyd.canon <> SEPx def
R40771:40772 VST.floyd.canon <> Rs:516 var
R40763:40763 VST.floyd.canon <> Q:515 var
R40753:40753 VST.floyd.canon <> P:514 var
R40780:40783 VST.floyd.canon <> Post:517 var
R40658:40664 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R40670:40671 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R40719:40723 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R40665:40669 VST.floyd.canon <> Delta:513 var
R40672:40676 VST.floyd.canon <> PROPx def
R40681:40686 VST.floyd.canon <> LOCALx def
R40691:40694 VST.floyd.canon <> SEPx def
R40697:40707 VST.floyd.canon <> replace_nth def
R40714:40715 VST.floyd.canon <> R':512 var
R40711:40712 VST.floyd.canon <> Rs:516 var
R40709:40709 VST.floyd.canon <> n:511 var
R40688:40688 VST.floyd.canon <> Q:515 var
R40678:40678 VST.floyd.canon <> P:514 var
R40724:40727 VST.floyd.canon <> Post:517 var
R40581:40587 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R40593:40594 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R40645:40649 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R40588:40592 VST.floyd.canon <> Delta:513 var
R40595:40599 VST.floyd.canon <> PROPx def
R40604:40609 VST.floyd.canon <> LOCALx def
R40614:40617 VST.floyd.canon <> SEPx def
R40634:40638 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R40620:40625 VST.floyd.canon <> my_nth def
R40632:40633 VST.msl.seplog <> TT meth
R40629:40630 VST.floyd.canon <> Rs:516 var
R40627:40627 VST.floyd.canon <> n:511 var
R40639:40641 Coq.Init.Datatypes <> nil constr
R40611:40611 VST.floyd.canon <> Q:515 var
R40601:40601 VST.floyd.canon <> P:514 var
R40650:40650 VST.veric.lift LiftNotation :::'`'_x not
R40651:40652 VST.floyd.canon <> R':512 var
R40808:40820 VST.msl.seplog <> derives_trans meth
R40808:40820 VST.msl.seplog <> derives_trans meth
R40856:40860 VST.floyd.canon <> PROPx def
R40863:40868 VST.floyd.canon <> LOCALx def
R40871:40874 VST.floyd.canon <> SEPx def
R40920:40924 VST.veric.SeparationLogic <> local def
R40927:40931 VST.veric.mpred <> lift1 def
R41002:41015 VST.msl.log_normalize <> prop_true_andp thm
R41002:41015 VST.msl.log_normalize <> prop_true_andp thm
R41002:41015 VST.msl.log_normalize <> prop_true_andp thm
R41002:41015 VST.msl.log_normalize <> prop_true_andp thm
R41002:41015 VST.msl.log_normalize <> prop_true_andp thm
R41002:41015 VST.msl.log_normalize <> prop_true_andp thm
R41039:41048 VST.msl.seplog <> sepcon_emp meth
R41039:41048 VST.msl.seplog <> sepcon_emp meth
R41039:41048 VST.msl.seplog <> sepcon_emp meth
R41062:41071 VST.msl.seplog <> andp_right meth
R41062:41071 VST.msl.seplog <> andp_right meth
R41086:41095 VST.msl.seplog <> prop_right meth
R41086:41095 VST.msl.seplog <> prop_right meth
R41171:41184 VST.msl.seplog <> sepcon_derives meth
R41171:41184 VST.msl.seplog <> sepcon_derives meth
R41171:41184 VST.msl.seplog <> sepcon_derives meth
R41268:41279 VST.floyd.canon <> replace_SEP' thm
R41282:41289 Coq.ZArith.BinInt Z to_nat def
R41306:41318 VST.floyd.canon <> replace_SEP'' thm
R41321:41328 Coq.ZArith.BinInt Z to_nat def
R41347:41352 VST.floyd.canon <> my_nth def
R41354:41364 VST.floyd.canon <> replace_nth def
R41524:41535 VST.floyd.canon <> replace_SEP' thm
R41538:41545 Coq.ZArith.BinInt Z to_nat def
R41562:41574 VST.floyd.canon <> replace_SEP'' thm
R41577:41584 Coq.ZArith.BinInt Z to_nat def
R41603:41608 VST.floyd.canon <> my_nth def
R41610:41620 VST.floyd.canon <> replace_nth def
prf 41715:41731 <> replace_SEP'_bupd
binder 41742:41742 <> n:518
binder 41744:41745 <> R':519
binder 41747:41751 <> Espec:520
R41758:41766 VST.veric.mpred <> compspecs class
binder 41754:41755 <> cs:521
binder 41769:41773 <> Delta:522
binder 41775:41775 <> P:523
binder 41777:41777 <> Q:524
binder 41779:41780 <> Rs:525
binder 41782:41782 <> c:526
binder 41784:41787 <> Post:527
R41870:41874 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R41953:41957 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R41959:41963 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R42013:42016 VST.floyd.canon <> Post:527 var
R42011:42011 VST.floyd.canon <> c:526 var
R41981:41985 VST.floyd.canon <> PROPx def
R41990:41995 VST.floyd.canon <> LOCALx def
R42000:42003 VST.floyd.canon <> SEPx def
R42005:42006 VST.floyd.canon <> Rs:525 var
R41997:41997 VST.floyd.canon <> Q:524 var
R41987:41987 VST.floyd.canon <> P:523 var
R41974:41978 VST.floyd.canon <> Delta:522 var
R41968:41972 VST.floyd.canon <> Espec:520 var
R41965:41966 VST.floyd.canon <> cs:521 var
R41876:41880 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R41949:41952 VST.floyd.canon <> Post:527 var
R41947:41947 VST.floyd.canon <> c:526 var
R41898:41902 VST.floyd.canon <> PROPx def
R41907:41912 VST.floyd.canon <> LOCALx def
R41917:41920 VST.floyd.canon <> SEPx def
R41923:41933 VST.floyd.canon <> replace_nth def
R41940:41941 VST.floyd.canon <> R':519 var
R41937:41938 VST.floyd.canon <> Rs:525 var
R41935:41935 VST.floyd.canon <> n:518 var
R41914:41914 VST.floyd.canon <> Q:524 var
R41904:41904 VST.floyd.canon <> P:523 var
R41891:41895 VST.floyd.canon <> Delta:522 var
R41885:41889 VST.floyd.canon <> Espec:520 var
R41882:41883 VST.floyd.canon <> cs:521 var
R41791:41797 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R41803:41804 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R41855:41859 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R41798:41802 VST.floyd.canon <> Delta:522 var
R41805:41809 VST.floyd.canon <> PROPx def
R41814:41819 VST.floyd.canon <> LOCALx def
R41824:41827 VST.floyd.canon <> SEPx def
R41844:41848 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R41830:41835 VST.floyd.canon <> my_nth def
R41842:41843 VST.msl.seplog <> TT meth
R41839:41840 VST.floyd.canon <> Rs:525 var
R41837:41837 VST.floyd.canon <> n:518 var
R41849:41851 Coq.Init.Datatypes <> nil constr
R41821:41821 VST.floyd.canon <> Q:524 var
R41811:41811 VST.floyd.canon <> P:523 var
R41860:41861 VST.veric.lift LiftNotation :::'`('_x_')' not
R41869:41869 VST.veric.lift LiftNotation :::'`('_x_')' not
R41862:41866 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R41867:41868 VST.floyd.canon <> R':519 var
R42041:42054 VST.floyd.canon <> semax_pre_bupd thm
R42041:42054 VST.floyd.canon <> semax_pre_bupd thm
R42090:42094 VST.floyd.canon <> PROPx def
R42097:42102 VST.floyd.canon <> LOCALx def
R42105:42108 VST.floyd.canon <> SEPx def
R42154:42158 VST.veric.SeparationLogic <> local def
R42161:42165 VST.veric.mpred <> lift1 def
R42236:42249 VST.msl.log_normalize <> prop_true_andp thm
R42236:42249 VST.msl.log_normalize <> prop_true_andp thm
R42236:42249 VST.msl.log_normalize <> prop_true_andp thm
R42236:42249 VST.msl.log_normalize <> prop_true_andp thm
R42236:42249 VST.msl.log_normalize <> prop_true_andp thm
R42236:42249 VST.msl.log_normalize <> prop_true_andp thm
R42273:42282 VST.msl.seplog <> sepcon_emp meth
R42273:42282 VST.msl.seplog <> sepcon_emp meth
R42273:42282 VST.msl.seplog <> sepcon_emp meth
R42298:42311 VST.msl.log_normalize <> prop_true_andp thm
R42298:42311 VST.msl.log_normalize <> prop_true_andp thm
R42298:42311 VST.msl.log_normalize <> prop_true_andp thm
R42400:42409 VST.msl.ghost_seplog <> bupd_intro meth
R42400:42409 VST.msl.ghost_seplog <> bupd_intro meth
R42400:42409 VST.msl.ghost_seplog <> bupd_intro meth
R42400:42409 VST.msl.ghost_seplog <> bupd_intro meth
R42400:42409 VST.msl.ghost_seplog <> bupd_intro meth
R42428:42440 VST.msl.seplog <> derives_trans meth
R42443:42454 VST.msl.ghost_seplog <> bupd_frame_r meth
R42463:42476 VST.msl.seplog <> sepcon_derives meth
R42428:42440 VST.msl.seplog <> derives_trans meth
R42443:42454 VST.msl.ghost_seplog <> bupd_frame_r meth
R42463:42476 VST.msl.seplog <> sepcon_derives meth
R42494:42506 VST.msl.seplog <> derives_trans meth
R42509:42520 VST.msl.ghost_seplog <> bupd_frame_l thm
R42529:42542 VST.msl.seplog <> sepcon_derives meth
R42494:42506 VST.msl.seplog <> derives_trans meth
R42509:42520 VST.msl.ghost_seplog <> bupd_frame_l thm
R42529:42542 VST.msl.seplog <> sepcon_derives meth
prf 42563:42580 <> replace_SEP''_bupd
binder 42591:42591 <> n:528
binder 42593:42594 <> R':529
binder 42596:42600 <> Delta:530
binder 42602:42602 <> P:531
binder 42604:42604 <> Q:532
binder 42606:42607 <> Rs:533
binder 42609:42612 <> Post:534
R42695:42699 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R42775:42779 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R42780:42786 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R42792:42793 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R42822:42826 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R42787:42791 VST.floyd.canon <> Delta:530 var
R42794:42798 VST.floyd.canon <> PROPx def
R42803:42808 VST.floyd.canon <> LOCALx def
R42813:42816 VST.floyd.canon <> SEPx def
R42818:42819 VST.floyd.canon <> Rs:533 var
R42810:42810 VST.floyd.canon <> Q:532 var
R42800:42800 VST.floyd.canon <> P:531 var
R42827:42831 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R42832:42835 VST.floyd.canon <> Post:534 var
R42700:42706 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R42712:42713 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R42761:42765 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R42707:42711 VST.floyd.canon <> Delta:530 var
R42714:42718 VST.floyd.canon <> PROPx def
R42723:42728 VST.floyd.canon <> LOCALx def
R42733:42736 VST.floyd.canon <> SEPx def
R42739:42749 VST.floyd.canon <> replace_nth def
R42756:42757 VST.floyd.canon <> R':529 var
R42753:42754 VST.floyd.canon <> Rs:533 var
R42751:42751 VST.floyd.canon <> n:528 var
R42730:42730 VST.floyd.canon <> Q:532 var
R42720:42720 VST.floyd.canon <> P:531 var
R42766:42770 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R42771:42774 VST.floyd.canon <> Post:534 var
R42616:42622 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R42628:42629 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R42680:42684 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R42623:42627 VST.floyd.canon <> Delta:530 var
R42630:42634 VST.floyd.canon <> PROPx def
R42639:42644 VST.floyd.canon <> LOCALx def
R42649:42652 VST.floyd.canon <> SEPx def
R42669:42673 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R42655:42660 VST.floyd.canon <> my_nth def
R42667:42668 VST.msl.seplog <> TT meth
R42664:42665 VST.floyd.canon <> Rs:533 var
R42662:42662 VST.floyd.canon <> n:528 var
R42674:42676 Coq.Init.Datatypes <> nil constr
R42646:42646 VST.floyd.canon <> Q:532 var
R42636:42636 VST.floyd.canon <> P:531 var
R42685:42686 VST.veric.lift LiftNotation :::'`('_x_')' not
R42694:42694 VST.veric.lift LiftNotation :::'`('_x_')' not
R42687:42691 VST.msl.ghost_seplog <> ::logic:'|==>'_x not
R42692:42693 VST.floyd.canon <> R':529 var
R42860:42872 VST.msl.seplog <> derives_trans meth
R42875:42884 VST.msl.ghost_seplog <> bupd_trans meth
R42860:42872 VST.msl.seplog <> derives_trans meth
R42875:42884 VST.msl.ghost_seplog <> bupd_trans meth
R42894:42906 VST.msl.seplog <> derives_trans meth
R42919:42927 VST.msl.ghost_seplog <> bupd_mono meth
R42894:42906 VST.msl.seplog <> derives_trans meth
R42919:42927 VST.msl.ghost_seplog <> bupd_mono meth
R42953:42957 VST.floyd.canon <> PROPx def
R42960:42965 VST.floyd.canon <> LOCALx def
R42968:42971 VST.floyd.canon <> SEPx def
R43017:43021 VST.veric.SeparationLogic <> local def
R43024:43028 VST.veric.mpred <> lift1 def
R43099:43112 VST.msl.log_normalize <> prop_true_andp thm
R43099:43112 VST.msl.log_normalize <> prop_true_andp thm
R43099:43112 VST.msl.log_normalize <> prop_true_andp thm
R43099:43112 VST.msl.log_normalize <> prop_true_andp thm
R43099:43112 VST.msl.log_normalize <> prop_true_andp thm
R43099:43112 VST.msl.log_normalize <> prop_true_andp thm
R43136:43145 VST.msl.seplog <> sepcon_emp meth
R43136:43145 VST.msl.seplog <> sepcon_emp meth
R43136:43145 VST.msl.seplog <> sepcon_emp meth
R43162:43175 VST.msl.log_normalize <> prop_true_andp thm
R43162:43175 VST.msl.log_normalize <> prop_true_andp thm
R43162:43175 VST.msl.log_normalize <> prop_true_andp thm
R43162:43175 VST.msl.log_normalize <> prop_true_andp thm
R43264:43273 VST.msl.ghost_seplog <> bupd_intro meth
R43264:43273 VST.msl.ghost_seplog <> bupd_intro meth
R43264:43273 VST.msl.ghost_seplog <> bupd_intro meth
R43264:43273 VST.msl.ghost_seplog <> bupd_intro meth
R43264:43273 VST.msl.ghost_seplog <> bupd_intro meth
R43292:43304 VST.msl.seplog <> derives_trans meth
R43307:43318 VST.msl.ghost_seplog <> bupd_frame_r meth
R43327:43340 VST.msl.seplog <> sepcon_derives meth
R43292:43304 VST.msl.seplog <> derives_trans meth
R43307:43318 VST.msl.ghost_seplog <> bupd_frame_r meth
R43327:43340 VST.msl.seplog <> sepcon_derives meth
R43358:43370 VST.msl.seplog <> derives_trans meth
R43373:43384 VST.msl.ghost_seplog <> bupd_frame_l thm
R43393:43406 VST.msl.seplog <> sepcon_derives meth
R43358:43370 VST.msl.seplog <> derives_trans meth
R43373:43384 VST.msl.ghost_seplog <> bupd_frame_l thm
R43393:43406 VST.msl.seplog <> sepcon_derives meth
R43492:43508 VST.floyd.canon <> replace_SEP'_bupd thm
R43511:43518 Coq.ZArith.BinInt Z to_nat def
R43535:43552 VST.floyd.canon <> replace_SEP''_bupd thm
R43555:43562 Coq.ZArith.BinInt Z to_nat def
R43581:43586 VST.floyd.canon <> my_nth def
R43588:43598 VST.floyd.canon <> replace_nth def
R43760:43776 VST.floyd.canon <> replace_SEP'_bupd thm
R43779:43786 Coq.ZArith.BinInt Z to_nat def
R43803:43820 VST.floyd.canon <> replace_SEP''_bupd thm
R43823:43830 Coq.ZArith.BinInt Z to_nat def
R43849:43854 VST.floyd.canon <> my_nth def
R43856:43866 VST.floyd.canon <> replace_nth def
R44004:44008 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R44004:44008 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R44101:44109 VST.floyd.canon <> semax_pre thm
prf 44145:44167 <> semax_extract_PROP_True
binder 44179:44183 <> Espec:535
R44190:44198 VST.veric.mpred <> compspecs class
binder 44186:44187 <> cs:536
binder 44201:44205 <> Delta:537
binder 44208:44209 <> PP:538
binder 44218:44218 <> P:539
binder 44220:44221 <> QR:540
binder 44223:44223 <> c:541
binder 44225:44228 <> Post:542
R44241:44252 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44294:44304 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44306:44310 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R44348:44351 VST.floyd.canon <> Post:542 var
R44346:44346 VST.floyd.canon <> c:541 var
R44328:44332 VST.floyd.canon <> PROPx def
R44342:44343 VST.floyd.canon <> QR:540 var
R44337:44338 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R44335:44336 VST.floyd.canon <> PP:538 var
R44339:44339 VST.floyd.canon <> P:539 var
R44321:44325 VST.floyd.canon <> Delta:537 var
R44315:44319 VST.floyd.canon <> Espec:535 var
R44312:44313 VST.floyd.canon <> cs:536 var
R44254:44258 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R44290:44293 VST.floyd.canon <> Post:542 var
R44288:44288 VST.floyd.canon <> c:541 var
R44276:44280 VST.floyd.canon <> PROPx def
R44284:44285 VST.floyd.canon <> QR:540 var
R44282:44282 VST.floyd.canon <> P:539 var
R44269:44273 VST.floyd.canon <> Delta:537 var
R44263:44267 VST.floyd.canon <> Espec:535 var
R44260:44261 VST.floyd.canon <> cs:536 var
R44239:44240 VST.floyd.canon <> PP:538 var
R44398:44402 VST.floyd.canon <> PROPx def
R44375:44390 VST.floyd.canon <> semax_pre_simple thm
R44398:44402 VST.floyd.canon <> PROPx def
R44375:44390 VST.floyd.canon <> semax_pre_simple thm
R44442:44446 VST.floyd.canon <> PROPx def
prf 44525:44542 <> semax_extract_PROP
binder 44554:44558 <> Espec:543
R44565:44573 VST.veric.mpred <> compspecs class
binder 44561:44562 <> cs:544
binder 44576:44580 <> Delta:545
binder 44583:44584 <> PP:546
binder 44593:44593 <> P:547
binder 44595:44596 <> QR:548
binder 44598:44598 <> c:549
binder 44600:44603 <> Post:550
R44613:44613 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44661:44672 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44674:44678 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R44716:44719 VST.floyd.canon <> Post:550 var
R44714:44714 VST.floyd.canon <> c:549 var
R44696:44700 VST.floyd.canon <> PROPx def
R44710:44711 VST.floyd.canon <> QR:548 var
R44705:44706 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R44703:44704 VST.floyd.canon <> PP:546 var
R44707:44707 VST.floyd.canon <> P:547 var
R44689:44693 VST.floyd.canon <> Delta:545 var
R44683:44687 VST.floyd.canon <> Espec:543 var
R44680:44681 VST.floyd.canon <> cs:544 var
R44616:44619 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44621:44625 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R44657:44660 VST.floyd.canon <> Post:550 var
R44655:44655 VST.floyd.canon <> c:549 var
R44643:44647 VST.floyd.canon <> PROPx def
R44651:44652 VST.floyd.canon <> QR:548 var
R44649:44649 VST.floyd.canon <> P:547 var
R44636:44640 VST.floyd.canon <> Delta:545 var
R44630:44634 VST.floyd.canon <> Espec:543 var
R44627:44628 VST.floyd.canon <> cs:544 var
R44614:44615 VST.floyd.canon <> PP:546 var
R44770:44773 VST.msl.seplog <> ::logic:x_'&&'_x not
R44766:44767 VST.msl.seplog <> ::logic:'!!'_x not
R44774:44778 VST.floyd.canon <> PROPx def
R44743:44758 VST.floyd.canon <> semax_pre_simple thm
R44770:44773 VST.msl.seplog <> ::logic:x_'&&'_x not
R44766:44767 VST.msl.seplog <> ::logic:'!!'_x not
R44774:44778 VST.floyd.canon <> PROPx def
R44743:44758 VST.floyd.canon <> semax_pre_simple thm
R44805:44809 VST.floyd.canon <> PROPx def
R44882:44891 VST.msl.seplog <> andp_right meth
R44882:44891 VST.msl.seplog <> andp_right meth
R44906:44915 VST.msl.seplog <> prop_right meth
R44906:44915 VST.msl.seplog <> prop_right meth
R44930:44947 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R44930:44947 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
prf 44968:44985 <> PROP_later_derives
binder 44996:44996 <> P:551
binder 44998:44999 <> QR:552
binder 45001:45003 <> QR':553
R45018:45025 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45036:45040 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R45026:45030 VST.floyd.canon <> PROPx def
R45034:45035 VST.floyd.canon <> QR:552 var
R45032:45032 VST.floyd.canon <> P:551 var
R45041:45043 VST.msl.seplog <> ::logic:'|>'_x not
R45044:45048 VST.floyd.canon <> PROPx def
R45052:45054 VST.floyd.canon <> QR':553 var
R45050:45050 VST.floyd.canon <> P:551 var
R45008:45012 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R45006:45007 VST.floyd.canon <> QR:552 var
R45013:45014 VST.msl.seplog <> ::logic:'|>'_x not
R45015:45017 VST.floyd.canon <> QR':553 var
R45079:45083 VST.floyd.canon <> PROPx def
prf 45109:45127 <> LOCAL_later_derives
binder 45138:45138 <> Q:554
binder 45140:45140 <> R:555
binder 45142:45143 <> R':556
R45156:45159 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45170:45174 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R45160:45165 VST.floyd.canon <> LOCALx def
R45169:45169 VST.floyd.canon <> R:555 var
R45167:45167 VST.floyd.canon <> Q:554 var
R45175:45177 VST.msl.seplog <> ::logic:'|>'_x not
R45178:45183 VST.floyd.canon <> LOCALx def
R45187:45188 VST.floyd.canon <> R':556 var
R45185:45185 VST.floyd.canon <> Q:554 var
R45147:45151 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R45146:45146 VST.floyd.canon <> R:555 var
R45152:45153 VST.msl.seplog <> ::logic:'|>'_x not
R45154:45155 VST.floyd.canon <> R':556 var
R45205:45210 VST.floyd.canon <> LOCALx def
R45240:45249 VST.msl.log_normalize <> later_andp thm
R45240:45249 VST.msl.log_normalize <> later_andp thm
R45240:45249 VST.msl.log_normalize <> later_andp thm
R45258:45269 VST.msl.log_normalize <> andp_derives thm
R45258:45269 VST.msl.log_normalize <> andp_derives thm
R45284:45292 VST.msl.seplog <> now_later meth
R45284:45292 VST.msl.seplog <> now_later meth
prf 45307:45323 <> SEP_later_derives
binder 45335:45335 <> P:557
binder 45337:45337 <> Q:558
binder 45339:45340 <> P':559
binder 45342:45343 <> Q':560
R45363:45372 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45394:45403 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45415:45419 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R45404:45407 VST.floyd.canon <> SEPx def
R45411:45412 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R45410:45410 VST.floyd.canon <> P:557 var
R45413:45413 VST.floyd.canon <> Q:558 var
R45420:45422 VST.msl.seplog <> ::logic:'|>'_x not
R45423:45426 VST.floyd.canon <> SEPx def
R45431:45432 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R45429:45430 VST.floyd.canon <> P':559 var
R45433:45434 VST.floyd.canon <> Q':560 var
R45379:45383 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R45373:45376 VST.floyd.canon <> SEPx def
R45378:45378 VST.floyd.canon <> Q:558 var
R45384:45386 VST.msl.seplog <> ::logic:'|>'_x not
R45387:45390 VST.floyd.canon <> SEPx def
R45392:45393 VST.floyd.canon <> Q':560 var
R45353:45357 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R45352:45352 VST.floyd.canon <> P:557 var
R45358:45360 VST.msl.seplog <> ::logic:'|>'_x not
R45361:45362 VST.floyd.canon <> P':559 var
R45452:45455 VST.floyd.canon <> SEPx def
R45532:45543 VST.msl.seplog <> later_sepcon meth
R45532:45543 VST.msl.seplog <> later_sepcon meth
R45532:45543 VST.msl.seplog <> later_sepcon meth
R45552:45565 VST.msl.seplog <> sepcon_derives meth
R45552:45565 VST.msl.seplog <> sepcon_derives meth
prf 45667:45677 <> local_lift0
binder 45687:45687 <> P:561
R45705:45707 Coq.Init.Logic <> ::type_scope:x_'='_x not
R45690:45694 VST.veric.SeparationLogic <> local def
R45697:45701 VST.veric.mpred <> lift0 def
R45703:45703 VST.floyd.canon <> P:561 var
R45708:45711 VST.msl.seplog <> prop meth
R45713:45713 VST.floyd.canon <> P:561 var
R45783:45793 VST.floyd.canon <> local_lift0 thm
prf 45810:45828 <> extract_exists_post
R45848:45857 VST.veric.juicy_extspec <> OracleKind class
binder 45841:45845 <> Espec:562
R45865:45873 VST.veric.mpred <> compspecs class
binder 45861:45862 <> cs:563
binder 45877:45877 <> A:564
R45890:45890 VST.floyd.canon <> A:564 var
binder 45887:45887 <> x:565
binder 45893:45897 <> Delta:566
R45917:45920 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45921:45925 VST.veric.mpred <> mpred def
R45910:45916 VST.veric.mpred <> environ ind
binder 45907:45907 <> P:567
binder 45928:45928 <> c:568
R45935:45938 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45946:45949 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45950:45954 VST.veric.mpred <> mpred def
R45939:45945 VST.veric.mpred <> environ ind
R45934:45934 VST.floyd.canon <> A:564 var
binder 45931:45931 <> R:569
R46001:46006 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46007:46011 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46024:46040 VST.veric.SeparationLogic <> normal_ret_assert def
R46043:46045 VST.msl.seplog <> exp meth
R46047:46047 VST.floyd.canon <> R:569 var
R46021:46021 VST.floyd.canon <> c:568 var
R46019:46019 VST.floyd.canon <> P:567 var
R46013:46017 VST.floyd.canon <> Delta:566 var
R45960:45964 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R45977:45993 VST.veric.SeparationLogic <> normal_ret_assert def
R45996:45996 VST.floyd.canon <> R:569 var
R45998:45998 VST.floyd.canon <> x:565 var
R45974:45974 VST.floyd.canon <> c:568 var
R45972:45972 VST.floyd.canon <> P:567 var
R45966:45970 VST.floyd.canon <> Delta:566 var
R46074:46087 VST.floyd.canon <> semax_pre_post thm
R46118:46127 VST.msl.seplog <> andp_left2 meth
R46146:46157 VST.msl.seplog <> derives_refl meth
R46074:46087 VST.floyd.canon <> semax_pre_post thm
R46118:46127 VST.msl.seplog <> andp_left2 meth
R46118:46127 VST.msl.seplog <> andp_left2 meth
R46118:46127 VST.msl.seplog <> andp_left2 meth
R46118:46127 VST.msl.seplog <> andp_left2 meth
R46118:46127 VST.msl.seplog <> andp_left2 meth
R46146:46157 VST.msl.seplog <> derives_refl meth
R46146:46157 VST.msl.seplog <> derives_refl meth
R46146:46157 VST.msl.seplog <> derives_refl meth
R46146:46157 VST.msl.seplog <> derives_refl meth
R46166:46174 VST.msl.seplog <> exp_right meth
R46201:46212 VST.msl.seplog <> derives_refl meth
R46166:46174 VST.msl.seplog <> exp_right meth
R46201:46212 VST.msl.seplog <> derives_refl meth
R46272:46289 VST.floyd.base <> extract_exists_pre def
prf 46472:46492 <> extract_exists_in_SEP
binder 46505:46505 <> A:570
R46514:46517 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46518:46522 VST.veric.mpred <> mpred def
R46513:46513 VST.floyd.canon <> A:570 var
binder 46509:46510 <> R1:571
binder 46525:46525 <> P:572
binder 46527:46527 <> Q:573
binder 46529:46529 <> R:574
R46575:46581 Coq.Init.Logic <> ::type_scope:x_'='_x not
R46536:46540 VST.floyd.canon <> PROPx def
R46545:46550 VST.floyd.canon <> LOCALx def
R46555:46558 VST.floyd.canon <> SEPx def
R46567:46570 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R46561:46563 VST.msl.seplog <> exp meth
R46565:46566 VST.floyd.canon <> R1:571 var
R46571:46571 VST.floyd.canon <> R:574 var
R46552:46552 VST.floyd.canon <> Q:573 var
R46542:46542 VST.floyd.canon <> P:572 var
R46583:46585 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R46589:46590 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R46588:46588 VST.floyd.canon <> A:570 var
binder 46586:46586 <> x:575
R46591:46595 VST.floyd.canon <> PROPx def
R46600:46605 VST.floyd.canon <> LOCALx def
R46610:46613 VST.floyd.canon <> SEPx def
R46620:46621 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R46616:46617 VST.floyd.canon <> R1:571 var
R46619:46619 VST.floyd.canon <> x:575 var
R46622:46622 VST.floyd.canon <> R:574 var
R46607:46607 VST.floyd.canon <> Q:573 var
R46597:46597 VST.floyd.canon <> P:572 var
R46678:46682 VST.floyd.canon <> PROPx def
R46685:46690 VST.floyd.canon <> LOCALx def
R46693:46696 VST.floyd.canon <> SEPx def
R46774:46778 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46787:46791 VST.floyd.canon <> PROPx def
R46796:46801 VST.floyd.canon <> LOCALx def
R46806:46809 VST.floyd.canon <> SEPx def
R46774:46778 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46787:46791 VST.floyd.canon <> PROPx def
R46796:46801 VST.floyd.canon <> LOCALx def
R46806:46809 VST.floyd.canon <> SEPx def
R46856:46859 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R46850:46852 VST.msl.seplog <> exp meth
R46856:46859 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R46850:46852 VST.msl.seplog <> exp meth
R46897:46899 VST.msl.seplog <> exp meth
R46927:46938 VST.floyd.canon <> grab_nth_SEP thm
R46951:46953 Coq.Lists.List <> nth def
R46956:46965 VST.floyd.find_nth_tactic <> delete_nth def
R46976:46996 VST.floyd.canon <> extract_exists_in_SEP thm
prf 47056:47076 <> flatten_sepcon_in_SEP
binder 47088:47088 <> P:576
binder 47090:47090 <> Q:577
binder 47092:47093 <> R1:578
binder 47095:47096 <> R2:579
binder 47098:47098 <> R:580
R47152:47165 Coq.Init.Logic <> ::type_scope:x_'='_x not
R47112:47116 VST.floyd.canon <> PROPx def
R47121:47126 VST.floyd.canon <> LOCALx def
R47131:47134 VST.floyd.canon <> SEPx def
R47137:47137 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R47143:47147 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R47140:47140 VST.msl.seplog <> ::logic:x_'*'_x not
R47138:47139 VST.floyd.canon <> R1:578 var
R47141:47142 VST.floyd.canon <> R2:579 var
R47148:47148 VST.floyd.canon <> R:580 var
R47128:47128 VST.floyd.canon <> Q:577 var
R47118:47118 VST.floyd.canon <> P:576 var
R47166:47170 VST.floyd.canon <> PROPx def
R47175:47180 VST.floyd.canon <> LOCALx def
R47185:47188 VST.floyd.canon <> SEPx def
R47193:47196 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R47191:47192 VST.floyd.canon <> R1:578 var
R47199:47202 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R47197:47198 VST.floyd.canon <> R2:579 var
R47203:47203 VST.floyd.canon <> R:580 var
R47182:47182 VST.floyd.canon <> Q:577 var
R47172:47172 VST.floyd.canon <> P:576 var
R47269:47272 VST.floyd.canon <> SEPx def
R47290:47301 VST.msl.seplog <> sepcon_assoc meth
R47290:47301 VST.msl.seplog <> sepcon_assoc meth
R47290:47301 VST.msl.seplog <> sepcon_assoc meth
prf 47322:47344 <> flatten_sepcon_in_SEP''
binder 47356:47356 <> n:581
binder 47358:47358 <> P:582
binder 47360:47360 <> Q:583
R47370:47374 VST.veric.mpred <> mpred def
binder 47363:47364 <> R1:584
binder 47366:47367 <> R2:585
R47381:47384 Coq.Init.Datatypes <> list ind
R47386:47390 VST.veric.mpred <> mpred def
binder 47378:47378 <> R:586
binder 47393:47394 <> R':587
R47432:47438 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47483:47489 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47517:47519 Coq.Init.Logic <> ::type_scope:x_'='_x not
R47490:47494 VST.floyd.canon <> PROPx def
R47499:47504 VST.floyd.canon <> LOCALx def
R47509:47512 VST.floyd.canon <> SEPx def
R47514:47514 VST.floyd.canon <> R:586 var
R47506:47506 VST.floyd.canon <> Q:583 var
R47496:47496 VST.floyd.canon <> P:582 var
R47520:47524 VST.floyd.canon <> PROPx def
R47529:47534 VST.floyd.canon <> LOCALx def
R47539:47542 VST.floyd.canon <> SEPx def
R47544:47545 VST.floyd.canon <> R':587 var
R47536:47536 VST.floyd.canon <> Q:583 var
R47526:47526 VST.floyd.canon <> P:582 var
R47441:47443 Coq.Init.Logic <> ::type_scope:x_'='_x not
R47439:47440 VST.floyd.canon <> R':587 var
R47454:47457 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R47444:47449 Coq.Lists.List <> firstn def
R47453:47453 VST.floyd.canon <> R:586 var
R47451:47451 VST.floyd.canon <> n:581 var
R47460:47463 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R47458:47459 VST.floyd.canon <> R1:584 var
R47466:47469 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R47464:47465 VST.floyd.canon <> R2:585 var
R47470:47474 Coq.Lists.List <> skipn def
R47482:47482 VST.floyd.canon <> R:586 var
R47477:47477 Coq.Init.Datatypes <> S constr
R47479:47479 VST.floyd.canon <> n:581 var
R47413:47415 Coq.Init.Logic <> ::type_scope:x_'='_x not
R47400:47408 Coq.Lists.List <> nth_error def
R47412:47412 VST.floyd.canon <> n:581 var
R47410:47410 VST.floyd.canon <> R:586 var
R47416:47419 Coq.Init.Datatypes <> Some constr
R47425:47427 VST.msl.seplog <> ::logic:x_'*'_x not
R47423:47424 VST.floyd.canon <> R1:584 var
R47428:47429 VST.floyd.canon <> R2:585 var
R47590:47593 VST.floyd.canon <> SEPx def
R47721:47726 Coq.Lists.List <> firstn def
R47729:47733 Coq.Lists.List <> skipn def
R47736:47738 Coq.Init.Datatypes <> app def
R47766:47777 VST.msl.seplog <> sepcon_assoc meth
R47766:47777 VST.msl.seplog <> sepcon_assoc meth
R47766:47777 VST.msl.seplog <> sepcon_assoc meth
R47766:47777 VST.msl.seplog <> sepcon_assoc meth
R47854:47857 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R47858:47863 Coq.Lists.List <> firstn def
R47876:47878 Coq.Init.Datatypes <> app def
R47890:47895 Coq.Lists.List <> firstn def
R47882:47883 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R47884:47886 Coq.Init.Datatypes <> nil constr
R47854:47857 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R47858:47863 Coq.Lists.List <> firstn def
R47876:47878 Coq.Init.Datatypes <> app def
R47890:47895 Coq.Lists.List <> firstn def
R47882:47883 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R47884:47886 Coq.Init.Datatypes <> nil constr
R47912:47918 Coq.Lists.List <> app_ass syndef
R47912:47918 Coq.Lists.List <> app_ass syndef
R47912:47918 Coq.Lists.List <> app_ass syndef
R47928:47930 Coq.Init.Datatypes <> app def
R48012:48016 VST.floyd.canon <> PROPx def
R48022:48027 VST.floyd.canon <> LOCALx def
R48033:48036 VST.floyd.canon <> SEPx def
R48012:48016 VST.floyd.canon <> PROPx def
R48022:48027 VST.floyd.canon <> LOCALx def
R48033:48036 VST.floyd.canon <> SEPx def
R48073:48073 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R48083:48087 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R48077:48079 VST.msl.seplog <> ::logic:x_'*'_x not
R48073:48073 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R48083:48087 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R48077:48079 VST.msl.seplog <> ::logic:x_'*'_x not
R48128:48130 Coq.Init.Peano <> ::nat_scope:x_'-'_x not
R48120:48125 Coq.Lists.List <> length syndef
R48131:48141 Coq.Init.Datatypes <> S constr
R48144:48149 Coq.Lists.List <> length syndef
R48235:48257 VST.floyd.canon <> flatten_sepcon_in_SEP'' thm
R48277:48283 Coq.Init.Logic <> eq_refl constr
R48464:48469 Coq.Lists.List <> firstn def
R48472:48474 Coq.Init.Datatypes <> app def
R48477:48481 Coq.Lists.List <> skipn def
R48531:48537 Coq.Init.Logic <> eq_refl constr
R48616:48620 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R48616:48620 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R48663:48669 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R48671:48672 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R48677:48681 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R48663:48669 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R48671:48672 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R48677:48681 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
prf 48718:48725 <> semax_ff
binder 48737:48741 <> Espec:588
R48748:48756 VST.veric.mpred <> compspecs class
binder 48744:48745 <> cs:589
binder 48759:48763 <> Delta:590
binder 48765:48765 <> c:591
binder 48767:48767 <> R:592
R48774:48778 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R48800:48800 VST.floyd.canon <> R:592 var
R48798:48798 VST.floyd.canon <> c:591 var
R48795:48796 VST.msl.seplog <> FF meth
R48789:48793 VST.floyd.canon <> Delta:590 var
R48783:48787 VST.floyd.canon <> Espec:588 var
R48780:48781 VST.floyd.canon <> cs:589 var
R48842:48845 VST.msl.seplog <> ::logic:x_'&&'_x not
R48840:48841 VST.msl.seplog <> FF meth
R48846:48847 VST.msl.seplog <> FF meth
R48824:48832 VST.floyd.canon <> semax_pre thm
R48842:48845 VST.msl.seplog <> ::logic:x_'&&'_x not
R48840:48841 VST.msl.seplog <> FF meth
R48846:48847 VST.msl.seplog <> FF meth
R48824:48832 VST.floyd.canon <> semax_pre thm
R48857:48866 VST.msl.seplog <> andp_left2 meth
R48857:48866 VST.msl.seplog <> andp_left2 meth
R48875:48884 VST.msl.seplog <> andp_right meth
R48875:48884 VST.msl.seplog <> andp_right meth
R48899:48916 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R48899:48916 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
prf 48954:48972 <> extract_prop_in_SEP
binder 48984:48984 <> n:593
binder 48986:48987 <> P1:594
binder 48989:48990 <> Rn:595
binder 48992:48992 <> P:596
binder 48994:48994 <> Q:597
binder 48996:48996 <> R:598
R49029:49035 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R49063:49065 Coq.Init.Logic <> ::type_scope:x_'='_x not
R49036:49040 VST.floyd.canon <> PROPx def
R49045:49050 VST.floyd.canon <> LOCALx def
R49055:49058 VST.floyd.canon <> SEPx def
R49060:49060 VST.floyd.canon <> R:598 var
R49052:49052 VST.floyd.canon <> Q:597 var
R49042:49042 VST.floyd.canon <> P:596 var
R49066:49070 VST.floyd.canon <> PROPx def
R49081:49086 VST.floyd.canon <> LOCALx def
R49091:49094 VST.floyd.canon <> SEPx def
R49097:49107 VST.floyd.canon <> replace_nth def
R49113:49114 VST.floyd.canon <> Rn:595 var
R49111:49111 VST.floyd.canon <> R:598 var
R49109:49109 VST.floyd.canon <> n:593 var
R49088:49088 VST.floyd.canon <> Q:597 var
R49075:49076 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R49073:49074 VST.floyd.canon <> P1:594 var
R49077:49077 VST.floyd.canon <> P:596 var
R49013:49015 Coq.Init.Logic <> ::type_scope:x_'='_x not
R49002:49004 Coq.Lists.List <> nth def
R49010:49012 VST.msl.seplog <> emp meth
R49008:49008 VST.floyd.canon <> R:598 var
R49006:49006 VST.floyd.canon <> n:593 var
R49023:49026 VST.msl.seplog <> ::logic:x_'&&'_x not
R49016:49019 VST.msl.seplog <> prop meth
R49021:49022 VST.floyd.canon <> P1:594 var
R49027:49028 VST.floyd.canon <> Rn:595 var
R49162:49166 VST.floyd.canon <> PROPx def
R49168:49173 VST.floyd.canon <> LOCALx def
R49175:49178 VST.floyd.canon <> SEPx def
R49180:49184 VST.veric.SeparationLogic <> local def
R49186:49190 VST.veric.mpred <> lift1 def
R49206:49213 VST.msl.seplog <> pred_ext meth
R49206:49213 VST.msl.seplog <> pred_ext meth
R49249:49253 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R49260:49263 VST.msl.seplog <> ::logic:x_'&&'_x not
R49254:49256 VST.msl.seplog <> ::logic:'!!'_x not
R49249:49253 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R49260:49263 VST.msl.seplog <> ::logic:x_'&&'_x not
R49254:49256 VST.msl.seplog <> ::logic:'!!'_x not
R49301:49308 VST.msl.Axioms <> prop_ext prfax
R49301:49308 VST.msl.Axioms <> prop_ext prfax
R49400:49409 VST.msl.seplog <> andp_right meth
R49400:49409 VST.msl.seplog <> andp_right meth
R49437:49446 VST.msl.seplog <> andp_left1 meth
R49437:49446 VST.msl.seplog <> andp_left1 meth
R49489:49498 VST.msl.seplog <> andp_right meth
R49489:49498 VST.msl.seplog <> andp_right meth
R49526:49535 VST.msl.seplog <> andp_left1 meth
R49526:49535 VST.msl.seplog <> andp_left1 meth
R49557:49572 VST.msl.seplog <> sepcon_andp_prop meth
R49557:49572 VST.msl.seplog <> sepcon_andp_prop meth
R49557:49572 VST.msl.seplog <> sepcon_andp_prop meth
R49583:49596 VST.msl.seplog <> sepcon_derives meth
R49583:49596 VST.msl.seplog <> sepcon_derives meth
R49617:49630 VST.msl.log_normalize <> prop_true_andp thm
R49617:49630 VST.msl.log_normalize <> prop_true_andp thm
R49617:49630 VST.msl.log_normalize <> prop_true_andp thm
R49735:49748 VST.msl.log_normalize <> prop_true_andp thm
R49735:49748 VST.msl.log_normalize <> prop_true_andp thm
R49735:49748 VST.msl.log_normalize <> prop_true_andp thm
R49735:49748 VST.msl.log_normalize <> prop_true_andp thm
R49765:49778 VST.msl.seplog <> sepcon_derives meth
R49765:49778 VST.msl.seplog <> sepcon_derives meth
prf 49799:49808 <> insert_SEP
binder 49819:49820 <> R1:599
binder 49822:49822 <> P:600
binder 49824:49824 <> Q:601
binder 49826:49826 <> R:602
R49862:49864 Coq.Init.Logic <> ::type_scope:x_'='_x not
R49832:49834 VST.msl.seplog <> ::logic:x_'*'_x not
R49829:49829 VST.veric.lift LiftNotation :::'`'_x not
R49830:49831 VST.floyd.canon <> R1:599 var
R49835:49839 VST.floyd.canon <> PROPx def
R49844:49849 VST.floyd.canon <> LOCALx def
R49854:49857 VST.floyd.canon <> SEPx def
R49859:49859 VST.floyd.canon <> R:602 var
R49851:49851 VST.floyd.canon <> Q:601 var
R49841:49841 VST.floyd.canon <> P:600 var
R49865:49869 VST.floyd.canon <> PROPx def
R49874:49879 VST.floyd.canon <> LOCALx def
R49884:49887 VST.floyd.canon <> SEPx def
R49892:49893 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R49890:49891 VST.floyd.canon <> R1:599 var
R49894:49894 VST.floyd.canon <> R:602 var
R49881:49881 VST.floyd.canon <> Q:601 var
R49871:49871 VST.floyd.canon <> P:600 var
R49922:49926 VST.floyd.canon <> PROPx def
R49928:49933 VST.floyd.canon <> LOCALx def
R49935:49938 VST.floyd.canon <> SEPx def
R49940:49944 VST.veric.SeparationLogic <> local def
R49946:49950 VST.veric.mpred <> lift1 def
R49995:50010 VST.msl.seplog <> sepcon_andp_prop meth
R49995:50010 VST.msl.seplog <> sepcon_andp_prop meth
R49995:50010 VST.msl.seplog <> sepcon_andp_prop meth
R49995:50010 VST.msl.seplog <> sepcon_andp_prop meth
R49995:50010 VST.msl.seplog <> sepcon_andp_prop meth
R49995:50010 VST.msl.seplog <> sepcon_andp_prop meth
prf 50040:50056 <> delete_emp_in_SEP
binder 50059:50059 <> A:603
binder 50072:50072 <> n:604
R50078:50081 Coq.Init.Datatypes <> list ind
R50083:50087 VST.veric.mpred <> mpred def
binder 50075:50075 <> R:605
R50119:50126 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50136:50138 Coq.Init.Logic <> ::type_scope:x_'='_x not
R50128:50131 VST.floyd.canon <> SEPx def
R50135:50135 VST.floyd.canon <> R:605 var
R50133:50133 VST.floyd.canon <> A:603 var
R50139:50142 VST.floyd.canon <> SEPx def
R50155:50158 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R50145:50150 Coq.Lists.List <> firstn def
R50154:50154 VST.floyd.canon <> R:605 var
R50152:50152 VST.floyd.canon <> n:604 var
R50159:50167 compcert.lib.Coqlib <> list_drop def
R50175:50175 VST.floyd.canon <> R:605 var
R50170:50170 Coq.Init.Datatypes <> S constr
R50172:50172 VST.floyd.canon <> n:604 var
R50108:50110 Coq.Init.Logic <> ::type_scope:x_'='_x not
R50095:50103 Coq.Lists.List <> nth_error def
R50107:50107 VST.floyd.canon <> n:604 var
R50105:50105 VST.floyd.canon <> R:605 var
R50111:50114 Coq.Init.Datatypes <> Some constr
R50116:50118 VST.msl.seplog <> emp meth
R50201:50204 VST.floyd.canon <> SEPx def
R50300:50309 VST.msl.log_normalize <> emp_sepcon thm
R50300:50309 VST.msl.log_normalize <> emp_sepcon thm
R50300:50309 VST.msl.log_normalize <> emp_sepcon thm
R50447:50450 VST.floyd.canon <> SEPx def
R50447:50450 VST.floyd.canon <> SEPx def
R50487:50489 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R50484:50486 VST.msl.seplog <> emp meth
R50487:50489 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R50484:50486 VST.msl.seplog <> emp meth
R50512:50528 VST.floyd.canon <> delete_emp_in_SEP thm
R50539:50541 Coq.Init.Peano <> ::nat_scope:x_'-'_x not
R50531:50536 Coq.Lists.List <> length syndef
R50542:50542 Coq.Init.Datatypes <> S constr
R50545:50550 Coq.Lists.List <> length syndef
R50615:50620 Coq.Lists.List <> firstn def
R50623:50625 Coq.Init.Datatypes <> app def
R50628:50636 compcert.lib.Coqlib <> list_drop def
R50644:50646 Coq.Init.Datatypes <> app def
R50838:50842 VST.floyd.canon <> PROPx def
R50847:50852 VST.floyd.canon <> LOCALx def
R50857:50860 VST.floyd.canon <> SEPx def
R50838:50842 VST.floyd.canon <> PROPx def
R50847:50852 VST.floyd.canon <> LOCALx def
R50857:50860 VST.floyd.canon <> SEPx def
R50899:50899 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R50915:50919 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R50908:50911 VST.msl.seplog <> ::logic:x_'&&'_x not
R50900:50903 VST.msl.seplog <> prop meth
R50899:50899 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R50915:50919 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R50908:50911 VST.msl.seplog <> ::logic:x_'&&'_x not
R50900:50903 VST.msl.seplog <> prop meth
R51169:51172 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R51163:51165 VST.msl.seplog <> exp meth
R51169:51172 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R51163:51165 VST.msl.seplog <> exp meth
R51365:51365 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R51379:51383 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R51366:51371 VST.msl.seplog <> sepcon meth
R51365:51365 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R51379:51383 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R51366:51371 VST.msl.seplog <> sepcon meth
R51468:51479 VST.floyd.canon <> grab_nth_SEP thm
R51483:51483 Coq.Init.Peano <> ::nat_scope:x_'-'_x not
R51484:51484 Coq.Init.Datatypes <> S constr
R51512:51514 Coq.Lists.List <> nth def
R51517:51526 VST.floyd.find_nth_tactic <> delete_nth def
R51546:51566 VST.floyd.canon <> flatten_sepcon_in_SEP thm
R51210:51212 VST.msl.seplog <> exp meth
R51240:51251 VST.floyd.canon <> grab_nth_SEP thm
R51264:51266 Coq.Lists.List <> nth def
R51269:51278 VST.floyd.find_nth_tactic <> delete_nth def
R51289:51309 VST.floyd.canon <> extract_exists_in_SEP thm
R51001:51019 VST.floyd.canon <> extract_prop_in_SEP thm
R51023:51023 Coq.Init.Peano <> ::nat_scope:x_'-'_x not
R51024:51024 Coq.Init.Datatypes <> S constr
R51085:51095 VST.floyd.canon <> replace_nth def
prf 51585:51599 <> nth_error_local
binder 51611:51611 <> n:606
binder 51613:51617 <> Delta:607
binder 51619:51619 <> P:608
binder 51621:51621 <> Q:609
binder 51623:51623 <> R:610
R51630:51637 VST.floyd.canon <> localdef ind
binder 51626:51627 <> Qn:611
R51668:51675 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51676:51682 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R51688:51689 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R51710:51714 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R51683:51687 VST.floyd.canon <> Delta:607 var
R51690:51694 VST.floyd.canon <> PROPx def
R51699:51704 VST.floyd.canon <> LOCALx def
R51708:51708 VST.floyd.canon <> R:610 var
R51706:51706 VST.floyd.canon <> Q:609 var
R51696:51696 VST.floyd.canon <> P:608 var
R51715:51719 VST.veric.SeparationLogic <> local def
R51722:51734 VST.floyd.canon <> locald_denote def
R51736:51737 VST.floyd.canon <> Qn:611 var
R51658:51660 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51645:51653 Coq.Lists.List <> nth_error def
R51657:51657 VST.floyd.canon <> n:606 var
R51655:51655 VST.floyd.canon <> Q:609 var
R51661:51664 Coq.Init.Datatypes <> Some constr
R51666:51667 VST.floyd.canon <> Qn:611 var
R51762:51771 VST.msl.seplog <> andp_left2 meth
R51762:51771 VST.msl.seplog <> andp_left2 meth
R51780:51789 VST.msl.seplog <> andp_left2 meth
R51780:51789 VST.msl.seplog <> andp_left2 meth
R51798:51807 VST.msl.seplog <> andp_left1 meth
R51798:51807 VST.msl.seplog <> andp_left1 meth
prf 51952:51963 <> in_nth_error
binder 51974:51974 <> A:612
R51981:51981 VST.floyd.canon <> A:612 var
binder 51978:51978 <> x:613
binder 51984:51985 <> xs:614
R51995:51998 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51999:52005 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R52007:52008 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 52006:52006 <> n:615
R52023:52025 Coq.Init.Logic <> ::type_scope:x_'='_x not
R52009:52017 Coq.Lists.List <> nth_error def
R52022:52022 VST.floyd.canon <> n:615 var
R52019:52020 VST.floyd.canon <> xs:614 var
R52026:52029 Coq.Init.Datatypes <> Some constr
R52031:52031 VST.floyd.canon <> x:613 var
R51988:51989 Coq.Lists.List <> In def
R51993:51994 VST.floyd.canon <> xs:614 var
R51991:51991 VST.floyd.canon <> x:613 var
R52196:52196 Coq.Init.Datatypes <> S constr
R52196:52196 Coq.Init.Datatypes <> S constr
prf 52240:52247 <> in_local
binder 52257:52258 <> Q0:616
binder 52260:52264 <> Delta:617
binder 52266:52266 <> P:618
binder 52268:52268 <> Q:619
binder 52270:52270 <> R:620
R52280:52286 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R52287:52293 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R52299:52300 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R52321:52325 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R52294:52298 VST.floyd.canon <> Delta:617 var
R52301:52305 VST.floyd.canon <> PROPx def
R52310:52315 VST.floyd.canon <> LOCALx def
R52319:52319 VST.floyd.canon <> R:620 var
R52317:52317 VST.floyd.canon <> Q:619 var
R52307:52307 VST.floyd.canon <> P:618 var
R52326:52330 VST.veric.SeparationLogic <> local def
R52333:52345 VST.floyd.canon <> locald_denote def
R52347:52348 VST.floyd.canon <> Q0:616 var
R52273:52274 Coq.Lists.List <> In def
R52279:52279 VST.floyd.canon <> Q:619 var
R52276:52277 VST.floyd.canon <> Q0:616 var
R52381:52392 VST.floyd.canon <> in_nth_error thm
R52381:52392 VST.floyd.canon <> in_nth_error thm
R52422:52436 VST.floyd.canon <> nth_error_local thm
R52422:52436 VST.floyd.canon <> nth_error_local thm
prf 52527:52546 <> lower_PROP_LOCAL_SEP
binder 52558:52558 <> P:621
binder 52560:52560 <> Q:622
binder 52562:52562 <> R:623
binder 52564:52566 <> rho:624
R52600:52607 Coq.Init.Logic <> ::type_scope:x_'='_x not
R52569:52573 VST.floyd.canon <> PROPx def
R52597:52599 VST.floyd.canon <> rho:624 var
R52578:52583 VST.floyd.canon <> LOCALx def
R52588:52591 VST.floyd.canon <> SEPx def
R52593:52593 VST.floyd.canon <> R:623 var
R52585:52585 VST.floyd.canon <> Q:622 var
R52575:52575 VST.floyd.canon <> P:621 var
R52608:52608 VST.msl.seplog <> ::logic:x_'&&'_x not
R52632:52636 VST.msl.seplog <> ::logic:x_'&&'_x not
R52722:52727 VST.msl.seplog <> ::logic:x_'&&'_x not
R52609:52610 VST.msl.seplog <> ::logic:'!!'_x not
R52611:52620 Coq.Lists.List <> fold_right def
R52631:52631 VST.floyd.canon <> P:621 var
R52626:52629 Coq.Init.Logic <> True ind
R52622:52624 Coq.Init.Logic <> and ind
R52692:52695 VST.msl.seplog <> ::logic:x_'&&'_x not
R52637:52641 VST.veric.SeparationLogic <> local def
R52644:52653 Coq.Lists.List <> fold_right def
R52671:52673 Coq.Lists.List <> map def
R52689:52689 VST.floyd.canon <> Q:622 var
R52675:52687 VST.floyd.canon <> locald_denote def
R52663:52663 VST.veric.lift LiftNotation :::'`'_x not
R52664:52667 Coq.Init.Logic <> True ind
R52656:52656 VST.veric.lift LiftNotation :::'`'_x not
R52657:52659 Coq.Init.Logic <> and ind
R52696:52697 VST.veric.lift LiftNotation :::'`('_x_')' not
R52721:52721 VST.veric.lift LiftNotation :::'`('_x_')' not
R52698:52707 Coq.Lists.List <> fold_right def
R52720:52720 VST.floyd.canon <> R:623 var
R52716:52718 VST.msl.seplog <> emp meth
R52709:52714 VST.msl.seplog <> sepcon meth
R52725:52727 VST.floyd.canon <> rho:624 var
R52768:52787 VST.floyd.canon <> lower_PROP_LOCAL_SEP thm
prf 52805:52812 <> lower_TT
binder 52822:52824 <> rho:625
R52853:52855 Coq.Init.Logic <> ::type_scope:x_'='_x not
R52828:52829 VST.msl.seplog <> TT meth
R52850:52852 VST.floyd.canon <> rho:625 var
R52839:52840 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R52841:52845 VST.veric.mpred <> mpred def
R52832:52838 VST.veric.mpred <> environ ind
R52857:52858 VST.msl.seplog <> TT meth
R52866:52871 VST.veric.SeparationLogic <> Nveric inst
R52860:52864 VST.veric.mpred <> mpred def
R52912:52919 VST.floyd.canon <> lower_TT thm
prf 52937:52944 <> lower_FF
binder 52954:52956 <> rho:626
R52985:52987 Coq.Init.Logic <> ::type_scope:x_'='_x not
R52960:52961 VST.msl.seplog <> FF meth
R52982:52984 VST.floyd.canon <> rho:626 var
R52971:52972 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R52973:52977 VST.veric.mpred <> mpred def
R52964:52970 VST.veric.mpred <> environ ind
R52989:52990 VST.msl.seplog <> FF meth
R52998:53003 VST.veric.SeparationLogic <> Nveric inst
R52992:52996 VST.veric.mpred <> mpred def
R53044:53051 VST.floyd.canon <> lower_FF thm
prf 53069:53079 <> assert_PROP
binder 53090:53091 <> P1:627
binder 53093:53097 <> Espec:628
R53104:53112 VST.veric.mpred <> compspecs class
binder 53100:53101 <> cs:629
binder 53115:53119 <> Delta:630
binder 53121:53123 <> PQR:631
binder 53125:53125 <> c:632
binder 53127:53130 <> Post:633
R53164:53170 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R53171:53171 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R53210:53217 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R53219:53223 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53246:53249 VST.floyd.canon <> Post:633 var
R53244:53244 VST.floyd.canon <> c:632 var
R53240:53242 VST.floyd.canon <> PQR:631 var
R53234:53238 VST.floyd.canon <> Delta:630 var
R53228:53232 VST.floyd.canon <> Espec:628 var
R53225:53226 VST.floyd.canon <> cs:629 var
R53174:53177 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R53179:53183 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53206:53209 VST.floyd.canon <> Post:633 var
R53204:53204 VST.floyd.canon <> c:632 var
R53200:53202 VST.floyd.canon <> PQR:631 var
R53194:53198 VST.floyd.canon <> Delta:630 var
R53188:53192 VST.floyd.canon <> Espec:628 var
R53185:53186 VST.floyd.canon <> cs:629 var
R53172:53173 VST.floyd.canon <> P1:627 var
R53137:53143 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R53149:53150 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R53154:53158 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R53144:53148 VST.floyd.canon <> Delta:630 var
R53151:53153 VST.floyd.canon <> PQR:631 var
R53159:53161 VST.msl.seplog <> ::logic:'!!'_x not
R53162:53163 VST.floyd.canon <> P1:627 var
R53274:53282 VST.floyd.canon <> semax_pre thm
R53274:53282 VST.floyd.canon <> semax_pre thm
R53291:53300 VST.msl.seplog <> andp_right meth
R53291:53300 VST.msl.seplog <> andp_right meth
R53318:53327 VST.msl.seplog <> andp_left2 meth
R53336:53347 VST.msl.seplog <> derives_refl meth
R53318:53327 VST.msl.seplog <> andp_left2 meth
R53336:53347 VST.msl.seplog <> derives_refl meth
R53356:53373 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R53356:53373 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
prf 53394:53418 <> semax_extract_later_prop1
R53435:53443 VST.veric.mpred <> compspecs class
binder 53431:53432 <> cs:634
R53454:53463 VST.veric.juicy_extspec <> OracleKind class
binder 53447:53451 <> Espec:635
binder 53466:53470 <> Delta:636
binder 53473:53474 <> PP:637
binder 53483:53483 <> P:638
binder 53485:53485 <> c:639
binder 53487:53487 <> Q:640
R53501:53501 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R53530:53545 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R53546:53550 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53577:53577 VST.floyd.canon <> Q:640 var
R53575:53575 VST.floyd.canon <> c:639 var
R53559:53562 VST.msl.seplog <> ::logic:'|>'_x not
R53572:53572 VST.msl.seplog <> ::logic:'|>'_x not
R53567:53570 VST.msl.seplog <> ::logic:x_'&&'_x not
R53563:53564 VST.msl.seplog <> ::logic:'!!'_x not
R53565:53566 VST.floyd.canon <> PP:637 var
R53571:53571 VST.floyd.canon <> P:638 var
R53552:53556 VST.floyd.canon <> Delta:636 var
R53504:53507 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R53508:53512 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53529:53529 VST.floyd.canon <> Q:640 var
R53527:53527 VST.floyd.canon <> c:639 var
R53521:53523 VST.msl.seplog <> ::logic:'|>'_x not
R53524:53524 VST.floyd.canon <> P:638 var
R53514:53518 VST.floyd.canon <> Delta:636 var
R53502:53503 VST.floyd.canon <> PP:637 var
R53607:53616 VST.msl.log_normalize <> later_andp thm
R53607:53616 VST.msl.log_normalize <> later_andp thm
R53607:53616 VST.msl.log_normalize <> later_andp thm
R53627:53650 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_later_prop prfax
R53627:53650 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_later_prop prfax
prf 53671:53687 <> assert_later_PROP
binder 53698:53699 <> P1:641
binder 53701:53705 <> Espec:642
R53712:53720 VST.veric.mpred <> compspecs class
binder 53708:53709 <> cs:643
binder 53723:53727 <> Delta:644
binder 53729:53731 <> PQR:645
binder 53733:53733 <> c:646
binder 53735:53738 <> Post:647
R53771:53777 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R53778:53778 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R53822:53829 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R53831:53835 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53863:53866 VST.floyd.canon <> Post:647 var
R53861:53861 VST.floyd.canon <> c:646 var
R53853:53855 VST.msl.seplog <> ::logic:'|>'_x not
R53856:53858 VST.floyd.canon <> PQR:645 var
R53846:53850 VST.floyd.canon <> Delta:644 var
R53840:53844 VST.floyd.canon <> Espec:642 var
R53837:53838 VST.floyd.canon <> cs:643 var
R53781:53784 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R53786:53790 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53818:53821 VST.floyd.canon <> Post:647 var
R53816:53816 VST.floyd.canon <> c:646 var
R53808:53810 VST.msl.seplog <> ::logic:'|>'_x not
R53811:53813 VST.floyd.canon <> PQR:645 var
R53801:53805 VST.floyd.canon <> Delta:644 var
R53795:53799 VST.floyd.canon <> Espec:642 var
R53792:53793 VST.floyd.canon <> cs:643 var
R53779:53780 VST.floyd.canon <> P1:641 var
R53745:53751 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R53757:53758 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R53762:53765 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R53752:53756 VST.floyd.canon <> Delta:644 var
R53759:53761 VST.floyd.canon <> PQR:645 var
R53766:53768 VST.msl.seplog <> ::logic:'!!'_x not
R53769:53770 VST.floyd.canon <> P1:641 var
R53891:53906 VST.floyd.canon <> semax_pre_simple thm
R53891:53906 VST.floyd.canon <> semax_pre_simple thm
R53915:53925 VST.msl.log_normalize <> later_left2 thm
R53915:53925 VST.msl.log_normalize <> later_left2 thm
R53934:53943 VST.msl.seplog <> andp_right meth
R53934:53943 VST.msl.seplog <> andp_right meth
R53961:53970 VST.msl.seplog <> andp_left2 meth
R53979:53990 VST.msl.seplog <> derives_refl meth
R53961:53970 VST.msl.seplog <> andp_left2 meth
R53979:53990 VST.msl.seplog <> derives_refl meth
R53999:54023 VST.floyd.canon <> semax_extract_later_prop1 thm
R53999:54023 VST.floyd.canon <> semax_extract_later_prop1 thm
prf 54044:54055 <> assert_PROP'
binder 54058:54058 <> A:648
R54065:54070 VST.msl.seplog <> NatDed class
R54072:54072 VST.floyd.canon <> A:648 var
binder 54061:54062 <> NA:649
binder 54084:54084 <> P:650
binder 54086:54088 <> Pre:651
R54097:54097 VST.floyd.canon <> A:648 var
binder 54091:54094 <> Post:652
R54116:54122 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R54123:54123 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R54141:54148 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R54152:54156 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R54149:54151 VST.floyd.canon <> Pre:651 var
R54157:54160 VST.floyd.canon <> Post:652 var
R54125:54128 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R54132:54136 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R54129:54131 VST.floyd.canon <> Pre:651 var
R54137:54140 VST.floyd.canon <> Post:652 var
R54124:54124 VST.floyd.canon <> P:650 var
R54107:54111 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R54104:54106 VST.floyd.canon <> Pre:651 var
R54112:54114 VST.msl.seplog <> ::logic:'!!'_x not
R54115:54115 VST.floyd.canon <> P:650 var
R54207:54210 VST.msl.seplog <> ::logic:x_'&&'_x not
R54204:54205 VST.msl.seplog <> ::logic:'!!'_x not
R54184:54196 VST.msl.seplog <> derives_trans meth
R54207:54210 VST.msl.seplog <> ::logic:x_'&&'_x not
R54204:54205 VST.msl.seplog <> ::logic:'!!'_x not
R54184:54196 VST.msl.seplog <> derives_trans meth
R54223:54232 VST.msl.seplog <> andp_right meth
R54223:54232 VST.msl.seplog <> andp_right meth
R54247:54266 VST.msl.log_normalize <> derives_extract_prop thm
R54247:54266 VST.msl.log_normalize <> derives_extract_prop thm
prf 54287:54304 <> assert_later_PROP'
binder 54315:54316 <> P1:653
binder 54318:54322 <> Espec:654
R54329:54337 VST.veric.mpred <> compspecs class
binder 54325:54326 <> cs:655
binder 54340:54344 <> Delta:656
binder 54346:54348 <> PQR:657
binder 54350:54353 <> PQR':658
binder 54355:54355 <> c:659
binder 54357:54360 <> Post:660
R54395:54402 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R54403:54403 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R54419:54426 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R54427:54427 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R54466:54473 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R54475:54479 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R54502:54505 VST.floyd.canon <> Post:660 var
R54500:54500 VST.floyd.canon <> c:659 var
R54496:54498 VST.floyd.canon <> PQR:657 var
R54490:54494 VST.floyd.canon <> Delta:656 var
R54484:54488 VST.floyd.canon <> Espec:654 var
R54481:54482 VST.floyd.canon <> cs:655 var
R54430:54433 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R54435:54439 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R54462:54465 VST.floyd.canon <> Post:660 var
R54460:54460 VST.floyd.canon <> c:659 var
R54456:54458 VST.floyd.canon <> PQR:657 var
R54450:54454 VST.floyd.canon <> Delta:656 var
R54444:54448 VST.floyd.canon <> Espec:654 var
R54441:54442 VST.floyd.canon <> cs:655 var
R54428:54429 VST.floyd.canon <> P1:653 var
R54407:54411 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R54404:54406 VST.floyd.canon <> PQR:657 var
R54412:54414 VST.msl.seplog <> ::logic:'|>'_x not
R54415:54418 VST.floyd.canon <> PQR':658 var
R54367:54373 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R54379:54380 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R54385:54389 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R54374:54378 VST.floyd.canon <> Delta:656 var
R54381:54384 VST.floyd.canon <> PQR':658 var
R54390:54392 VST.msl.seplog <> ::logic:'!!'_x not
R54393:54394 VST.floyd.canon <> P1:653 var
R54529:54552 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_later_prop prfax
R54529:54552 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_later_prop prfax
R54568:54583 VST.floyd.canon <> semax_pre_simple thm
R54568:54583 VST.floyd.canon <> semax_pre_simple thm
R54596:54605 VST.msl.seplog <> andp_right meth
R54596:54605 VST.msl.seplog <> andp_right meth
R54617:54629 VST.msl.seplog <> derives_trans meth
R54632:54644 VST.msl.log_normalize <> later_derives thm
R54617:54629 VST.msl.seplog <> derives_trans meth
R54632:54644 VST.msl.log_normalize <> later_derives thm
R54660:54669 VST.msl.log_normalize <> later_andp thm
R54678:54689 VST.msl.log_normalize <> andp_derives thm
R54660:54669 VST.msl.log_normalize <> later_andp thm
R54660:54669 VST.msl.log_normalize <> later_andp thm
R54678:54689 VST.msl.log_normalize <> andp_derives thm
R54706:54714 VST.msl.seplog <> now_later meth
R54706:54714 VST.msl.seplog <> now_later meth
R54725:54734 VST.msl.seplog <> andp_left2 meth
R54725:54734 VST.msl.seplog <> andp_left2 meth
prf 55512:55523 <> assert_LOCAL
binder 55534:55535 <> Q1:661
binder 55537:55541 <> Espec:662
R55548:55556 VST.veric.mpred <> compspecs class
binder 55544:55545 <> cs:663
binder 55559:55563 <> Delta:664
binder 55565:55565 <> P:665
binder 55567:55567 <> Q:666
binder 55569:55569 <> R:667
binder 55571:55571 <> c:668
binder 55573:55576 <> Post:669
R55653:55659 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R55724:55730 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R55732:55736 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R55785:55788 VST.floyd.canon <> Post:669 var
R55783:55783 VST.floyd.canon <> c:668 var
R55754:55758 VST.floyd.canon <> PROPx def
R55763:55768 VST.floyd.canon <> LOCALx def
R55773:55776 VST.floyd.canon <> SEPx def
R55778:55778 VST.floyd.canon <> R:667 var
R55770:55770 VST.floyd.canon <> Q:666 var
R55760:55760 VST.floyd.canon <> P:665 var
R55747:55751 VST.floyd.canon <> Delta:664 var
R55741:55745 VST.floyd.canon <> Espec:662 var
R55738:55739 VST.floyd.canon <> cs:663 var
R55661:55665 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R55720:55723 VST.floyd.canon <> Post:669 var
R55718:55718 VST.floyd.canon <> c:668 var
R55683:55687 VST.floyd.canon <> PROPx def
R55692:55697 VST.floyd.canon <> LOCALx def
R55708:55711 VST.floyd.canon <> SEPx def
R55713:55713 VST.floyd.canon <> R:667 var
R55702:55703 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R55700:55701 VST.floyd.canon <> Q1:661 var
R55704:55704 VST.floyd.canon <> Q:666 var
R55689:55689 VST.floyd.canon <> P:665 var
R55676:55680 VST.floyd.canon <> Delta:664 var
R55670:55674 VST.floyd.canon <> Espec:662 var
R55667:55668 VST.floyd.canon <> cs:663 var
R55583:55589 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R55595:55596 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R55624:55628 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R55590:55594 VST.floyd.canon <> Delta:664 var
R55597:55601 VST.floyd.canon <> PROPx def
R55606:55611 VST.floyd.canon <> LOCALx def
R55616:55619 VST.floyd.canon <> SEPx def
R55621:55621 VST.floyd.canon <> R:667 var
R55613:55613 VST.floyd.canon <> Q:666 var
R55603:55603 VST.floyd.canon <> P:665 var
R55629:55633 VST.veric.SeparationLogic <> local def
R55636:55648 VST.floyd.canon <> locald_denote def
R55650:55651 VST.floyd.canon <> Q1:661 var
R55813:55821 VST.floyd.canon <> semax_pre thm
R55813:55821 VST.floyd.canon <> semax_pre thm
R55850:55861 VST.floyd.canon <> insert_local thm
R55874:55883 VST.msl.seplog <> andp_right meth
R55850:55861 VST.floyd.canon <> insert_local thm
R55850:55861 VST.floyd.canon <> insert_local thm
R55874:55883 VST.msl.seplog <> andp_right meth
R55898:55907 VST.msl.seplog <> andp_left2 meth
R55898:55907 VST.msl.seplog <> andp_left2 meth
R55975:55986 VST.floyd.canon <> assert_LOCAL thm
R56062:56073 VST.floyd.canon <> assert_LOCAL thm
prf 56099:56110 <> drop_LOCAL''
R56126:56128 Coq.Init.Datatypes <> nat ind
binder 56123:56123 <> n:670
binder 56132:56132 <> P:671
binder 56134:56134 <> Q:672
binder 56136:56136 <> R:673
binder 56138:56141 <> Post:674
R56198:56204 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56232:56236 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R56205:56209 VST.floyd.canon <> PROPx def
R56214:56219 VST.floyd.canon <> LOCALx def
R56224:56227 VST.floyd.canon <> SEPx def
R56229:56229 VST.floyd.canon <> R:673 var
R56221:56221 VST.floyd.canon <> Q:672 var
R56211:56211 VST.floyd.canon <> P:671 var
R56237:56240 VST.floyd.canon <> Post:674 var
R56189:56193 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R56147:56151 VST.floyd.canon <> PROPx def
R56156:56161 VST.floyd.canon <> LOCALx def
R56181:56184 VST.floyd.canon <> SEPx def
R56186:56186 VST.floyd.canon <> R:673 var
R56164:56173 VST.floyd.find_nth_tactic <> delete_nth def
R56177:56177 VST.floyd.canon <> Q:672 var
R56175:56175 VST.floyd.canon <> n:670 var
R56153:56153 VST.floyd.canon <> P:671 var
R56194:56197 VST.floyd.canon <> Post:674 var
R56265:56277 VST.msl.seplog <> derives_trans meth
R56265:56277 VST.msl.seplog <> derives_trans meth
R56299:56310 VST.msl.log_normalize <> andp_derives thm
R56299:56310 VST.msl.log_normalize <> andp_derives thm
R56325:56336 VST.msl.log_normalize <> andp_derives thm
R56325:56336 VST.msl.log_normalize <> andp_derives thm
R56363:56367 VST.veric.SeparationLogic <> local def
R56370:56374 VST.veric.mpred <> lift1 def
R56396:56407 VST.msl.log_normalize <> prop_derives thm
R56396:56407 VST.msl.log_normalize <> prop_derives thm
prf 56497:56507 <> drop_LOCAL'
R56523:56525 Coq.Init.Datatypes <> nat ind
binder 56520:56520 <> n:675
binder 56529:56533 <> Delta:676
binder 56535:56535 <> P:677
binder 56537:56537 <> Q:678
binder 56539:56539 <> R:679
binder 56541:56544 <> Post:680
R56615:56621 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56622:56628 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R56634:56635 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R56663:56667 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R56629:56633 VST.floyd.canon <> Delta:676 var
R56636:56640 VST.floyd.canon <> PROPx def
R56645:56650 VST.floyd.canon <> LOCALx def
R56655:56658 VST.floyd.canon <> SEPx def
R56660:56660 VST.floyd.canon <> R:679 var
R56652:56652 VST.floyd.canon <> Q:678 var
R56642:56642 VST.floyd.canon <> P:677 var
R56668:56671 VST.floyd.canon <> Post:680 var
R56550:56556 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R56562:56563 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R56606:56610 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R56557:56561 VST.floyd.canon <> Delta:676 var
R56564:56568 VST.floyd.canon <> PROPx def
R56573:56578 VST.floyd.canon <> LOCALx def
R56598:56601 VST.floyd.canon <> SEPx def
R56603:56603 VST.floyd.canon <> R:679 var
R56581:56590 VST.floyd.find_nth_tactic <> delete_nth def
R56594:56594 VST.floyd.canon <> Q:678 var
R56592:56592 VST.floyd.canon <> n:675 var
R56570:56570 VST.floyd.canon <> P:677 var
R56611:56614 VST.floyd.canon <> Post:680 var
R56696:56708 VST.msl.seplog <> derives_trans meth
R56696:56708 VST.msl.seplog <> derives_trans meth
R56730:56741 VST.msl.log_normalize <> andp_derives thm
R56730:56741 VST.msl.log_normalize <> andp_derives thm
R56756:56767 VST.msl.log_normalize <> andp_derives thm
R56756:56767 VST.msl.log_normalize <> andp_derives thm
R56782:56793 VST.msl.log_normalize <> andp_derives thm
R56782:56793 VST.msl.log_normalize <> andp_derives thm
R56820:56824 VST.veric.SeparationLogic <> local def
R56827:56831 VST.veric.mpred <> lift1 def
R56853:56864 VST.msl.log_normalize <> prop_derives thm
R56853:56864 VST.msl.log_normalize <> prop_derives thm
prf 56954:56963 <> drop_LOCAL
R56979:56981 Coq.Init.Datatypes <> nat ind
binder 56976:56976 <> n:681
binder 56984:56988 <> Espec:682
R56995:57003 VST.veric.mpred <> compspecs class
binder 56991:56992 <> cs:683
binder 57006:57010 <> Delta:684
binder 57012:57012 <> P:685
binder 57014:57014 <> Q:686
binder 57016:57016 <> R:687
binder 57018:57018 <> c:688
binder 57020:57023 <> Post:689
R57102:57108 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57110:57114 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R57163:57166 VST.floyd.canon <> Post:689 var
R57161:57161 VST.floyd.canon <> c:688 var
R57132:57136 VST.floyd.canon <> PROPx def
R57141:57146 VST.floyd.canon <> LOCALx def
R57151:57154 VST.floyd.canon <> SEPx def
R57156:57156 VST.floyd.canon <> R:687 var
R57148:57148 VST.floyd.canon <> Q:686 var
R57138:57138 VST.floyd.canon <> P:685 var
R57125:57129 VST.floyd.canon <> Delta:684 var
R57119:57123 VST.floyd.canon <> Espec:682 var
R57116:57117 VST.floyd.canon <> cs:683 var
R57030:57034 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R57098:57101 VST.floyd.canon <> Post:689 var
R57096:57096 VST.floyd.canon <> c:688 var
R57052:57056 VST.floyd.canon <> PROPx def
R57061:57066 VST.floyd.canon <> LOCALx def
R57086:57089 VST.floyd.canon <> SEPx def
R57091:57091 VST.floyd.canon <> R:687 var
R57069:57078 VST.floyd.find_nth_tactic <> delete_nth def
R57082:57082 VST.floyd.canon <> Q:686 var
R57080:57080 VST.floyd.canon <> n:681 var
R57058:57058 VST.floyd.canon <> P:685 var
R57045:57049 VST.floyd.canon <> Delta:684 var
R57039:57043 VST.floyd.canon <> Espec:682 var
R57036:57037 VST.floyd.canon <> cs:683 var
R57191:57199 VST.floyd.canon <> semax_pre thm
R57191:57199 VST.floyd.canon <> semax_pre thm
R57221:57230 VST.msl.seplog <> andp_left2 meth
R57221:57230 VST.msl.seplog <> andp_left2 meth
R57239:57250 VST.msl.log_normalize <> andp_derives thm
R57239:57250 VST.msl.log_normalize <> andp_derives thm
R57265:57276 VST.msl.log_normalize <> andp_derives thm
R57265:57276 VST.msl.log_normalize <> andp_derives thm
R57303:57307 VST.veric.SeparationLogic <> local def
R57310:57314 VST.veric.mpred <> lift1 def
R57336:57347 VST.msl.log_normalize <> prop_derives thm
R57336:57347 VST.msl.log_normalize <> prop_derives thm
R57469:57478 VST.floyd.canon <> drop_LOCAL thm
R57492:57502 VST.floyd.canon <> drop_LOCAL' thm
R57516:57527 VST.floyd.canon <> drop_LOCAL'' thm
R57545:57554 VST.floyd.find_nth_tactic <> delete_nth def
def 57567:57582 <> find_LOCAL_index
R57591:57595 compcert.common.AST <> ident def
binder 57585:57588 <> name:690
R57608:57610 Coq.Init.Datatypes <> nat ind
binder 57599:57605 <> current:691
R57618:57621 Coq.Init.Datatypes <> list ind
R57623:57630 VST.floyd.canon <> localdef ind
binder 57614:57614 <> l:692
R57635:57640 Coq.Init.Datatypes <> option ind
R57642:57644 Coq.Init.Datatypes <> nat ind
R57657:57657 VST.floyd.canon <> l:692 var
R57669:57672 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R57697:57700 VST.floyd.canon <> temp constr
R57717:57720 Coq.PArith.BinPos <> ::positive_scope:x_'=?'_x not
R57721:57724 VST.floyd.canon <> name:690 var
R57759:57774 VST.floyd.canon <> find_LOCAL_index:693 def
R57782:57782 Coq.Init.Datatypes <> S constr
R57784:57790 VST.floyd.canon <> current:691 var
R57776:57779 VST.floyd.canon <> name:690 var
R57741:57744 Coq.Init.Datatypes <> Some constr
R57746:57752 VST.floyd.canon <> current:691 var
R57801:57804 VST.floyd.canon <> lvar constr
R57821:57824 Coq.PArith.BinPos <> ::positive_scope:x_'=?'_x not
R57825:57828 VST.floyd.canon <> name:690 var
R57863:57878 VST.floyd.canon <> find_LOCAL_index:693 def
R57886:57886 Coq.Init.Datatypes <> S constr
R57888:57894 VST.floyd.canon <> current:691 var
R57880:57883 VST.floyd.canon <> name:690 var
R57845:57848 Coq.Init.Datatypes <> Some constr
R57850:57856 VST.floyd.canon <> current:691 var
R57905:57909 VST.floyd.canon <> gvars constr
R57916:57931 VST.floyd.canon <> find_LOCAL_index:693 def
R57939:57939 Coq.Init.Datatypes <> S constr
R57941:57947 VST.floyd.canon <> current:691 var
R57933:57936 VST.floyd.canon <> name:690 var
R57964:57966 Coq.Init.Datatypes <> nil constr
R57971:57974 Coq.Init.Datatypes <> None constr
R58039:58043 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R58048:58052 VST.floyd.canon <> PROPx def
R58058:58063 VST.floyd.canon <> LOCALx def
R58069:58072 VST.floyd.canon <> SEPx def
R58039:58043 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R58048:58052 VST.floyd.canon <> PROPx def
R58058:58063 VST.floyd.canon <> LOCALx def
R58069:58072 VST.floyd.canon <> SEPx def
R58113:58128 VST.floyd.canon <> find_LOCAL_index def
R58135:58135 Coq.Init.Datatypes <> O constr
R58162:58165 Coq.Init.Datatypes <> Some constr
R58162:58165 Coq.Init.Datatypes <> Some constr
R58192:58195 Coq.Init.Datatypes <> None constr
R58192:58195 Coq.Init.Datatypes <> None constr
R58296:58299 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58296:58299 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58344:58346 Coq.Init.Datatypes <> nil constr
R58344:58346 Coq.Init.Datatypes <> nil constr
R58478:58480 Coq.Init.Datatypes <> app def
R58490:58493 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58478:58480 Coq.Init.Datatypes <> app def
R58490:58493 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58568:58570 Coq.Init.Datatypes <> app def
R58591:58594 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58580:58581 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R58573:58579 VST.veric.mpred <> environ ind
R58568:58570 Coq.Init.Datatypes <> app def
R58591:58594 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58580:58581 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R58573:58579 VST.veric.mpred <> environ ind
R58669:58671 Coq.Init.Datatypes <> app def
R58704:58707 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58674:58679 VST.veric.lift <> lifted proj
R58682:58692 VST.veric.mpred <> LiftEnviron canonstruc
R58669:58671 Coq.Init.Datatypes <> app def
R58704:58707 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58674:58679 VST.veric.lift <> lifted proj
R58682:58692 VST.veric.mpred <> LiftEnviron canonstruc
R58782:58784 Coq.Init.Datatypes <> app def
R58806:58809 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58794:58795 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R58796:58800 VST.veric.mpred <> mpred def
R58787:58793 VST.veric.mpred <> environ ind
R58782:58784 Coq.Init.Datatypes <> app def
R58806:58809 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58794:58795 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R58796:58800 VST.veric.mpred <> mpred def
R58787:58793 VST.veric.mpred <> environ ind
R58884:58886 Coq.Init.Datatypes <> app def
R58920:58923 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58889:58894 VST.veric.lift <> lifted proj
R58897:58907 VST.veric.mpred <> LiftEnviron canonstruc
R58909:58913 VST.veric.mpred <> mpred def
R58884:58886 Coq.Init.Datatypes <> app def
R58920:58923 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58889:58894 VST.veric.lift <> lifted proj
R58897:58907 VST.veric.mpred <> LiftEnviron canonstruc
R58909:58913 VST.veric.mpred <> mpred def
R58998:59000 Coq.Init.Datatypes <> app def
R59007:59009 Coq.Init.Datatypes <> nil constr
R58998:59000 Coq.Init.Datatypes <> app def
R59007:59009 Coq.Init.Datatypes <> nil constr
R59066:59068 Coq.Init.Datatypes <> app def
R59086:59088 Coq.Init.Datatypes <> nil constr
R59078:59079 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59071:59077 VST.veric.mpred <> environ ind
R59066:59068 Coq.Init.Datatypes <> app def
R59086:59088 Coq.Init.Datatypes <> nil constr
R59078:59079 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59071:59077 VST.veric.mpred <> environ ind
R59145:59147 Coq.Init.Datatypes <> app def
R59177:59179 Coq.Init.Datatypes <> nil constr
R59150:59155 VST.veric.lift <> lifted proj
R59158:59168 VST.veric.mpred <> LiftEnviron canonstruc
R59145:59147 Coq.Init.Datatypes <> app def
R59177:59179 Coq.Init.Datatypes <> nil constr
R59150:59155 VST.veric.lift <> lifted proj
R59158:59168 VST.veric.mpred <> LiftEnviron canonstruc
R59236:59238 Coq.Init.Datatypes <> app def
R59266:59268 Coq.Init.Datatypes <> nil constr
R59241:59246 VST.veric.lift <> lifted proj
R59256:59257 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59258:59262 VST.veric.mpred <> mpred def
R59249:59255 VST.veric.mpred <> environ ind
R59236:59238 Coq.Init.Datatypes <> app def
R59266:59268 Coq.Init.Datatypes <> nil constr
R59241:59246 VST.veric.lift <> lifted proj
R59256:59257 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59258:59262 VST.veric.mpred <> mpred def
R59249:59255 VST.veric.mpred <> environ ind
R59325:59327 Coq.Init.Datatypes <> app def
R59358:59360 Coq.Init.Datatypes <> nil constr
R59330:59335 VST.veric.lift <> lifted proj
R59338:59348 VST.veric.mpred <> LiftEnviron canonstruc
R59350:59354 VST.veric.mpred <> mpred def
R59325:59327 Coq.Init.Datatypes <> app def
R59358:59360 Coq.Init.Datatypes <> nil constr
R59330:59335 VST.veric.lift <> lifted proj
R59338:59348 VST.veric.mpred <> LiftEnviron canonstruc
R59350:59354 VST.veric.mpred <> mpred def
R59382:59384 Coq.Init.Datatypes <> app def
R59386:59388 Coq.Init.Datatypes <> nil constr
R59382:59384 Coq.Init.Datatypes <> app def
R59386:59388 Coq.Init.Datatypes <> nil constr
R59290:59292 Coq.Init.Datatypes <> app def
R59294:59296 Coq.Init.Datatypes <> nil constr
R59290:59292 Coq.Init.Datatypes <> app def
R59294:59296 Coq.Init.Datatypes <> nil constr
R59201:59203 Coq.Init.Datatypes <> app def
R59205:59207 Coq.Init.Datatypes <> nil constr
R59201:59203 Coq.Init.Datatypes <> app def
R59205:59207 Coq.Init.Datatypes <> nil constr
R59110:59112 Coq.Init.Datatypes <> app def
R59114:59116 Coq.Init.Datatypes <> nil constr
R59110:59112 Coq.Init.Datatypes <> app def
R59114:59116 Coq.Init.Datatypes <> nil constr
R59031:59033 Coq.Init.Datatypes <> app def
R59035:59037 Coq.Init.Datatypes <> nil constr
R59031:59033 Coq.Init.Datatypes <> app def
R59035:59037 Coq.Init.Datatypes <> nil constr
R58947:58949 Coq.Init.Datatypes <> app def
R58953:58954 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58947:58949 Coq.Init.Datatypes <> app def
R58953:58954 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58968:58971 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58972:58974 Coq.Init.Datatypes <> app def
R58833:58835 Coq.Init.Datatypes <> app def
R58839:58840 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58833:58835 Coq.Init.Datatypes <> app def
R58839:58840 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58854:58857 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58858:58860 Coq.Init.Datatypes <> app def
R58731:58733 Coq.Init.Datatypes <> app def
R58737:58738 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58731:58733 Coq.Init.Datatypes <> app def
R58737:58738 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58752:58755 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58756:58758 Coq.Init.Datatypes <> app def
R58618:58620 Coq.Init.Datatypes <> app def
R58624:58625 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58618:58620 Coq.Init.Datatypes <> app def
R58624:58625 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58639:58642 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58643:58645 Coq.Init.Datatypes <> app def
R58517:58519 Coq.Init.Datatypes <> app def
R58523:58524 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58517:58519 Coq.Init.Datatypes <> app def
R58523:58524 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58538:58541 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58542:58544 Coq.Init.Datatypes <> app def
def 59418:59434 <> not_conj_notation
binder 59437:59437 <> P:696
R59449:59452 Coq.Init.Logic <> True ind
R59505:59521 VST.floyd.canon <> not_conj_notation def
R59525:59528 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R59530:59533 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R59505:59521 VST.floyd.canon <> not_conj_notation def
R59525:59528 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R59530:59533 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R59555:59571 VST.floyd.canon <> not_conj_notation def
R59575:59578 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R59580:59582 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R59555:59571 VST.floyd.canon <> not_conj_notation def
R59575:59578 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R59580:59582 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R59604:59620 VST.floyd.canon <> not_conj_notation def
R59624:59626 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x_'<='_x not
R59628:59631 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x_'<='_x not
R59604:59620 VST.floyd.canon <> not_conj_notation def
R59624:59626 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x_'<='_x not
R59628:59631 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x_'<='_x not
R59653:59669 VST.floyd.canon <> not_conj_notation def
R59673:59676 Coq.Init.Peano <> ::nat_scope:x_'<='_x_'<='_x not
R59678:59681 Coq.Init.Peano <> ::nat_scope:x_'<='_x_'<='_x not
R59653:59669 VST.floyd.canon <> not_conj_notation def
R59673:59676 Coq.Init.Peano <> ::nat_scope:x_'<='_x_'<='_x not
R59678:59681 Coq.Init.Peano <> ::nat_scope:x_'<='_x_'<='_x not
R59705:59721 VST.floyd.canon <> not_conj_notation def
R59725:59728 Coq.Init.Peano <> ::nat_scope:x_'<='_x_'<'_x not
R59730:59732 Coq.Init.Peano <> ::nat_scope:x_'<='_x_'<'_x not
R59705:59721 VST.floyd.canon <> not_conj_notation def
R59725:59728 Coq.Init.Peano <> ::nat_scope:x_'<='_x_'<'_x not
R59730:59732 Coq.Init.Peano <> ::nat_scope:x_'<='_x_'<'_x not
R59756:59772 VST.floyd.canon <> not_conj_notation def
R59776:59778 Coq.Init.Peano <> ::nat_scope:x_'<'_x_'<='_x not
R59780:59783 Coq.Init.Peano <> ::nat_scope:x_'<'_x_'<='_x not
R59756:59772 VST.floyd.canon <> not_conj_notation def
R59776:59778 Coq.Init.Peano <> ::nat_scope:x_'<'_x_'<='_x not
R59780:59783 Coq.Init.Peano <> ::nat_scope:x_'<'_x_'<='_x not
R59818:59833 Coq.Init.Logic <> I constr
prf 59848:59863 <> split_first_PROP
binder 59866:59866 <> A:697
binder 59879:59879 <> P:698
binder 59881:59881 <> Q:699
binder 59883:59883 <> R:700
binder 59885:59885 <> S:701
R59914:59919 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59942:59944 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59921:59925 VST.floyd.canon <> PROPx def
R59941:59941 VST.floyd.canon <> S:701 var
R59930:59930 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R59935:59937 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R59932:59933 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R59931:59931 VST.floyd.canon <> P:698 var
R59934:59934 VST.floyd.canon <> Q:699 var
R59938:59938 VST.floyd.canon <> R:700 var
R59927:59927 VST.floyd.canon <> A:697 var
R59945:59949 VST.floyd.canon <> PROPx def
R59961:59961 VST.floyd.canon <> S:701 var
R59953:59954 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R59952:59952 VST.floyd.canon <> P:698 var
R59956:59957 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R59955:59955 VST.floyd.canon <> Q:699 var
R59958:59958 VST.floyd.canon <> R:700 var
R59890:59906 VST.floyd.canon <> not_conj_notation def
R59910:59911 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R59909:59909 VST.floyd.canon <> P:698 var
R59912:59912 VST.floyd.canon <> Q:699 var
R59986:59990 VST.floyd.canon <> PROPx def
R60026:60033 VST.msl.seplog <> pred_ext meth
R60042:60053 VST.msl.log_normalize <> andp_derives thm
R60070:60081 VST.msl.log_normalize <> prop_derives thm
R60026:60033 VST.msl.seplog <> pred_ext meth
R60042:60053 VST.msl.log_normalize <> andp_derives thm
R60042:60053 VST.msl.log_normalize <> andp_derives thm
R60070:60081 VST.msl.log_normalize <> prop_derives thm
R60070:60081 VST.msl.log_normalize <> prop_derives thm
R60110:60125 VST.floyd.canon <> split_first_PROP thm
prf 60167:60178 <> perm_derives
binder 60190:60194 <> Delta:702
binder 60196:60196 <> P:703
binder 60198:60198 <> Q:704
binder 60200:60200 <> R:705
binder 60202:60203 <> P':706
binder 60205:60206 <> Q':707
binder 60208:60209 <> R':708
R60232:60239 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R60256:60263 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R60280:60287 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R60288:60294 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R60300:60301 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R60329:60333 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R60295:60299 VST.floyd.canon <> Delta:702 var
R60302:60306 VST.floyd.canon <> PROPx def
R60311:60316 VST.floyd.canon <> LOCALx def
R60321:60324 VST.floyd.canon <> SEPx def
R60326:60326 VST.floyd.canon <> R:705 var
R60318:60318 VST.floyd.canon <> Q:704 var
R60308:60308 VST.floyd.canon <> P:703 var
R60334:60338 VST.floyd.canon <> PROPx def
R60344:60349 VST.floyd.canon <> LOCALx def
R60355:60358 VST.floyd.canon <> SEPx def
R60360:60361 VST.floyd.canon <> R':708 var
R60351:60352 VST.floyd.canon <> Q':707 var
R60340:60341 VST.floyd.canon <> P':706 var
R60264:60274 Coq.Sorting.Permutation <> Permutation ind
R60278:60279 VST.floyd.canon <> R':708 var
R60276:60276 VST.floyd.canon <> R:705 var
R60240:60250 Coq.Sorting.Permutation <> Permutation ind
R60254:60255 VST.floyd.canon <> Q':707 var
R60252:60252 VST.floyd.canon <> Q:704 var
R60216:60226 Coq.Sorting.Permutation <> Permutation ind
R60230:60231 VST.floyd.canon <> P':706 var
R60228:60228 VST.floyd.canon <> P:703 var
R60396:60412 VST.floyd.canon <> PROPx_Permutation thm
R60396:60412 VST.floyd.canon <> PROPx_Permutation thm
R60396:60412 VST.floyd.canon <> PROPx_Permutation thm
R60435:60452 VST.floyd.canon <> LOCALx_Permutation thm
R60435:60452 VST.floyd.canon <> LOCALx_Permutation thm
R60435:60452 VST.floyd.canon <> LOCALx_Permutation thm
R60475:60490 VST.floyd.canon <> SEPx_Permutation thm
R60475:60490 VST.floyd.canon <> SEPx_Permutation thm
R60475:60490 VST.floyd.canon <> SEPx_Permutation thm
R60510:60519 VST.msl.seplog <> andp_left2 meth
R60510:60519 VST.msl.seplog <> andp_left2 meth
prf 60540:60555 <> semax_frame_perm
R60575:60578 Coq.Init.Datatypes <> list ind
R60580:60587 VST.floyd.canon <> localdef ind
binder 60566:60571 <> Qframe:709
R60609:60612 Coq.Init.Datatypes <> list ind
R60614:60618 VST.veric.mpred <> mpred def
binder 60600:60605 <> Rframe:710
R60639:60648 VST.veric.juicy_extspec <> OracleKind class
binder 60631:60635 <> Espec:711
R60656:60664 VST.veric.mpred <> compspecs class
binder 60652:60653 <> cs:712
R60685:60693 VST.veric.seplog <> tycontext ind
binder 60677:60681 <> Delta:713
R60710:60713 Coq.Init.Datatypes <> list ind
binder 60706:60706 <> P:714
R60726:60729 Coq.Init.Datatypes <> list ind
R60731:60738 VST.floyd.canon <> localdef ind
binder 60722:60722 <> Q:715
R60746:60754 compcert.cfrontend.Clight <> statement ind
binder 60742:60742 <> c:716
R60771:60774 Coq.Init.Datatypes <> list ind
R60776:60780 VST.veric.mpred <> mpred def
binder 60767:60767 <> R:717
R60798:60801 Coq.Init.Datatypes <> list ind
R60803:60810 VST.floyd.canon <> localdef ind
binder 60793:60794 <> Q1:718
R60819:60822 Coq.Init.Datatypes <> list ind
R60824:60828 VST.veric.mpred <> mpred def
binder 60814:60815 <> R1:719
R60846:60849 Coq.Init.Datatypes <> list ind
binder 60841:60842 <> P2:720
R60863:60866 Coq.Init.Datatypes <> list ind
R60868:60875 VST.floyd.canon <> localdef ind
binder 60858:60859 <> Q2:721
R60893:60896 Coq.Init.Datatypes <> list ind
R60898:60902 VST.veric.mpred <> mpred def
binder 60888:60889 <> R2:722
R60963:60973 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61002:61012 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61042:61052 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61160:61170 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61171:61175 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R61225:61241 VST.veric.SeparationLogic <> normal_ret_assert def
R61256:61260 VST.floyd.canon <> PROPx def
R61266:61271 VST.floyd.canon <> LOCALx def
R61289:61292 VST.floyd.canon <> SEPx def
R61297:61300 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R61295:61296 VST.floyd.canon <> R2:722 var
R61301:61306 VST.floyd.canon <> Rframe:710 var
R61276:61279 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R61274:61275 VST.floyd.canon <> Q2:721 var
R61280:61285 VST.floyd.canon <> Qframe:709 var
R61262:61263 VST.floyd.canon <> P2:720 var
R61213:61213 VST.floyd.canon <> c:716 var
R61184:61188 VST.floyd.canon <> PROPx def
R61193:61198 VST.floyd.canon <> LOCALx def
R61203:61206 VST.floyd.canon <> SEPx def
R61208:61208 VST.floyd.canon <> R:717 var
R61200:61200 VST.floyd.canon <> Q:715 var
R61190:61190 VST.floyd.canon <> P:714 var
R61177:61181 VST.floyd.canon <> Delta:713 var
R61053:61057 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R61109:61125 VST.veric.SeparationLogic <> normal_ret_assert def
R61128:61132 VST.floyd.canon <> PROPx def
R61138:61143 VST.floyd.canon <> LOCALx def
R61149:61152 VST.floyd.canon <> SEPx def
R61154:61155 VST.floyd.canon <> R2:722 var
R61145:61146 VST.floyd.canon <> Q2:721 var
R61134:61135 VST.floyd.canon <> P2:720 var
R61097:61097 VST.floyd.canon <> c:716 var
R61066:61070 VST.floyd.canon <> PROPx def
R61075:61080 VST.floyd.canon <> LOCALx def
R61086:61089 VST.floyd.canon <> SEPx def
R61091:61092 VST.floyd.canon <> R1:719 var
R61082:61083 VST.floyd.canon <> Q1:718 var
R61072:61072 VST.floyd.canon <> P:714 var
R61059:61063 VST.floyd.canon <> Delta:713 var
R61013:61023 Coq.Sorting.Permutation <> Permutation ind
R61041:61041 VST.floyd.canon <> R:717 var
R61032:61035 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R61026:61031 VST.floyd.canon <> Rframe:710 var
R61036:61037 VST.floyd.canon <> R1:719 var
R60974:60984 Coq.Sorting.Permutation <> Permutation ind
R61001:61001 VST.floyd.canon <> Q:715 var
R60993:60996 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R60987:60992 VST.floyd.canon <> Qframe:709 var
R60997:60998 VST.floyd.canon <> Q1:718 var
R60913:60930 VST.veric.SeparationLogic <> closed_wrt_modvars def
R60935:60940 VST.floyd.canon <> LOCALx def
R60950:60953 VST.floyd.canon <> SEPx def
R60955:60960 VST.floyd.canon <> Rframe:710 var
R60942:60947 VST.floyd.canon <> Qframe:709 var
R60932:60932 VST.floyd.canon <> c:716 var
R61339:61350 VST.floyd.canon <> semax_frame1 thm
R61339:61350 VST.floyd.canon <> semax_frame1 thm
R61398:61409 VST.floyd.canon <> perm_derives thm
R61398:61409 VST.floyd.canon <> perm_derives thm
R61419:61434 Coq.Sorting.Permutation <> Permutation_refl thm
R61419:61434 Coq.Sorting.Permutation <> Permutation_refl thm
R61445:61454 Coq.Sorting.Permutation <> perm_trans constr
R61464:61478 Coq.Sorting.Permutation <> Permutation_sym thm
R61501:61520 Coq.Sorting.Permutation <> Permutation_app_comm thm
R61445:61454 Coq.Sorting.Permutation <> perm_trans constr
R61464:61478 Coq.Sorting.Permutation <> Permutation_sym thm
R61501:61520 Coq.Sorting.Permutation <> Permutation_app_comm thm
R61532:61541 Coq.Sorting.Permutation <> perm_trans constr
R61551:61565 Coq.Sorting.Permutation <> Permutation_sym thm
R61588:61607 Coq.Sorting.Permutation <> Permutation_app_comm thm
R61532:61541 Coq.Sorting.Permutation <> perm_trans constr
R61551:61565 Coq.Sorting.Permutation <> Permutation_sym thm
R61588:61607 Coq.Sorting.Permutation <> Permutation_app_comm thm
prf 61623:61641 <> semax_post_flipped'
R61667:61668 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61669:61673 VST.veric.mpred <> mpred def
R61660:61666 VST.veric.mpred <> environ ind
binder 61656:61657 <> R':723
binder 61676:61680 <> Espec:724
R61687:61695 VST.veric.mpred <> compspecs class
binder 61683:61684 <> cs:725
R61706:61714 VST.veric.seplog <> tycontext ind
binder 61699:61703 <> Delta:726
R61730:61731 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61732:61736 VST.veric.mpred <> mpred def
R61723:61729 VST.veric.mpred <> environ ind
binder 61718:61718 <> R:727
binder 61720:61720 <> P:728
binder 61739:61739 <> c:729
R61797:61807 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61830:61840 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61842:61846 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R61868:61884 VST.veric.SeparationLogic <> normal_ret_assert def
R61886:61886 VST.floyd.canon <> R:727 var
R61865:61865 VST.floyd.canon <> c:729 var
R61863:61863 VST.floyd.canon <> P:728 var
R61857:61861 VST.floyd.canon <> Delta:726 var
R61851:61855 VST.floyd.canon <> Espec:724 var
R61848:61849 VST.floyd.canon <> cs:725 var
R61808:61814 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R61820:61821 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R61824:61828 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R61815:61819 VST.floyd.canon <> Delta:726 var
R61822:61823 VST.floyd.canon <> R':723 var
R61829:61829 VST.floyd.canon <> R:727 var
R61750:61754 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R61776:61792 VST.veric.SeparationLogic <> normal_ret_assert def
R61794:61795 VST.floyd.canon <> R':723 var
R61773:61773 VST.floyd.canon <> c:729 var
R61771:61771 VST.floyd.canon <> P:728 var
R61765:61769 VST.floyd.canon <> Delta:726 var
R61759:61763 VST.floyd.canon <> Espec:724 var
R61756:61757 VST.floyd.canon <> cs:725 var
R61913:61930 VST.floyd.canon <> semax_post_flipped thm
R61977:61986 VST.msl.seplog <> andp_left2 meth
R61913:61930 VST.floyd.canon <> semax_post_flipped thm
R61977:61986 VST.msl.seplog <> andp_left2 meth
R61977:61986 VST.msl.seplog <> andp_left2 meth
R61977:61986 VST.msl.seplog <> andp_left2 meth
R62104:62119 VST.floyd.canon <> semax_frame_perm thm
R62203:62205 Coq.Init.Datatypes <> app def
R62214:62216 Coq.Init.Datatypes <> app def
R62233:62251 VST.floyd.canon <> semax_post_flipped' thm
R62276:62291 VST.floyd.canon <> semax_frame_perm thm
R62373:62375 Coq.Init.Datatypes <> app def
R62384:62386 Coq.Init.Datatypes <> app def
R62415:62426 VST.floyd.canon <> perm_derives thm
R62532:62547 VST.floyd.canon <> semax_frame_perm thm
R62549:62551 Coq.Init.Datatypes <> nil constr
R62628:62630 Coq.Init.Datatypes <> app def
R62639:62641 Coq.Init.Datatypes <> app def
R62658:62676 VST.floyd.canon <> semax_post_flipped' thm
R62701:62716 VST.floyd.canon <> semax_frame_perm thm
R62718:62720 Coq.Init.Datatypes <> nil constr
R62795:62797 Coq.Init.Datatypes <> app def
R62806:62808 Coq.Init.Datatypes <> app def
R62837:62848 VST.floyd.canon <> perm_derives thm
prf 62877:62891 <> semax_pre_later
binder 62902:62903 <> P':730
binder 62905:62909 <> Espec:731
R62916:62924 VST.veric.mpred <> compspecs class
binder 62912:62913 <> cs:732
binder 62927:62931 <> Delta:733
binder 62933:62934 <> P1:734
binder 62936:62937 <> P2:735
binder 62939:62940 <> P3:736
binder 62942:62942 <> c:737
binder 62944:62944 <> R:738
R63003:63011 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63045:63054 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63056:63060 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R63117:63117 VST.floyd.canon <> R:738 var
R63115:63115 VST.floyd.canon <> c:737 var
R63078:63081 VST.msl.seplog <> ::logic:'|>'_x not
R63112:63112 VST.msl.seplog <> ::logic:'|>'_x not
R63082:63086 VST.floyd.canon <> PROPx def
R63092:63097 VST.floyd.canon <> LOCALx def
R63103:63106 VST.floyd.canon <> SEPx def
R63108:63109 VST.floyd.canon <> P3:736 var
R63099:63100 VST.floyd.canon <> P2:735 var
R63088:63089 VST.floyd.canon <> P1:734 var
R63071:63075 VST.floyd.canon <> Delta:733 var
R63065:63069 VST.floyd.canon <> Espec:731 var
R63062:63063 VST.floyd.canon <> cs:732 var
R63013:63017 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R63044:63044 VST.floyd.canon <> R:738 var
R63042:63042 VST.floyd.canon <> c:737 var
R63035:63037 VST.msl.seplog <> ::logic:'|>'_x not
R63038:63039 VST.floyd.canon <> P':730 var
R63028:63032 VST.floyd.canon <> Delta:733 var
R63022:63026 VST.floyd.canon <> Espec:731 var
R63019:63020 VST.floyd.canon <> cs:732 var
R62952:62958 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R62964:62965 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R62996:63000 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R62959:62963 VST.floyd.canon <> Delta:733 var
R62966:62970 VST.floyd.canon <> PROPx def
R62976:62981 VST.floyd.canon <> LOCALx def
R62987:62990 VST.floyd.canon <> SEPx def
R62992:62993 VST.floyd.canon <> P3:736 var
R62983:62984 VST.floyd.canon <> P2:735 var
R62972:62973 VST.floyd.canon <> P1:734 var
R63001:63002 VST.floyd.canon <> P':730 var
R63142:63157 VST.floyd.canon <> semax_pre_simple thm
R63142:63157 VST.floyd.canon <> semax_pre_simple thm
R63181:63193 VST.msl.seplog <> derives_trans meth
R63206:63218 VST.msl.log_normalize <> later_derives thm
R63181:63193 VST.msl.seplog <> derives_trans meth
R63206:63218 VST.msl.log_normalize <> later_derives thm
R63239:63251 VST.msl.seplog <> derives_trans meth
R63239:63251 VST.msl.seplog <> derives_trans meth
R63263:63275 VST.msl.log_normalize <> later_derives thm
R63284:63295 VST.msl.seplog <> derives_refl meth
R63263:63275 VST.msl.log_normalize <> later_derives thm
R63284:63295 VST.msl.seplog <> derives_refl meth
R63306:63315 VST.msl.log_normalize <> later_andp thm
R63324:63335 VST.msl.log_normalize <> andp_derives thm
R63350:63358 VST.msl.seplog <> now_later meth
R63306:63315 VST.msl.log_normalize <> later_andp thm
R63306:63315 VST.msl.log_normalize <> later_andp thm
R63324:63335 VST.msl.log_normalize <> andp_derives thm
R63350:63358 VST.msl.seplog <> now_later meth
prf 63373:63391 <> PROP_LOCAL_SEP_cons
binder 63401:63402 <> P1:739
binder 63404:63405 <> P2:740
binder 63407:63408 <> P3:741
binder 63410:63410 <> F:742
R63452:63456 Coq.Init.Logic <> ::type_scope:x_'='_x not
R63415:63419 VST.floyd.canon <> PROPx def
R63425:63430 VST.floyd.canon <> LOCALx def
R63436:63439 VST.floyd.canon <> SEPx def
R63443:63446 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R63442:63442 VST.floyd.canon <> F:742 var
R63447:63448 VST.floyd.canon <> P3:741 var
R63432:63433 VST.floyd.canon <> P2:740 var
R63421:63422 VST.floyd.canon <> P1:739 var
R63459:63461 VST.msl.seplog <> ::logic:x_'*'_x not
R63457:63457 VST.veric.lift LiftNotation :::'`'_x not
R63458:63458 VST.floyd.canon <> F:742 var
R63462:63466 VST.floyd.canon <> PROPx def
R63472:63477 VST.floyd.canon <> LOCALx def
R63483:63486 VST.floyd.canon <> SEPx def
R63488:63489 VST.floyd.canon <> P3:741 var
R63479:63480 VST.floyd.canon <> P2:740 var
R63468:63469 VST.floyd.canon <> P1:739 var
R63521:63524 VST.floyd.canon <> SEPx def
R63528:63531 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R63545:63547 VST.msl.seplog <> ::logic:x_'*'_x not
R63543:63543 VST.veric.lift LiftNotation :::'`'_x not
R63548:63551 VST.floyd.canon <> SEPx def
R63521:63524 VST.floyd.canon <> SEPx def
R63528:63531 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R63545:63547 VST.msl.seplog <> ::logic:x_'*'_x not
R63543:63543 VST.veric.lift LiftNotation :::'`'_x not
R63548:63551 VST.floyd.canon <> SEPx def
R63567:63571 VST.floyd.canon <> PROPx def
R63574:63579 VST.floyd.canon <> LOCALx def
R63626:63630 VST.veric.SeparationLogic <> local def
R63633:63637 VST.veric.mpred <> lift1 def
R63657:63664 VST.msl.seplog <> pred_ext meth
R63657:63664 VST.msl.seplog <> pred_ext meth
R63692:63701 VST.msl.seplog <> andp_right meth
R63692:63701 VST.msl.seplog <> andp_right meth
R63720:63729 VST.msl.seplog <> prop_right meth
R63720:63729 VST.msl.seplog <> prop_right meth
R63763:63772 VST.msl.seplog <> andp_right meth
R63763:63772 VST.msl.seplog <> andp_right meth
R63791:63800 VST.msl.seplog <> prop_right meth
R63791:63800 VST.msl.seplog <> prop_right meth
prf 63821:63832 <> semax_frame'
R63850:63859 VST.veric.juicy_extspec <> OracleKind class
binder 63843:63847 <> Espec:743
R63866:63874 VST.veric.mpred <> compspecs class
binder 63862:63863 <> CS:744
binder 63887:63891 <> Delta:745
binder 63893:63894 <> P1:746
binder 63896:63897 <> P2:747
binder 63899:63900 <> P3:748
binder 63902:63902 <> s:749
binder 63904:63905 <> Q1:750
binder 63907:63908 <> Q2:751
binder 63910:63911 <> Q3:752
binder 63913:63913 <> F:753
R64037:64042 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R64044:64048 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R64118:64134 VST.veric.SeparationLogic <> normal_ret_assert def
R64137:64141 VST.floyd.canon <> PROPx def
R64147:64152 VST.floyd.canon <> LOCALx def
R64158:64161 VST.floyd.canon <> SEPx def
R64165:64168 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R64164:64164 VST.floyd.canon <> F:753 var
R64169:64170 VST.floyd.canon <> Q3:752 var
R64154:64155 VST.floyd.canon <> Q2:751 var
R64143:64144 VST.floyd.canon <> Q1:750 var
R64109:64109 VST.floyd.canon <> s:749 var
R64070:64074 VST.floyd.canon <> PROPx def
R64080:64085 VST.floyd.canon <> LOCALx def
R64091:64094 VST.floyd.canon <> SEPx def
R64098:64101 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R64097:64097 VST.floyd.canon <> F:753 var
R64102:64103 VST.floyd.canon <> P3:748 var
R64087:64088 VST.floyd.canon <> P2:747 var
R64076:64077 VST.floyd.canon <> P1:746 var
R64059:64063 VST.floyd.canon <> Delta:745 var
R64053:64057 VST.floyd.canon <> Espec:743 var
R64050:64051 VST.floyd.canon <> CS:744 var
R63919:63923 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R63986:64002 VST.veric.SeparationLogic <> normal_ret_assert def
R64005:64009 VST.floyd.canon <> PROPx def
R64015:64020 VST.floyd.canon <> LOCALx def
R64026:64029 VST.floyd.canon <> SEPx def
R64031:64032 VST.floyd.canon <> Q3:752 var
R64022:64023 VST.floyd.canon <> Q2:751 var
R64011:64012 VST.floyd.canon <> Q1:750 var
R63977:63977 VST.floyd.canon <> s:749 var
R63945:63949 VST.floyd.canon <> PROPx def
R63955:63960 VST.floyd.canon <> LOCALx def
R63966:63969 VST.floyd.canon <> SEPx def
R63971:63972 VST.floyd.canon <> P3:748 var
R63962:63963 VST.floyd.canon <> P2:747 var
R63951:63952 VST.floyd.canon <> P1:746 var
R63934:63938 VST.floyd.canon <> Delta:745 var
R63928:63932 VST.floyd.canon <> Espec:743 var
R63925:63926 VST.floyd.canon <> CS:744 var
R64206:64224 VST.floyd.canon <> PROP_LOCAL_SEP_cons thm
R64206:64224 VST.floyd.canon <> PROP_LOCAL_SEP_cons thm
R64206:64224 VST.floyd.canon <> PROP_LOCAL_SEP_cons thm
R64206:64224 VST.floyd.canon <> PROP_LOCAL_SEP_cons thm
R64206:64224 VST.floyd.canon <> PROP_LOCAL_SEP_cons thm
R64238:64254 VST.veric.SeparationLogic <> normal_ret_assert def
R64260:64262 VST.msl.seplog <> ::logic:x_'*'_x not
R64257:64258 VST.veric.lift LiftNotation :::'`'_x not
R64263:64267 VST.floyd.canon <> PROPx def
R64273:64278 VST.floyd.canon <> LOCALx def
R64284:64287 VST.floyd.canon <> SEPx def
R64306:64321 VST.veric.SeparationLogic <> frame_ret_assert def
R64377:64377 VST.veric.lift LiftNotation :::'`'_x not
R64324:64340 VST.veric.SeparationLogic <> normal_ret_assert def
R64343:64347 VST.floyd.canon <> PROPx def
R64353:64358 VST.floyd.canon <> LOCALx def
R64364:64367 VST.floyd.canon <> SEPx def
R64238:64254 VST.veric.SeparationLogic <> normal_ret_assert def
R64260:64262 VST.msl.seplog <> ::logic:x_'*'_x not
R64257:64258 VST.veric.lift LiftNotation :::'`'_x not
R64263:64267 VST.floyd.canon <> PROPx def
R64273:64278 VST.floyd.canon <> LOCALx def
R64284:64287 VST.floyd.canon <> SEPx def
R64306:64321 VST.veric.SeparationLogic <> frame_ret_assert def
R64377:64377 VST.veric.lift LiftNotation :::'`'_x not
R64324:64340 VST.veric.SeparationLogic <> normal_ret_assert def
R64343:64347 VST.floyd.canon <> PROPx def
R64353:64358 VST.floyd.canon <> LOCALx def
R64364:64367 VST.floyd.canon <> SEPx def
R64395:64405 VST.msl.seplog <> sepcon_comm meth
R64395:64405 VST.msl.seplog <> sepcon_comm meth
R64395:64405 VST.msl.seplog <> sepcon_comm meth
R64418:64428 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_frame prfax
R64418:64428 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_frame prfax
R64476:64487 VST.floyd.assert_lemmas <> frame_normal thm
R64476:64487 VST.floyd.assert_lemmas <> frame_normal thm
R64476:64487 VST.floyd.assert_lemmas <> frame_normal thm
R64505:64515 VST.msl.seplog <> sepcon_comm meth
R64505:64515 VST.msl.seplog <> sepcon_comm meth
prf 64530:64542 <> semax_frame''
R64560:64569 VST.veric.juicy_extspec <> OracleKind class
binder 64553:64557 <> Espec:754
R64576:64584 VST.veric.mpred <> compspecs class
binder 64572:64573 <> CS:755
binder 64597:64601 <> Delta:756
binder 64603:64604 <> P1:757
binder 64606:64607 <> P2:758
binder 64609:64610 <> P3:759
binder 64612:64612 <> s:760
binder 64614:64614 <> t:761
binder 64616:64617 <> Q1:762
binder 64619:64620 <> Q2:763
binder 64622:64623 <> Q3:764
binder 64625:64625 <> F:765
R64789:64794 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R64796:64800 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R64870:64885 VST.veric.SeparationLogic <> frame_ret_assert def
R64964:64966 VST.msl.seplog <> emp meth
R64896:64919 VST.veric.SeparationLogic <> function_body_ret_assert def
R64924:64928 VST.floyd.canon <> PROPx def
R64934:64939 VST.floyd.canon <> LOCALx def
R64945:64948 VST.floyd.canon <> SEPx def
R64952:64955 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R64951:64951 VST.floyd.canon <> F:765 var
R64956:64957 VST.floyd.canon <> Q3:764 var
R64941:64942 VST.floyd.canon <> Q2:763 var
R64930:64931 VST.floyd.canon <> Q1:762 var
R64921:64921 VST.floyd.canon <> t:761 var
R64861:64861 VST.floyd.canon <> s:760 var
R64822:64826 VST.floyd.canon <> PROPx def
R64832:64837 VST.floyd.canon <> LOCALx def
R64843:64846 VST.floyd.canon <> SEPx def
R64850:64853 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R64849:64849 VST.floyd.canon <> F:765 var
R64854:64855 VST.floyd.canon <> P3:759 var
R64839:64840 VST.floyd.canon <> P2:758 var
R64828:64829 VST.floyd.canon <> P1:757 var
R64811:64815 VST.floyd.canon <> Delta:756 var
R64805:64809 VST.floyd.canon <> Espec:754 var
R64802:64803 VST.floyd.canon <> CS:755 var
R64631:64635 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R64698:64713 VST.veric.SeparationLogic <> frame_ret_assert def
R64785:64787 VST.msl.seplog <> emp meth
R64724:64747 VST.veric.SeparationLogic <> function_body_ret_assert def
R64752:64756 VST.floyd.canon <> PROPx def
R64762:64767 VST.floyd.canon <> LOCALx def
R64773:64776 VST.floyd.canon <> SEPx def
R64778:64779 VST.floyd.canon <> Q3:764 var
R64769:64770 VST.floyd.canon <> Q2:763 var
R64758:64759 VST.floyd.canon <> Q1:762 var
R64749:64749 VST.floyd.canon <> t:761 var
R64689:64689 VST.floyd.canon <> s:760 var
R64657:64661 VST.floyd.canon <> PROPx def
R64667:64672 VST.floyd.canon <> LOCALx def
R64678:64681 VST.floyd.canon <> SEPx def
R64683:64684 VST.floyd.canon <> P3:759 var
R64674:64675 VST.floyd.canon <> P2:758 var
R64663:64664 VST.floyd.canon <> P1:757 var
R64646:64650 VST.floyd.canon <> Delta:756 var
R64640:64644 VST.floyd.canon <> Espec:754 var
R64637:64638 VST.floyd.canon <> CS:755 var
R64998:65016 VST.floyd.canon <> PROP_LOCAL_SEP_cons thm
R64998:65016 VST.floyd.canon <> PROP_LOCAL_SEP_cons thm
R64998:65016 VST.floyd.canon <> PROP_LOCAL_SEP_cons thm
R64998:65016 VST.floyd.canon <> PROP_LOCAL_SEP_cons thm
R64998:65016 VST.floyd.canon <> PROP_LOCAL_SEP_cons thm
R65030:65045 VST.veric.SeparationLogic <> frame_ret_assert def
R65115:65117 VST.msl.seplog <> emp meth
R65048:65071 VST.veric.SeparationLogic <> function_body_ret_assert def
R65079:65081 VST.msl.seplog <> ::logic:x_'*'_x not
R65076:65077 VST.veric.lift LiftNotation :::'`'_x not
R65082:65086 VST.floyd.canon <> PROPx def
R65092:65097 VST.floyd.canon <> LOCALx def
R65103:65106 VST.floyd.canon <> SEPx def
R65130:65145 VST.veric.SeparationLogic <> frame_ret_assert def
R65233:65233 VST.veric.lift LiftNotation :::'`'_x not
R65148:65163 VST.veric.SeparationLogic <> frame_ret_assert def
R65227:65229 VST.msl.seplog <> emp meth
R65166:65189 VST.veric.SeparationLogic <> function_body_ret_assert def
R65194:65198 VST.floyd.canon <> PROPx def
R65204:65209 VST.floyd.canon <> LOCALx def
R65215:65218 VST.floyd.canon <> SEPx def
R65030:65045 VST.veric.SeparationLogic <> frame_ret_assert def
R65115:65117 VST.msl.seplog <> emp meth
R65048:65071 VST.veric.SeparationLogic <> function_body_ret_assert def
R65079:65081 VST.msl.seplog <> ::logic:x_'*'_x not
R65076:65077 VST.veric.lift LiftNotation :::'`'_x not
R65082:65086 VST.floyd.canon <> PROPx def
R65092:65097 VST.floyd.canon <> LOCALx def
R65103:65106 VST.floyd.canon <> SEPx def
R65130:65145 VST.veric.SeparationLogic <> frame_ret_assert def
R65233:65233 VST.veric.lift LiftNotation :::'`'_x not
R65148:65163 VST.veric.SeparationLogic <> frame_ret_assert def
R65227:65229 VST.msl.seplog <> emp meth
R65166:65189 VST.veric.SeparationLogic <> function_body_ret_assert def
R65194:65198 VST.floyd.canon <> PROPx def
R65204:65209 VST.floyd.canon <> LOCALx def
R65215:65218 VST.floyd.canon <> SEPx def
R65251:65261 VST.msl.seplog <> sepcon_comm meth
R65251:65261 VST.msl.seplog <> sepcon_comm meth
R65251:65261 VST.msl.seplog <> sepcon_comm meth
R65274:65284 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_frame prfax
R65274:65284 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_frame prfax
R65400:65410 VST.msl.seplog <> sepcon_comm meth
R65400:65410 VST.msl.seplog <> sepcon_comm meth
R65400:65410 VST.msl.seplog <> sepcon_comm meth
R65424:65431 VST.veric.SeparationLogic <> bind_ret def
R65526:65533 VST.veric.SeparationLogic <> bind_ret def
R65596:65606 VST.msl.seplog <> sepcon_comm meth
R65596:65606 VST.msl.seplog <> sepcon_comm meth
R65596:65606 VST.msl.seplog <> sepcon_comm meth
R65659:65669 VST.msl.seplog <> sepcon_comm meth
R65659:65669 VST.msl.seplog <> sepcon_comm meth
def 65689:65700 <> is_void_type
R65707:65710 compcert.cfrontend.Ctypes <> type ind
binder 65703:65704 <> ty:766
R65715:65718 Coq.Init.Datatypes <> bool ind
R65730:65731 VST.floyd.canon <> ty:766 var
R65738:65742 compcert.cfrontend.Ctypes <> Tvoid constr
R65747:65750 Coq.Init.Datatypes <> true constr
R65759:65763 Coq.Init.Datatypes <> false constr
def 65782:65790 <> ret_tycon
R65800:65808 VST.veric.seplog <> tycontext ind
binder 65793:65797 <> Delta:768
R65812:65820 VST.veric.seplog <> tycontext ind
R65827:65838 VST.veric.seplog <> mk_tycontext constr
R66070:66080 VST.veric.seplog <> annotations def
R66082:66086 VST.floyd.canon <> Delta:768 var
R66046:66055 VST.veric.seplog <> glob_specs def
R66057:66061 VST.floyd.canon <> Delta:768 var
R66022:66031 VST.veric.seplog <> glob_types def
R66033:66037 VST.floyd.canon <> Delta:768 var
R66000:66007 VST.veric.seplog <> ret_type def
R66009:66013 VST.floyd.canon <> Delta:768 var
R65979:65989 compcert.lib.Maps PTree empty def
R65849:65860 VST.floyd.canon <> is_void_type def
R65863:65870 VST.veric.seplog <> ret_type def
R65872:65876 VST.floyd.canon <> Delta:768 var
R65919:65927 compcert.lib.Maps PTree set def
R65956:65966 compcert.lib.Maps PTree empty def
R65939:65946 VST.veric.seplog <> ret_type def
R65948:65952 VST.floyd.canon <> Delta:768 var
R65929:65936 VST.veric.SeparationLogic <> ret_temp def
R65892:65902 compcert.lib.Maps PTree empty def
prf 66097:66112 <> tc_environ_Tvoid
binder 66124:66128 <> Delta:769
binder 66130:66132 <> rho:770
R66155:66158 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R66181:66187 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R66188:66197 VST.veric.SeparationLogic <> tc_environ def
R66218:66229 VST.veric.SeparationLogic <> globals_only def
R66231:66233 VST.floyd.canon <> rho:770 var
R66200:66208 VST.floyd.canon <> ret_tycon def
R66210:66214 VST.floyd.canon <> Delta:769 var
R66173:66175 Coq.Init.Logic <> ::type_scope:x_'='_x not
R66159:66166 VST.veric.seplog <> ret_type def
R66168:66172 VST.floyd.canon <> Delta:769 var
R66176:66180 compcert.cfrontend.Ctypes <> Tvoid constr
R66135:66144 VST.veric.SeparationLogic <> tc_environ def
R66152:66154 VST.floyd.canon <> rho:770 var
R66146:66150 VST.floyd.canon <> Delta:769 var
R66261:66269 VST.floyd.canon <> ret_tycon def
R66369:66380 VST.veric.SeparationLogic <> globals_only def
R66413:66424 compcert.lib.Maps PTree gempty thm
R66413:66424 compcert.lib.Maps PTree gempty thm
R66413:66424 compcert.lib.Maps PTree gempty thm
R66473:66481 VST.floyd.canon <> ret_tycon def
R66484:66492 VST.veric.seplog <> var_types def
R66518:66529 compcert.lib.Maps PTree gempty thm
R66518:66529 compcert.lib.Maps PTree gempty thm
R66518:66529 compcert.lib.Maps PTree gempty thm
R66586:66590 VST.veric.mpred <> ve_of def
R66593:66604 VST.veric.SeparationLogic <> globals_only def
R66607:66613 VST.veric.mpred Map get def
R66616:66624 VST.veric.mpred Map empty def
prf 66652:66663 <> semax_post''
binder 66673:66674 <> R':771
binder 66676:66680 <> Espec:772
R66687:66695 VST.veric.mpred <> compspecs class
binder 66683:66684 <> cs:773
binder 66698:66702 <> Delta:774
binder 66704:66704 <> R:775
binder 66706:66706 <> P:776
binder 66708:66708 <> c:777
binder 66710:66710 <> t:778
R66742:66756 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R66789:66798 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R66879:66888 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R66890:66894 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R66916:66931 VST.veric.SeparationLogic <> frame_ret_assert def
R66964:66966 VST.msl.seplog <> emp meth
R66934:66957 VST.veric.SeparationLogic <> function_body_ret_assert def
R66961:66961 VST.floyd.canon <> R:775 var
R66959:66959 VST.floyd.canon <> t:778 var
R66913:66913 VST.floyd.canon <> c:777 var
R66911:66911 VST.floyd.canon <> P:776 var
R66905:66909 VST.floyd.canon <> Delta:774 var
R66899:66903 VST.floyd.canon <> Espec:772 var
R66896:66897 VST.floyd.canon <> cs:773 var
R66800:66804 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R66826:66841 VST.veric.SeparationLogic <> frame_ret_assert def
R66875:66877 VST.msl.seplog <> emp meth
R66844:66867 VST.veric.SeparationLogic <> function_body_ret_assert def
R66871:66872 VST.floyd.canon <> R':771 var
R66869:66869 VST.floyd.canon <> t:778 var
R66823:66823 VST.floyd.canon <> c:777 var
R66821:66821 VST.floyd.canon <> P:776 var
R66815:66819 VST.floyd.canon <> Delta:774 var
R66809:66813 VST.floyd.canon <> Espec:772 var
R66806:66807 VST.floyd.canon <> cs:773 var
R66757:66763 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R66779:66780 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R66783:66787 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R66764:66772 VST.floyd.canon <> ret_tycon def
R66774:66778 VST.floyd.canon <> Delta:774 var
R66781:66782 VST.floyd.canon <> R':771 var
R66788:66788 VST.floyd.canon <> R:775 var
R66725:66727 Coq.Init.Logic <> ::type_scope:x_'='_x not
R66724:66724 VST.floyd.canon <> t:778 var
R66728:66735 VST.veric.seplog <> ret_type def
R66737:66741 VST.floyd.canon <> Delta:774 var
R66992:67001 VST.floyd.canon <> semax_post thm
R66992:67001 VST.floyd.canon <> semax_post thm
R67139:67146 VST.veric.seplog <> ret_type def
R67139:67146 VST.veric.seplog <> ret_type def
R67218:67227 VST.msl.seplog <> sepcon_emp meth
R67218:67227 VST.msl.seplog <> sepcon_emp meth
R67218:67227 VST.msl.seplog <> sepcon_emp meth
R67218:67227 VST.msl.seplog <> sepcon_emp meth
R67218:67227 VST.msl.seplog <> sepcon_emp meth
R67239:67243 VST.veric.SeparationLogic <> local def
R67246:67250 VST.veric.mpred <> lift1 def
R67280:67295 VST.floyd.canon <> tc_environ_Tvoid thm
R67280:67295 VST.floyd.canon <> tc_environ_Tvoid thm
R67318:67330 VST.msl.seplog <> derives_trans meth
R67318:67330 VST.msl.seplog <> derives_trans meth
R67384:67393 VST.msl.seplog <> andp_right meth
R67384:67393 VST.msl.seplog <> andp_right meth
R67410:67419 VST.msl.seplog <> prop_right meth
R67410:67419 VST.msl.seplog <> prop_right meth
R67501:67505 VST.veric.SeparationLogic <> local def
R67508:67512 VST.veric.mpred <> lift1 def
R67593:67613 VST.veric.seplog <> typecheck_var_environ def
R67658:67666 VST.veric.seplog <> var_types def
R67669:67677 VST.floyd.canon <> ret_tycon def
R67616:67620 VST.veric.mpred <> ve_of def
R67623:67634 VST.veric.SeparationLogic <> globals_only def
R67593:67613 VST.veric.seplog <> typecheck_var_environ def
R67658:67666 VST.veric.seplog <> var_types def
R67669:67677 VST.floyd.canon <> ret_tycon def
R67616:67620 VST.veric.mpred <> ve_of def
R67623:67634 VST.veric.SeparationLogic <> globals_only def
R67715:67723 VST.floyd.canon <> ret_tycon def
R67726:67734 VST.veric.seplog <> var_types def
R67760:67771 compcert.lib.Maps PTree gempty thm
R67760:67771 compcert.lib.Maps PTree gempty thm
R67760:67771 compcert.lib.Maps PTree gempty thm
R67828:67832 VST.veric.mpred <> ve_of def
R67835:67846 VST.veric.SeparationLogic <> globals_only def
R67849:67855 VST.veric.mpred Map get def
R67858:67866 VST.veric.mpred Map empty def
R67893:67900 VST.veric.SeparationLogic <> bind_ret def
R67984:67992 VST.veric.SeparationLogic <> make_args def
R68012:68018 VST.veric.mpred <> env_set def
R68039:68046 VST.veric.SeparationLogic <> ret_temp def
R68021:68032 VST.veric.SeparationLogic <> globals_only def
R68012:68018 VST.veric.mpred <> env_set def
R68039:68046 VST.veric.SeparationLogic <> ret_temp def
R68021:68032 VST.veric.SeparationLogic <> globals_only def
R68077:68090 VST.msl.log_normalize <> prop_true_andp thm
R68077:68090 VST.msl.log_normalize <> prop_true_andp thm
R68077:68090 VST.msl.log_normalize <> prop_true_andp thm
R68077:68090 VST.msl.log_normalize <> prop_true_andp thm
R68168:68172 VST.veric.mpred <> te_of def
R68175:68181 VST.veric.mpred <> env_set def
R68195:68204 VST.veric.seplog <> temp_types def
R68207:68215 VST.floyd.canon <> ret_tycon def
R68249:68260 VST.floyd.canon <> is_void_type def
R68263:68270 VST.veric.seplog <> ret_type def
R68249:68260 VST.floyd.canon <> is_void_type def
R68263:68270 VST.veric.seplog <> ret_type def
R68295:68306 compcert.lib.Maps PTree gempty thm
R68295:68306 compcert.lib.Maps PTree gempty thm
R68295:68306 compcert.lib.Maps PTree gempty thm
R68339:68346 compcert.common.AST <> ident_eq def
R68351:68358 VST.veric.SeparationLogic <> ret_temp def
R68339:68346 compcert.common.AST <> ident_eq def
R68351:68358 VST.veric.SeparationLogic <> ret_temp def
R68379:68387 compcert.lib.Maps PTree gso thm
R68412:68423 compcert.lib.Maps PTree gempty thm
R68379:68387 compcert.lib.Maps PTree gso thm
R68379:68387 compcert.lib.Maps PTree gso thm
R68412:68423 compcert.lib.Maps PTree gempty thm
R68412:68423 compcert.lib.Maps PTree gempty thm
R68464:68472 compcert.lib.Maps PTree gss thm
R68464:68472 compcert.lib.Maps PTree gss thm
R68464:68472 compcert.lib.Maps PTree gss thm
R68503:68509 VST.veric.mpred Map gss thm
R68503:68509 VST.veric.mpred Map gss thm
R68503:68509 VST.veric.mpred Map gss thm
R68547:68560 VST.veric.Cop2 <> tc_val_tc_val' thm
R68547:68560 VST.veric.Cop2 <> tc_val_tc_val' thm
R68583:68590 VST.veric.seplog <> ret_type def
R68583:68590 VST.veric.seplog <> ret_type def
R68651:68662 VST.veric.SeparationLogic <> globals_only def
R68651:68662 VST.veric.SeparationLogic <> globals_only def
R68693:68706 VST.msl.log_normalize <> prop_true_andp thm
R68693:68706 VST.msl.log_normalize <> prop_true_andp thm
R68693:68706 VST.msl.log_normalize <> prop_true_andp thm
R68693:68706 VST.msl.log_normalize <> prop_true_andp thm
R68728:68743 VST.floyd.canon <> tc_environ_Tvoid thm
R68728:68743 VST.floyd.canon <> tc_environ_Tvoid thm
def 68769:68778 <> ret0_tycon
R68788:68796 VST.veric.seplog <> tycontext ind
binder 68781:68785 <> Delta:779
R68800:68808 VST.veric.seplog <> tycontext ind
R68815:68826 VST.veric.seplog <> mk_tycontext constr
R68916:68926 VST.veric.seplog <> annotations def
R68928:68932 VST.floyd.canon <> Delta:779 var
R68897:68906 VST.veric.seplog <> glob_specs def
R68908:68912 VST.floyd.canon <> Delta:779 var
R68878:68887 VST.veric.seplog <> glob_types def
R68889:68893 VST.floyd.canon <> Delta:779 var
R68861:68868 VST.veric.seplog <> ret_type def
R68870:68874 VST.floyd.canon <> Delta:779 var
R68845:68855 compcert.lib.Maps PTree empty def
R68829:68839 compcert.lib.Maps PTree empty def
def 68948:68957 <> ret1_tycon
R68967:68975 VST.veric.seplog <> tycontext ind
binder 68960:68964 <> Delta:780
R68979:68987 VST.veric.seplog <> tycontext ind
R68994:69005 VST.veric.seplog <> mk_tycontext constr
R69137:69147 VST.veric.seplog <> annotations def
R69149:69153 VST.floyd.canon <> Delta:780 var
R69118:69127 VST.veric.seplog <> glob_specs def
R69129:69133 VST.floyd.canon <> Delta:780 var
R69099:69108 VST.veric.seplog <> glob_types def
R69110:69114 VST.floyd.canon <> Delta:780 var
R69082:69089 VST.veric.seplog <> ret_type def
R69091:69095 VST.floyd.canon <> Delta:780 var
R69066:69076 compcert.lib.Maps PTree empty def
R69008:69016 compcert.lib.Maps PTree set def
R69045:69055 compcert.lib.Maps PTree empty def
R69028:69035 VST.veric.seplog <> ret_type def
R69037:69041 VST.floyd.canon <> Delta:780 var
R69018:69025 VST.veric.SeparationLogic <> ret_temp def
prf 69164:69184 <> make_args0_tc_environ
binder 69194:69196 <> rho:781
binder 69198:69202 <> Delta:782
R69227:69232 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R69233:69242 VST.veric.SeparationLogic <> tc_environ def
R69264:69272 VST.veric.SeparationLogic <> make_args def
R69282:69284 VST.floyd.canon <> rho:781 var
R69278:69280 Coq.Init.Datatypes <> nil constr
R69274:69276 Coq.Init.Datatypes <> nil constr
R69245:69254 VST.floyd.canon <> ret0_tycon def
R69256:69260 VST.floyd.canon <> Delta:782 var
R69207:69216 VST.veric.SeparationLogic <> tc_environ def
R69224:69226 VST.floyd.canon <> rho:781 var
R69218:69222 VST.floyd.canon <> Delta:782 var
R69388:69399 compcert.lib.Maps PTree gempty thm
R69388:69399 compcert.lib.Maps PTree gempty thm
R69388:69399 compcert.lib.Maps PTree gempty thm
R69460:69471 compcert.lib.Maps PTree gempty thm
R69460:69471 compcert.lib.Maps PTree gempty thm
R69460:69471 compcert.lib.Maps PTree gempty thm
prf 69564:69584 <> make_args1_tc_environ
binder 69594:69596 <> rho:783
binder 69598:69602 <> Delta:784
binder 69604:69604 <> v:785
R69629:69634 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R69660:69665 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R69666:69675 VST.veric.SeparationLogic <> tc_environ def
R69697:69705 VST.veric.SeparationLogic <> make_args def
R69736:69738 VST.floyd.canon <> rho:783 var
R69727:69730 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R69726:69726 VST.floyd.canon <> v:785 var
R69731:69733 Coq.Init.Datatypes <> nil constr
R69716:69719 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R69708:69715 VST.veric.SeparationLogic <> ret_temp def
R69720:69722 Coq.Init.Datatypes <> nil constr
R69678:69687 VST.floyd.canon <> ret1_tycon def
R69689:69693 VST.floyd.canon <> Delta:784 var
R69635:69640 VST.veric.Cop2 <> tc_val def
R69659:69659 VST.floyd.canon <> v:785 var
R69643:69650 VST.veric.seplog <> ret_type def
R69652:69656 VST.floyd.canon <> Delta:784 var
R69609:69618 VST.veric.SeparationLogic <> tc_environ def
R69626:69628 VST.floyd.canon <> rho:783 var
R69620:69624 VST.floyd.canon <> Delta:784 var
R69864:69873 VST.floyd.canon <> ret1_tycon def
R69876:69885 VST.veric.seplog <> temp_types def
R69906:69917 compcert.lib.Maps PTree gsspec thm
R69906:69917 compcert.lib.Maps PTree gsspec thm
R69906:69917 compcert.lib.Maps PTree gsspec thm
R69940:69942 compcert.lib.Coqlib <> peq def
R69947:69954 VST.veric.SeparationLogic <> ret_temp def
R69940:69942 compcert.lib.Coqlib <> peq def
R69947:69954 VST.veric.SeparationLogic <> ret_temp def
R70052:70065 VST.veric.Cop2 <> tc_val_tc_val' thm
R70052:70065 VST.veric.Cop2 <> tc_val_tc_val' thm
R70088:70099 compcert.lib.Maps PTree gempty thm
R70088:70099 compcert.lib.Maps PTree gempty thm
R70088:70099 compcert.lib.Maps PTree gempty thm
R70160:70171 compcert.lib.Maps PTree gempty thm
R70160:70171 compcert.lib.Maps PTree gempty thm
R70160:70171 compcert.lib.Maps PTree gempty thm
prf 70265:70279 <> semax_post_ret1
binder 70289:70290 <> P':786
binder 70292:70293 <> R':787
binder 70295:70299 <> Espec:788
R70306:70314 VST.veric.mpred <> compspecs class
binder 70302:70303 <> cs:789
binder 70317:70321 <> Delta:790
binder 70323:70323 <> P:791
binder 70325:70325 <> v:792
binder 70327:70327 <> R:793
binder 70329:70331 <> Pre:794
binder 70333:70333 <> c:795
R70361:70366 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R70501:70506 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R70664:70669 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R70671:70675 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R70703:70718 VST.veric.SeparationLogic <> frame_ret_assert def
R70821:70823 VST.msl.seplog <> emp meth
R70721:70744 VST.veric.SeparationLogic <> function_body_ret_assert def
R70770:70774 VST.floyd.canon <> PROPx def
R70779:70784 VST.floyd.canon <> LOCALx def
R70810:70813 VST.floyd.canon <> SEPx def
R70815:70815 VST.floyd.canon <> R:793 var
R70802:70803 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R70787:70790 VST.floyd.canon <> temp constr
R70801:70801 VST.floyd.canon <> v:792 var
R70792:70799 VST.veric.SeparationLogic <> ret_temp def
R70804:70806 Coq.Init.Datatypes <> nil constr
R70776:70776 VST.floyd.canon <> P:791 var
R70747:70754 VST.veric.seplog <> ret_type def
R70756:70760 VST.floyd.canon <> Delta:790 var
R70696:70696 VST.floyd.canon <> c:795 var
R70692:70694 VST.floyd.canon <> Pre:794 var
R70686:70690 VST.floyd.canon <> Delta:790 var
R70680:70684 VST.floyd.canon <> Espec:788 var
R70677:70678 VST.floyd.canon <> cs:789 var
R70508:70512 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R70540:70555 VST.veric.SeparationLogic <> frame_ret_assert def
R70660:70662 VST.msl.seplog <> emp meth
R70558:70581 VST.veric.SeparationLogic <> function_body_ret_assert def
R70607:70611 VST.floyd.canon <> PROPx def
R70617:70622 VST.floyd.canon <> LOCALx def
R70648:70651 VST.floyd.canon <> SEPx def
R70653:70654 VST.floyd.canon <> R':787 var
R70640:70641 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R70625:70628 VST.floyd.canon <> temp constr
R70639:70639 VST.floyd.canon <> v:792 var
R70630:70637 VST.veric.SeparationLogic <> ret_temp def
R70642:70644 Coq.Init.Datatypes <> nil constr
R70613:70614 VST.floyd.canon <> P':786 var
R70584:70591 VST.veric.seplog <> ret_type def
R70593:70597 VST.floyd.canon <> Delta:790 var
R70533:70533 VST.floyd.canon <> c:795 var
R70529:70531 VST.floyd.canon <> Pre:794 var
R70523:70527 VST.floyd.canon <> Delta:790 var
R70517:70521 VST.floyd.canon <> Espec:788 var
R70514:70515 VST.floyd.canon <> cs:789 var
R70367:70374 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R70391:70397 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R70448:70452 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R70375:70384 VST.floyd.canon <> ret1_tycon def
R70386:70390 VST.floyd.canon <> Delta:790 var
R70398:70402 VST.floyd.canon <> PROPx def
R70408:70413 VST.floyd.canon <> LOCALx def
R70439:70442 VST.floyd.canon <> SEPx def
R70444:70445 VST.floyd.canon <> R':787 var
R70431:70432 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R70416:70419 VST.floyd.canon <> temp constr
R70430:70430 VST.floyd.canon <> v:792 var
R70421:70428 VST.veric.SeparationLogic <> ret_temp def
R70433:70435 Coq.Init.Datatypes <> nil constr
R70404:70405 VST.floyd.canon <> P':786 var
R70453:70457 VST.floyd.canon <> PROPx def
R70462:70467 VST.floyd.canon <> LOCALx def
R70493:70496 VST.floyd.canon <> SEPx def
R70498:70498 VST.floyd.canon <> R:793 var
R70485:70486 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R70470:70473 VST.floyd.canon <> temp constr
R70484:70484 VST.floyd.canon <> v:792 var
R70475:70482 VST.veric.SeparationLogic <> ret_temp def
R70487:70489 Coq.Init.Datatypes <> nil constr
R70459:70459 VST.floyd.canon <> P:791 var
R70352:70355 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R70338:70345 VST.veric.seplog <> ret_type def
R70347:70351 VST.floyd.canon <> Delta:790 var
R70356:70360 compcert.cfrontend.Ctypes <> Tvoid constr
R70853:70862 VST.floyd.canon <> semax_post thm
R70853:70862 VST.floyd.canon <> semax_post thm
R70944:70951 VST.veric.seplog <> ret_type def
R70944:70951 VST.veric.seplog <> ret_type def
R71019:71023 VST.veric.SeparationLogic <> local def
R71026:71030 VST.veric.mpred <> lift1 def
R71051:71060 VST.msl.seplog <> sepcon_emp meth
R71051:71060 VST.msl.seplog <> sepcon_emp meth
R71051:71060 VST.msl.seplog <> sepcon_emp meth
R71051:71060 VST.msl.seplog <> sepcon_emp meth
R71051:71060 VST.msl.seplog <> sepcon_emp meth
R71072:71079 VST.veric.SeparationLogic <> bind_ret def
R71121:71128 VST.veric.seplog <> ret_type def
R71121:71128 VST.veric.seplog <> ret_type def
R71190:71202 VST.msl.seplog <> derives_trans meth
R71190:71202 VST.msl.seplog <> derives_trans meth
R71234:71242 compcert.lib.Maps PTree set def
R71258:71267 VST.msl.seplog <> andp_right meth
R71258:71267 VST.msl.seplog <> andp_right meth
R71288:71296 compcert.lib.Maps PTree set def
R71309:71318 VST.msl.seplog <> prop_right meth
R71309:71318 VST.msl.seplog <> prop_right meth
R71331:71351 VST.floyd.canon <> make_args1_tc_environ thm
R71331:71351 VST.floyd.canon <> make_args1_tc_environ thm
R71234:71242 compcert.lib.Maps PTree set def
R71288:71296 compcert.lib.Maps PTree set def
prf 71372:71386 <> semax_post_ret0
binder 71396:71397 <> P':796
binder 71399:71400 <> R':797
binder 71402:71406 <> Espec:798
R71413:71421 VST.veric.mpred <> compspecs class
binder 71409:71410 <> cs:799
binder 71424:71428 <> Delta:800
binder 71430:71430 <> P:801
binder 71432:71432 <> R:802
binder 71434:71436 <> Pre:803
binder 71438:71438 <> c:804
R71465:71470 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R71567:71572 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R71711:71716 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R71718:71722 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R71750:71765 VST.veric.SeparationLogic <> frame_ret_assert def
R71849:71851 VST.msl.seplog <> emp meth
R71768:71791 VST.veric.SeparationLogic <> function_body_ret_assert def
R71817:71821 VST.floyd.canon <> PROPx def
R71826:71831 VST.floyd.canon <> LOCALx def
R71838:71841 VST.floyd.canon <> SEPx def
R71843:71843 VST.floyd.canon <> R:802 var
R71833:71835 Coq.Init.Datatypes <> nil constr
R71823:71823 VST.floyd.canon <> P:801 var
R71794:71801 VST.veric.seplog <> ret_type def
R71803:71807 VST.floyd.canon <> Delta:800 var
R71743:71743 VST.floyd.canon <> c:804 var
R71739:71741 VST.floyd.canon <> Pre:803 var
R71733:71737 VST.floyd.canon <> Delta:800 var
R71727:71731 VST.floyd.canon <> Espec:798 var
R71724:71725 VST.floyd.canon <> cs:799 var
R71574:71578 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R71606:71621 VST.veric.SeparationLogic <> frame_ret_assert def
R71707:71709 VST.msl.seplog <> emp meth
R71624:71647 VST.veric.SeparationLogic <> function_body_ret_assert def
R71673:71677 VST.floyd.canon <> PROPx def
R71683:71688 VST.floyd.canon <> LOCALx def
R71695:71698 VST.floyd.canon <> SEPx def
R71700:71701 VST.floyd.canon <> R':797 var
R71690:71692 Coq.Init.Datatypes <> nil constr
R71679:71680 VST.floyd.canon <> P':796 var
R71650:71657 VST.veric.seplog <> ret_type def
R71659:71663 VST.floyd.canon <> Delta:800 var
R71599:71599 VST.floyd.canon <> c:804 var
R71595:71597 VST.floyd.canon <> Pre:803 var
R71589:71593 VST.floyd.canon <> Delta:800 var
R71583:71587 VST.floyd.canon <> Espec:798 var
R71580:71581 VST.floyd.canon <> cs:799 var
R71471:71478 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R71495:71501 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R71533:71537 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R71479:71488 VST.floyd.canon <> ret0_tycon def
R71490:71494 VST.floyd.canon <> Delta:800 var
R71502:71506 VST.floyd.canon <> PROPx def
R71512:71517 VST.floyd.canon <> LOCALx def
R71524:71527 VST.floyd.canon <> SEPx def
R71529:71530 VST.floyd.canon <> R':797 var
R71519:71521 Coq.Init.Datatypes <> nil constr
R71508:71509 VST.floyd.canon <> P':796 var
R71538:71542 VST.floyd.canon <> PROPx def
R71547:71552 VST.floyd.canon <> LOCALx def
R71559:71562 VST.floyd.canon <> SEPx def
R71564:71564 VST.floyd.canon <> R:802 var
R71554:71556 Coq.Init.Datatypes <> nil constr
R71544:71544 VST.floyd.canon <> P:801 var
R71457:71459 Coq.Init.Logic <> ::type_scope:x_'='_x not
R71443:71450 VST.veric.seplog <> ret_type def
R71452:71456 VST.floyd.canon <> Delta:800 var
R71460:71464 compcert.cfrontend.Ctypes <> Tvoid constr
R71881:71890 VST.floyd.canon <> semax_post thm
R71881:71890 VST.floyd.canon <> semax_post thm
R71971:71986 VST.veric.SeparationLogic <> frame_ret_assert def
R71989:72012 VST.veric.SeparationLogic <> function_body_ret_assert def
R72044:72053 VST.msl.seplog <> sepcon_emp meth
R72044:72053 VST.msl.seplog <> sepcon_emp meth
R72044:72053 VST.msl.seplog <> sepcon_emp meth
R72044:72053 VST.msl.seplog <> sepcon_emp meth
R72044:72053 VST.msl.seplog <> sepcon_emp meth
R72063:72067 VST.veric.SeparationLogic <> local def
R72070:72074 VST.veric.mpred <> lift1 def
R72127:72139 VST.msl.seplog <> derives_trans meth
R72127:72139 VST.msl.seplog <> derives_trans meth
R72174:72183 VST.msl.seplog <> andp_right meth
R72174:72183 VST.msl.seplog <> andp_right meth
R72200:72209 VST.msl.seplog <> prop_right meth
R72200:72209 VST.msl.seplog <> prop_right meth
R72222:72242 VST.floyd.canon <> make_args0_tc_environ thm
R72222:72242 VST.floyd.canon <> make_args0_tc_environ thm
R72260:72267 VST.veric.SeparationLogic <> bind_ret def
R72309:72316 VST.veric.seplog <> ret_type def
R72309:72316 VST.veric.seplog <> ret_type def
R72444:72456 VST.msl.seplog <> derives_trans meth
R72444:72456 VST.msl.seplog <> derives_trans meth
R72500:72511 VST.msl.log_normalize <> andp_derives thm
R72500:72511 VST.msl.log_normalize <> andp_derives thm
R72530:72541 VST.msl.log_normalize <> prop_derives thm
R72530:72541 VST.msl.log_normalize <> prop_derives thm
R72562:72582 VST.floyd.canon <> make_args0_tc_environ thm
R72562:72582 VST.floyd.canon <> make_args0_tc_environ thm
ind 72607:72622 <> return_outer_gen
constr 72663:72683 <> return_outer_gen_refl
constr 72842:72864 <> return_outer_gen_switch
constr 72954:72974 <> return_outer_gen_post
constr 73069:73088 <> return_outer_gen_for
constr 73181:73202 <> return_outer_gen_loop1
constr 73299:73321 <> return_outer_gen_loop1x
constr 73419:73440 <> return_outer_gen_loop2
R72635:72638 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R72649:72652 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R72639:72648 VST.veric.tycontext <> ret_assert rec
R72625:72634 VST.veric.tycontext <> ret_assert rec
binder 72693:72693 <> P:807
binder 72695:72695 <> t:808
binder 72697:72698 <> sf:809
R72705:72720 VST.floyd.canon <> return_outer_gen:805 ind
R72788:72803 VST.veric.SeparationLogic <> frame_ret_assert def
R72836:72837 VST.floyd.canon <> sf:809 var
R72806:72829 VST.veric.SeparationLogic <> function_body_ret_assert def
R72833:72833 VST.floyd.canon <> P:807 var
R72831:72831 VST.floyd.canon <> t:808 var
R72729:72744 VST.veric.SeparationLogic <> frame_ret_assert def
R72777:72778 VST.floyd.canon <> sf:809 var
R72747:72770 VST.veric.SeparationLogic <> function_body_ret_assert def
R72774:72774 VST.floyd.canon <> P:807 var
R72772:72772 VST.floyd.canon <> t:808 var
binder 72874:72874 <> P:810
binder 72876:72876 <> Q:811
R72903:72910 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R72911:72926 VST.floyd.canon <> return_outer_gen:805 ind
R72950:72950 VST.floyd.canon <> Q:811 var
R72929:72945 VST.veric.SeparationLogic <> switch_ret_assert def
R72947:72947 VST.floyd.canon <> P:810 var
R72883:72898 VST.floyd.canon <> return_outer_gen:805 ind
R72902:72902 VST.floyd.canon <> Q:811 var
R72900:72900 VST.floyd.canon <> P:810 var
binder 72984:72987 <> post:812
binder 72989:72989 <> P:813
binder 72991:72991 <> Q:814
R73018:73025 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73026:73041 VST.floyd.canon <> return_outer_gen:805 ind
R73065:73065 VST.floyd.canon <> Q:814 var
R73044:73055 VST.veric.SeparationLogic <> overridePost def
R73062:73062 VST.floyd.canon <> P:813 var
R73057:73060 VST.floyd.canon <> post:812 var
R72998:73013 VST.floyd.canon <> return_outer_gen:805 ind
R73017:73017 VST.floyd.canon <> Q:814 var
R73015:73015 VST.floyd.canon <> P:813 var
binder 73098:73099 <> P':815
binder 73101:73101 <> P:816
binder 73103:73103 <> Q:817
R73130:73137 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73138:73153 VST.floyd.canon <> return_outer_gen:805 ind
R73177:73177 VST.floyd.canon <> Q:817 var
R73156:73169 VST.floyd.assert_lemmas <> for_ret_assert def
R73174:73174 VST.floyd.canon <> P:816 var
R73171:73172 VST.floyd.canon <> P':815 var
R73110:73125 VST.floyd.canon <> return_outer_gen:805 ind
R73129:73129 VST.floyd.canon <> Q:817 var
R73127:73127 VST.floyd.canon <> P:816 var
binder 73212:73214 <> inv:818
binder 73216:73216 <> P:819
binder 73218:73218 <> Q:820
R73245:73252 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73253:73268 VST.floyd.canon <> return_outer_gen:805 ind
R73295:73295 VST.floyd.canon <> Q:820 var
R73271:73286 VST.veric.SeparationLogic <> loop1_ret_assert def
R73292:73292 VST.floyd.canon <> P:819 var
R73288:73290 VST.floyd.canon <> inv:818 var
R73225:73240 VST.floyd.canon <> return_outer_gen:805 ind
R73244:73244 VST.floyd.canon <> Q:820 var
R73242:73242 VST.floyd.canon <> P:819 var
binder 73331:73333 <> inv:821
binder 73335:73335 <> P:822
binder 73337:73337 <> Q:823
R73364:73371 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73372:73387 VST.floyd.canon <> return_outer_gen:805 ind
R73415:73415 VST.floyd.canon <> Q:823 var
R73390:73406 VST.floyd.assert_lemmas <> loop1x_ret_assert def
R73412:73412 VST.floyd.canon <> P:822 var
R73408:73410 VST.floyd.canon <> inv:821 var
R73344:73359 VST.floyd.canon <> return_outer_gen:805 ind
R73363:73363 VST.floyd.canon <> Q:823 var
R73361:73361 VST.floyd.canon <> P:822 var
binder 73450:73452 <> inv:824
binder 73454:73454 <> P:825
binder 73456:73456 <> Q:826
R73483:73490 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73491:73506 VST.floyd.canon <> return_outer_gen:805 ind
R73533:73533 VST.floyd.canon <> Q:826 var
R73509:73524 VST.veric.SeparationLogic <> loop2_ret_assert def
R73530:73530 VST.floyd.canon <> P:825 var
R73526:73528 VST.floyd.canon <> inv:824 var
R73463:73478 VST.floyd.canon <> return_outer_gen:805 ind
R73482:73482 VST.floyd.canon <> Q:826 var
R73480:73480 VST.floyd.canon <> P:825 var
prf 73543:73563 <> return_outer_gen_spec
binder 73573:73573 <> P:827
binder 73575:73575 <> Q:828
R73600:73605 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73617:73619 Coq.Init.Logic <> ::type_scope:x_'='_x not
R73606:73614 VST.veric.tycontext <> RA_return proj
R73616:73616 VST.floyd.canon <> P:827 var
R73620:73628 VST.veric.tycontext <> RA_return proj
R73630:73630 VST.floyd.canon <> Q:828 var
R73580:73595 VST.floyd.canon <> return_outer_gen ind
R73599:73599 VST.floyd.canon <> Q:828 var
R73597:73597 VST.floyd.canon <> P:827 var
ind 73811:73826 <> return_inner_gen
constr 73913:73933 <> return_inner_gen_main
constr 74045:74071 <> return_inner_gen_canon_nil'
constr 74218:74245 <> return_inner_gen_canon_Some'
constr 74444:74463 <> return_inner_gen_EX'
R73832:73835 Coq.Init.Datatypes <> list ind
R73837:73841 VST.veric.mpred <> mpred def
binder 73829:73829 <> S:829
R73855:73858 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73859:73859 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73876:73880 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73881:73881 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73898:73902 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73889:73892 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73893:73897 VST.veric.mpred <> mpred def
R73882:73888 VST.veric.mpred <> environ ind
R73867:73870 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73871:73875 VST.veric.mpred <> mpred def
R73860:73866 VST.veric.mpred <> environ ind
R73845:73850 Coq.Init.Datatypes <> option ind
R73852:73854 compcert.common.Values <> val ind
binder 73943:73948 <> ov_gen:832
binder 73950:73950 <> P:833
binder 73952:73952 <> u:834
R73959:73974 VST.floyd.canon <> return_inner_gen:830 ind
R74002:74006 VST.floyd.canon <> PROPx def
R74013:74018 VST.floyd.canon <> LOCALx def
R74025:74028 VST.floyd.canon <> SEPx def
R74033:74036 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R74031:74032 VST.msl.seplog <> TT meth
R74037:74037 VST.floyd.canon <> S:829 var
R74020:74022 Coq.Init.Datatypes <> nil constr
R74008:74010 Coq.Init.Datatypes <> nil constr
R73986:73994 VST.veric.SeparationLogic <> main_post def
R73998:73998 VST.floyd.canon <> u:834 var
R73996:73996 VST.floyd.canon <> P:833 var
R73978:73983 VST.floyd.canon <> ov_gen:832 var
R73976:73976 VST.floyd.canon <> S:829 var
binder 74085:74090 <> ov_gen:835
binder 74092:74092 <> P:836
binder 74094:74094 <> R:837
R74103:74118 VST.floyd.canon <> return_inner_gen:830 ind
R74178:74182 VST.floyd.canon <> PROPx def
R74187:74192 VST.floyd.canon <> LOCALx def
R74199:74202 VST.floyd.canon <> SEPx def
R74206:74209 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R74205:74205 VST.floyd.canon <> R:837 var
R74210:74210 VST.floyd.canon <> S:829 var
R74194:74196 Coq.Init.Datatypes <> nil constr
R74184:74184 VST.floyd.canon <> P:836 var
R74138:74142 VST.floyd.canon <> PROPx def
R74147:74152 VST.floyd.canon <> LOCALx def
R74159:74162 VST.floyd.canon <> SEPx def
R74164:74164 VST.floyd.canon <> R:837 var
R74154:74156 Coq.Init.Datatypes <> nil constr
R74144:74144 VST.floyd.canon <> P:836 var
R74122:74127 VST.floyd.canon <> ov_gen:835 var
R74120:74120 VST.floyd.canon <> S:829 var
binder 74259:74259 <> P:838
binder 74261:74261 <> v:839
binder 74263:74263 <> R:840
binder 74265:74269 <> v_gen:841
R74278:74293 VST.floyd.canon <> return_inner_gen:830 ind
R74380:74384 VST.floyd.canon <> PROPx def
R74413:74418 VST.floyd.canon <> LOCALx def
R74425:74428 VST.floyd.canon <> SEPx def
R74432:74435 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R74431:74431 VST.floyd.canon <> R:840 var
R74436:74436 VST.floyd.canon <> S:829 var
R74420:74422 Coq.Init.Datatypes <> nil constr
R74388:74391 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R74387:74387 VST.floyd.canon <> P:838 var
R74392:74392 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R74402:74406 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R74398:74400 Coq.Init.Logic <> ::type_scope:x_'='_x not
R74393:74397 VST.floyd.canon <> v_gen:841 var
R74401:74401 VST.floyd.canon <> v:839 var
R74407:74409 Coq.Init.Datatypes <> nil constr
R74319:74323 VST.floyd.canon <> PROPx def
R74328:74333 VST.floyd.canon <> LOCALx def
R74361:74364 VST.floyd.canon <> SEPx def
R74366:74366 VST.floyd.canon <> R:840 var
R74351:74354 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R74336:74339 VST.floyd.canon <> temp constr
R74350:74350 VST.floyd.canon <> v:839 var
R74341:74348 VST.veric.SeparationLogic <> ret_temp def
R74355:74357 Coq.Init.Datatypes <> nil constr
R74325:74325 VST.floyd.canon <> P:838 var
R74298:74301 Coq.Init.Datatypes <> Some constr
R74303:74307 VST.floyd.canon <> v_gen:841 var
R74295:74295 VST.floyd.canon <> S:829 var
binder 74477:74482 <> ov_gen:842
binder 74485:74485 <> A:843
R74509:74512 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R74520:74523 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R74524:74528 VST.veric.mpred <> mpred def
R74513:74519 VST.veric.mpred <> environ ind
R74508:74508 VST.floyd.canon <> A:843 var
binder 74495:74499 <> post1:844
binder 74501:74505 <> post2:845
R74538:74538 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R74597:74607 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R74608:74623 VST.floyd.canon <> return_inner_gen:830 ind
R74647:74649 VST.msl.seplog <> exp meth
R74651:74655 VST.floyd.canon <> post2:845 var
R74635:74637 VST.msl.seplog <> exp meth
R74639:74643 VST.floyd.canon <> post1:844 var
R74627:74632 VST.floyd.canon <> ov_gen:842 var
R74625:74625 VST.floyd.canon <> S:829 var
R74549:74549 VST.floyd.canon <> A:843 var
binder 74546:74546 <> a:846
R74552:74567 VST.floyd.canon <> return_inner_gen:830 ind
R74589:74593 VST.floyd.canon <> post2:845 var
R74595:74595 VST.floyd.canon <> a:846 var
R74579:74583 VST.floyd.canon <> post1:844 var
R74585:74585 VST.floyd.canon <> a:846 var
R74571:74576 VST.floyd.canon <> ov_gen:842 var
R74569:74569 VST.floyd.canon <> S:829 var
prf 74666:74684 <> return_inner_gen_EX
binder 74694:74694 <> S:847
binder 74696:74701 <> ov_gen:848
binder 74703:74703 <> A:849
binder 74705:74709 <> post1:850
binder 74711:74715 <> post2:851
R74720:74720 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R74796:74802 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R74803:74818 VST.floyd.canon <> return_inner_gen ind
R74842:74844 VST.msl.seplog <> exp meth
R74846:74850 VST.floyd.canon <> post2:851 var
R74830:74832 VST.msl.seplog <> exp meth
R74834:74838 VST.floyd.canon <> post1:850 var
R74822:74827 VST.floyd.canon <> ov_gen:848 var
R74820:74820 VST.floyd.canon <> S:847 var
R74731:74731 VST.floyd.canon <> A:849 var
binder 74728:74728 <> a:852
R74734:74740 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R74742:74743 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 74741:74741 <> P:853
R74781:74784 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R74744:74759 VST.floyd.canon <> return_inner_gen ind
R74780:74780 VST.floyd.canon <> P:853 var
R74771:74775 VST.floyd.canon <> post1:850 var
R74777:74777 VST.floyd.canon <> a:852 var
R74763:74768 VST.floyd.canon <> ov_gen:848 var
R74761:74761 VST.floyd.canon <> S:847 var
R74792:74794 Coq.Init.Logic <> ::type_scope:x_'='_x not
R74785:74789 VST.floyd.canon <> post2:851 var
R74791:74791 VST.floyd.canon <> a:852 var
R74795:74795 VST.floyd.canon <> P:853 var
R74879:74898 VST.floyd.canon <> return_inner_gen_EX' constr
R74879:74898 VST.floyd.canon <> return_inner_gen_EX' constr
prf 74984:75009 <> return_inner_gen_canon_nil
binder 75011:75011 <> S:854
binder 75021:75026 <> ov_gen:855
binder 75028:75028 <> P:856
binder 75030:75030 <> R:857
binder 75032:75034 <> Res:858
R75092:75097 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R75098:75113 VST.floyd.canon <> return_inner_gen ind
R75156:75158 VST.floyd.canon <> Res:858 var
R75125:75129 VST.floyd.canon <> PROPx def
R75134:75139 VST.floyd.canon <> LOCALx def
R75146:75149 VST.floyd.canon <> SEPx def
R75151:75151 VST.floyd.canon <> R:857 var
R75141:75143 Coq.Init.Datatypes <> nil constr
R75131:75131 VST.floyd.canon <> P:856 var
R75117:75122 VST.floyd.canon <> ov_gen:855 var
R75115:75115 VST.floyd.canon <> S:854 var
R75086:75088 Coq.Init.Logic <> ::type_scope:x_'='_x not
R75039:75043 VST.floyd.canon <> PROPx def
R75048:75053 VST.floyd.canon <> LOCALx def
R75060:75063 VST.floyd.canon <> SEPx def
R75066:75078 VST.floyd.computable_functions <> VST_floyd_app def
R75082:75082 VST.floyd.canon <> S:854 var
R75080:75080 VST.floyd.canon <> R:857 var
R75055:75057 Coq.Init.Datatypes <> nil constr
R75045:75045 VST.floyd.canon <> P:856 var
R75089:75091 VST.floyd.canon <> Res:858 var
R75199:75225 VST.floyd.canon <> return_inner_gen_canon_nil' constr
R75199:75225 VST.floyd.canon <> return_inner_gen_canon_nil' constr
prf 75240:75266 <> return_inner_gen_canon_Some
binder 75268:75268 <> S:859
binder 75278:75278 <> P:860
binder 75280:75280 <> v:861
binder 75282:75282 <> R:862
binder 75284:75288 <> v_gen:863
binder 75290:75292 <> Res:864
R75387:75392 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R75393:75408 VST.floyd.canon <> return_inner_gen ind
R75478:75480 VST.floyd.canon <> Res:864 var
R75426:75430 VST.floyd.canon <> PROPx def
R75435:75440 VST.floyd.canon <> LOCALx def
R75468:75471 VST.floyd.canon <> SEPx def
R75473:75473 VST.floyd.canon <> R:862 var
R75458:75461 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R75443:75446 VST.floyd.canon <> temp constr
R75457:75457 VST.floyd.canon <> v:861 var
R75448:75455 VST.veric.SeparationLogic <> ret_temp def
R75462:75464 Coq.Init.Datatypes <> nil constr
R75432:75432 VST.floyd.canon <> P:860 var
R75413:75416 Coq.Init.Datatypes <> Some constr
R75418:75422 VST.floyd.canon <> v_gen:863 var
R75410:75410 VST.floyd.canon <> S:859 var
R75381:75383 Coq.Init.Logic <> ::type_scope:x_'='_x not
R75297:75301 VST.floyd.canon <> PROPx def
R75343:75348 VST.floyd.canon <> LOCALx def
R75355:75358 VST.floyd.canon <> SEPx def
R75361:75373 VST.floyd.computable_functions <> VST_floyd_app def
R75377:75377 VST.floyd.canon <> S:859 var
R75375:75375 VST.floyd.canon <> R:862 var
R75350:75352 Coq.Init.Datatypes <> nil constr
R75304:75316 VST.floyd.computable_functions <> VST_floyd_app def
R75321:75321 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R75331:75335 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R75327:75329 Coq.Init.Logic <> ::type_scope:x_'='_x not
R75322:75326 VST.floyd.canon <> v_gen:863 var
R75330:75330 VST.floyd.canon <> v:861 var
R75336:75338 Coq.Init.Datatypes <> nil constr
R75318:75318 VST.floyd.canon <> P:860 var
R75384:75386 VST.floyd.canon <> Res:864 var
R75521:75548 VST.floyd.canon <> return_inner_gen_canon_Some' constr
R75521:75548 VST.floyd.canon <> return_inner_gen_canon_Some' constr
prf 75563:75588 <> return_inner_gen_None_spec
binder 75598:75598 <> S:865
binder 75600:75604 <> post1:866
binder 75606:75610 <> post2:867
R75650:75655 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R75661:75665 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R75656:75660 VST.floyd.canon <> post2:867 var
R75666:75666 VST.msl.seplog <> ::logic:x_'*'_x not
R75707:75710 VST.msl.seplog <> ::logic:x_'*'_x not
binder 75671:75673 <> rho:868
R75678:75682 VST.floyd.canon <> post1:866 var
R75685:75693 VST.veric.SeparationLogic <> make_args def
R75703:75705 VST.floyd.canon <> rho:868 var
R75699:75701 Coq.Init.Datatypes <> nil constr
R75695:75697 Coq.Init.Datatypes <> nil constr
R75711:75714 VST.floyd.canon <> SEPx def
R75716:75716 VST.floyd.canon <> S:865 var
R75615:75630 VST.floyd.canon <> return_inner_gen ind
R75645:75649 VST.floyd.canon <> post2:867 var
R75639:75643 VST.floyd.canon <> post1:866 var
R75634:75637 Coq.Init.Datatypes <> None constr
R75632:75632 VST.floyd.canon <> S:865 var
R75747:75750 Coq.Init.Datatypes <> None constr
R75747:75750 Coq.Init.Datatypes <> None constr
R75812:75820 VST.veric.SeparationLogic <> main_post def
R75850:75859 VST.floyd.canon <> gather_SEP thm
R75850:75859 VST.floyd.canon <> gather_SEP thm
R75850:75859 VST.floyd.canon <> gather_SEP thm
R75905:75912 VST.msl.seplog <> exp_left meth
R75905:75912 VST.msl.seplog <> exp_left meth
R75935:75947 VST.msl.seplog <> derives_trans meth
R75961:75967 Coq.Init.Logic <> eq_refl constr
R75935:75947 VST.msl.seplog <> derives_trans meth
R75961:75967 Coq.Init.Logic <> eq_refl constr
R76008:76021 VST.msl.seplog <> sepcon_derives meth
R76008:76021 VST.msl.seplog <> sepcon_derives meth
R76041:76049 VST.msl.seplog <> exp_right meth
R76041:76049 VST.msl.seplog <> exp_right meth
prf 76073:76098 <> return_inner_gen_Some_spec
binder 76108:76108 <> S:869
binder 76110:76114 <> v_gen:870
binder 76116:76120 <> post1:871
binder 76122:76126 <> post2:872
R76146:76151 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R76195:76200 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R76206:76210 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R76201:76205 VST.floyd.canon <> post2:872 var
R76211:76211 VST.msl.seplog <> ::logic:x_'*'_x not
R76277:76280 VST.msl.seplog <> ::logic:x_'*'_x not
binder 76216:76218 <> rho:873
R76223:76227 VST.floyd.canon <> post1:871 var
R76230:76238 VST.veric.SeparationLogic <> make_args def
R76273:76275 VST.floyd.canon <> rho:873 var
R76264:76267 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R76259:76263 VST.floyd.canon <> v_gen:870 var
R76268:76270 Coq.Init.Datatypes <> nil constr
R76249:76252 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R76241:76248 VST.veric.SeparationLogic <> ret_temp def
R76253:76255 Coq.Init.Datatypes <> nil constr
R76281:76284 VST.floyd.canon <> SEPx def
R76286:76286 VST.floyd.canon <> S:869 var
R76152:76167 VST.floyd.canon <> return_inner_gen ind
R76190:76194 VST.floyd.canon <> post2:872 var
R76184:76188 VST.floyd.canon <> post1:871 var
R76172:76175 Coq.Init.Datatypes <> Some constr
R76177:76181 VST.floyd.canon <> v_gen:870 var
R76169:76169 VST.floyd.canon <> S:869 var
R76136:76139 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R76131:76135 VST.floyd.canon <> v_gen:870 var
R76140:76145 compcert.common.Values <> Vundef constr
R76318:76321 Coq.Init.Datatypes <> Some constr
R76318:76321 Coq.Init.Datatypes <> Some constr
R76399:76407 VST.veric.SeparationLogic <> main_post def
R76437:76446 VST.floyd.canon <> gather_SEP thm
R76437:76446 VST.floyd.canon <> gather_SEP thm
R76437:76446 VST.floyd.canon <> gather_SEP thm
R76504:76523 Coq.Sorting.Permutation <> Permutation_app_comm thm
R76477:76493 VST.floyd.canon <> PROPx_Permutation thm
R76477:76493 VST.floyd.canon <> PROPx_Permutation thm
R76504:76523 Coq.Sorting.Permutation <> Permutation_app_comm thm
R76477:76493 VST.floyd.canon <> PROPx_Permutation thm
R76538:76547 VST.floyd.canon <> gather_SEP thm
R76538:76547 VST.floyd.canon <> gather_SEP thm
R76538:76547 VST.floyd.canon <> gather_SEP thm
R76592:76605 VST.msl.seplog <> sepcon_derives meth
R76592:76605 VST.msl.seplog <> sepcon_derives meth
R76624:76633 VST.msl.seplog <> andp_right meth
R76624:76633 VST.msl.seplog <> andp_right meth
R76652:76661 VST.msl.seplog <> prop_right meth
R76652:76661 VST.msl.seplog <> prop_right meth
R76717:76728 VST.veric.SeparationLogic <> globals_only def
R76731:76737 VST.veric.mpred <> eval_id def
R76740:76746 VST.veric.mpred <> env_set def
R76749:76753 VST.veric.mpred <> te_of def
R76768:76774 VST.veric.mpred Map gss thm
R76768:76774 VST.veric.mpred Map gss thm
R76768:76774 VST.veric.mpred Map gss thm
R76793:76804 VST.msl.seplog <> derives_refl meth
R76793:76804 VST.msl.seplog <> derives_refl meth
R76817:76824 VST.msl.seplog <> exp_left meth
R76817:76824 VST.msl.seplog <> exp_left meth
R76847:76859 VST.msl.seplog <> derives_trans meth
R76878:76884 Coq.Init.Logic <> eq_refl constr
R76847:76859 VST.msl.seplog <> derives_trans meth
R76878:76884 Coq.Init.Logic <> eq_refl constr
R76925:76938 VST.msl.seplog <> sepcon_derives meth
R76925:76938 VST.msl.seplog <> sepcon_derives meth
R76958:76966 VST.msl.seplog <> exp_right meth
R76958:76966 VST.msl.seplog <> exp_right meth
prf 76990:77006 <> semax_return_None
binder 77017:77018 <> cs:874
binder 77020:77024 <> Espec:875
binder 77027:77031 <> Delta:876
binder 77033:77036 <> Ppre:877
binder 77038:77041 <> Qpre:878
binder 77043:77046 <> Rpre:879
binder 77048:77052 <> Post1:880
binder 77054:77055 <> sf:881
binder 77057:77061 <> SEPsf:882
binder 77063:77067 <> post2:883
binder 77069:77073 <> post3:884
R77100:77105 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R77200:77205 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R77264:77269 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R77309:77314 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R77375:77380 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R77382:77386 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R77457:77461 VST.floyd.canon <> Post1:880 var
R77443:77449 compcert.cfrontend.Clight <> Sreturn constr
R77451:77454 Coq.Init.Datatypes <> None constr
R77404:77408 VST.floyd.canon <> PROPx def
R77416:77421 VST.floyd.canon <> LOCALx def
R77429:77432 VST.floyd.canon <> SEPx def
R77434:77437 VST.floyd.canon <> Rpre:879 var
R77423:77426 VST.floyd.canon <> Qpre:878 var
R77410:77413 VST.floyd.canon <> Ppre:877 var
R77397:77401 VST.floyd.canon <> Delta:876 var
R77391:77395 VST.floyd.canon <> Espec:875 var
R77388:77389 VST.floyd.canon <> cs:874 var
R77315:77321 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R77327:77328 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R77365:77369 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R77322:77326 VST.floyd.canon <> Delta:876 var
R77329:77333 VST.floyd.canon <> PROPx def
R77341:77346 VST.floyd.canon <> LOCALx def
R77354:77357 VST.floyd.canon <> SEPx def
R77359:77362 VST.floyd.canon <> Rpre:879 var
R77348:77351 VST.floyd.canon <> Qpre:878 var
R77335:77338 VST.floyd.canon <> Ppre:877 var
R77370:77374 VST.floyd.canon <> post3:884 var
R77270:77285 VST.floyd.canon <> return_inner_gen ind
R77304:77308 VST.floyd.canon <> post3:884 var
R77298:77302 VST.floyd.canon <> post2:883 var
R77293:77296 Coq.Init.Datatypes <> None constr
R77287:77291 VST.floyd.canon <> SEPsf:882 var
R77206:77212 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R77218:77219 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R77257:77261 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R77213:77217 VST.floyd.canon <> Delta:876 var
R77220:77224 VST.floyd.canon <> PROPx def
R77232:77237 VST.floyd.canon <> LOCALx def
R77245:77248 VST.floyd.canon <> SEPx def
R77250:77254 VST.floyd.canon <> SEPsf:882 var
R77239:77242 VST.floyd.canon <> Qpre:878 var
R77226:77229 VST.floyd.canon <> Ppre:877 var
R77262:77263 VST.floyd.canon <> sf:881 var
R77106:77121 VST.floyd.canon <> return_outer_gen ind
R77130:77145 VST.veric.SeparationLogic <> frame_ret_assert def
R77197:77198 VST.floyd.canon <> sf:881 var
R77148:77171 VST.veric.SeparationLogic <> function_body_ret_assert def
R77190:77194 VST.floyd.canon <> post2:883 var
R77174:77181 VST.veric.seplog <> ret_type def
R77183:77187 VST.floyd.canon <> Delta:876 var
R77123:77127 VST.floyd.canon <> Post1:880 var
R77092:77094 Coq.Init.Logic <> ::type_scope:x_'='_x not
R77078:77085 VST.veric.seplog <> ret_type def
R77087:77091 VST.floyd.canon <> Delta:876 var
R77095:77099 compcert.cfrontend.Ctypes <> Tvoid constr
R77490:77498 VST.floyd.canon <> semax_pre thm
R77510:77521 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_return prfax
R77490:77498 VST.floyd.canon <> semax_pre thm
R77510:77521 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_return prfax
R77533:77553 VST.floyd.canon <> return_outer_gen_spec thm
R77533:77553 VST.floyd.canon <> return_outer_gen_spec thm
R77600:77625 VST.floyd.canon <> return_inner_gen_None_spec thm
R77600:77625 VST.floyd.canon <> return_inner_gen_None_spec thm
R77642:77651 VST.msl.seplog <> andp_right meth
R77642:77651 VST.msl.seplog <> andp_right meth
R77665:77674 VST.veric.SeparationLogic <> tc_expropt def
R77712:77721 VST.msl.seplog <> prop_right meth
R77712:77721 VST.msl.seplog <> prop_right meth
R77741:77752 VST.veric.SeparationLogic <> cast_expropt def
R77755:77756 Coq.Init.Datatypes <> id def
R77770:77782 VST.msl.seplog <> derives_trans meth
R77770:77782 VST.msl.seplog <> derives_trans meth
R77836:77840 VST.floyd.canon <> PROPx def
R77843:77848 VST.floyd.canon <> LOCALx def
R77851:77854 VST.floyd.canon <> SEPx def
R77857:77861 VST.veric.SeparationLogic <> local def
R77864:77868 VST.veric.mpred <> lift1 def
R78025:78037 VST.msl.seplog <> derives_trans meth
R78025:78037 VST.msl.seplog <> derives_trans meth
R78065:78077 VST.msl.seplog <> derives_trans meth
R78087:78100 VST.msl.seplog <> sepcon_derives meth
R78110:78121 VST.msl.seplog <> derives_refl meth
R78065:78077 VST.msl.seplog <> derives_trans meth
R78087:78100 VST.msl.seplog <> sepcon_derives meth
R78110:78121 VST.msl.seplog <> derives_refl meth
R78150:78165 VST.veric.SeparationLogic <> frame_ret_assert def
R78168:78191 VST.veric.SeparationLogic <> function_body_ret_assert def
R78194:78201 VST.veric.SeparationLogic <> bind_ret def
R78204:78212 VST.veric.SeparationLogic <> make_args def
prf 78276:78292 <> semax_return_Some
binder 78303:78304 <> cs:885
binder 78306:78310 <> Espec:886
binder 78313:78317 <> Delta:887
binder 78319:78322 <> Ppre:888
binder 78324:78327 <> Qpre:889
binder 78329:78332 <> Rpre:890
binder 78334:78338 <> Post1:891
binder 78340:78341 <> sf:892
binder 78343:78347 <> SEPsf:893
binder 78349:78353 <> post2:894
binder 78355:78359 <> post3:895
binder 78361:78363 <> ret:896
binder 78365:78369 <> v_gen:897
R78489:78494 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R78592:78597 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R78692:78697 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R78756:78761 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R78809:78814 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R78875:78880 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R78882:78886 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R78963:78967 VST.floyd.canon <> Post1:891 var
R78943:78949 compcert.cfrontend.Clight <> Sreturn constr
R78952:78955 Coq.Init.Datatypes <> Some constr
R78957:78959 VST.floyd.canon <> ret:896 var
R78904:78908 VST.floyd.canon <> PROPx def
R78916:78921 VST.floyd.canon <> LOCALx def
R78929:78932 VST.floyd.canon <> SEPx def
R78934:78937 VST.floyd.canon <> Rpre:890 var
R78923:78926 VST.floyd.canon <> Qpre:889 var
R78910:78913 VST.floyd.canon <> Ppre:888 var
R78897:78901 VST.floyd.canon <> Delta:887 var
R78891:78895 VST.floyd.canon <> Espec:886 var
R78888:78889 VST.floyd.canon <> cs:885 var
R78815:78821 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78827:78828 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78865:78869 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78822:78826 VST.floyd.canon <> Delta:887 var
R78829:78833 VST.floyd.canon <> PROPx def
R78841:78846 VST.floyd.canon <> LOCALx def
R78854:78857 VST.floyd.canon <> SEPx def
R78859:78862 VST.floyd.canon <> Rpre:890 var
R78848:78851 VST.floyd.canon <> Qpre:889 var
R78835:78838 VST.floyd.canon <> Ppre:888 var
R78870:78874 VST.floyd.canon <> post3:895 var
R78762:78777 VST.floyd.canon <> return_inner_gen ind
R78804:78808 VST.floyd.canon <> post3:895 var
R78798:78802 VST.floyd.canon <> post2:894 var
R78786:78789 Coq.Init.Datatypes <> Some constr
R78791:78795 VST.floyd.canon <> v_gen:897 var
R78779:78783 VST.floyd.canon <> SEPsf:893 var
R78698:78704 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78710:78711 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78749:78753 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78705:78709 VST.floyd.canon <> Delta:887 var
R78712:78716 VST.floyd.canon <> PROPx def
R78724:78729 VST.floyd.canon <> LOCALx def
R78737:78740 VST.floyd.canon <> SEPx def
R78742:78746 VST.floyd.canon <> SEPsf:893 var
R78731:78734 VST.floyd.canon <> Qpre:889 var
R78718:78721 VST.floyd.canon <> Ppre:888 var
R78754:78755 VST.floyd.canon <> sf:892 var
R78598:78613 VST.floyd.canon <> return_outer_gen ind
R78622:78637 VST.veric.SeparationLogic <> frame_ret_assert def
R78689:78690 VST.floyd.canon <> sf:892 var
R78640:78663 VST.veric.SeparationLogic <> function_body_ret_assert def
R78682:78686 VST.floyd.canon <> post2:894 var
R78666:78673 VST.veric.seplog <> ret_type def
R78675:78679 VST.floyd.canon <> Delta:887 var
R78615:78619 VST.floyd.canon <> Post1:891 var
R78495:78501 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78507:78508 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78545:78549 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78502:78506 VST.floyd.canon <> Delta:887 var
R78509:78513 VST.floyd.canon <> PROPx def
R78521:78526 VST.floyd.canon <> LOCALx def
R78534:78537 VST.floyd.canon <> SEPx def
R78539:78542 VST.floyd.canon <> Rpre:890 var
R78528:78531 VST.floyd.canon <> Qpre:889 var
R78515:78518 VST.floyd.canon <> Ppre:888 var
R78550:78556 VST.veric.SeparationLogic <> tc_expr def
R78565:78569 compcert.cfrontend.Clight <> Ecast constr
R78576:78583 VST.veric.seplog <> ret_type def
R78585:78589 VST.floyd.canon <> Delta:887 var
R78571:78573 VST.floyd.canon <> ret:896 var
R78558:78562 VST.floyd.canon <> Delta:887 var
R78374:78380 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78386:78387 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78424:78428 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78381:78385 VST.floyd.canon <> Delta:887 var
R78388:78392 VST.floyd.canon <> PROPx def
R78400:78405 VST.floyd.canon <> LOCALx def
R78413:78416 VST.floyd.canon <> SEPx def
R78418:78421 VST.floyd.canon <> Rpre:890 var
R78407:78410 VST.floyd.canon <> Qpre:889 var
R78394:78397 VST.floyd.canon <> Ppre:888 var
R78429:78433 VST.veric.SeparationLogic <> local def
R78436:78437 VST.veric.lift LiftNotation :::'`('_x_')' not
R78446:78487 VST.veric.lift LiftNotation :::'`('_x_')' not
R78438:78439 Coq.Init.Logic <> eq ind
R78441:78445 VST.floyd.canon <> v_gen:897 var
R78449:78457 VST.veric.expr <> eval_expr def
R78460:78464 compcert.cfrontend.Clight <> Ecast constr
R78471:78478 VST.veric.seplog <> ret_type def
R78480:78484 VST.floyd.canon <> Delta:887 var
R78466:78468 VST.floyd.canon <> ret:896 var
R78996:79004 VST.floyd.canon <> semax_pre thm
R79016:79027 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_return prfax
R78996:79004 VST.floyd.canon <> semax_pre thm
R79016:79027 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_return prfax
R79039:79059 VST.floyd.canon <> return_outer_gen_spec thm
R79039:79059 VST.floyd.canon <> return_outer_gen_spec thm
R79106:79115 VST.msl.seplog <> andp_right meth
R79106:79115 VST.msl.seplog <> andp_right meth
R79144:79149 compcert.common.Values Val eq def
R79157:79162 compcert.common.Values <> Vundef constr
R79144:79149 compcert.common.Values Val eq def
R79157:79162 compcert.common.Values <> Vundef constr
R79194:79201 VST.msl.log_normalize <> add_andp thm
R79212:79219 VST.msl.log_normalize <> add_andp thm
R79194:79201 VST.msl.log_normalize <> add_andp thm
R79194:79201 VST.msl.log_normalize <> add_andp thm
R79212:79219 VST.msl.log_normalize <> add_andp thm
R79212:79219 VST.msl.log_normalize <> add_andp thm
R79243:79251 VST.msl.log_normalize <> andp_comm thm
R79256:79260 VST.floyd.canon <> PROPx def
R79270:79279 VST.msl.log_normalize <> andp_assoc thm
R79243:79251 VST.msl.log_normalize <> andp_comm thm
R79256:79260 VST.floyd.canon <> PROPx def
R79243:79251 VST.msl.log_normalize <> andp_comm thm
R79256:79260 VST.floyd.canon <> PROPx def
R79270:79279 VST.msl.log_normalize <> andp_assoc thm
R79270:79279 VST.msl.log_normalize <> andp_assoc thm
R79270:79279 VST.msl.log_normalize <> andp_assoc thm
R79270:79279 VST.msl.log_normalize <> andp_assoc thm
R79292:79301 VST.msl.seplog <> andp_left2 meth
R79292:79301 VST.msl.seplog <> andp_left2 meth
R79330:79342 VST.msl.seplog <> derives_trans meth
R79352:79371 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R79330:79342 VST.msl.seplog <> derives_trans meth
R79352:79371 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R79424:79436 VST.msl.seplog <> derives_trans meth
R79440:79441 VST.msl.seplog <> FF meth
R79424:79436 VST.msl.seplog <> derives_trans meth
R79440:79441 VST.msl.seplog <> FF meth
R79470:79481 VST.msl.log_normalize <> prop_derives thm
R79470:79481 VST.msl.log_normalize <> prop_derives thm
R79494:79506 VST.veric.Cop2 <> tc_val_Vundef thm
R79494:79506 VST.veric.Cop2 <> tc_val_Vundef thm
R79521:79546 VST.floyd.canon <> return_inner_gen_Some_spec thm
R79521:79546 VST.floyd.canon <> return_inner_gen_Some_spec thm
R79575:79581 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R79587:79588 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R79625:79641 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R79589:79593 VST.floyd.canon <> PROPx def
R79601:79606 VST.floyd.canon <> LOCALx def
R79614:79617 VST.floyd.canon <> SEPx def
R79642:79644 VST.veric.lift LiftNotation :::'`'_x not
R79739:79742 VST.veric.lift LiftNotation :::'`'_x not
R79645:79653 VST.veric.tycontext <> RA_return proj
R79728:79731 Coq.Init.Datatypes <> Some constr
R79656:79671 VST.veric.SeparationLogic <> frame_ret_assert def
R79674:79697 VST.veric.SeparationLogic <> function_body_ret_assert def
R79700:79707 VST.veric.seplog <> ret_type def
R79741:79742 Coq.Init.Datatypes <> id def
R79575:79581 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R79587:79588 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R79625:79641 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R79589:79593 VST.floyd.canon <> PROPx def
R79601:79606 VST.floyd.canon <> LOCALx def
R79614:79617 VST.floyd.canon <> SEPx def
R79642:79644 VST.veric.lift LiftNotation :::'`'_x not
R79739:79742 VST.veric.lift LiftNotation :::'`'_x not
R79645:79653 VST.veric.tycontext <> RA_return proj
R79728:79731 Coq.Init.Datatypes <> Some constr
R79656:79671 VST.veric.SeparationLogic <> frame_ret_assert def
R79674:79697 VST.veric.SeparationLogic <> function_body_ret_assert def
R79700:79707 VST.veric.seplog <> ret_type def
R79741:79742 Coq.Init.Datatypes <> id def
R79757:79772 VST.veric.SeparationLogic <> frame_ret_assert def
R79775:79798 VST.veric.SeparationLogic <> function_body_ret_assert def
R79801:79808 VST.veric.SeparationLogic <> bind_ret def
R79811:79822 VST.veric.SeparationLogic <> cast_expropt def
R79836:79848 VST.msl.seplog <> derives_trans meth
R79836:79848 VST.msl.seplog <> derives_trans meth
R79911:79915 VST.floyd.canon <> PROPx def
R79918:79923 VST.floyd.canon <> LOCALx def
R79926:79929 VST.floyd.canon <> SEPx def
R79932:79936 VST.veric.SeparationLogic <> local def
R79939:79943 VST.veric.mpred <> lift1 def
R80192:80199 VST.msl.log_normalize <> add_andp thm
R80192:80199 VST.msl.log_normalize <> add_andp thm
R80192:80199 VST.msl.log_normalize <> add_andp thm
R80239:80248 VST.msl.seplog <> andp_right meth
R80239:80248 VST.msl.seplog <> andp_right meth
R80264:80276 VST.msl.seplog <> derives_trans meth
R80264:80276 VST.msl.seplog <> derives_trans meth
R80302:80314 VST.msl.seplog <> derives_trans meth
R80324:80343 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R80302:80314 VST.msl.seplog <> derives_trans meth
R80324:80343 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R80380:80391 VST.msl.seplog <> derives_refl meth
R80380:80391 VST.msl.seplog <> derives_refl meth
R80407:80419 VST.msl.seplog <> derives_trans meth
R80407:80419 VST.msl.seplog <> derives_trans meth
R80445:80457 VST.msl.seplog <> derives_trans meth
R80467:80480 VST.msl.seplog <> sepcon_derives meth
R80490:80501 VST.msl.seplog <> derives_refl meth
R80445:80457 VST.msl.seplog <> derives_trans meth
R80467:80480 VST.msl.seplog <> sepcon_derives meth
R80490:80501 VST.msl.seplog <> derives_refl meth
R80531:80542 VST.msl.seplog <> derives_refl meth
R80531:80542 VST.msl.seplog <> derives_refl meth
R80558:80565 VST.msl.log_normalize <> add_andp thm
R80577:80584 VST.msl.log_normalize <> add_andp thm
R80558:80565 VST.msl.log_normalize <> add_andp thm
R80558:80565 VST.msl.log_normalize <> add_andp thm
R80577:80584 VST.msl.log_normalize <> add_andp thm
R80577:80584 VST.msl.log_normalize <> add_andp thm
R80607:80615 VST.msl.log_normalize <> andp_comm thm
R80620:80624 VST.floyd.canon <> PROPx def
R80634:80643 VST.msl.log_normalize <> andp_assoc thm
R80607:80615 VST.msl.log_normalize <> andp_comm thm
R80620:80624 VST.floyd.canon <> PROPx def
R80607:80615 VST.msl.log_normalize <> andp_comm thm
R80620:80624 VST.floyd.canon <> PROPx def
R80634:80643 VST.msl.log_normalize <> andp_assoc thm
R80634:80643 VST.msl.log_normalize <> andp_assoc thm
R80634:80643 VST.msl.log_normalize <> andp_assoc thm
R80634:80643 VST.msl.log_normalize <> andp_assoc thm
R80656:80665 VST.msl.seplog <> andp_left2 meth
R80656:80665 VST.msl.seplog <> andp_left2 meth
R80705:80706 Coq.Init.Datatypes <> id def
prf 80736:80757 <> remove_PROP_LOCAL_left
binder 80767:80767 <> P:898
binder 80769:80769 <> Q:899
binder 80771:80771 <> R:900
binder 80773:80773 <> S:901
R80783:80786 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R80807:80811 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R80787:80791 VST.floyd.canon <> PROPx def
R80796:80801 VST.floyd.canon <> LOCALx def
R80805:80805 VST.floyd.canon <> R:900 var
R80803:80803 VST.floyd.canon <> Q:899 var
R80793:80793 VST.floyd.canon <> P:898 var
R80812:80812 VST.floyd.canon <> S:901 var
R80777:80781 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R80776:80776 VST.floyd.canon <> R:900 var
R80782:80782 VST.floyd.canon <> S:901 var
prf 80870:80892 <> remove_PROP_LOCAL_left'
binder 80907:80907 <> P:902
binder 80909:80909 <> Q:903
binder 80911:80911 <> R:904
binder 80913:80913 <> S:905
R80924:80932 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R80967:80971 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R80933:80937 VST.floyd.canon <> PROPx def
R80942:80947 VST.floyd.canon <> LOCALx def
R80952:80955 VST.floyd.canon <> SEPx def
R80959:80960 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R80958:80958 VST.floyd.canon <> R:904 var
R80961:80963 Coq.Init.Datatypes <> nil constr
R80949:80949 VST.floyd.canon <> Q:903 var
R80939:80939 VST.floyd.canon <> P:902 var
R80972:80972 VST.floyd.canon <> S:905 var
R80918:80922 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R80916:80916 VST.veric.lift LiftNotation :::'`'_x not
R80917:80917 VST.floyd.canon <> R:904 var
R80923:80923 VST.floyd.canon <> S:905 var
prf 81039:81053 <> SEP_nth_isolate
binder 81056:81056 <> A:906
binder 81069:81069 <> n:907
binder 81071:81071 <> R:908
binder 81073:81074 <> Rn:909
R81100:81109 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R81119:81121 Coq.Init.Logic <> ::type_scope:x_'='_x not
R81111:81114 VST.floyd.canon <> SEPx def
R81118:81118 VST.floyd.canon <> R:908 var
R81116:81116 VST.floyd.canon <> A:906 var
R81122:81125 VST.floyd.canon <> SEPx def
R81130:81133 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R81128:81129 VST.floyd.canon <> Rn:909 var
R81134:81144 VST.floyd.canon <> replace_nth def
R81150:81152 VST.msl.seplog <> emp meth
R81148:81148 VST.floyd.canon <> R:908 var
R81146:81146 VST.floyd.canon <> n:907 var
R81090:81092 Coq.Init.Logic <> ::type_scope:x_'='_x not
R81077:81085 Coq.Lists.List <> nth_error def
R81089:81089 VST.floyd.canon <> n:907 var
R81087:81087 VST.floyd.canon <> R:908 var
R81093:81096 Coq.Init.Datatypes <> Some constr
R81098:81099 VST.floyd.canon <> Rn:909 var
R81171:81174 VST.floyd.canon <> SEPx def
R81276:81285 VST.msl.log_normalize <> emp_sepcon thm
R81276:81285 VST.msl.log_normalize <> emp_sepcon thm
R81276:81285 VST.msl.log_normalize <> emp_sepcon thm
R81302:81312 VST.floyd.canon <> replace_nth def
R81321:81331 VST.floyd.canon <> replace_nth def
R81321:81331 VST.floyd.canon <> replace_nth def
R81350:81352 VST.msl.seplog <> ::logic:x_'*'_x not
R81353:81369 VST.floyd.base <> fold_right_sepcon def
R81350:81352 VST.msl.seplog <> ::logic:x_'*'_x not
R81353:81369 VST.floyd.base <> fold_right_sepcon def
R81430:81441 VST.msl.seplog <> sepcon_assoc meth
R81430:81441 VST.msl.seplog <> sepcon_assoc meth
R81430:81441 VST.msl.seplog <> sepcon_assoc meth
R81454:81464 VST.msl.seplog <> sepcon_comm meth
R81454:81464 VST.msl.seplog <> sepcon_comm meth
R81454:81464 VST.msl.seplog <> sepcon_comm meth
R81495:81506 VST.msl.seplog <> sepcon_assoc meth
R81495:81506 VST.msl.seplog <> sepcon_assoc meth
R81495:81506 VST.msl.seplog <> sepcon_assoc meth
R81495:81506 VST.msl.seplog <> sepcon_assoc meth
R81495:81506 VST.msl.seplog <> sepcon_assoc meth
R81495:81506 VST.msl.seplog <> sepcon_assoc meth
R81527:81537 VST.msl.seplog <> sepcon_comm meth
R81527:81537 VST.msl.seplog <> sepcon_comm meth
R81527:81537 VST.msl.seplog <> sepcon_comm meth
prf 81565:81587 <> nth_error_SEP_sepcon_TT
binder 81597:81597 <> P:910
binder 81599:81599 <> Q:911
binder 81601:81601 <> R:912
binder 81603:81603 <> n:913
binder 81605:81606 <> Rn:914
binder 81608:81608 <> S:915
R81656:81661 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R81685:81690 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R81718:81722 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R81691:81695 VST.floyd.canon <> PROPx def
R81700:81705 VST.floyd.canon <> LOCALx def
R81710:81713 VST.floyd.canon <> SEPx def
R81715:81715 VST.floyd.canon <> R:912 var
R81707:81707 VST.floyd.canon <> Q:911 var
R81697:81697 VST.floyd.canon <> P:910 var
R81724:81726 VST.msl.seplog <> ::logic:x_'*'_x not
R81723:81723 VST.floyd.canon <> S:915 var
R81727:81728 VST.msl.seplog <> TT meth
R81675:81677 Coq.Init.Logic <> ::type_scope:x_'='_x not
R81662:81670 Coq.Lists.List <> nth_error def
R81674:81674 VST.floyd.canon <> n:913 var
R81672:81672 VST.floyd.canon <> R:912 var
R81678:81681 Coq.Init.Datatypes <> Some constr
R81683:81684 VST.floyd.canon <> Rn:914 var
R81650:81654 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R81613:81617 VST.floyd.canon <> PROPx def
R81622:81627 VST.floyd.canon <> LOCALx def
R81632:81635 VST.floyd.canon <> SEPx def
R81640:81643 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R81638:81639 VST.floyd.canon <> Rn:914 var
R81644:81646 Coq.Init.Datatypes <> nil constr
R81629:81629 VST.floyd.canon <> Q:911 var
R81619:81619 VST.floyd.canon <> P:910 var
R81655:81655 VST.floyd.canon <> S:915 var
R81759:81773 VST.floyd.canon <> SEP_nth_isolate thm
R81759:81773 VST.floyd.canon <> SEP_nth_isolate thm
R81759:81773 VST.floyd.canon <> SEP_nth_isolate thm
R81794:81798 VST.floyd.canon <> PROPx def
R81801:81806 VST.floyd.canon <> LOCALx def
R81809:81812 VST.floyd.canon <> SEPx def
R81829:81833 VST.veric.SeparationLogic <> local def
R81836:81840 VST.veric.mpred <> lift1 def
R81957:81966 VST.msl.log_normalize <> andp_assoc thm
R81957:81966 VST.msl.log_normalize <> andp_assoc thm
R81957:81966 VST.msl.log_normalize <> andp_assoc thm
R81957:81966 VST.msl.log_normalize <> andp_assoc thm
R81993:82000 VST.msl.log_normalize <> prop_and thm
R81993:82000 VST.msl.log_normalize <> prop_and thm
R81993:82000 VST.msl.log_normalize <> prop_and thm
R81993:82000 VST.msl.log_normalize <> prop_and thm
R82023:82032 VST.msl.seplog <> sepcon_emp meth
R82023:82032 VST.msl.seplog <> sepcon_emp meth
R82023:82032 VST.msl.seplog <> sepcon_emp meth
R82053:82069 VST.msl.log_normalize <> sepcon_andp_prop' thm
R82053:82069 VST.msl.log_normalize <> sepcon_andp_prop' thm
R82053:82069 VST.msl.log_normalize <> sepcon_andp_prop' thm
R82080:82093 VST.msl.seplog <> sepcon_derives meth
R82080:82093 VST.msl.seplog <> sepcon_derives meth
R82115:82124 VST.msl.seplog <> prop_right meth
R82115:82124 VST.msl.seplog <> prop_right meth
prf 82147:82169 <> SEP_replace_nth_isolate
binder 82172:82172 <> A:916
binder 82185:82185 <> n:917
binder 82187:82187 <> R:918
binder 82189:82190 <> Rn:919
binder 82192:82194 <> Rn':920
R82227:82236 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R82266:82268 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82238:82241 VST.floyd.canon <> SEPx def
R82246:82256 VST.floyd.canon <> replace_nth def
R82262:82264 VST.floyd.canon <> Rn':920 var
R82260:82260 VST.floyd.canon <> R:918 var
R82258:82258 VST.floyd.canon <> n:917 var
R82243:82243 VST.floyd.canon <> A:916 var
R82269:82272 VST.floyd.canon <> SEPx def
R82278:82281 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R82275:82277 VST.floyd.canon <> Rn':920 var
R82282:82292 VST.floyd.canon <> replace_nth def
R82298:82300 VST.msl.seplog <> emp meth
R82296:82296 VST.floyd.canon <> R:918 var
R82294:82294 VST.floyd.canon <> n:917 var
R82217:82219 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82204:82212 Coq.Lists.List <> nth_error def
R82216:82216 VST.floyd.canon <> n:917 var
R82214:82214 VST.floyd.canon <> R:918 var
R82220:82223 Coq.Init.Datatypes <> Some constr
R82225:82226 VST.floyd.canon <> Rn:919 var
R82319:82322 VST.floyd.canon <> SEPx def
R82433:82442 VST.msl.log_normalize <> emp_sepcon thm
R82433:82442 VST.msl.log_normalize <> emp_sepcon thm
R82433:82442 VST.msl.log_normalize <> emp_sepcon thm
R82459:82469 VST.floyd.canon <> replace_nth def
R82478:82488 VST.floyd.canon <> replace_nth def
R82478:82488 VST.floyd.canon <> replace_nth def
R82507:82509 VST.msl.seplog <> ::logic:x_'*'_x not
R82510:82526 VST.floyd.base <> fold_right_sepcon def
R82529:82539 VST.floyd.canon <> replace_nth def
R82507:82509 VST.msl.seplog <> ::logic:x_'*'_x not
R82510:82526 VST.floyd.base <> fold_right_sepcon def
R82529:82539 VST.floyd.canon <> replace_nth def
R82625:82636 VST.msl.seplog <> sepcon_assoc meth
R82625:82636 VST.msl.seplog <> sepcon_assoc meth
R82625:82636 VST.msl.seplog <> sepcon_assoc meth
R82625:82636 VST.msl.seplog <> sepcon_assoc meth
R82625:82636 VST.msl.seplog <> sepcon_assoc meth
R82625:82636 VST.msl.seplog <> sepcon_assoc meth
R82649:82659 VST.msl.seplog <> sepcon_comm meth
R82649:82659 VST.msl.seplog <> sepcon_comm meth
R82649:82659 VST.msl.seplog <> sepcon_comm meth
R82676:82687 VST.msl.seplog <> sepcon_assoc meth
R82676:82687 VST.msl.seplog <> sepcon_assoc meth
R82676:82687 VST.msl.seplog <> sepcon_assoc meth
prf 82716:82731 <> local_andp_lemma
binder 82743:82743 <> P:921
binder 82745:82745 <> Q:922
R82761:82764 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R82766:82768 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82765:82765 VST.floyd.canon <> P:921 var
R82776:82779 VST.msl.seplog <> ::logic:x_'&&'_x not
R82769:82773 VST.veric.SeparationLogic <> local def
R82775:82775 VST.floyd.canon <> Q:922 var
R82780:82780 VST.floyd.canon <> P:921 var
R82749:82753 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R82748:82748 VST.floyd.canon <> P:921 var
R82754:82758 VST.veric.SeparationLogic <> local def
R82760:82760 VST.floyd.canon <> Q:922 var
R82804:82811 VST.msl.seplog <> pred_ext meth
R82804:82811 VST.msl.seplog <> pred_ext meth
R82820:82829 VST.msl.seplog <> andp_right meth
R82820:82829 VST.msl.seplog <> andp_right meth
R82844:82853 VST.msl.seplog <> andp_left2 meth
R82844:82853 VST.msl.seplog <> andp_left2 meth
prf 82874:82885 <> SEP_TT_right
binder 82897:82897 <> R:923
R82901:82905 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R82900:82900 VST.floyd.canon <> R:923 var
R82906:82909 VST.floyd.canon <> SEPx def
R82913:82914 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R82911:82912 VST.msl.seplog <> TT meth
R82915:82917 Coq.Init.Datatypes <> nil constr
R82955:82964 VST.msl.seplog <> sepcon_emp meth
R82955:82964 VST.msl.seplog <> sepcon_emp meth
R82955:82964 VST.msl.seplog <> sepcon_emp meth
R82973:82980 VST.msl.log_normalize <> TT_right thm
R82973:82980 VST.msl.log_normalize <> TT_right thm
prf 82995:83009 <> replace_nth_SEP
binder 83019:83019 <> P:924
binder 83021:83021 <> Q:925
binder 83023:83023 <> R:926
binder 83025:83025 <> n:927
binder 83027:83028 <> Rn:928
binder 83030:83032 <> Rn':929
R83045:83048 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R83095:83099 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R83049:83053 VST.floyd.canon <> PROPx def
R83058:83063 VST.floyd.canon <> LOCALx def
R83068:83071 VST.floyd.canon <> SEPx def
R83074:83084 VST.floyd.canon <> replace_nth def
R83090:83091 VST.floyd.canon <> Rn:928 var
R83088:83088 VST.floyd.canon <> R:926 var
R83086:83086 VST.floyd.canon <> n:927 var
R83065:83065 VST.floyd.canon <> Q:925 var
R83055:83055 VST.floyd.canon <> P:924 var
R83100:83104 VST.floyd.canon <> PROPx def
R83109:83114 VST.floyd.canon <> LOCALx def
R83119:83122 VST.floyd.canon <> SEPx def
R83125:83135 VST.floyd.canon <> replace_nth def
R83141:83143 VST.floyd.canon <> Rn':929 var
R83139:83139 VST.floyd.canon <> R:926 var
R83137:83137 VST.floyd.canon <> n:927 var
R83116:83116 VST.floyd.canon <> Q:925 var
R83106:83106 VST.floyd.canon <> P:924 var
R83037:83041 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R83035:83036 VST.floyd.canon <> Rn:928 var
R83042:83044 VST.floyd.canon <> Rn':929 var
R83245:83254 VST.msl.seplog <> andp_right meth
R83264:83273 VST.msl.seplog <> prop_right meth
R83245:83254 VST.msl.seplog <> andp_right meth
R83264:83273 VST.msl.seplog <> prop_right meth
prf 83471:83486 <> replace_nth_SEP'
binder 83498:83498 <> A:930
binder 83500:83500 <> P:931
binder 83502:83502 <> Q:932
binder 83504:83504 <> R:933
binder 83506:83506 <> n:934
binder 83508:83509 <> Rn:935
binder 83511:83513 <> Rn':936
R83571:83576 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R83577:83577 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R83635:83641 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R83689:83689 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R83585:83588 VST.msl.seplog <> ::logic:x_'&&'_x not
R83578:83582 VST.veric.SeparationLogic <> local def
R83584:83584 VST.floyd.canon <> A:930 var
R83589:83593 VST.floyd.canon <> PROPx def
R83598:83603 VST.floyd.canon <> LOCALx def
R83608:83611 VST.floyd.canon <> SEPx def
R83614:83624 VST.floyd.canon <> replace_nth def
R83630:83631 VST.floyd.canon <> Rn:935 var
R83628:83628 VST.floyd.canon <> R:933 var
R83626:83626 VST.floyd.canon <> n:934 var
R83605:83605 VST.floyd.canon <> Q:932 var
R83595:83595 VST.floyd.canon <> P:931 var
R83642:83646 VST.floyd.canon <> PROPx def
R83651:83656 VST.floyd.canon <> LOCALx def
R83661:83664 VST.floyd.canon <> SEPx def
R83667:83677 VST.floyd.canon <> replace_nth def
R83683:83685 VST.floyd.canon <> Rn':936 var
R83681:83681 VST.floyd.canon <> R:933 var
R83679:83679 VST.floyd.canon <> n:934 var
R83658:83658 VST.floyd.canon <> Q:932 var
R83648:83648 VST.floyd.canon <> P:931 var
R83562:83566 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R83523:83526 VST.msl.seplog <> ::logic:x_'&&'_x not
R83516:83520 VST.veric.SeparationLogic <> local def
R83522:83522 VST.floyd.canon <> A:930 var
R83527:83531 VST.floyd.canon <> PROPx def
R83536:83541 VST.floyd.canon <> LOCALx def
R83546:83549 VST.floyd.canon <> SEPx def
R83554:83555 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R83552:83553 VST.floyd.canon <> Rn:935 var
R83556:83558 Coq.Init.Datatypes <> nil constr
R83543:83543 VST.floyd.canon <> Q:932 var
R83533:83533 VST.floyd.canon <> P:931 var
R83567:83567 VST.veric.lift LiftNotation :::'`'_x not
R83568:83570 VST.floyd.canon <> Rn':936 var
R83715:83719 VST.veric.SeparationLogic <> local def
R83722:83726 VST.veric.mpred <> lift1 def
R83780:83793 VST.msl.log_normalize <> prop_true_andp thm
R83780:83793 VST.msl.log_normalize <> prop_true_andp thm
R83780:83793 VST.msl.log_normalize <> prop_true_andp thm
R83941:83950 VST.msl.seplog <> andp_right meth
R83960:83969 VST.msl.seplog <> prop_right meth
R83941:83950 VST.msl.seplog <> andp_right meth
R83960:83969 VST.msl.seplog <> prop_right meth
prf 84169:84186 <> nth_error_SEP_prop
binder 84198:84198 <> P:937
binder 84200:84200 <> Q:938
binder 84202:84202 <> R:939
binder 84204:84204 <> n:940
R84211:84215 VST.veric.mpred <> mpred def
binder 84207:84208 <> Rn:941
binder 84219:84221 <> Rn':942
R84258:84265 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R84279:84286 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R84314:84318 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R84287:84291 VST.floyd.canon <> PROPx def
R84296:84301 VST.floyd.canon <> LOCALx def
R84306:84309 VST.floyd.canon <> SEPx def
R84311:84311 VST.floyd.canon <> R:939 var
R84303:84303 VST.floyd.canon <> Q:938 var
R84293:84293 VST.floyd.canon <> P:937 var
R84319:84321 VST.msl.seplog <> ::logic:'!!'_x not
R84322:84324 VST.floyd.canon <> Rn':942 var
R84268:84272 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R84266:84267 VST.floyd.canon <> Rn:941 var
R84273:84275 VST.msl.seplog <> ::logic:'!!'_x not
R84276:84278 VST.floyd.canon <> Rn':942 var
R84248:84250 Coq.Init.Logic <> ::type_scope:x_'='_x not
R84235:84243 Coq.Lists.List <> nth_error def
R84247:84247 VST.floyd.canon <> n:940 var
R84245:84245 VST.floyd.canon <> R:939 var
R84251:84254 Coq.Init.Datatypes <> Some constr
R84256:84257 VST.floyd.canon <> Rn:941 var
R84352:84361 VST.msl.seplog <> andp_left2 meth
R84352:84361 VST.msl.seplog <> andp_left2 meth
R84372:84381 VST.msl.seplog <> andp_left2 meth
R84372:84381 VST.msl.seplog <> andp_left2 meth
R84393:84396 VST.floyd.canon <> SEPx def
R84501:84508 VST.msl.log_normalize <> add_andp thm
R84501:84508 VST.msl.log_normalize <> add_andp thm
R84501:84508 VST.msl.log_normalize <> add_andp thm
R84579:84586 VST.msl.log_normalize <> add_andp thm
R84579:84586 VST.msl.log_normalize <> add_andp thm
R84579:84586 VST.msl.log_normalize <> add_andp thm
prf 84624:84633 <> LOCAL_2_hd
binder 84643:84643 <> P:943
binder 84645:84645 <> Q:944
binder 84647:84647 <> R:945
binder 84649:84650 <> Q1:946
binder 84652:84653 <> Q2:947
R84658:84658 Coq.Init.Logic <> ::type_scope:x_'='_x not
R84700:84706 Coq.Init.Logic <> ::type_scope:x_'='_x not
R84748:84748 Coq.Init.Logic <> ::type_scope:x_'='_x not
R84659:84663 VST.floyd.canon <> PROPx def
R84668:84673 VST.floyd.canon <> LOCALx def
R84692:84695 VST.floyd.canon <> SEPx def
R84697:84697 VST.floyd.canon <> R:945 var
R84678:84681 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R84676:84677 VST.floyd.canon <> Q1:946 var
R84684:84687 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R84682:84683 VST.floyd.canon <> Q2:947 var
R84688:84688 VST.floyd.canon <> Q:944 var
R84665:84665 VST.floyd.canon <> P:943 var
R84707:84711 VST.floyd.canon <> PROPx def
R84716:84721 VST.floyd.canon <> LOCALx def
R84740:84743 VST.floyd.canon <> SEPx def
R84745:84745 VST.floyd.canon <> R:945 var
R84726:84729 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R84724:84725 VST.floyd.canon <> Q2:947 var
R84732:84735 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R84730:84731 VST.floyd.canon <> Q1:946 var
R84736:84736 VST.floyd.canon <> Q:944 var
R84713:84713 VST.floyd.canon <> P:943 var
R84794:84801 VST.msl.seplog <> pred_ext meth
R84873:84882 VST.msl.seplog <> andp_right meth
R84892:84901 VST.msl.seplog <> prop_right meth
R84794:84801 VST.msl.seplog <> pred_ext meth
R84873:84882 VST.msl.seplog <> andp_right meth
R84892:84901 VST.msl.seplog <> prop_right meth
R84873:84882 VST.msl.seplog <> andp_right meth
R84892:84901 VST.msl.seplog <> prop_right meth
prf 84995:85008 <> lvar_eval_lvar
R85015:85023 VST.veric.mpred <> compspecs class
binder 85011:85012 <> cs:948
binder 85036:85036 <> i:949
binder 85038:85038 <> t:950
binder 85040:85040 <> v:951
binder 85042:85044 <> rho:952
R85077:85080 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R85098:85100 Coq.Init.Logic <> ::type_scope:x_'='_x not
R85081:85089 VST.veric.SeparationLogic <> eval_lvar def
R85095:85097 VST.floyd.canon <> rho:952 var
R85093:85093 VST.floyd.canon <> t:950 var
R85091:85091 VST.floyd.canon <> i:949 var
R85101:85101 VST.floyd.canon <> v:951 var
R85047:85059 VST.floyd.canon <> locald_denote def
R85074:85076 VST.floyd.canon <> rho:952 var
R85062:85065 VST.floyd.canon <> lvar constr
R85071:85071 VST.floyd.canon <> v:951 var
R85069:85069 VST.floyd.canon <> t:950 var
R85067:85067 VST.floyd.canon <> i:949 var
R85118:85126 VST.veric.SeparationLogic <> eval_lvar def
R85157:85163 VST.veric.mpred Map get def
R85166:85170 VST.veric.mpred <> ve_of def
R85157:85163 VST.veric.mpred Map get def
R85166:85170 VST.veric.mpred <> ve_of def
R85239:85251 VST.veric.Cop2 <> eqb_type_refl thm
R85239:85251 VST.veric.Cop2 <> eqb_type_refl thm
R85239:85251 VST.veric.Cop2 <> eqb_type_refl thm
prf 85272:85284 <> lvar_eval_var
binder 85295:85295 <> i:953
binder 85297:85297 <> t:954
binder 85299:85299 <> v:955
binder 85301:85303 <> rho:956
R85336:85339 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R85356:85358 Coq.Init.Logic <> ::type_scope:x_'='_x not
R85340:85347 VST.veric.expr <> eval_var def
R85353:85355 VST.floyd.canon <> rho:956 var
R85351:85351 VST.floyd.canon <> t:954 var
R85349:85349 VST.floyd.canon <> i:953 var
R85359:85359 VST.floyd.canon <> v:955 var
R85306:85318 VST.floyd.canon <> locald_denote def
R85333:85335 VST.floyd.canon <> rho:956 var
R85321:85324 VST.floyd.canon <> lvar constr
R85330:85330 VST.floyd.canon <> v:955 var
R85328:85328 VST.floyd.canon <> t:954 var
R85326:85326 VST.floyd.canon <> i:953 var
R85384:85391 VST.veric.expr <> eval_var def
R85414:85420 VST.veric.mpred Map get def
R85423:85427 VST.veric.mpred <> ve_of def
R85414:85420 VST.veric.mpred Map get def
R85423:85427 VST.veric.mpred <> ve_of def
R85496:85508 VST.veric.Cop2 <> eqb_type_refl thm
R85496:85508 VST.veric.Cop2 <> eqb_type_refl thm
R85496:85508 VST.veric.Cop2 <> eqb_type_refl thm
prf 85529:85542 <> gvars_eval_var
binder 85553:85557 <> Delta:957
binder 85559:85560 <> gv:958
binder 85562:85562 <> i:959
binder 85564:85566 <> rho:960
binder 85568:85568 <> t:961
R85591:85594 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R85623:85626 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R85655:85658 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R85675:85677 Coq.Init.Logic <> ::type_scope:x_'='_x not
R85659:85666 VST.veric.expr <> eval_var def
R85672:85674 VST.floyd.canon <> rho:960 var
R85670:85670 VST.floyd.canon <> t:961 var
R85668:85668 VST.floyd.canon <> i:959 var
R85678:85679 VST.floyd.canon <> gv:958 var
R85681:85681 VST.floyd.canon <> i:959 var
R85627:85639 VST.floyd.canon <> locald_denote def
R85652:85654 VST.floyd.canon <> rho:960 var
R85642:85646 VST.floyd.canon <> gvars constr
R85648:85649 VST.floyd.canon <> gv:958 var
R85616:85618 Coq.Init.Logic <> ::type_scope:x_'='_x not
R85595:85595 compcert.lib.Maps <> :::x_'!'_x not
R85611:85614 compcert.lib.Maps <> :::x_'!'_x not
R85615:85615 VST.floyd.canon <> i:959 var
R85596:85604 VST.veric.seplog <> var_types def
R85606:85610 VST.floyd.canon <> Delta:957 var
R85619:85622 Coq.Init.Datatypes <> None constr
R85571:85580 VST.veric.SeparationLogic <> tc_environ def
R85588:85590 VST.floyd.canon <> rho:960 var
R85582:85586 VST.floyd.canon <> Delta:957 var
R85706:85713 VST.veric.expr <> eval_var def
prf 85800:85809 <> lvar_isptr
binder 85821:85821 <> i:962
binder 85823:85823 <> t:963
binder 85825:85825 <> v:964
binder 85827:85829 <> rho:965
R85862:85865 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R85866:85870 VST.veric.val_lemmas <> isptr def
R85872:85872 VST.floyd.canon <> v:964 var
R85832:85844 VST.floyd.canon <> locald_denote def
R85859:85861 VST.floyd.canon <> rho:965 var
R85847:85850 VST.floyd.canon <> lvar constr
R85856:85856 VST.floyd.canon <> v:964 var
R85854:85854 VST.floyd.canon <> t:963 var
R85852:85852 VST.floyd.canon <> i:962 var
R85910:85916 VST.veric.mpred Map get def
R85919:85923 VST.veric.mpred <> ve_of def
R85910:85916 VST.veric.mpred Map get def
R85919:85923 VST.veric.mpred <> ve_of def
R85990:86005 Coq.Init.Logic <> I constr
R85990:86005 Coq.Init.Logic <> I constr
prf 86020:86030 <> gvars_isptr
binder 86042:86046 <> Delta:966
binder 86048:86049 <> gv:967
binder 86051:86051 <> i:968
binder 86053:86055 <> rho:969
binder 86057:86057 <> t:970
R86080:86083 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R86115:86118 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R86147:86150 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R86151:86155 VST.veric.val_lemmas <> isptr def
R86158:86159 VST.floyd.canon <> gv:967 var
R86161:86161 VST.floyd.canon <> i:968 var
R86119:86131 VST.floyd.canon <> locald_denote def
R86144:86146 VST.floyd.canon <> rho:969 var
R86134:86138 VST.floyd.canon <> gvars constr
R86140:86141 VST.floyd.canon <> gv:967 var
R86106:86108 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86084:86084 compcert.lib.Maps <> :::x_'!'_x not
R86101:86104 compcert.lib.Maps <> :::x_'!'_x not
R86105:86105 VST.floyd.canon <> i:968 var
R86085:86094 VST.veric.seplog <> glob_types def
R86096:86100 VST.floyd.canon <> Delta:966 var
R86109:86112 Coq.Init.Datatypes <> Some constr
R86114:86114 VST.floyd.canon <> t:970 var
R86060:86069 VST.veric.SeparationLogic <> tc_environ def
R86077:86079 VST.floyd.canon <> rho:969 var
R86071:86075 VST.floyd.canon <> Delta:966 var
R86252:86267 Coq.Init.Logic <> I constr
R86252:86267 Coq.Init.Logic <> I constr
prf 86282:86300 <> lvar_isptr_eval_var
binder 86312:86312 <> i:971
binder 86314:86314 <> t:972
binder 86316:86316 <> v:973
binder 86318:86320 <> rho:974
R86353:86356 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R86357:86361 VST.veric.val_lemmas <> isptr def
R86364:86371 VST.veric.expr <> eval_var def
R86377:86379 VST.floyd.canon <> rho:974 var
R86375:86375 VST.floyd.canon <> t:972 var
R86373:86373 VST.floyd.canon <> i:971 var
R86323:86335 VST.floyd.canon <> locald_denote def
R86350:86352 VST.floyd.canon <> rho:974 var
R86338:86341 VST.floyd.canon <> lvar constr
R86347:86347 VST.floyd.canon <> v:973 var
R86345:86345 VST.floyd.canon <> t:972 var
R86343:86343 VST.floyd.canon <> i:971 var
R86407:86419 VST.floyd.canon <> lvar_eval_var thm
R86407:86419 VST.floyd.canon <> lvar_eval_var thm
R86407:86419 VST.floyd.canon <> lvar_eval_var thm
R86407:86419 VST.floyd.canon <> lvar_eval_var thm
R86436:86445 VST.floyd.canon <> lvar_isptr thm
R86436:86445 VST.floyd.canon <> lvar_isptr thm
R86476:86480 VST.veric.val_lemmas <> isptr def
R86483:86490 VST.veric.expr <> eval_var def
R86511:86529 VST.floyd.canon <> lvar_isptr_eval_var thm
