DIGEST 6f2057cccb7c37b33395ba96ac934f72
FVST.floyd.forward
R15:29 VST.floyd.base2 <> <> lib
R47:69 VST.floyd.client_lemmas <> <> lib
R87:104 VST.floyd.go_lower <> <> lib
R122:144 VST.floyd.closed_lemmas <> <> lib
R162:186 VST.floyd.subsume_funspec <> <> lib
R204:227 VST.floyd.forward_lemmas <> <> lib
R229:249 VST.floyd.call_lemmas <> <> lib
R267:290 VST.floyd.extcall_lemmas <> <> lib
R308:336 VST.floyd.nested_field_lemmas <> <> lib
R354:376 VST.floyd.efield_lemmas <> <> lib
R394:417 VST.floyd.type_induction <> <> lib
R435:463 VST.floyd.mapsto_memory_block <> <> lib
R481:508 VST.floyd.data_at_rec_lemmas <> <> lib
R526:543 VST.floyd.field_at <> <> lib
R561:586 VST.floyd.loadstore_mapsto <> <> lib
R604:631 VST.floyd.loadstore_field_at <> <> lib
R649:674 VST.floyd.nested_loadstore <> <> lib
R692:718 VST.floyd.sc_set_load_store <> <> lib
R736:753 VST.floyd.stronger <> <> lib
R771:798 VST.floyd.local2ptree_denote <> <> lib
R816:841 VST.floyd.local2ptree_eval <> <> lib
R859:882 VST.floyd.reptype_lemmas <> <> lib
R900:928 VST.floyd.proj_reptype_lemmas <> <> lib
R946:984 VST.floyd.replace_refill_reptype_lemmas <> <> lib
R1002:1025 VST.floyd.aggregate_type <> <> lib
R1043:1060 VST.floyd.entailer <> <> lib
R1078:1101 VST.floyd.globals_lemmas <> <> lib
R1119:1141 VST.floyd.semax_tactics <> <> lib
R1159:1178 VST.floyd.for_lemmas <> <> lib
R1196:1214 VST.floyd.diagnosis <> <> lib
R1232:1254 VST.floyd.simpl_reptype <> <> lib
R1272:1299 VST.floyd.nested_pred_lemmas <> <> lib
R1317:1333 VST.floyd.freezer <> <> lib
R1459:1475 VST.veric.SeparationLogic <> denote_tc_test_eq def
R1493:1515 VST.floyd.efield_lemmas <> sem_add_pi_ptr_special' thm
R1587:1609 VST.floyd.efield_lemmas <> sem_add_pl_ptr_special' thm
prf 1674:1686 <> func_ptr'_emp
binder 1688:1690 <> phi:1
binder 1692:1692 <> v:2
R1710:1714 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R1695:1703 VST.floyd.client_lemmas <> func_ptr' def
R1709:1709 VST.floyd.forward <> v:2 var
R1705:1707 VST.floyd.forward <> phi:1 var
R1715:1717 VST.msl.seplog <> emp meth
R1733:1742 VST.msl.seplog <> andp_left2 meth
R1733:1742 VST.msl.seplog <> andp_left2 meth
prf 1766:1779 <> func_ptr'_mono
binder 1782:1783 <> fs:3
binder 1785:1786 <> gs:4
binder 1788:1788 <> v:5
R1809:1819 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1834:1838 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R1820:1828 VST.floyd.client_lemmas <> func_ptr' def
R1833:1833 VST.floyd.forward <> v:5 var
R1830:1831 VST.floyd.forward <> fs:3 var
R1839:1847 VST.floyd.client_lemmas <> func_ptr' def
R1852:1852 VST.floyd.forward <> v:5 var
R1849:1850 VST.floyd.forward <> gs:4 var
R1792:1802 VST.veric.SeparationLogic <> funspec_sub def
R1807:1808 VST.floyd.forward <> gs:4 var
R1804:1805 VST.floyd.forward <> fs:3 var
R1876:1887 VST.msl.log_normalize <> andp_derives thm
R1876:1887 VST.msl.log_normalize <> andp_derives thm
R1905:1917 VST.veric.SeparationLogic <> func_ptr_mono thm
R1905:1917 VST.veric.SeparationLogic <> func_ptr_mono thm
prf 1941:1967 <> isptr_force_sem_add_ptr_int
R1984:1992 VST.veric.mpred <> compspecs class
binder 1980:1981 <> cs:6
binder 1996:1996 <> t:7
binder 1998:1999 <> si:8
binder 2001:2001 <> p:9
binder 2003:2003 <> i:10
R2037:2041 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2049:2053 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2054:2058 VST.veric.val_lemmas <> isptr def
R2061:2069 VST.veric.val_lemmas <> force_val def
R2072:2086 VST.veric.Clight_Cop2 <> sem_add_ptr_int def
R2096:2099 compcert.common.Values <> Vint constr
R2102:2109 compcert.lib.Integers Int repr def
R2111:2111 VST.floyd.forward <> i:10 var
R2093:2093 VST.floyd.forward <> p:9 var
R2090:2091 VST.floyd.forward <> si:8 var
R2088:2088 VST.floyd.forward <> t:7 var
R2042:2046 VST.veric.val_lemmas <> isptr def
R2048:2048 VST.floyd.forward <> p:9 var
R2030:2032 Coq.Init.Logic <> ::type_scope:x_'='_x not
R2007:2019 compcert.cfrontend.Ctypes <> complete_type def
R2029:2029 VST.floyd.forward <> t:7 var
R2021:2027 VST.veric.mpred <> cenv_cs meth
R2033:2036 Coq.Init.Datatypes <> true constr
R2171:2185 VST.veric.Clight_Cop2 <> sem_add_ptr_int def
R2233:2237 VST.veric.val_lemmas <> isptr def
R2240:2248 VST.veric.val_lemmas <> force_val def
R2251:2265 VST.veric.Clight_Cop2 <> sem_add_ptr_int def
R2291:2317 VST.floyd.forward <> isptr_force_sem_add_ptr_int thm
def 2448:2459 <> mk_varspecs'
R2466:2469 Coq.Init.Datatypes <> list ind
R2477:2479 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R2472:2476 compcert.common.AST <> ident def
R2480:2486 compcert.common.AST <> globdef ind
R2502:2505 compcert.cfrontend.Ctypes <> type ind
R2488:2500 compcert.cfrontend.Clight <> fundef def
binder 2462:2463 <> dl:11
R2514:2517 Coq.Init.Datatypes <> list ind
R2525:2527 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R2520:2524 compcert.common.AST <> ident def
R2528:2531 compcert.cfrontend.Ctypes <> type ind
binder 2510:2511 <> el:12
R2542:2545 Coq.Init.Datatypes <> list ind
R2553:2555 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R2548:2552 compcert.common.AST <> ident def
R2556:2559 compcert.cfrontend.Ctypes <> type ind
R2572:2573 VST.floyd.forward <> dl:11 var
R2593:2594 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R2583:2583 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2585:2585 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2592:2592 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2586:2589 compcert.common.AST <> Gvar constr
R2602:2613 VST.floyd.forward <> mk_varspecs':13 def
R2636:2639 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R2620:2620 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2622:2623 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2635:2635 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2624:2632 compcert.common.AST <> gvar_info proj
R2640:2641 VST.floyd.forward <> el:12 var
R2653:2656 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R2647:2647 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2649:2650 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2652:2652 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2664:2675 VST.floyd.forward <> mk_varspecs':13 def
R2681:2682 VST.floyd.forward <> el:12 var
R2687:2689 Coq.Init.Datatypes <> nil constr
R2694:2703 Coq.Lists.List <> rev_append def
R2708:2710 Coq.Init.Datatypes <> nil constr
R2705:2706 VST.floyd.forward <> el:12 var
R2772:2780 compcert.common.AST <> gvar_info proj
R2772:2780 compcert.common.AST <> gvar_info proj
R3043:3062 compcert.exportclight.Clightdefs <> mkprogram def
R3043:3062 compcert.exportclight.Clightdefs <> mkprogram def
R3114:3122 compcert.cfrontend.Ctypes <> prog_defs proj
R3114:3122 compcert.cfrontend.Ctypes <> prog_defs proj
R3114:3122 compcert.cfrontend.Ctypes <> prog_defs proj
R3114:3122 compcert.cfrontend.Ctypes <> prog_defs proj
R3194:3205 VST.floyd.forward <> mk_varspecs' def
R3209:3211 Coq.Init.Datatypes <> nil constr
prf 3331:3354 <> field_address_eq_offset'
R3370:3378 VST.veric.mpred <> compspecs class
binder 3366:3367 <> cs:15
binder 3381:3381 <> t:16
binder 3383:3386 <> path:17
binder 3388:3388 <> v:18
binder 3390:3392 <> ofs:19
R3424:3431 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3464:3471 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3494:3496 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3472:3484 VST.floyd.nested_field_lemmas <> field_address def
R3493:3493 VST.floyd.forward <> v:18 var
R3488:3491 VST.floyd.forward <> path:17 var
R3486:3486 VST.floyd.forward <> t:16 var
R3497:3506 VST.veric.val_lemmas <> offset_val def
R3512:3512 VST.floyd.forward <> v:18 var
R3508:3510 VST.floyd.forward <> ofs:19 var
R3435:3437 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3432:3434 VST.floyd.forward <> ofs:19 var
R3438:3456 VST.floyd.nested_field_lemmas <> nested_field_offset def
R3460:3463 VST.floyd.forward <> path:17 var
R3458:3458 VST.floyd.forward <> t:16 var
R3399:3414 VST.floyd.nested_field_lemmas <> field_compatible def
R3423:3423 VST.floyd.forward <> v:18 var
R3418:3421 VST.floyd.forward <> path:17 var
R3416:3416 VST.floyd.forward <> t:16 var
R3543:3572 VST.floyd.nested_field_lemmas <> field_compatible_field_address thm
R3543:3572 VST.floyd.nested_field_lemmas <> field_compatible_field_address thm
R3659:3666 VST.msl.log_normalize <> prop_and thm
prf 3753:3767 <> var_block_lvar2
R3783:3791 VST.veric.mpred <> compspecs class
binder 3779:3780 <> cs:20
R3802:3811 VST.veric.juicy_extspec <> OracleKind class
binder 3795:3799 <> Espec:21
binder 3814:3815 <> id:22
binder 3817:3817 <> t:23
binder 3819:3823 <> Delta:24
binder 3825:3825 <> P:25
binder 3827:3827 <> Q:26
binder 3829:3829 <> R:27
binder 3831:3832 <> Vs:28
binder 3834:3834 <> c:29
binder 3836:3839 <> Post:30
R3876:3882 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3916:3922 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3948:3954 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4004:4009 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4010:4010 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4177:4182 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4183:4187 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R4319:4322 VST.floyd.forward <> Post:30 var
R4317:4317 VST.floyd.forward <> c:29 var
R4196:4196 VST.msl.seplog <> ::logic:x_'*'_x not
R4224:4249 VST.msl.seplog <> ::logic:x_'*'_x not
R4197:4201 VST.floyd.canon <> PROPx def
R4206:4211 VST.floyd.canon <> LOCALx def
R4216:4219 VST.floyd.canon <> SEPx def
R4221:4221 VST.floyd.forward <> R:27 var
R4213:4213 VST.floyd.forward <> Q:26 var
R4203:4203 VST.floyd.forward <> P:25 var
R4250:4259 Coq.Lists.List <> fold_right def
R4293:4296 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R4273:4281 VST.veric.SeparationLogic <> var_block def
R4287:4287 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4290:4290 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4292:4292 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4288:4289 VST.floyd.forward <> id:22 var
R4291:4291 VST.floyd.forward <> t:23 var
R4283:4285 VST.veric.shares <> Tsh def
R4297:4298 VST.floyd.forward <> Vs:28 var
R4268:4270 VST.msl.seplog <> emp meth
R4261:4266 VST.msl.seplog <> sepcon meth
R4189:4193 VST.floyd.forward <> Delta:24 var
binder 4018:4018 <> v:31
R4024:4028 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R4173:4176 VST.floyd.forward <> Post:30 var
R4171:4171 VST.floyd.forward <> c:29 var
R4037:4037 VST.msl.seplog <> ::logic:x_'*'_x not
R4104:4129 VST.msl.seplog <> ::logic:x_'*'_x not
R4038:4042 VST.floyd.canon <> PROPx def
R4047:4052 VST.floyd.canon <> LOCALx def
R4074:4077 VST.floyd.canon <> SEPx def
R4096:4099 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R4080:4087 VST.floyd.field_at <> data_at_ def
R4095:4095 VST.floyd.forward <> v:31 var
R4093:4093 VST.floyd.forward <> t:23 var
R4089:4091 VST.veric.shares <> Tsh def
R4100:4100 VST.floyd.forward <> R:27 var
R4066:4069 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R4055:4058 VST.floyd.canon <> lvar constr
R4065:4065 VST.floyd.forward <> v:31 var
R4063:4063 VST.floyd.forward <> t:23 var
R4060:4061 VST.floyd.forward <> id:22 var
R4070:4070 VST.floyd.forward <> Q:26 var
R4044:4044 VST.floyd.forward <> P:25 var
R4130:4139 Coq.Lists.List <> fold_right def
R4152:4153 VST.floyd.forward <> Vs:28 var
R4148:4150 VST.msl.seplog <> emp meth
R4141:4146 VST.msl.seplog <> sepcon meth
R4030:4034 VST.floyd.forward <> Delta:24 var
R3997:3999 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3955:3964 VST.veric.align_mem LegalAlignasFacts.LegalAlignasDefs is_aligned def
R3994:3994 VST.floyd.forward <> t:23 var
R3984:3992 VST.veric.mpred <> la_env_cs meth
R3974:3982 VST.veric.mpred <> ha_env_cs meth
R3966:3972 VST.veric.mpred <> cenv_cs meth
R4000:4003 Coq.Init.Datatypes <> true constr
R3931:3933 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R3923:3928 VST.veric.expr <> sizeof def
R3930:3930 VST.floyd.forward <> t:23 var
R3934:3947 compcert.lib.Integers Ptrofs modulus def
R3909:3911 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3883:3906 VST.veric.composite_compute <> complete_legal_cosu_type def
R3908:3908 VST.floyd.forward <> t:23 var
R3912:3915 Coq.Init.Datatypes <> true constr
R3867:3869 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3845:3845 compcert.lib.Maps <> :::x_'!'_x not
R3861:3864 compcert.lib.Maps <> :::x_'!'_x not
R3865:3866 VST.floyd.forward <> id:22 var
R3846:3854 VST.veric.seplog <> var_types def
R3856:3860 VST.floyd.forward <> Delta:24 var
R3870:3873 Coq.Init.Datatypes <> Some constr
R3875:3875 VST.floyd.forward <> t:23 var
R4380:4383 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R4369:4371 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R4348:4359 compcert.lib.Integers Int unsigned def
R4361:4368 compcert.lib.Integers Int zero def
R4372:4377 VST.veric.expr <> sizeof def
R4384:4397 compcert.lib.Integers Ptrofs modulus def
R4413:4429 compcert.lib.Integers Int unsigned_zero thm
R4380:4383 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R4369:4371 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R4348:4359 compcert.lib.Integers Int unsigned def
R4361:4368 compcert.lib.Integers Int zero def
R4372:4377 VST.veric.expr <> sizeof def
R4384:4397 compcert.lib.Integers Ptrofs modulus def
R4413:4429 compcert.lib.Integers Int unsigned_zero thm
R4413:4429 compcert.lib.Integers Int unsigned_zero thm
R4445:4453 VST.floyd.canon <> semax_pre thm
R4445:4453 VST.floyd.canon <> semax_pre thm
R4474:4476 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R4482:4483 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R4479:4481 compcert.common.Values <> val ind
binder 4477:4477 <> v:32
R4484:4484 VST.msl.seplog <> ::logic:x_'*'_x not
R4551:4576 VST.msl.seplog <> ::logic:x_'*'_x not
R4485:4489 VST.floyd.canon <> PROPx def
R4494:4499 VST.floyd.canon <> LOCALx def
R4521:4524 VST.floyd.canon <> SEPx def
R4543:4546 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R4527:4534 VST.floyd.field_at <> data_at_ def
R4542:4542 VST.floyd.forward <> v:32 var
R4536:4538 VST.veric.shares <> Tsh def
R4513:4516 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R4502:4505 VST.floyd.canon <> lvar constr
R4512:4512 VST.floyd.forward <> v:32 var
R4577:4586 Coq.Lists.List <> fold_right def
R4595:4597 VST.msl.seplog <> emp meth
R4588:4593 VST.msl.seplog <> sepcon meth
R4611:4619 VST.veric.SeparationLogic <> var_block def
R4623:4631 VST.veric.SeparationLogic <> eval_lvar def
R4652:4662 VST.floyd.canon <> lvar_denote def
R4683:4689 VST.veric.mpred Map get def
R4702:4706 VST.veric.mpred <> ve_of def
R4702:4706 VST.veric.mpred <> ve_of def
R4747:4754 VST.veric.Cop2 <> eqb_type def
R4747:4754 VST.veric.Cop2 <> eqb_type def
R4775:4787 VST.veric.Cop2 <> eqb_type_true thm
R4775:4787 VST.veric.Cop2 <> eqb_type_true thm
R4831:4834 compcert.common.Values <> Vptr constr
R4838:4848 compcert.lib.Integers Ptrofs zero def
R4815:4823 VST.msl.seplog <> exp_right meth
R4831:4834 compcert.common.Values <> Vptr constr
R4838:4848 compcert.lib.Integers Ptrofs zero def
R4815:4823 VST.msl.seplog <> exp_right meth
R4859:4873 VST.veric.SeparationLogic <> size_compatible def
R4884:4897 VST.msl.log_normalize <> prop_true_andp thm
R4884:4897 VST.msl.log_normalize <> prop_true_andp thm
R4884:4897 VST.msl.log_normalize <> prop_true_andp thm
R4884:4897 VST.msl.log_normalize <> prop_true_andp thm
R4908:4914 VST.msl.log_normalize <> TT_andp thm
R4908:4914 VST.msl.log_normalize <> TT_andp thm
R4908:4914 VST.msl.log_normalize <> TT_andp thm
R4925:4945 VST.floyd.field_at <> memory_block_data_at_ thm
R4925:4945 VST.floyd.field_at <> memory_block_data_at_ thm
R4925:4945 VST.floyd.field_at <> memory_block_data_at_ thm
R4925:4945 VST.floyd.field_at <> memory_block_data_at_ thm
R4976:4991 Coq.Init.Logic <> I constr
R4976:4991 Coq.Init.Logic <> I constr
R5014:5028 VST.veric.mpred <> la_env_cs_sound meth
R5014:5028 VST.veric.mpred <> la_env_cs_sound meth
R5043:5058 Coq.Init.Logic <> I constr
R5043:5058 Coq.Init.Logic <> I constr
R5082:5099 VST.floyd.mapsto_memory_block <> memory_block_isptr thm
R5082:5099 VST.floyd.mapsto_memory_block <> memory_block_isptr thm
R5082:5099 VST.floyd.mapsto_memory_block <> memory_block_isptr thm
R5121:5138 VST.floyd.mapsto_memory_block <> memory_block_isptr thm
R5121:5138 VST.floyd.mapsto_memory_block <> memory_block_isptr thm
R5121:5138 VST.floyd.mapsto_memory_block <> memory_block_isptr thm
R5158:5175 VST.floyd.base <> extract_exists_pre def
R5158:5175 VST.floyd.base <> extract_exists_pre def
prf 5201:5215 <> var_block_lvar0
R5236:5244 VST.veric.mpred <> compspecs class
binder 5232:5233 <> cs:33
R5253:5260 Coq.Numbers.BinNums <> positive ind
binder 5248:5249 <> id:34
R5268:5271 compcert.cfrontend.Ctypes <> type ind
binder 5264:5264 <> t:35
R5283:5291 VST.veric.seplog <> tycontext ind
binder 5275:5279 <> Delta:36
binder 5295:5295 <> v:37
binder 5297:5299 <> rho:38
R5340:5350 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5384:5394 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5420:5430 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5480:5490 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5511:5521 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5553:5563 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5580:5584 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R5564:5571 VST.floyd.field_at <> data_at_ def
R5579:5579 VST.floyd.forward <> v:37 var
R5577:5577 VST.floyd.forward <> t:35 var
R5573:5575 VST.veric.shares <> Tsh def
R5585:5593 VST.veric.SeparationLogic <> var_block def
R5607:5609 VST.floyd.forward <> rho:38 var
R5599:5599 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5602:5603 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5605:5605 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5600:5601 VST.floyd.forward <> id:34 var
R5604:5604 VST.floyd.forward <> t:35 var
R5595:5597 VST.veric.shares <> Tsh def
R5522:5534 VST.floyd.canon <> locald_denote def
R5550:5552 VST.floyd.forward <> rho:38 var
R5537:5540 VST.floyd.canon <> lvar constr
R5547:5547 VST.floyd.forward <> v:37 var
R5545:5545 VST.floyd.forward <> t:35 var
R5542:5543 VST.floyd.forward <> id:34 var
R5491:5500 VST.veric.SeparationLogic <> tc_environ def
R5508:5510 VST.floyd.forward <> rho:38 var
R5502:5506 VST.floyd.forward <> Delta:36 var
R5473:5475 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5431:5440 VST.veric.align_mem LegalAlignasFacts.LegalAlignasDefs is_aligned def
R5470:5470 VST.floyd.forward <> t:35 var
R5460:5468 VST.veric.mpred <> la_env_cs meth
R5450:5458 VST.veric.mpred <> ha_env_cs meth
R5442:5448 VST.veric.mpred <> cenv_cs meth
R5476:5479 Coq.Init.Datatypes <> true constr
R5403:5405 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R5395:5400 VST.veric.expr <> sizeof def
R5402:5402 VST.floyd.forward <> t:35 var
R5406:5419 compcert.lib.Integers Ptrofs modulus def
R5377:5379 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5351:5374 VST.veric.composite_compute <> complete_legal_cosu_type def
R5376:5376 VST.floyd.forward <> t:35 var
R5380:5383 Coq.Init.Datatypes <> true constr
R5331:5333 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5309:5309 compcert.lib.Maps <> :::x_'!'_x not
R5325:5328 compcert.lib.Maps <> :::x_'!'_x not
R5329:5330 VST.floyd.forward <> id:34 var
R5310:5318 VST.veric.seplog <> var_types def
R5320:5324 VST.floyd.forward <> Delta:36 var
R5334:5337 Coq.Init.Datatypes <> Some constr
R5339:5339 VST.floyd.forward <> t:35 var
R5684:5687 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R5673:5675 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R5646:5660 compcert.lib.Integers Ptrofs unsigned def
R5662:5672 compcert.lib.Integers Ptrofs zero def
R5676:5681 VST.veric.expr <> sizeof def
R5688:5701 compcert.lib.Integers Ptrofs modulus def
R5717:5736 compcert.lib.Integers Ptrofs unsigned_zero thm
R5684:5687 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R5673:5675 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R5646:5660 compcert.lib.Integers Ptrofs unsigned def
R5662:5672 compcert.lib.Integers Ptrofs zero def
R5676:5681 VST.veric.expr <> sizeof def
R5688:5701 compcert.lib.Integers Ptrofs modulus def
R5717:5736 compcert.lib.Integers Ptrofs unsigned_zero thm
R5717:5736 compcert.lib.Integers Ptrofs unsigned_zero thm
R5752:5760 VST.veric.SeparationLogic <> var_block def
R5824:5842 compcert.lib.Integers Ptrofs max_unsigned def
R5865:5865 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R5851:5864 compcert.lib.Integers Ptrofs modulus def
R5795:5808 VST.msl.log_normalize <> prop_true_andp thm
R5795:5808 VST.msl.log_normalize <> prop_true_andp thm
R5824:5842 compcert.lib.Integers Ptrofs max_unsigned def
R5865:5865 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R5851:5864 compcert.lib.Integers Ptrofs modulus def
R5795:5808 VST.msl.log_normalize <> prop_true_andp thm
R5898:5911 VST.floyd.canon <> lvar_eval_lvar thm
R5898:5911 VST.floyd.canon <> lvar_eval_lvar thm
R5898:5911 VST.floyd.canon <> lvar_eval_lvar thm
R5934:5954 VST.floyd.field_at <> memory_block_data_at_ thm
R5934:5954 VST.floyd.field_at <> memory_block_data_at_ thm
R5934:5954 VST.floyd.field_at <> memory_block_data_at_ thm
R5934:5954 VST.floyd.field_at <> memory_block_data_at_ thm
R5985:5991 VST.veric.mpred Map get def
R5994:5998 VST.veric.mpred <> ve_of def
R5985:5991 VST.veric.mpred Map get def
R5994:5998 VST.veric.mpred <> ve_of def
R6087:6101 VST.veric.mpred <> la_env_cs_sound meth
R6087:6101 VST.veric.mpred <> la_env_cs_sound meth
prf 6123:6145 <> postcondition_var_block
R6162:6170 VST.veric.mpred <> compspecs class
binder 6158:6159 <> cs:39
R6181:6190 VST.veric.juicy_extspec <> OracleKind class
binder 6174:6178 <> Espec:40
binder 6193:6197 <> Delta:41
binder 6199:6201 <> Pre:42
binder 6203:6203 <> c:43
binder 6205:6206 <> S1:44
binder 6208:6209 <> S2:45
binder 6211:6211 <> i:46
binder 6213:6213 <> t:47
binder 6215:6217 <> vbs:48
R6258:6268 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6302:6312 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6338:6348 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6398:6404 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6564:6569 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6570:6574 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R6589:6604 VST.veric.SeparationLogic <> frame_ret_assert def
R6617:6619 VST.msl.seplog <> ::logic:x_'*'_x not
R6615:6616 VST.floyd.forward <> S2:45 var
R6620:6629 Coq.Lists.List <> fold_right def
R6662:6665 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R6643:6651 VST.veric.SeparationLogic <> var_block def
R6657:6657 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R6659:6659 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R6661:6661 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R6658:6658 VST.floyd.forward <> i:46 var
R6660:6660 VST.floyd.forward <> t:47 var
R6653:6655 VST.veric.shares <> Tsh def
R6666:6668 VST.floyd.forward <> vbs:48 var
R6638:6640 VST.msl.seplog <> emp meth
R6631:6636 VST.msl.seplog <> sepcon meth
R6606:6607 VST.floyd.forward <> S1:44 var
R6586:6586 VST.floyd.forward <> c:43 var
R6582:6584 VST.floyd.forward <> Pre:42 var
R6576:6580 VST.floyd.forward <> Delta:41 var
R6405:6409 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R6424:6439 VST.veric.SeparationLogic <> frame_ret_assert def
R6528:6536 VST.msl.seplog <> ::logic:x_'*'_x not
R6452:6456 VST.msl.seplog <> ::logic:x_'*'_x not
R6527:6527 VST.msl.seplog <> ::logic:x_'*'_x not
R6450:6451 VST.floyd.forward <> S2:45 var
R6457:6460 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6468:6469 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6465:6467 compcert.common.Values <> val ind
binder 6461:6461 <> v:49
R6504:6507 VST.msl.seplog <> ::logic:x_'&&'_x not
R6470:6474 VST.veric.SeparationLogic <> local def
R6477:6489 VST.floyd.canon <> locald_denote def
R6492:6495 VST.floyd.canon <> lvar constr
R6501:6501 VST.floyd.forward <> v:49 var
R6499:6499 VST.floyd.forward <> t:47 var
R6497:6497 VST.floyd.forward <> i:46 var
R6508:6509 VST.veric.lift LiftNotation :::'`('_x_')' not
R6526:6526 VST.veric.lift LiftNotation :::'`('_x_')' not
R6510:6517 VST.floyd.field_at <> data_at_ def
R6525:6525 VST.floyd.forward <> v:49 var
R6523:6523 VST.floyd.forward <> t:47 var
R6519:6521 VST.veric.shares <> Tsh def
R6537:6546 Coq.Lists.List <> fold_right def
R6559:6561 VST.floyd.forward <> vbs:48 var
R6555:6557 VST.msl.seplog <> emp meth
R6548:6553 VST.msl.seplog <> sepcon meth
R6441:6442 VST.floyd.forward <> S1:44 var
R6421:6421 VST.floyd.forward <> c:43 var
R6417:6419 VST.floyd.forward <> Pre:42 var
R6411:6415 VST.floyd.forward <> Delta:41 var
R6391:6393 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6349:6358 VST.veric.align_mem LegalAlignasFacts.LegalAlignasDefs is_aligned def
R6388:6388 VST.floyd.forward <> t:47 var
R6378:6386 VST.veric.mpred <> la_env_cs meth
R6368:6376 VST.veric.mpred <> ha_env_cs meth
R6360:6366 VST.veric.mpred <> cenv_cs meth
R6394:6397 Coq.Init.Datatypes <> true constr
R6321:6323 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R6313:6318 VST.veric.expr <> sizeof def
R6320:6320 VST.floyd.forward <> t:47 var
R6324:6337 compcert.lib.Integers Ptrofs modulus def
R6295:6297 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6269:6292 VST.veric.composite_compute <> complete_legal_cosu_type def
R6294:6294 VST.floyd.forward <> t:47 var
R6298:6301 Coq.Init.Datatypes <> true constr
R6249:6251 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6227:6227 compcert.lib.Maps <> :::x_'!'_x not
R6244:6247 compcert.lib.Maps <> :::x_'!'_x not
R6248:6248 VST.floyd.forward <> i:46 var
R6228:6236 VST.veric.seplog <> var_types def
R6239:6243 VST.floyd.forward <> Delta:41 var
R6252:6255 Coq.Init.Datatypes <> Some constr
R6257:6257 VST.floyd.forward <> t:47 var
R6726:6735 VST.floyd.canon <> semax_post thm
R6726:6735 VST.floyd.canon <> semax_post thm
R6808:6821 VST.msl.seplog <> sepcon_derives meth
R6808:6821 VST.msl.seplog <> sepcon_derives meth
R6842:6853 VST.msl.seplog <> sepcon_assoc meth
R6842:6853 VST.msl.seplog <> sepcon_assoc meth
R6842:6853 VST.msl.seplog <> sepcon_assoc meth
R6842:6853 VST.msl.seplog <> sepcon_assoc meth
R6862:6875 VST.msl.seplog <> sepcon_derives meth
R6862:6875 VST.msl.seplog <> sepcon_derives meth
R6890:6903 VST.msl.seplog <> sepcon_derives meth
R6890:6903 VST.msl.seplog <> sepcon_derives meth
R6918:6925 VST.msl.seplog <> exp_left meth
R6918:6925 VST.msl.seplog <> exp_left meth
R6955:6969 VST.floyd.forward <> var_block_lvar0 thm
R6955:6969 VST.floyd.forward <> var_block_lvar0 thm
R7010:7023 VST.msl.seplog <> sepcon_derives meth
R7010:7023 VST.msl.seplog <> sepcon_derives meth
R7044:7055 VST.msl.seplog <> sepcon_assoc meth
R7044:7055 VST.msl.seplog <> sepcon_assoc meth
R7044:7055 VST.msl.seplog <> sepcon_assoc meth
R7044:7055 VST.msl.seplog <> sepcon_assoc meth
R7064:7077 VST.msl.seplog <> sepcon_derives meth
R7064:7077 VST.msl.seplog <> sepcon_derives meth
R7092:7105 VST.msl.seplog <> sepcon_derives meth
R7092:7105 VST.msl.seplog <> sepcon_derives meth
R7120:7127 VST.msl.seplog <> exp_left meth
R7120:7127 VST.msl.seplog <> exp_left meth
R7157:7171 VST.floyd.forward <> var_block_lvar0 thm
R7157:7171 VST.floyd.forward <> var_block_lvar0 thm
R7212:7225 VST.msl.seplog <> sepcon_derives meth
R7212:7225 VST.msl.seplog <> sepcon_derives meth
R7246:7257 VST.msl.seplog <> sepcon_assoc meth
R7246:7257 VST.msl.seplog <> sepcon_assoc meth
R7246:7257 VST.msl.seplog <> sepcon_assoc meth
R7246:7257 VST.msl.seplog <> sepcon_assoc meth
R7266:7279 VST.msl.seplog <> sepcon_derives meth
R7266:7279 VST.msl.seplog <> sepcon_derives meth
R7294:7307 VST.msl.seplog <> sepcon_derives meth
R7294:7307 VST.msl.seplog <> sepcon_derives meth
R7322:7329 VST.msl.seplog <> exp_left meth
R7322:7329 VST.msl.seplog <> exp_left meth
R7359:7373 VST.floyd.forward <> var_block_lvar0 thm
R7359:7373 VST.floyd.forward <> var_block_lvar0 thm
R7414:7427 VST.msl.seplog <> sepcon_derives meth
R7414:7427 VST.msl.seplog <> sepcon_derives meth
R7448:7459 VST.msl.seplog <> sepcon_assoc meth
R7448:7459 VST.msl.seplog <> sepcon_assoc meth
R7448:7459 VST.msl.seplog <> sepcon_assoc meth
R7448:7459 VST.msl.seplog <> sepcon_assoc meth
R7468:7481 VST.msl.seplog <> sepcon_derives meth
R7468:7481 VST.msl.seplog <> sepcon_derives meth
R7496:7509 VST.msl.seplog <> sepcon_derives meth
R7496:7509 VST.msl.seplog <> sepcon_derives meth
R7524:7531 VST.msl.seplog <> exp_left meth
R7524:7531 VST.msl.seplog <> exp_left meth
R7561:7575 VST.floyd.forward <> var_block_lvar0 thm
R7561:7575 VST.floyd.forward <> var_block_lvar0 thm
R7664:7668 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7674:7676 VST.msl.seplog <> ::logic:x_'*'_x not
R7677:7689 VST.veric.SeparationLogic <> stackframe_of def
R7664:7668 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7674:7676 VST.msl.seplog <> ::logic:x_'*'_x not
R7677:7689 VST.veric.SeparationLogic <> stackframe_of def
R7739:7751 VST.veric.SeparationLogic <> stackframe_of def
R7774:7786 VST.veric.SeparationLogic <> stackframe_of def
R7858:7862 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7868:7870 VST.msl.seplog <> ::logic:x_'*'_x not
R7871:7880 Coq.Lists.List <> fold_right def
R7912:7915 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R7894:7902 VST.veric.SeparationLogic <> var_block def
R7906:7906 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7909:7909 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7911:7911 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7889:7891 VST.msl.seplog <> emp meth
R7882:7887 VST.msl.seplog <> sepcon meth
R7858:7862 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7868:7870 VST.msl.seplog <> ::logic:x_'*'_x not
R7871:7880 Coq.Lists.List <> fold_right def
R7912:7915 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R7894:7902 VST.veric.SeparationLogic <> var_block def
R7906:7906 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7909:7909 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7911:7911 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7889:7891 VST.msl.seplog <> emp meth
R7882:7887 VST.msl.seplog <> sepcon meth
R7958:7961 VST.floyd.client_lemmas <> name def
R7958:7961 VST.floyd.client_lemmas <> name def
R8118:8132 VST.floyd.forward <> var_block_lvar2 thm
R7986:8000 VST.floyd.forward <> var_block_lvar2 thm
R8275:8297 VST.floyd.forward <> postcondition_var_block thm
R8388:8397 Coq.Lists.List <> fold_right def
R8412:8414 Coq.Init.Datatypes <> nil constr
R8424:8425 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8426:8430 VST.veric.mpred <> mpred def
R8417:8423 VST.veric.mpred <> environ ind
R8406:8408 VST.msl.seplog <> emp meth
R8399:8404 VST.msl.seplog <> sepcon meth
R8388:8397 Coq.Lists.List <> fold_right def
R8412:8414 Coq.Init.Datatypes <> nil constr
R8424:8425 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8426:8430 VST.veric.mpred <> mpred def
R8417:8423 VST.veric.mpred <> environ ind
R8406:8408 VST.msl.seplog <> emp meth
R8399:8404 VST.msl.seplog <> sepcon meth
R8445:8447 VST.msl.seplog <> emp meth
R8457:8458 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8459:8463 VST.veric.mpred <> mpred def
R8450:8456 VST.veric.mpred <> environ ind
R8482:8491 VST.msl.seplog <> sepcon_emp meth
R8495:8504 VST.msl.log_normalize <> emp_sepcon thm
def 8519:8532 <> tc_option_val'
R8538:8541 compcert.cfrontend.Ctypes <> type ind
binder 8535:8535 <> t:50
R8556:8559 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8546:8551 Coq.Init.Datatypes <> option ind
R8553:8555 compcert.common.Values <> val ind
R8575:8575 VST.floyd.forward <> t:50 var
R8582:8586 compcert.cfrontend.Ctypes <> Tvoid constr
binder 8595:8595 <> v:52
R8600:8603 Coq.Init.Logic <> True ind
binder 8616:8616 <> v:53
R8621:8626 VST.veric.Cop2 <> tc_val def
R8631:8639 VST.veric.val_lemmas <> force_val def
R8641:8641 VST.floyd.forward <> v:53 var
R8628:8628 VST.floyd.forward <> t:50 var
prf 8655:8671 <> tc_option_val'_eq
R8687:8689 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8674:8686 VST.veric.SeparationLogic <> tc_option_val def
R8690:8703 VST.floyd.forward <> tc_option_val' def
R8740:8752 VST.veric.SeparationLogic <> tc_option_val def
R8755:8768 VST.floyd.forward <> tc_option_val' def
R8851:8856 VST.veric.Cop2 <> tc_val def
R8869:8876 VST.veric.Cop2 <> eqb_type def
R8869:8876 VST.veric.Cop2 <> eqb_type def
R8915:8931 VST.floyd.forward <> tc_option_val'_eq thm
prf 8948:8964 <> emp_make_ext_rval
binder 8976:8977 <> ge:54
binder 8979:8979 <> t:55
binder 8981:8981 <> v:56
R9032:9034 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8985:8987 VST.msl.seplog <> emp meth
R9011:9023 VST.veric.SeparationLogic <> make_ext_rval def
R9030:9030 VST.floyd.forward <> v:56 var
R9028:9028 VST.floyd.forward <> t:55 var
R9025:9026 VST.floyd.forward <> ge:54 var
R8997:8998 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8999:9003 VST.veric.mpred <> mpred def
R8990:8996 VST.veric.mpred <> environ ind
R9035:9037 VST.msl.seplog <> emp meth
R9078:9094 VST.floyd.forward <> emp_make_ext_rval thm
R9183:9185 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
binder 9177:9177 <> x:57
R9183:9185 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
binder 9177:9177 <> x:58
binder 9285:9285 <> x:59
binder 9285:9285 <> x:60
binder 9373:9373 <> x:61
binder 9373:9373 <> x:62
prf 9642:9664 <> semax_body_subsumption'
binder 9666:9667 <> cs:63
binder 9669:9671 <> cs':64
binder 9673:9673 <> V:65
binder 9675:9676 <> V':66
binder 9678:9678 <> F:67
binder 9680:9681 <> F':68
binder 9683:9683 <> f:69
binder 9685:9688 <> spec:70
R9702:9711 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R9722:9725 VST.floyd.forward <> spec:70 var
R9720:9720 VST.floyd.forward <> f:69 var
R9717:9718 VST.floyd.forward <> cs:63 var
R9715:9715 VST.floyd.forward <> F:67 var
R9713:9713 VST.floyd.forward <> V:65 var
binder 9697:9698 <> SF:71
R9741:9750 VST.veric.expr <> cspecs_sub def
R9755:9757 VST.floyd.forward <> cs':64 var
R9752:9753 VST.floyd.forward <> cs:63 var
binder 9735:9738 <> CSUB:72
R9778:9783 Coq.Lists.List <> Forall ind
R9857:9863 compcert.cfrontend.Clight <> fn_vars proj
R9865:9865 VST.floyd.forward <> f:69 var
R9800:9802 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R9795:9799 compcert.common.AST <> ident def
R9803:9806 compcert.cfrontend.Ctypes <> type ind
binder 9790:9791 <> it:73
R9847:9849 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9811:9823 compcert.cfrontend.Ctypes <> complete_type def
R9840:9842 Coq.Init.Datatypes <> snd def
R9844:9845 VST.floyd.forward <> it:73 var
R9827:9833 VST.veric.mpred <> cenv_cs meth
R9835:9836 VST.floyd.forward <> cs:63 var
R9850:9853 Coq.Init.Datatypes <> true constr
binder 9767:9774 <> COMPLETE:74
R9880:9892 VST.veric.expr <> tycontext_sub def
R9922:9935 VST.veric.tycontext <> func_tycontext def
R9945:9947 Coq.Init.Datatypes <> nil constr
R9942:9943 VST.floyd.forward <> F':68 var
R9939:9940 VST.floyd.forward <> V':66 var
R9937:9937 VST.floyd.forward <> f:69 var
R9895:9908 VST.veric.tycontext <> func_tycontext def
R9916:9918 Coq.Init.Datatypes <> nil constr
R9914:9914 VST.floyd.forward <> F:67 var
R9912:9912 VST.floyd.forward <> V:65 var
R9910:9910 VST.floyd.forward <> f:69 var
binder 9876:9877 <> TS:75
R9955:9964 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R9978:9981 VST.floyd.forward <> spec:70 var
R9976:9976 VST.floyd.forward <> f:69 var
R9972:9974 VST.floyd.forward <> cs':64 var
R9969:9970 VST.floyd.forward <> F':68 var
R9966:9967 VST.floyd.forward <> V':66 var
R10011:10029 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_body_cenv_sub prfax
R10011:10029 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_body_cenv_sub prfax
R10057:10078 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_body_subsumption prfax
R10057:10078 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_body_subsumption prfax
prf 10110:10124 <> sub_option_get'
binder 10127:10127 <> A:76
R10142:10148 compcert.lib.Maps PTree t def
R10150:10150 VST.floyd.forward <> A:76 var
binder 10137:10137 <> s:77
binder 10139:10139 <> t:78
binder 10153:10153 <> B:79
R10159:10162 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10163:10168 Coq.Init.Datatypes <> option ind
R10170:10170 VST.floyd.forward <> B:79 var
R10158:10158 VST.floyd.forward <> A:76 var
binder 10156:10156 <> f:80
R10247:10252 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 10260:10260 <> i:81
R10263:10272 VST.veric.tycontext <> sub_option def
R10361:10369 compcert.lib.Maps PTree get def
R10373:10373 VST.floyd.forward <> t:78 var
R10371:10371 VST.floyd.forward <> i:81 var
R10380:10383 Coq.Init.Datatypes <> Some constr
R10390:10390 VST.floyd.forward <> f:80 var
R10401:10404 Coq.Init.Datatypes <> None constr
R10281:10289 compcert.lib.Maps PTree get def
R10293:10293 VST.floyd.forward <> s:77 var
R10291:10291 VST.floyd.forward <> i:81 var
R10300:10303 Coq.Init.Datatypes <> Some constr
R10310:10310 VST.floyd.forward <> f:80 var
R10321:10324 Coq.Init.Datatypes <> None constr
R10176:10181 Coq.Lists.List <> Forall ind
R10230:10243 compcert.lib.Maps PTree elements def
R10245:10245 VST.floyd.forward <> s:77 var
binder 10188:10188 <> x:82
R10212:10214 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10193:10201 compcert.lib.Maps PTree get def
R10211:10211 VST.floyd.forward <> t:78 var
R10204:10206 Coq.Init.Datatypes <> fst def
R10208:10208 VST.floyd.forward <> x:82 var
R10215:10218 Coq.Init.Datatypes <> Some constr
R10221:10223 Coq.Init.Datatypes <> snd def
R10225:10225 VST.floyd.forward <> x:82 var
R10438:10440 compcert.lib.Maps <> :::x_'!'_x not
R10462:10462 Coq.Init.Logic <> I constr
R10438:10440 compcert.lib.Maps <> :::x_'!'_x not
R10462:10462 Coq.Init.Logic <> I constr
R10478:10499 compcert.lib.Maps PTree elements_correct thm
R10478:10499 compcert.lib.Maps PTree elements_correct thm
R10518:10530 Coq.Lists.List <> Forall_forall thm
R10518:10530 Coq.Lists.List <> Forall_forall thm
R10518:10530 Coq.Lists.List <> Forall_forall thm
R10584:10598 VST.veric.tycontext <> sub_option_refl thm
R10584:10598 VST.veric.tycontext <> sub_option_refl thm
prf 10613:10626 <> sub_option_get
binder 10629:10629 <> A:83
R10644:10650 compcert.lib.Maps PTree t def
R10652:10652 VST.floyd.forward <> A:83 var
binder 10639:10639 <> s:84
binder 10641:10641 <> t:85
R10729:10734 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 10742:10742 <> i:86
R10745:10754 VST.veric.tycontext <> sub_option def
R10773:10781 compcert.lib.Maps PTree get def
R10785:10785 VST.floyd.forward <> t:85 var
R10783:10783 VST.floyd.forward <> i:86 var
R10757:10765 compcert.lib.Maps PTree get def
R10769:10769 VST.floyd.forward <> s:84 var
R10767:10767 VST.floyd.forward <> i:86 var
R10658:10663 Coq.Lists.List <> Forall ind
R10712:10725 compcert.lib.Maps PTree elements def
R10727:10727 VST.floyd.forward <> s:84 var
binder 10670:10670 <> x:87
R10694:10696 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10675:10683 compcert.lib.Maps PTree get def
R10693:10693 VST.floyd.forward <> t:85 var
R10686:10688 Coq.Init.Datatypes <> fst def
R10690:10690 VST.floyd.forward <> x:87 var
R10697:10700 Coq.Init.Datatypes <> Some constr
R10703:10705 Coq.Init.Datatypes <> snd def
R10707:10707 VST.floyd.forward <> x:87 var
R10818:10832 VST.floyd.forward <> sub_option_get' thm
R10840:10843 Coq.Init.Datatypes <> Some constr
R10818:10832 VST.floyd.forward <> sub_option_get' thm
R10840:10843 Coq.Init.Datatypes <> Some constr
R10872:10872 compcert.lib.Maps <> :::x_'!'_x not
R10896:10896 compcert.lib.Maps <> :::x_'!'_x not
R10872:10872 compcert.lib.Maps <> :::x_'!'_x not
R10896:10896 compcert.lib.Maps <> :::x_'!'_x not
def 10940:10954 <> tycontext_subVG
binder 10956:10961 <> Vprog1:88
binder 10963:10968 <> Gprog1:89
binder 10970:10975 <> Vprog2:90
binder 10977:10982 <> Gprog2:91
R10988:10988 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R11104:11110 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R11209:11209 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R11001:11008 Coq.Numbers.BinNums <> positive ind
binder 10996:10997 <> id:92
R11014:11023 VST.veric.tycontext <> sub_option def
R11067:11067 compcert.lib.Maps <> :::x_'!'_x not
R11098:11101 compcert.lib.Maps <> :::x_'!'_x not
R11102:11103 VST.floyd.forward <> id:92 var
R11068:11083 VST.veric.seplog <> make_tycontext_g def
R11092:11097 VST.floyd.forward <> Gprog2:91 var
R11085:11090 VST.floyd.forward <> Vprog2:90 var
R11025:11025 compcert.lib.Maps <> :::x_'!'_x not
R11056:11059 compcert.lib.Maps <> :::x_'!'_x not
R11060:11061 VST.floyd.forward <> id:92 var
R11026:11041 VST.veric.seplog <> make_tycontext_g def
R11050:11055 VST.floyd.forward <> Gprog1:89 var
R11043:11048 VST.floyd.forward <> Vprog1:88 var
R11123:11130 Coq.Numbers.BinNums <> positive ind
binder 11118:11119 <> id:93
R11136:11146 VST.veric.expr <> subsumespec def
R11179:11179 compcert.lib.Maps <> :::x_'!'_x not
R11203:11206 compcert.lib.Maps <> :::x_'!'_x not
R11207:11208 VST.floyd.forward <> id:93 var
R11180:11195 VST.veric.mpred <> make_tycontext_s def
R11197:11202 VST.floyd.forward <> Gprog2:91 var
R11148:11148 compcert.lib.Maps <> :::x_'!'_x not
R11172:11175 compcert.lib.Maps <> :::x_'!'_x not
R11176:11177 VST.floyd.forward <> id:93 var
R11149:11164 VST.veric.mpred <> make_tycontext_s def
R11166:11171 VST.floyd.forward <> Gprog1:89 var
prf 11219:11235 <> tycontext_sub_i99
binder 11246:11246 <> f:94
binder 11248:11253 <> Vprog1:95
binder 11255:11260 <> Vprog2:96
binder 11262:11267 <> Gprog1:97
binder 11269:11274 <> Gprog2:98
binder 11276:11280 <> Annot:99
R11327:11332 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11333:11345 VST.veric.expr <> tycontext_sub def
R11407:11420 VST.veric.tycontext <> func_tycontext def
R11438:11442 VST.floyd.forward <> Annot:99 var
R11431:11436 VST.floyd.forward <> Gprog2:98 var
R11424:11429 VST.floyd.forward <> Vprog2:96 var
R11422:11422 VST.floyd.forward <> f:94 var
R11348:11361 VST.veric.tycontext <> func_tycontext def
R11379:11383 VST.floyd.forward <> Annot:99 var
R11372:11377 VST.floyd.forward <> Gprog1:97 var
R11365:11370 VST.floyd.forward <> Vprog1:95 var
R11363:11363 VST.floyd.forward <> f:94 var
R11284:11298 VST.floyd.forward <> tycontext_subVG def
R11321:11326 VST.floyd.forward <> Gprog2:98 var
R11314:11319 VST.floyd.forward <> Vprog2:96 var
R11307:11312 VST.floyd.forward <> Gprog1:97 var
R11300:11305 VST.floyd.forward <> Vprog1:95 var
R11525:11534 VST.veric.seplog <> temp_types def
R11537:11550 VST.veric.tycontext <> func_tycontext def
R11553:11566 VST.veric.seplog <> make_tycontext def
R11587:11587 compcert.lib.Maps <> :::x_'!'_x not
R11631:11634 compcert.lib.Maps <> :::x_'!'_x not
R11588:11603 VST.veric.seplog <> make_tycontext_t def
R11620:11627 compcert.cfrontend.Clight <> fn_temps proj
R11606:11614 compcert.cfrontend.Clight <> fn_params proj
R11587:11587 compcert.lib.Maps <> :::x_'!'_x not
R11631:11634 compcert.lib.Maps <> :::x_'!'_x not
R11588:11603 VST.veric.seplog <> make_tycontext_t def
R11620:11627 compcert.cfrontend.Clight <> fn_temps proj
R11606:11614 compcert.cfrontend.Clight <> fn_params proj
R11662:11680 VST.veric.tycontext <> Annotation_sub_refl thm
R11662:11680 VST.veric.tycontext <> Annotation_sub_refl thm
prf 11697:11717 <> make_tycontext_s_app1
binder 11719:11720 <> G1:100
binder 11722:11723 <> G2:101
binder 11725:11725 <> i:102
R11732:11741 VST.veric.tycontext <> sub_option def
R11769:11769 compcert.lib.Maps <> :::x_'!'_x not
R11795:11798 compcert.lib.Maps <> :::x_'!'_x not
R11799:11799 VST.floyd.forward <> i:102 var
R11770:11785 VST.veric.mpred <> make_tycontext_s def
R11790:11791 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R11788:11789 VST.floyd.forward <> G1:100 var
R11792:11793 VST.floyd.forward <> G2:101 var
R11743:11743 compcert.lib.Maps <> :::x_'!'_x not
R11763:11766 compcert.lib.Maps <> :::x_'!'_x not
R11767:11767 VST.floyd.forward <> i:102 var
R11744:11759 VST.veric.mpred <> make_tycontext_s def
R11761:11762 VST.floyd.forward <> G1:100 var
R11830:11863 VST.veric.semax_prog <> find_id_maketycontext_s thm
R11830:11863 VST.veric.semax_prog <> find_id_maketycontext_s thm
R11830:11863 VST.veric.semax_prog <> find_id_maketycontext_s thm
R11830:11863 VST.veric.semax_prog <> find_id_maketycontext_s thm
R11880:11900 VST.veric.initial_world <> find_id def
R11880:11900 VST.veric.initial_world <> find_id def
R11966:11991 VST.veric.initial_world <> find_id_app1 thm
R11966:11991 VST.veric.initial_world <> find_id_app1 thm
prf 12018:12038 <> make_tycontext_s_app2
binder 12040:12041 <> G1:103
binder 12043:12044 <> G2:104
binder 12046:12046 <> i:105
R12080:12087 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12088:12097 VST.veric.tycontext <> sub_option def
R12125:12125 compcert.lib.Maps <> :::x_'!'_x not
R12151:12154 compcert.lib.Maps <> :::x_'!'_x not
R12155:12155 VST.floyd.forward <> i:105 var
R12126:12141 VST.veric.mpred <> make_tycontext_s def
R12146:12147 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12144:12145 VST.floyd.forward <> G1:103 var
R12148:12149 VST.floyd.forward <> G2:104 var
R12099:12099 compcert.lib.Maps <> :::x_'!'_x not
R12119:12122 compcert.lib.Maps <> :::x_'!'_x not
R12123:12123 VST.floyd.forward <> i:105 var
R12100:12115 VST.veric.mpred <> make_tycontext_s def
R12117:12118 VST.floyd.forward <> G2:104 var
R12049:12060 compcert.lib.Coqlib <> list_norepet ind
R12063:12065 Coq.Lists.List <> map def
R12074:12075 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12072:12073 VST.floyd.forward <> G1:103 var
R12076:12077 VST.floyd.forward <> G2:104 var
R12067:12069 Coq.Init.Datatypes <> fst def
R12194:12227 VST.veric.semax_prog <> find_id_maketycontext_s thm
R12194:12227 VST.veric.semax_prog <> find_id_maketycontext_s thm
R12194:12227 VST.veric.semax_prog <> find_id_maketycontext_s thm
R12194:12227 VST.veric.semax_prog <> find_id_maketycontext_s thm
R12244:12264 VST.veric.initial_world <> find_id def
R12244:12264 VST.veric.initial_world <> find_id def
R12330:12355 VST.veric.initial_world <> find_id_app2 thm
R12330:12355 VST.veric.initial_world <> find_id_app2 thm
prf 12385:12405 <> make_tycontext_g_app1
binder 12407:12407 <> V:106
binder 12409:12410 <> G1:107
binder 12412:12413 <> G2:108
R12421:12432 compcert.lib.Coqlib <> list_norepet ind
R12435:12437 Coq.Lists.List <> map def
R12443:12444 VST.floyd.forward <> G1:107 var
R12439:12441 Coq.Init.Datatypes <> fst def
binder 12416:12418 <> HG1:109
R12463:12474 compcert.lib.Coqlib <> list_norepet ind
R12486:12489 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12477:12479 Coq.Lists.List <> map def
R12485:12485 VST.floyd.forward <> V:106 var
R12481:12483 Coq.Init.Datatypes <> fst def
R12490:12492 Coq.Lists.List <> map def
R12501:12504 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12499:12500 VST.floyd.forward <> G1:107 var
R12505:12506 VST.floyd.forward <> G2:108 var
R12494:12496 Coq.Init.Datatypes <> fst def
binder 12457:12460 <> HG12:110
binder 12511:12511 <> i:111
R12518:12527 VST.veric.tycontext <> sub_option def
R12560:12560 compcert.lib.Maps <> :::x_'!'_x not
R12590:12593 compcert.lib.Maps <> :::x_'!'_x not
R12594:12594 VST.floyd.forward <> i:111 var
R12561:12576 VST.veric.seplog <> make_tycontext_g def
R12583:12586 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12581:12582 VST.floyd.forward <> G1:107 var
R12587:12588 VST.floyd.forward <> G2:108 var
R12578:12578 VST.floyd.forward <> V:106 var
R12530:12530 compcert.lib.Maps <> :::x_'!'_x not
R12552:12555 compcert.lib.Maps <> :::x_'!'_x not
R12556:12556 VST.floyd.forward <> i:111 var
R12531:12546 VST.veric.seplog <> make_tycontext_g def
R12550:12551 VST.floyd.forward <> G1:107 var
R12548:12548 VST.floyd.forward <> V:106 var
R12625:12663 VST.veric.semax_prog <> suboption_make_tycontext_s_g thm
R12625:12663 VST.veric.semax_prog <> suboption_make_tycontext_s_g thm
R12694:12714 VST.floyd.forward <> make_tycontext_s_app1 thm
R12694:12714 VST.floyd.forward <> make_tycontext_s_app1 thm
prf 12733:12753 <> make_tycontext_g_app2
binder 12755:12755 <> V:112
binder 12757:12758 <> G1:113
binder 12760:12761 <> G2:114
R12769:12780 compcert.lib.Coqlib <> list_norepet ind
R12783:12785 Coq.Lists.List <> map def
R12791:12792 VST.floyd.forward <> G2:114 var
R12787:12789 Coq.Init.Datatypes <> fst def
binder 12764:12766 <> HG1:115
R12811:12822 compcert.lib.Coqlib <> list_norepet ind
R12834:12837 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12825:12827 Coq.Lists.List <> map def
R12833:12833 VST.floyd.forward <> V:112 var
R12829:12831 Coq.Init.Datatypes <> fst def
R12838:12840 Coq.Lists.List <> map def
R12849:12852 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12847:12848 VST.floyd.forward <> G1:113 var
R12853:12854 VST.floyd.forward <> G2:114 var
R12842:12844 Coq.Init.Datatypes <> fst def
binder 12805:12808 <> HG12:116
binder 12859:12859 <> i:117
R12866:12875 VST.veric.tycontext <> sub_option def
R12908:12908 compcert.lib.Maps <> :::x_'!'_x not
R12938:12941 compcert.lib.Maps <> :::x_'!'_x not
R12942:12942 VST.floyd.forward <> i:117 var
R12909:12924 VST.veric.seplog <> make_tycontext_g def
R12931:12934 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12929:12930 VST.floyd.forward <> G1:113 var
R12935:12936 VST.floyd.forward <> G2:114 var
R12926:12926 VST.floyd.forward <> V:112 var
R12878:12878 compcert.lib.Maps <> :::x_'!'_x not
R12900:12903 compcert.lib.Maps <> :::x_'!'_x not
R12904:12904 VST.floyd.forward <> i:117 var
R12879:12894 VST.veric.seplog <> make_tycontext_g def
R12898:12899 VST.floyd.forward <> G2:114 var
R12896:12896 VST.floyd.forward <> V:112 var
R12973:13011 VST.veric.semax_prog <> suboption_make_tycontext_s_g thm
R12973:13011 VST.veric.semax_prog <> suboption_make_tycontext_s_g thm
R13033:13057 compcert.lib.Coqlib <> list_norepet_append_right thm
R13033:13057 compcert.lib.Coqlib <> list_norepet_append_right thm
R13088:13108 VST.floyd.forward <> make_tycontext_s_app2 thm
R13088:13108 VST.floyd.forward <> make_tycontext_s_app2 thm
prf 13139:13154 <> subsumespec_app1
binder 13156:13157 <> G1:118
binder 13159:13160 <> G2:119
binder 13162:13162 <> i:120
R13169:13179 VST.veric.expr <> subsumespec def
R13210:13210 compcert.lib.Maps <> :::x_'!'_x not
R13236:13239 compcert.lib.Maps <> :::x_'!'_x not
R13240:13240 VST.floyd.forward <> i:120 var
R13211:13226 VST.veric.mpred <> make_tycontext_s def
R13231:13232 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R13229:13230 VST.floyd.forward <> G1:118 var
R13233:13234 VST.floyd.forward <> G2:119 var
R13182:13182 compcert.lib.Maps <> :::x_'!'_x not
R13202:13205 compcert.lib.Maps <> :::x_'!'_x not
R13206:13206 VST.floyd.forward <> i:120 var
R13183:13198 VST.veric.mpred <> make_tycontext_s def
R13200:13201 VST.floyd.forward <> G1:118 var
R13272:13272 compcert.lib.Maps <> :::x_'!'_x not
R13292:13295 compcert.lib.Maps <> :::x_'!'_x not
R13273:13288 VST.veric.mpred <> make_tycontext_s def
R13272:13272 compcert.lib.Maps <> :::x_'!'_x not
R13292:13295 compcert.lib.Maps <> :::x_'!'_x not
R13273:13288 VST.veric.mpred <> make_tycontext_s def
R13363:13383 VST.floyd.forward <> make_tycontext_s_app1 thm
R13363:13383 VST.floyd.forward <> make_tycontext_s_app1 thm
R13482:13500 VST.veric.seplog <> funspec_sub_si_refl thm
R13482:13500 VST.veric.seplog <> funspec_sub_si_refl thm
prf 13521:13536 <> subsumespec_app2
binder 13538:13539 <> G1:121
binder 13541:13542 <> G2:122
binder 13544:13544 <> i:123
R13578:13585 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13586:13596 VST.veric.expr <> subsumespec def
R13627:13627 compcert.lib.Maps <> :::x_'!'_x not
R13653:13656 compcert.lib.Maps <> :::x_'!'_x not
R13657:13657 VST.floyd.forward <> i:123 var
R13628:13643 VST.veric.mpred <> make_tycontext_s def
R13648:13649 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R13646:13647 VST.floyd.forward <> G1:121 var
R13650:13651 VST.floyd.forward <> G2:122 var
R13599:13599 compcert.lib.Maps <> :::x_'!'_x not
R13619:13622 compcert.lib.Maps <> :::x_'!'_x not
R13623:13623 VST.floyd.forward <> i:123 var
R13600:13615 VST.veric.mpred <> make_tycontext_s def
R13617:13618 VST.floyd.forward <> G2:122 var
R13547:13558 compcert.lib.Coqlib <> list_norepet ind
R13561:13563 Coq.Lists.List <> map def
R13572:13573 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R13570:13571 VST.floyd.forward <> G1:121 var
R13574:13575 VST.floyd.forward <> G2:122 var
R13565:13567 Coq.Init.Datatypes <> fst def
R13697:13697 compcert.lib.Maps <> :::x_'!'_x not
R13717:13720 compcert.lib.Maps <> :::x_'!'_x not
R13698:13713 VST.veric.mpred <> make_tycontext_s def
R13697:13697 compcert.lib.Maps <> :::x_'!'_x not
R13717:13720 compcert.lib.Maps <> :::x_'!'_x not
R13698:13713 VST.veric.mpred <> make_tycontext_s def
R13788:13808 VST.floyd.forward <> make_tycontext_s_app2 thm
R13788:13808 VST.floyd.forward <> make_tycontext_s_app2 thm
R13909:13927 VST.veric.seplog <> funspec_sub_si_refl thm
R13909:13927 VST.veric.seplog <> funspec_sub_si_refl thm
prf 13946:13969 <> tycontext_sub_Gprog_app1
binder 13971:13971 <> f:124
binder 13973:13973 <> V:125
binder 13975:13976 <> G1:126
binder 13978:13979 <> G2:127
R13987:13998 compcert.lib.Coqlib <> list_norepet ind
R14001:14003 Coq.Lists.List <> map def
R14009:14010 VST.floyd.forward <> G1:126 var
R14005:14007 Coq.Init.Datatypes <> fst def
binder 13982:13984 <> HG1:128
R14029:14040 compcert.lib.Coqlib <> list_norepet ind
R14052:14055 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R14043:14045 Coq.Lists.List <> map def
R14051:14051 VST.floyd.forward <> V:125 var
R14047:14049 Coq.Init.Datatypes <> fst def
R14056:14058 Coq.Lists.List <> map def
R14067:14070 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R14065:14066 VST.floyd.forward <> G1:126 var
R14071:14072 VST.floyd.forward <> G2:127 var
R14060:14062 Coq.Init.Datatypes <> fst def
binder 14023:14026 <> HG12:129
R14082:14094 VST.veric.expr <> tycontext_sub def
R14142:14155 VST.veric.tycontext <> func_tycontext def
R14170:14171 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R14164:14165 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R14162:14163 VST.floyd.forward <> G1:126 var
R14166:14167 VST.floyd.forward <> G2:127 var
R14159:14159 VST.floyd.forward <> V:125 var
R14157:14157 VST.floyd.forward <> f:124 var
R14097:14110 VST.veric.tycontext <> func_tycontext def
R14119:14120 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R14116:14117 VST.floyd.forward <> G1:126 var
R14114:14114 VST.floyd.forward <> V:125 var
R14112:14112 VST.floyd.forward <> f:124 var
R14195:14211 VST.floyd.forward <> tycontext_sub_i99 thm
R14195:14211 VST.floyd.forward <> tycontext_sub_i99 thm
R14242:14262 VST.floyd.forward <> make_tycontext_g_app1 thm
R14242:14262 VST.floyd.forward <> make_tycontext_g_app1 thm
R14287:14302 VST.floyd.forward <> subsumespec_app1 thm
R14287:14302 VST.floyd.forward <> subsumespec_app1 thm
prf 14321:14344 <> tycontext_sub_Gprog_app2
binder 14346:14346 <> f:130
binder 14348:14348 <> V:131
binder 14350:14351 <> G1:132
binder 14353:14354 <> G2:133
R14362:14373 compcert.lib.Coqlib <> list_norepet ind
R14376:14378 Coq.Lists.List <> map def
R14384:14385 VST.floyd.forward <> G2:133 var
R14380:14382 Coq.Init.Datatypes <> fst def
binder 14357:14359 <> HG1:134
R14404:14415 compcert.lib.Coqlib <> list_norepet ind
R14427:14430 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R14418:14420 Coq.Lists.List <> map def
R14426:14426 VST.floyd.forward <> V:131 var
R14422:14424 Coq.Init.Datatypes <> fst def
R14431:14433 Coq.Lists.List <> map def
R14442:14445 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R14440:14441 VST.floyd.forward <> G1:132 var
R14446:14447 VST.floyd.forward <> G2:133 var
R14435:14437 Coq.Init.Datatypes <> fst def
binder 14398:14401 <> HG12:135
R14457:14469 VST.veric.expr <> tycontext_sub def
R14517:14530 VST.veric.tycontext <> func_tycontext def
R14545:14546 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R14539:14540 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R14537:14538 VST.floyd.forward <> G1:132 var
R14541:14542 VST.floyd.forward <> G2:133 var
R14534:14534 VST.floyd.forward <> V:131 var
R14532:14532 VST.floyd.forward <> f:130 var
R14472:14485 VST.veric.tycontext <> func_tycontext def
R14494:14495 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R14491:14492 VST.floyd.forward <> G2:133 var
R14489:14489 VST.floyd.forward <> V:131 var
R14487:14487 VST.floyd.forward <> f:130 var
R14570:14586 VST.floyd.forward <> tycontext_sub_i99 thm
R14570:14586 VST.floyd.forward <> tycontext_sub_i99 thm
R14617:14637 VST.floyd.forward <> make_tycontext_g_app2 thm
R14617:14637 VST.floyd.forward <> make_tycontext_g_app2 thm
R14662:14686 compcert.lib.Coqlib <> list_norepet_append_right thm
R14662:14686 compcert.lib.Coqlib <> list_norepet_append_right thm
R14703:14718 VST.floyd.forward <> subsumespec_app2 thm
R14703:14718 VST.floyd.forward <> subsumespec_app2 thm
prf 14748:14770 <> tycontext_sub_Gprog_nil
binder 14772:14772 <> f:136
binder 14774:14774 <> V:137
binder 14776:14776 <> G:138
R14782:14793 compcert.lib.Coqlib <> list_norepet ind
R14805:14808 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R14796:14798 Coq.Lists.List <> map def
R14804:14804 VST.floyd.forward <> V:137 var
R14800:14802 Coq.Init.Datatypes <> fst def
R14809:14811 Coq.Lists.List <> map def
R14817:14817 VST.floyd.forward <> G:138 var
R14813:14815 Coq.Init.Datatypes <> fst def
binder 14779:14780 <> VG:139
R14826:14838 VST.veric.expr <> tycontext_sub def
R14886:14899 VST.veric.tycontext <> func_tycontext def
R14907:14908 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R14905:14905 VST.floyd.forward <> G:138 var
R14903:14903 VST.floyd.forward <> V:137 var
R14901:14901 VST.floyd.forward <> f:136 var
R14841:14854 VST.veric.tycontext <> func_tycontext def
R14863:14864 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R14860:14861 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R14858:14858 VST.floyd.forward <> V:137 var
R14856:14856 VST.floyd.forward <> f:136 var
R14937:14960 VST.floyd.forward <> tycontext_sub_Gprog_app1 thm
R14966:14968 Coq.Init.Datatypes <> nil constr
R14937:14960 VST.floyd.forward <> tycontext_sub_Gprog_app1 thm
R14966:14968 Coq.Init.Datatypes <> nil constr
prf 15055:15070 <> subsume_spec_get
R15088:15094 compcert.lib.Maps PTree t def
R15096:15102 VST.veric.mpred <> funspec ind
binder 15083:15083 <> s:140
binder 15085:15085 <> t:141
R15186:15193 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15231:15231 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 15201:15201 <> i:142
R15204:15214 VST.veric.expr <> subsumespec def
R15226:15228 compcert.lib.Maps <> :::x_'!'_x not
R15229:15229 VST.floyd.forward <> i:142 var
R15225:15225 VST.floyd.forward <> t:141 var
R15218:15220 compcert.lib.Maps <> :::x_'!'_x not
R15221:15221 VST.floyd.forward <> i:142 var
R15217:15217 VST.floyd.forward <> s:140 var
R15109:15114 Coq.Lists.List <> Forall ind
R15169:15182 compcert.lib.Maps PTree elements def
R15184:15184 VST.floyd.forward <> s:140 var
binder 15121:15121 <> x:143
R15126:15136 VST.veric.expr <> subsumespec def
R15155:15158 compcert.lib.Maps <> :::x_'!'_x not
R15164:15164 compcert.lib.Maps <> :::x_'!'_x not
R15159:15161 Coq.Init.Datatypes <> fst def
R15163:15163 VST.floyd.forward <> x:143 var
R15154:15154 VST.floyd.forward <> t:141 var
R15139:15142 Coq.Init.Datatypes <> Some constr
R15145:15147 Coq.Init.Datatypes <> snd def
R15149:15149 VST.floyd.forward <> x:143 var
R15260:15262 compcert.lib.Maps <> :::x_'!'_x not
R15284:15284 Coq.Init.Logic <> I constr
R15260:15262 compcert.lib.Maps <> :::x_'!'_x not
R15284:15284 Coq.Init.Logic <> I constr
R15300:15321 compcert.lib.Maps PTree elements_correct thm
R15300:15321 compcert.lib.Maps PTree elements_correct thm
R15340:15352 Coq.Lists.List <> Forall_forall thm
R15340:15352 Coq.Lists.List <> Forall_forall thm
R15340:15352 Coq.Lists.List <> Forall_forall thm
R15424:15446 VST.floyd.forward <> semax_body_subsumption' thm
R15486:15500 VST.veric.expr <> cspecs_sub_refl thm
R15534:15547 VST.floyd.forward <> sub_option_get thm
R15577:15587 Coq.Lists.List <> Forall_cons constr
R15616:15625 Coq.Lists.List <> Forall_nil constr
R15646:15656 Coq.Lists.List <> Forall_cons constr
R15685:15694 Coq.Lists.List <> Forall_nil constr
R15751:15767 VST.floyd.forward <> tycontext_sub_i99 thm
R15712:15729 VST.veric.expr <> tycontext_sub_refl thm
R15842:15851 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax_func defax
R15842:15851 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax_func defax
R15905:15914 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R15905:15914 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R15966:15980 VST.floyd.forward <> tycontext_subVG def
R15966:15980 VST.floyd.forward <> tycontext_subVG def
R16066:16080 VST.floyd.forward <> tycontext_subVG def
R16129:16142 VST.floyd.forward <> sub_option_get thm
R16160:16170 Coq.Lists.List <> Forall_cons constr
R16199:16208 Coq.Lists.List <> Forall_nil constr
R16226:16241 VST.floyd.forward <> subsume_spec_get thm
R16267:16277 Coq.Lists.List <> Forall_cons constr
R16287:16302 VST.veric.expr <> subsumespec_refl thm
R16316:16325 Coq.Lists.List <> Forall_nil constr
R16391:16417 VST.floyd.forward_lemmas <> semax_func_cons_ext_vacuous thm
R16518:16532 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_func_cons prfax
R16586:16596 Coq.Lists.List <> Forall_cons constr
R16609:16618 Coq.Lists.List <> Forall_nil constr
R16669:16680 VST.veric.SeparationLogic <> var_sizes_ok def
R16855:16873 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_func_cons_ext prfax
R17076:17102 VST.floyd.forward_lemmas <> semax_func_cons_ext_vacuous thm
R17169:17182 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_func_nil prfax
prf 17257:17272 <> from_elements_In
binder 17284:17284 <> A:144
binder 17287:17287 <> l:145
binder 17289:17289 <> i:146
R17296:17296 VST.floyd.forward <> A:144 var
binder 17292:17292 <> v:147
R17336:17341 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17342:17343 Coq.Lists.List <> In def
R17352:17352 VST.floyd.forward <> l:145 var
R17345:17345 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17347:17348 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17350:17350 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17346:17346 VST.floyd.forward <> i:146 var
R17349:17349 VST.floyd.forward <> v:147 var
R17327:17329 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17300:17300 compcert.lib.Maps <> :::x_'!'_x not
R17322:17325 compcert.lib.Maps <> :::x_'!'_x not
R17326:17326 VST.floyd.forward <> i:146 var
R17301:17319 VST.floyd.local2ptree_denote <> pTree_from_elements def
R17321:17321 VST.floyd.forward <> l:145 var
R17330:17333 Coq.Init.Datatypes <> Some constr
R17335:17335 VST.floyd.forward <> v:147 var
R17404:17415 compcert.lib.Maps PTree gempty thm
R17404:17415 compcert.lib.Maps PTree gempty thm
R17404:17415 compcert.lib.Maps PTree gempty thm
R17475:17480 VST.msl.eq_dec <> eq_dec def
R17475:17480 VST.msl.eq_dec <> eq_dec def
R17510:17518 compcert.lib.Maps PTree gss thm
R17510:17518 compcert.lib.Maps PTree gss thm
R17510:17518 compcert.lib.Maps PTree gss thm
R17553:17561 compcert.lib.Maps PTree gso thm
R17553:17561 compcert.lib.Maps PTree gso thm
R17553:17561 compcert.lib.Maps PTree gso thm
R17553:17561 compcert.lib.Maps PTree gso thm
prf 17587:17608 <> typecheck_return_value
R17627:17630 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17624:17626 compcert.common.Values <> val ind
binder 17621:17621 <> f:148
binder 17638:17638 <> t:149
R17644:17646 compcert.common.Values <> val ind
binder 17641:17641 <> v:150
R17654:17661 VST.veric.mpred <> genviron def
binder 17650:17651 <> gx:151
R17670:17675 Coq.Init.Datatypes <> option ind
R17677:17679 compcert.common.Values <> val ind
binder 17665:17667 <> ret:152
binder 17682:17682 <> P:153
binder 17684:17684 <> R:154
R17691:17696 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17774:17778 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R17698:17702 VST.floyd.canon <> PROPx def
R17708:17713 VST.floyd.canon <> LOCALx def
R17740:17743 VST.floyd.canon <> SEPx def
R17745:17745 VST.floyd.forward <> R:154 var
R17731:17732 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R17716:17719 VST.floyd.canon <> temp constr
R17730:17730 VST.floyd.forward <> v:150 var
R17721:17728 VST.veric.SeparationLogic <> ret_temp def
R17733:17735 Coq.Init.Datatypes <> nil constr
R17704:17704 VST.floyd.forward <> P:153 var
R17751:17763 VST.veric.SeparationLogic <> make_ext_rval def
R17770:17772 VST.floyd.forward <> ret:152 var
R17768:17768 VST.floyd.forward <> t:149 var
R17765:17766 VST.floyd.forward <> gx:151 var
R17779:17781 VST.msl.seplog <> ::logic:'!!'_x not
R17782:17782 VST.floyd.forward <> f:148 var
R17785:17793 VST.veric.val_lemmas <> force_val def
R17795:17797 VST.floyd.forward <> ret:152 var
R17688:17688 VST.floyd.forward <> f:148 var
R17690:17690 VST.floyd.forward <> v:150 var
R17828:17839 VST.floyd.canon <> insert_local thm
R17828:17839 VST.floyd.canon <> insert_local thm
R17828:17839 VST.floyd.canon <> insert_local thm
R17851:17860 VST.floyd.canon <> lower_andp thm
R17851:17860 VST.floyd.canon <> lower_andp thm
R17851:17860 VST.floyd.canon <> lower_andp thm
R17870:17889 VST.msl.log_normalize <> derives_extract_prop thm
R17870:17889 VST.msl.log_normalize <> derives_extract_prop thm
R17950:17959 VST.msl.seplog <> prop_right meth
R17950:17959 VST.msl.seplog <> prop_right meth
R17969:17981 VST.veric.SeparationLogic <> make_ext_rval def
R18000:18009 compcert.common.AST <> rettype_eq thm
R18013:18021 compcert.common.AST <> Tvoid constr
R18000:18009 compcert.common.AST <> rettype_eq thm
R18013:18021 compcert.common.AST <> Tvoid constr
R18041:18047 VST.veric.mpred <> eval_id def
R18143:18145 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18183:18185 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18186:18191 compcert.common.Values <> Vundef constr
R18143:18145 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18143:18145 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18143:18145 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18143:18145 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18143:18145 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18143:18145 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18143:18145 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18143:18145 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18143:18145 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18143:18145 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18183:18185 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18186:18191 compcert.common.Values <> Vundef constr
R18183:18185 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18186:18191 compcert.common.Values <> Vundef constr
R18183:18185 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18186:18191 compcert.common.Values <> Vundef constr
R18183:18185 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18186:18191 compcert.common.Values <> Vundef constr
R18183:18185 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18186:18191 compcert.common.Values <> Vundef constr
R18266:18292 VST.floyd.forward_lemmas <> semax_func_cons_ext_vacuous thm
R18358:18376 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_func_cons_ext prfax
R18504:18525 VST.floyd.forward <> typecheck_return_value thm
R18586:18594 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_ext prfax
R18674:18689 VST.floyd.forward <> from_elements_In thm
R18722:18748 VST.floyd.extcall_lemmas <> compute_funspecs_norepeat_e thm
R19127:19136 VST.floyd.canon <> semax_seq' thm
R19181:19199 VST.floyd.canon <> semax_post_flipped' thm
R19270:19279 VST.floyd.client_lemmas <> abbreviate def
R19281:19290 VST.veric.tycontext <> ret_assert rec
R19270:19279 VST.floyd.client_lemmas <> abbreviate def
R19281:19290 VST.veric.tycontext <> ret_assert rec
R19297:19301 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R19297:19301 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R19341:19350 VST.floyd.client_lemmas <> abbreviate def
R19382:19390 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R19436:19454 VST.floyd.canon <> semax_post_flipped' thm
prf 19535:19550 <> local_True_right
R19572:19575 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19576:19580 VST.veric.mpred <> mpred def
R19565:19571 VST.veric.mpred <> environ ind
binder 19562:19562 <> P:155
R19588:19592 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R19587:19587 VST.floyd.forward <> P:155 var
R19593:19597 VST.veric.SeparationLogic <> local def
R19600:19600 VST.veric.lift LiftNotation :::'`'_x not
R19601:19604 Coq.Init.Logic <> True ind
R19640:19647 VST.msl.log_normalize <> TT_right thm
R19640:19647 VST.msl.log_normalize <> TT_right thm
prf 19662:19693 <> force_val_sem_cast_neutral_isptr
binder 19705:19705 <> v:156
R19717:19722 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19760:19762 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19723:19726 Coq.Init.Datatypes <> Some constr
R19729:19737 VST.veric.val_lemmas <> force_val def
R19740:19755 VST.veric.Clight_Cop2 <> sem_cast_pointer def
R19757:19757 VST.floyd.forward <> v:156 var
R19763:19766 Coq.Init.Datatypes <> Some constr
R19768:19768 VST.floyd.forward <> v:156 var
R19710:19714 VST.veric.val_lemmas <> isptr def
R19716:19716 VST.floyd.forward <> v:156 var
prf 19843:19858 <> prop_Forall_cons
binder 19870:19870 <> B:157
binder 19873:19873 <> A:158
R19881:19886 VST.msl.seplog <> NatDed class
R19888:19888 VST.floyd.forward <> B:157 var
binder 19877:19878 <> NB:159
R19895:19895 VST.floyd.forward <> B:157 var
binder 19892:19892 <> P:160
binder 19898:19898 <> F:161
R19903:19903 VST.floyd.forward <> A:158 var
binder 19901:19901 <> a:162
binder 19906:19906 <> b:163
R19940:19945 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R19947:19951 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R19946:19946 VST.floyd.forward <> P:160 var
R19952:19954 VST.msl.seplog <> ::logic:'!!'_x not
R19955:19960 Coq.Lists.List <> Forall ind
R19966:19967 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R19965:19965 VST.floyd.forward <> a:162 var
R19968:19968 VST.floyd.forward <> b:163 var
R19962:19962 VST.floyd.forward <> F:161 var
R19912:19916 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R19911:19911 VST.floyd.forward <> P:160 var
R19923:19926 VST.msl.seplog <> ::logic:x_'&&'_x not
R19917:19919 VST.msl.seplog <> ::logic:'!!'_x not
R19920:19920 VST.floyd.forward <> F:161 var
R19922:19922 VST.floyd.forward <> a:162 var
R19927:19929 VST.msl.seplog <> ::logic:'!!'_x not
R19930:19935 Coq.Lists.List <> Forall ind
R19939:19939 VST.floyd.forward <> b:163 var
R19937:19937 VST.floyd.forward <> F:161 var
R19994:20006 VST.msl.seplog <> derives_trans meth
R19994:20006 VST.msl.seplog <> derives_trans meth
prf 20045:20061 <> prop_Forall_cons'
binder 20073:20073 <> B:164
binder 20076:20076 <> A:165
R20084:20089 VST.msl.seplog <> NatDed class
R20091:20091 VST.floyd.forward <> B:164 var
binder 20080:20081 <> NB:166
R20098:20098 VST.floyd.forward <> B:164 var
binder 20095:20095 <> P:167
binder 20101:20102 <> P1:168
binder 20104:20104 <> F:169
R20109:20109 VST.floyd.forward <> A:165 var
binder 20107:20107 <> a:170
binder 20112:20112 <> b:171
R20154:20159 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20161:20165 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R20160:20160 VST.floyd.forward <> P:167 var
R20171:20174 VST.msl.seplog <> ::logic:x_'&&'_x not
R20166:20168 VST.msl.seplog <> ::logic:'!!'_x not
R20169:20170 VST.floyd.forward <> P1:168 var
R20175:20177 VST.msl.seplog <> ::logic:'!!'_x not
R20178:20183 Coq.Lists.List <> Forall ind
R20189:20190 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20188:20188 VST.floyd.forward <> a:170 var
R20191:20191 VST.floyd.forward <> b:171 var
R20185:20185 VST.floyd.forward <> F:169 var
R20118:20122 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R20117:20117 VST.floyd.forward <> P:167 var
R20137:20140 VST.msl.seplog <> ::logic:x_'&&'_x not
R20123:20126 VST.msl.seplog <> ::logic:'!!'_x not
R20136:20136 VST.msl.seplog <> ::logic:'!!'_x not
R20129:20132 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R20127:20128 VST.floyd.forward <> P1:168 var
R20133:20133 VST.floyd.forward <> F:169 var
R20135:20135 VST.floyd.forward <> a:170 var
R20141:20143 VST.msl.seplog <> ::logic:'!!'_x not
R20144:20149 Coq.Lists.List <> Forall ind
R20153:20153 VST.floyd.forward <> b:171 var
R20151:20151 VST.floyd.forward <> F:169 var
R20217:20229 VST.msl.seplog <> derives_trans meth
R20217:20229 VST.msl.seplog <> derives_trans meth
prf 20268:20282 <> prop_Forall_nil
binder 20294:20294 <> B:172
binder 20297:20297 <> A:173
R20305:20310 VST.msl.seplog <> NatDed class
R20312:20312 VST.floyd.forward <> B:172 var
binder 20301:20302 <> NB:174
R20319:20319 VST.floyd.forward <> B:172 var
binder 20316:20316 <> P:175
R20328:20331 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20327:20327 VST.floyd.forward <> A:173 var
binder 20324:20324 <> F:176
R20342:20346 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R20341:20341 VST.floyd.forward <> P:175 var
R20347:20349 VST.msl.seplog <> ::logic:'!!'_x not
R20350:20355 Coq.Lists.List <> Forall ind
R20359:20361 Coq.Init.Datatypes <> nil constr
R20357:20357 VST.floyd.forward <> F:176 var
R20385:20394 VST.msl.seplog <> prop_right meth
R20385:20394 VST.msl.seplog <> prop_right meth
prf 20422:20437 <> prop_Forall_nil'
binder 20449:20449 <> B:177
binder 20452:20452 <> A:178
R20460:20465 VST.msl.seplog <> NatDed class
R20467:20467 VST.floyd.forward <> B:177 var
binder 20456:20457 <> NB:179
R20474:20474 VST.floyd.forward <> B:177 var
binder 20471:20471 <> P:180
binder 20478:20479 <> P1:181
R20486:20489 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20485:20485 VST.floyd.forward <> A:178 var
binder 20482:20482 <> F:182
R20510:20514 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20516:20520 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R20515:20515 VST.floyd.forward <> P:180 var
R20526:20529 VST.msl.seplog <> ::logic:x_'&&'_x not
R20521:20523 VST.msl.seplog <> ::logic:'!!'_x not
R20524:20525 VST.floyd.forward <> P1:181 var
R20530:20532 VST.msl.seplog <> ::logic:'!!'_x not
R20533:20538 Coq.Lists.List <> Forall ind
R20542:20544 Coq.Init.Datatypes <> nil constr
R20540:20540 VST.floyd.forward <> F:182 var
R20500:20504 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R20499:20499 VST.floyd.forward <> P:180 var
R20505:20507 VST.msl.seplog <> ::logic:'!!'_x not
R20508:20509 VST.floyd.forward <> P1:181 var
R20569:20581 VST.msl.seplog <> derives_trans meth
R20569:20581 VST.msl.seplog <> derives_trans meth
prf 20620:20636 <> prop_Forall_cons1
binder 20648:20648 <> B:183
binder 20651:20651 <> A:184
R20659:20664 VST.msl.seplog <> NatDed class
R20666:20666 VST.floyd.forward <> B:183 var
binder 20655:20656 <> NB:185
R20673:20673 VST.floyd.forward <> B:183 var
binder 20670:20670 <> P:186
R20681:20684 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20680:20680 VST.floyd.forward <> A:184 var
binder 20677:20677 <> F:187
R20694:20694 VST.floyd.forward <> A:184 var
binder 20692:20692 <> a:188
binder 20697:20697 <> b:189
R20705:20710 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20730:20735 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20737:20741 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R20736:20736 VST.floyd.forward <> P:186 var
R20742:20744 VST.msl.seplog <> ::logic:'!!'_x not
R20745:20750 Coq.Lists.List <> Forall ind
R20756:20757 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R20755:20755 VST.floyd.forward <> a:188 var
R20758:20758 VST.floyd.forward <> b:189 var
R20752:20752 VST.floyd.forward <> F:187 var
R20712:20716 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R20711:20711 VST.floyd.forward <> P:186 var
R20717:20719 VST.msl.seplog <> ::logic:'!!'_x not
R20720:20725 Coq.Lists.List <> Forall ind
R20729:20729 VST.floyd.forward <> b:189 var
R20727:20727 VST.floyd.forward <> F:187 var
R20702:20702 VST.floyd.forward <> F:187 var
R20704:20704 VST.floyd.forward <> a:188 var
R20784:20796 VST.msl.seplog <> derives_trans meth
R20784:20796 VST.msl.seplog <> derives_trans meth
R20965:20985 VST.msl.log_normalize <> derives_extract_prop' thm
R20912:20931 VST.msl.log_normalize <> derives_extract_prop thm
R21120:21140 VST.msl.log_normalize <> derives_extract_prop' thm
R21067:21086 VST.msl.log_normalize <> derives_extract_prop thm
R21197:21215 VST.floyd.reptype_lemmas <> unfold_reptype_elim thm
R21308:21317 VST.msl.seplog <> prop_right meth
R21345:21347 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21345:21347 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21413:21414 Coq.Init.Logic <> eq ind
R21417:21420 Coq.Init.Datatypes <> list ind
R21422:21424 compcert.common.Values <> val ind
R21413:21414 Coq.Init.Logic <> eq ind
R21417:21420 Coq.Init.Datatypes <> list ind
R21422:21424 compcert.common.Values <> val ind
R21365:21380 Coq.Init.Datatypes <> length def
R21386:21401 Coq.Init.Datatypes <> length def
R21635:21637 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21630:21633 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21639:21642 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21635:21637 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21630:21633 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21639:21642 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R21681:21693 VST.floyd.nested_field_lemmas <> field_address def
R21696:21709 VST.floyd.nested_field_lemmas <> field_address0 def
R21721:21727 VST.msl.Coqlib2 <> if_true thm
R21811:21827 VST.floyd.nested_field_lemmas <> field_compatible0 def
R21811:21827 VST.floyd.nested_field_lemmas <> field_compatible0 def
R21848:21863 VST.floyd.nested_field_lemmas <> field_compatible def
R21848:21863 VST.floyd.nested_field_lemmas <> field_compatible def
prf 22024:22035 <> exp_uncurry2
binder 22048:22048 <> T:190
R22056:22061 VST.msl.seplog <> NatDed class
R22063:22063 VST.floyd.forward <> T:190 var
binder 22052:22053 <> ND:191
binder 22066:22066 <> A:192
binder 22068:22068 <> B:193
binder 22070:22070 <> C:194
binder 22072:22072 <> F:195
R22166:22171 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22080:22082 VST.msl.seplog <> exp meth
binder 22096:22096 <> a:196
R22102:22104 VST.msl.seplog <> exp meth
binder 22118:22118 <> b:197
R22124:22126 VST.msl.seplog <> exp meth
binder 22151:22151 <> c:198
R22156:22156 VST.floyd.forward <> F:195 var
R22162:22162 VST.floyd.forward <> c:198 var
R22160:22160 VST.floyd.forward <> b:197 var
R22158:22158 VST.floyd.forward <> a:196 var
R22133:22133 VST.floyd.forward <> C:194 var
R22130:22131 VST.floyd.forward <> ND:191 var
R22128:22128 VST.floyd.forward <> T:190 var
R22111:22111 VST.floyd.forward <> B:193 var
R22108:22109 VST.floyd.forward <> ND:191 var
R22106:22106 VST.floyd.forward <> T:190 var
R22089:22089 VST.floyd.forward <> A:192 var
R22086:22087 VST.floyd.forward <> ND:191 var
R22084:22084 VST.floyd.forward <> T:190 var
R22173:22175 VST.msl.seplog <> exp meth
binder 22195:22195 <> x:199
R22200:22200 VST.floyd.forward <> F:195 var
R22231:22233 Coq.Init.Datatypes <> snd def
R22235:22235 VST.floyd.forward <> x:199 var
R22217:22219 Coq.Init.Datatypes <> snd def
R22222:22224 Coq.Init.Datatypes <> fst def
R22226:22226 VST.floyd.forward <> x:199 var
R22203:22205 Coq.Init.Datatypes <> fst def
R22208:22210 Coq.Init.Datatypes <> fst def
R22212:22212 VST.floyd.forward <> x:199 var
R22186:22186 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R22184:22184 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R22183:22183 VST.floyd.forward <> A:192 var
R22185:22185 VST.floyd.forward <> B:193 var
R22187:22187 VST.floyd.forward <> C:194 var
R22179:22180 VST.floyd.forward <> ND:191 var
R22177:22177 VST.floyd.forward <> T:190 var
R22270:22280 VST.msl.log_normalize <> exp_uncurry thm
R22270:22280 VST.msl.log_normalize <> exp_uncurry thm
R22270:22280 VST.msl.log_normalize <> exp_uncurry thm
R22270:22280 VST.msl.log_normalize <> exp_uncurry thm
R22270:22280 VST.msl.log_normalize <> exp_uncurry thm
R22270:22280 VST.msl.log_normalize <> exp_uncurry thm
prf 22301:22312 <> exp_uncurry3
binder 22325:22325 <> T:200
R22333:22338 VST.msl.seplog <> NatDed class
R22340:22340 VST.floyd.forward <> T:200 var
binder 22329:22330 <> ND:201
binder 22343:22343 <> A:202
binder 22345:22345 <> B:203
binder 22347:22347 <> C:204
binder 22349:22349 <> D:205
binder 22351:22351 <> F:206
R22470:22475 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22359:22361 VST.msl.seplog <> exp meth
binder 22375:22375 <> a:207
R22381:22383 VST.msl.seplog <> exp meth
binder 22397:22397 <> b:208
R22403:22405 VST.msl.seplog <> exp meth
binder 22430:22430 <> c:209
R22436:22438 VST.msl.seplog <> exp meth
binder 22452:22452 <> d:210
R22457:22457 VST.floyd.forward <> F:206 var
R22465:22465 VST.floyd.forward <> d:210 var
R22463:22463 VST.floyd.forward <> c:209 var
R22461:22461 VST.floyd.forward <> b:208 var
R22459:22459 VST.floyd.forward <> a:207 var
R22445:22445 VST.floyd.forward <> D:205 var
R22442:22443 VST.floyd.forward <> ND:201 var
R22440:22440 VST.floyd.forward <> T:200 var
R22412:22412 VST.floyd.forward <> C:204 var
R22409:22410 VST.floyd.forward <> ND:201 var
R22407:22407 VST.floyd.forward <> T:200 var
R22390:22390 VST.floyd.forward <> B:203 var
R22387:22388 VST.floyd.forward <> ND:201 var
R22385:22385 VST.floyd.forward <> T:200 var
R22368:22368 VST.floyd.forward <> A:202 var
R22365:22366 VST.floyd.forward <> ND:201 var
R22363:22363 VST.floyd.forward <> T:200 var
R22477:22479 VST.msl.seplog <> exp meth
binder 22509:22509 <> x:211
R22514:22514 VST.floyd.forward <> F:206 var
R22571:22573 Coq.Init.Datatypes <> snd def
R22575:22575 VST.floyd.forward <> x:211 var
R22557:22559 Coq.Init.Datatypes <> snd def
R22562:22564 Coq.Init.Datatypes <> fst def
R22566:22566 VST.floyd.forward <> x:211 var
R22537:22539 Coq.Init.Datatypes <> snd def
R22542:22544 Coq.Init.Datatypes <> fst def
R22547:22549 Coq.Init.Datatypes <> fst def
R22551:22551 VST.floyd.forward <> x:211 var
R22517:22519 Coq.Init.Datatypes <> fst def
R22522:22524 Coq.Init.Datatypes <> fst def
R22527:22529 Coq.Init.Datatypes <> fst def
R22531:22531 VST.floyd.forward <> x:211 var
R22492:22492 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R22490:22490 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R22488:22488 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R22487:22487 VST.floyd.forward <> A:202 var
R22489:22489 VST.floyd.forward <> B:203 var
R22491:22491 VST.floyd.forward <> C:204 var
R22493:22493 VST.floyd.forward <> D:205 var
R22483:22484 VST.floyd.forward <> ND:201 var
R22481:22481 VST.floyd.forward <> T:200 var
R22610:22620 VST.msl.log_normalize <> exp_uncurry thm
R22610:22620 VST.msl.log_normalize <> exp_uncurry thm
R22610:22620 VST.msl.log_normalize <> exp_uncurry thm
R22610:22620 VST.msl.log_normalize <> exp_uncurry thm
R22610:22620 VST.msl.log_normalize <> exp_uncurry thm
R22610:22620 VST.msl.log_normalize <> exp_uncurry thm
R22610:22620 VST.msl.log_normalize <> exp_uncurry thm
R22610:22620 VST.msl.log_normalize <> exp_uncurry thm
R22701:22711 VST.msl.log_normalize <> exp_uncurry thm
R22725:22733 VST.msl.log_normalize <> exp_congr thm
R22774:22785 VST.floyd.forward <> exp_uncurry2 thm
R22799:22807 VST.msl.log_normalize <> exp_congr thm
R22852:22863 VST.floyd.forward <> exp_uncurry3 thm
R22877:22885 VST.msl.log_normalize <> exp_congr thm
R22996:23002 VST.floyd.field_at <> data_at def
R22996:23002 VST.floyd.field_at <> data_at def
R23126:23133 VST.floyd.field_at <> field_at def
R23126:23133 VST.floyd.field_at <> field_at def
R23267:23274 VST.floyd.field_at <> data_at_ def
R23267:23274 VST.floyd.field_at <> data_at_ def
R23377:23385 VST.floyd.field_at <> field_at_ def
R23377:23385 VST.floyd.field_at <> field_at_ def
R23418:23443 VST.floyd.field_at <> field_at__change_composite thm
R23302:23326 VST.floyd.field_at <> data_at__change_composite thm
R23170:23194 VST.floyd.field_at <> field_at_change_composite thm
R23225:23233 VST.floyd.jmeq_lemmas <> JMeq_refl thm
R23034:23057 VST.floyd.field_at <> data_at_change_composite thm
R23084:23092 VST.floyd.jmeq_lemmas <> JMeq_refl thm
R24054:24062 VST.veric.mpred <> compspecs class
R24054:24062 VST.veric.mpred <> compspecs class
R24235:24237 Coq.Init.Datatypes <> nil constr
R24235:24237 Coq.Init.Datatypes <> nil constr
R24262:24265 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R24251:24257 compcert.cfrontend.Ctypes <> Tstruct constr
R24262:24265 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R24251:24257 compcert.cfrontend.Ctypes <> Tstruct constr
R24334:24337 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R24324:24329 compcert.cfrontend.Ctypes <> Tunion constr
R24334:24337 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R24324:24329 compcert.cfrontend.Ctypes <> Tunion constr
R24396:24399 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R24396:24399 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R24481:24492 compcert.common.AST <> cc_structret proj
R24498:24502 Coq.Init.Datatypes <> false constr
R24596:24605 compcert.common.AST <> cc_unproto proj
R24611:24615 Coq.Init.Datatypes <> false constr
R24705:24713 compcert.common.AST <> cc_vararg proj
R24719:24723 Coq.Init.Datatypes <> false constr
R24950:24960 compcert.cfrontend.Clight <> fn_callconv proj
R24988:24990 Coq.Lists.List <> map def
R24998:25006 compcert.cfrontend.Clight <> fn_params proj
R24992:24994 Coq.Init.Datatypes <> snd def
def 25088:25156 <> Warning_perhaps_funspec_postcondition_needs_EX_outside_PROP_LOCAL_SEP
binder 25159:25159 <> p:212
R25171:25171 VST.floyd.forward <> p:212 var
R25253:25321 VST.floyd.forward <> Warning_perhaps_funspec_postcondition_needs_EX_outside_PROP_LOCAL_SEP def
R25398:25400 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25401:25410 compcert.cfrontend.Cop <> fun_case_f constr
R25413:25433 VST.veric.mpred <> typelist_of_type_list def
R25398:25400 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25401:25410 compcert.cfrontend.Cop <> fun_case_f constr
R25413:25433 VST.veric.mpred <> typelist_of_type_list def
ind 25778:25811 <> Cannot_find_function_spec_in_Delta
R25818:25822 compcert.common.AST <> ident def
binder 25814:25815 <> id:213
ind 25840:25886 <> Global_function_name_shadowed_by_local_variable
ind 26016:26076 <> Actual_parameters_cannot_be_coerced_to_formal_parameter_types
R26197:26199 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26175:26184 VST.floyd.local2ptree_denote <> force_list def
R26187:26189 Coq.Lists.List <> map def
R26197:26199 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26175:26184 VST.floyd.local2ptree_denote <> force_list def
R26187:26189 Coq.Lists.List <> map def
R26252:26254 Coq.Lists.List <> map def
ind 26550:26616 <> Witness_type_of_forward_call_does_not_match_witness_type_of_funspec
R26627:26630 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26635:26638 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26704:26706 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26704:26706 Coq.Init.Logic <> ::type_scope:x_'='_x not
ind 26800:26831 <> Cannot_analyze_LOCAL_definitions
ind 26963:27012 <> Funspec_precondition_is_not_in_PROP_LOCAL_SEP_form
R27242:27244 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27225:27239 VST.floyd.base2 <> vacuous_funspec def
R27242:27244 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27225:27239 VST.floyd.base2 <> vacuous_funspec def
R27320:27322 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27320:27322 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27352:27352 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27355:27355 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27358:27358 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27444:27446 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27422:27431 VST.veric.mpred <> mk_funspec constr
R27447:27456 VST.veric.mpred <> mk_funspec constr
R27444:27446 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27422:27431 VST.veric.mpred <> mk_funspec constr
R27447:27456 VST.veric.mpred <> mk_funspec constr
R27540:27606 VST.floyd.forward <> Witness_type_of_forward_call_does_not_match_witness_type_of_funspec ind
R27179:27190 VST.msl.Coqlib2 <> f_equal_Some thm
ind 27717:27764 <> Function_arguments_include_a_memory_load_of_type
R27769:27772 compcert.cfrontend.Ctypes <> type ind
binder 27767:27767 <> t:226
prf 27853:27863 <> drop_SEP_tc
binder 27874:27878 <> Delta:229
binder 27880:27880 <> P:230
binder 27882:27882 <> Q:231
binder 27884:27885 <> R':232
binder 27887:27888 <> RF:233
binder 27890:27890 <> R:234
binder 27892:27892 <> S:235
R27898:27898 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27962:27969 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R28044:28050 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R28099:28105 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R28106:28112 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28118:28119 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28147:28151 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28113:28117 VST.floyd.forward <> Delta:229 var
R28120:28124 VST.floyd.canon <> PROPx def
R28129:28134 VST.floyd.canon <> LOCALx def
R28139:28142 VST.floyd.canon <> SEPx def
R28144:28144 VST.floyd.forward <> R:234 var
R28136:28136 VST.floyd.forward <> Q:231 var
R28126:28126 VST.floyd.forward <> P:230 var
R28152:28152 VST.floyd.forward <> S:235 var
R28051:28057 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28063:28064 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28093:28097 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28058:28062 VST.floyd.forward <> Delta:229 var
R28065:28069 VST.floyd.canon <> PROPx def
R28074:28079 VST.floyd.canon <> LOCALx def
R28084:28087 VST.floyd.canon <> SEPx def
R28089:28090 VST.floyd.forward <> R':232 var
R28081:28081 VST.floyd.forward <> Q:231 var
R28071:28071 VST.floyd.forward <> P:230 var
R28098:28098 VST.floyd.forward <> S:235 var
R27989:27991 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27970:27986 VST.floyd.base <> fold_right_sepcon def
R27988:27988 VST.floyd.forward <> R:234 var
R27992:27997 VST.msl.seplog <> sepcon meth
R28023:28039 VST.floyd.base <> fold_right_sepcon def
R28041:28042 VST.floyd.forward <> RF:233 var
R28000:28016 VST.floyd.base <> fold_right_sepcon def
R28018:28019 VST.floyd.forward <> R':232 var
binder 27906:27908 <> rho:236
R27911:27931 VST.msl.predicates_hered <> boxy def
R27956:27956 VST.floyd.forward <> S:235 var
R27958:27960 VST.floyd.forward <> rho:236 var
R27933:27953 VST.msl.predicates_sl <> extendM def
R28181:28185 VST.floyd.canon <> PROPx def
R28188:28193 VST.floyd.canon <> LOCALx def
R28196:28199 VST.floyd.canon <> SEPx def
R28276:28280 VST.veric.SeparationLogic <> local def
R28283:28287 VST.veric.mpred <> lift1 def
R28325:28341 VST.msl.log_normalize <> sepcon_andp_prop' thm
R28325:28341 VST.msl.log_normalize <> sepcon_andp_prop' thm
R28325:28341 VST.msl.log_normalize <> sepcon_andp_prop' thm
R28325:28341 VST.msl.log_normalize <> sepcon_andp_prop' thm
R28325:28341 VST.msl.log_normalize <> sepcon_andp_prop' thm
R28325:28341 VST.msl.log_normalize <> sepcon_andp_prop' thm
R28375:28387 VST.msl.seplog <> derives_trans meth
R28397:28410 VST.msl.seplog <> sepcon_derives meth
R28431:28442 VST.msl.seplog <> derives_refl meth
R28375:28387 VST.msl.seplog <> derives_trans meth
R28397:28410 VST.msl.seplog <> sepcon_derives meth
R28431:28442 VST.msl.seplog <> derives_refl meth
R28459:28485 VST.msl.predicates_sl <> extend_sepcon thm
R28495:28519 VST.veric.compcert_rmaps R Age_rmap prfax
R28459:28485 VST.msl.predicates_sl <> extend_sepcon thm
R28495:28519 VST.veric.compcert_rmaps R Age_rmap prfax
R28585:28591 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28593:28594 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28623:28627 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28595:28599 VST.floyd.canon <> PROPx def
R28604:28609 VST.floyd.canon <> LOCALx def
R28614:28617 VST.floyd.canon <> SEPx def
R28585:28591 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28593:28594 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28623:28627 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R28595:28599 VST.floyd.canon <> PROPx def
R28604:28609 VST.floyd.canon <> LOCALx def
R28614:28617 VST.floyd.canon <> SEPx def
R28657:28660 VST.floyd.freezer <> FRZR syndef
R28657:28660 VST.floyd.freezer <> FRZR syndef
R28675:28685 VST.floyd.forward <> drop_SEP_tc thm
R28707:28730 VST.veric.extend_tc <> extend_tc_expr thm
R28753:28780 VST.veric.extend_tc <> extend_tc_exprlist thm
R28803:28828 VST.veric.extend_tc <> extend_tc_lvalue thm
R28842:28862 VST.floyd.freezer <> split_FRZ_in_SEP_spec thm
R28999:29014 VST.floyd.forward <> local_True_right thm
R29052:29066 VST.veric.SeparationLogic <> typecheck_error def
R29069:29081 VST.veric.expr <> deref_byvalue constr
R29052:29066 VST.veric.SeparationLogic <> typecheck_error def
R29069:29081 VST.veric.expr <> deref_byvalue constr
R29107:29154 VST.floyd.forward <> Function_arguments_include_a_memory_load_of_type ind
R29231:29233 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29231:29233 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29475:29477 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29475:29477 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29564:29567 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29575:29578 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29579:29583 VST.veric.mpred <> mpred def
R29568:29574 VST.veric.mpred <> environ ind
R29600:29602 VST.msl.seplog <> exp meth
R29640:29642 VST.msl.seplog <> exp meth
R29679:29682 Coq.Init.Datatypes <> list ind
R29708:29711 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29712:29716 VST.veric.mpred <> mpred def
R29701:29707 VST.veric.mpred <> environ ind
R29732:29736 VST.floyd.canon <> PROPx def
R29769:29773 VST.floyd.canon <> PROPx def
prf 29813:29830 <> PROP_LOCAL_SEP_ext
binder 29843:29843 <> P:237
binder 29845:29846 <> P':238
binder 29848:29848 <> Q:239
binder 29850:29851 <> Q':240
binder 29853:29853 <> R:241
binder 29855:29856 <> R':242
R29863:29866 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29871:29874 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29879:29888 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29916:29918 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29889:29893 VST.floyd.canon <> PROPx def
R29898:29903 VST.floyd.canon <> LOCALx def
R29908:29911 VST.floyd.canon <> SEPx def
R29913:29913 VST.floyd.forward <> R:241 var
R29905:29905 VST.floyd.forward <> Q:239 var
R29895:29895 VST.floyd.forward <> P:237 var
R29919:29923 VST.floyd.canon <> PROPx def
R29929:29934 VST.floyd.canon <> LOCALx def
R29940:29943 VST.floyd.canon <> SEPx def
R29945:29946 VST.floyd.forward <> R':242 var
R29936:29937 VST.floyd.forward <> Q':240 var
R29925:29926 VST.floyd.forward <> P':238 var
R29876:29876 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29875:29875 VST.floyd.forward <> R:241 var
R29877:29878 VST.floyd.forward <> R':242 var
R29868:29868 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29867:29867 VST.floyd.forward <> Q:239 var
R29869:29870 VST.floyd.forward <> Q':240 var
R29860:29860 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29859:29859 VST.floyd.forward <> P:237 var
R29861:29862 VST.floyd.forward <> P':238 var
R30624:30624 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30656:30659 Coq.Init.Logic <> ::type_scope:x_'='_x not
binder 30629:30629 <> a:243
R30634:30636 VST.msl.seplog <> exp meth
binder 30643:30643 <> x:244
R30654:30654 VST.floyd.forward <> a:243 var
R30624:30624 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30656:30659 Coq.Init.Logic <> ::type_scope:x_'='_x not
binder 30629:30629 <> a:245
R30634:30636 VST.msl.seplog <> exp meth
binder 30643:30643 <> x:246
R30654:30654 VST.floyd.forward <> a:245 var
R30818:30818 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30832:30835 Coq.Init.Logic <> ::type_scope:x_'='_x not
binder 30823:30823 <> a:247
R30831:30831 VST.floyd.forward <> a:247 var
R30818:30818 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30832:30835 Coq.Init.Logic <> ::type_scope:x_'='_x not
binder 30823:30823 <> a:248
R30831:30831 VST.floyd.forward <> a:248 var
R30864:30864 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30706:30708 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30688:30690 VST.msl.seplog <> exp meth
binder 30697:30697 <> x:249
R31123:31133 VST.msl.log_normalize <> exp_uncurry thm
R31151:31164 VST.floyd.call_lemmas <> no_post_exists thm
R31182:31191 VST.floyd.canon <> exp_unfold thm
R31253:31259 Coq.Logic.FunctionalExtensionality <> equal_f thm
R31279:31296 VST.floyd.forward <> PROP_LOCAL_SEP_ext thm
R31206:31214 VST.msl.log_normalize <> exp_congr thm
R31727:31748 VST.floyd.call_lemmas <> semax_call_id1_wow_nil thm
R31800:31803 Coq.Init.Datatypes <> list ind
R31805:31809 VST.veric.mpred <> mpred def
R31800:31803 Coq.Init.Datatypes <> list ind
R31805:31809 VST.veric.mpred <> mpred def
R31868:31874 Coq.Init.Logic <> I constr
R31958:31971 VST.floyd.client_lemmas <> fold_right_and def
R31989:31996 VST.floyd.entailer <> and_True thm
R32075:32092 VST.floyd.call_lemmas <> semax_call_id1_wow thm
R32142:32145 Coq.Init.Datatypes <> list ind
R32147:32151 VST.veric.mpred <> mpred def
R32142:32145 Coq.Init.Datatypes <> list ind
R32147:32151 VST.veric.mpred <> mpred def
R32210:32216 Coq.Init.Logic <> I constr
R32300:32313 VST.floyd.client_lemmas <> fold_right_and def
R32331:32338 VST.floyd.entailer <> and_True thm
R32421:32444 VST.floyd.call_lemmas <> semax_call_id1_x_wow_nil thm
R32495:32498 Coq.Init.Datatypes <> list ind
R32500:32504 VST.veric.mpred <> mpred def
R32495:32498 Coq.Init.Datatypes <> list ind
R32500:32504 VST.veric.mpred <> mpred def
R32585:32600 Coq.Init.Logic <> I constr
R32610:32625 Coq.Init.Logic <> I constr
R32795:32808 VST.floyd.client_lemmas <> fold_right_and def
R32826:32833 VST.floyd.entailer <> and_True thm
R32912:32931 VST.floyd.call_lemmas <> semax_call_id1_x_wow thm
R32982:32985 Coq.Init.Datatypes <> list ind
R32987:32991 VST.veric.mpred <> mpred def
R32982:32985 Coq.Init.Datatypes <> list ind
R32987:32991 VST.veric.mpred <> mpred def
R33072:33087 Coq.Init.Logic <> I constr
R33097:33112 Coq.Init.Logic <> I constr
R33282:33295 VST.floyd.client_lemmas <> fold_right_and def
R33313:33320 VST.floyd.entailer <> and_True thm
R33403:33426 VST.floyd.call_lemmas <> semax_call_id1_y_wow_nil thm
R33477:33480 Coq.Init.Datatypes <> list ind
R33482:33486 VST.veric.mpred <> mpred def
R33477:33480 Coq.Init.Datatypes <> list ind
R33482:33486 VST.veric.mpred <> mpred def
R33567:33582 Coq.Init.Logic <> I constr
R33592:33607 Coq.Init.Logic <> I constr
R33777:33790 VST.floyd.client_lemmas <> fold_right_and def
R33808:33815 VST.floyd.entailer <> and_True thm
R33894:33913 VST.floyd.call_lemmas <> semax_call_id1_y_wow thm
R33964:33967 Coq.Init.Datatypes <> list ind
R33969:33973 VST.veric.mpred <> mpred def
R33964:33967 Coq.Init.Datatypes <> list ind
R33969:33973 VST.veric.mpred <> mpred def
R34054:34069 Coq.Init.Logic <> I constr
R34079:34094 Coq.Init.Logic <> I constr
R34264:34277 VST.floyd.client_lemmas <> fold_right_and def
R34295:34302 VST.floyd.entailer <> and_True thm
R34384:34406 VST.floyd.call_lemmas <> semax_call_id01_wow_nil thm
R34457:34460 Coq.Init.Datatypes <> list ind
R34462:34466 VST.veric.mpred <> mpred def
R34457:34460 Coq.Init.Datatypes <> list ind
R34462:34466 VST.veric.mpred <> mpred def
R34506:34521 Coq.Init.Logic <> I constr
R34585:34598 VST.floyd.client_lemmas <> fold_right_and def
R34616:34623 VST.floyd.entailer <> and_True thm
R34701:34719 VST.floyd.call_lemmas <> semax_call_id01_wow thm
R34770:34773 Coq.Init.Datatypes <> list ind
R34775:34779 VST.veric.mpred <> mpred def
R34770:34773 Coq.Init.Datatypes <> list ind
R34775:34779 VST.veric.mpred <> mpred def
R34819:34834 Coq.Init.Logic <> I constr
R34898:34911 VST.floyd.client_lemmas <> fold_right_and def
R34929:34936 VST.floyd.entailer <> and_True thm
R35019:35041 VST.floyd.call_lemmas <> semax_call_id00_wow_nil thm
R35092:35095 Coq.Init.Datatypes <> list ind
R35097:35101 VST.veric.mpred <> mpred def
R35092:35095 Coq.Init.Datatypes <> list ind
R35097:35101 VST.veric.mpred <> mpred def
R35272:35282 VST.msl.log_normalize <> exp_uncurry thm
R35432:35440 VST.msl.log_normalize <> exp_congr thm
R35456:35470 VST.floyd.call_lemmas <> no_post_exists0 thm
R35479:35487 VST.msl.log_normalize <> exp_congr thm
R35520:35537 VST.floyd.forward <> PROP_LOCAL_SEP_ext thm
R35774:35787 VST.floyd.client_lemmas <> fold_right_and def
R35805:35812 VST.floyd.entailer <> and_True thm
R35891:35909 VST.floyd.call_lemmas <> semax_call_id00_wow thm
R35960:35963 Coq.Init.Datatypes <> list ind
R35965:35969 VST.veric.mpred <> mpred def
R35960:35963 Coq.Init.Datatypes <> list ind
R35965:35969 VST.veric.mpred <> mpred def
R36168:36178 VST.msl.log_normalize <> exp_uncurry thm
R36328:36336 VST.msl.log_normalize <> exp_congr thm
R36352:36366 VST.floyd.call_lemmas <> no_post_exists0 thm
R36375:36383 VST.msl.log_normalize <> exp_congr thm
R36416:36433 VST.floyd.forward <> PROP_LOCAL_SEP_ext thm
R36670:36683 VST.floyd.client_lemmas <> fold_right_and def
R36701:36708 VST.floyd.entailer <> and_True thm
R36779:36789 VST.floyd.call_lemmas <> strong_cast def
R36779:36789 VST.floyd.call_lemmas <> strong_cast def
R36823:36833 VST.floyd.call_lemmas <> strong_cast def
R36823:36833 VST.floyd.call_lemmas <> strong_cast def
R36870:36880 VST.floyd.call_lemmas <> strong_cast def
R36870:36880 VST.floyd.call_lemmas <> strong_cast def
R36913:36921 VST.veric.val_lemmas <> force_val def
R36924:36931 VST.veric.Clight_Cop2 <> sem_cast def
R36998:37002 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R37008:37012 compcert.cfrontend.Clight <> Sskip constr
R36998:37002 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R37008:37012 compcert.cfrontend.Clight <> Sskip constr
R37064:37072 VST.floyd.canon <> semax_pre thm
R37083:37098 VST.floyd.canon <> semax_pre_simple thm
R37118:37127 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_skip prfax
def 37148:37158 <> BINDER_NAME
R37163:37164 Coq.Init.Datatypes <> tt constr
R37223:37227 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R37223:37227 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R37273:37277 compcert.cfrontend.Clight <> Scall constr
R37282:37285 compcert.cfrontend.Clight <> Evar constr
R37273:37277 compcert.cfrontend.Clight <> Scall constr
R37282:37285 compcert.cfrontend.Clight <> Evar constr
R37322:37322 compcert.lib.Maps <> :::x_'!'_x not
R37339:37342 compcert.lib.Maps <> :::x_'!'_x not
R37323:37332 VST.veric.seplog <> glob_specs def
R37408:37411 Coq.Init.Datatypes <> Some constr
R37414:37423 VST.veric.mpred <> mk_funspec constr
R37443:37445 VST.msl.seplog <> exp meth
binder 37452:37453 <> y1:250
R37458:37460 VST.msl.seplog <> exp meth
binder 37467:37468 <> y2:251
R37473:37475 VST.msl.seplog <> exp meth
binder 37482:37483 <> y3:252
R37488:37490 VST.msl.seplog <> exp meth
binder 37497:37498 <> y4:253
R37408:37411 Coq.Init.Datatypes <> Some constr
R37414:37423 VST.veric.mpred <> mk_funspec constr
R37443:37445 VST.msl.seplog <> exp meth
binder 37452:37453 <> y1:254
R37458:37460 VST.msl.seplog <> exp meth
binder 37467:37468 <> y2:255
R37473:37475 VST.msl.seplog <> exp meth
binder 37482:37483 <> y3:256
R37488:37490 VST.msl.seplog <> exp meth
binder 37497:37498 <> y4:257
R37760:37763 Coq.Init.Datatypes <> Some constr
R37766:37775 VST.veric.mpred <> mk_funspec constr
R37795:37797 VST.msl.seplog <> exp meth
binder 37804:37805 <> y1:258
R37810:37812 VST.msl.seplog <> exp meth
binder 37819:37820 <> y2:259
R37825:37827 VST.msl.seplog <> exp meth
binder 37834:37835 <> y3:260
R37760:37763 Coq.Init.Datatypes <> Some constr
R37766:37775 VST.veric.mpred <> mk_funspec constr
R37795:37797 VST.msl.seplog <> exp meth
binder 37804:37805 <> y1:261
R37810:37812 VST.msl.seplog <> exp meth
binder 37819:37820 <> y2:262
R37825:37827 VST.msl.seplog <> exp meth
binder 37834:37835 <> y3:263
R38036:38039 Coq.Init.Datatypes <> Some constr
R38042:38051 VST.veric.mpred <> mk_funspec constr
R38071:38073 VST.msl.seplog <> exp meth
binder 38080:38081 <> y1:264
R38086:38088 VST.msl.seplog <> exp meth
binder 38095:38096 <> y2:265
R38036:38039 Coq.Init.Datatypes <> Some constr
R38042:38051 VST.veric.mpred <> mk_funspec constr
R38071:38073 VST.msl.seplog <> exp meth
binder 38080:38081 <> y1:266
R38086:38088 VST.msl.seplog <> exp meth
binder 38095:38096 <> y2:267
R38236:38239 Coq.Init.Datatypes <> Some constr
R38242:38251 VST.veric.mpred <> mk_funspec constr
R38271:38273 VST.msl.seplog <> exp meth
binder 38280:38281 <> y1:268
R38236:38239 Coq.Init.Datatypes <> Some constr
R38242:38251 VST.veric.mpred <> mk_funspec constr
R38271:38273 VST.msl.seplog <> exp meth
binder 38280:38281 <> y1:269
R38340:38350 VST.floyd.forward <> BINDER_NAME def
R38156:38166 VST.floyd.forward <> BINDER_NAME def
R38216:38226 VST.floyd.forward <> BINDER_NAME def
R37896:37906 VST.floyd.forward <> BINDER_NAME def
R37956:37966 VST.floyd.forward <> BINDER_NAME def
R38016:38026 VST.floyd.forward <> BINDER_NAME def
R37560:37570 VST.floyd.forward <> BINDER_NAME def
R37620:37630 VST.floyd.forward <> BINDER_NAME def
R37680:37690 VST.floyd.forward <> BINDER_NAME def
R37740:37750 VST.floyd.forward <> BINDER_NAME def
R38461:38471 VST.floyd.forward <> BINDER_NAME def
R38461:38471 VST.floyd.forward <> BINDER_NAME def
R38545:38562 VST.floyd.base <> extract_exists_pre def
R38500:38517 VST.floyd.base <> extract_exists_pre def
R38862:38871 VST.floyd.call_lemmas <> eq_no_post def
R38645:38654 VST.floyd.call_lemmas <> eq_no_post def
R38645:38654 VST.floyd.call_lemmas <> eq_no_post def
R38716:38733 VST.floyd.base <> extract_exists_pre def
R38756:38773 VST.floyd.canon <> semax_extract_PROP thm
R38795:38804 VST.floyd.call_lemmas <> eq_no_post def
R38795:38804 VST.floyd.call_lemmas <> eq_no_post def
R38818:38819 Coq.Init.Logic <> eq ind
R38941:38960 VST.floyd.client_lemmas <> remove_localdef_temp def
R38941:38960 VST.floyd.client_lemmas <> remove_localdef_temp def
R38992:39011 VST.floyd.client_lemmas <> remove_localdef_temp def
R39272:39291 VST.floyd.client_lemmas <> remove_localdef_temp def
R39272:39291 VST.floyd.client_lemmas <> remove_localdef_temp def
R39383:39400 VST.floyd.base <> extract_exists_pre def
R39448:39452 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R39448:39452 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R39488:39491 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39492:39496 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R39484:39487 Coq.Init.Datatypes <> unit ind
R39488:39491 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39492:39496 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R39484:39487 Coq.Init.Datatypes <> unit ind
R39561:39565 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R39561:39565 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R39635:39652 VST.floyd.canon <> semax_extract_PROP thm
R39798:39807 VST.floyd.client_lemmas <> abbreviate def
R39809:39818 VST.veric.tycontext <> ret_assert rec
R39798:39807 VST.floyd.client_lemmas <> abbreviate def
R39809:39818 VST.veric.tycontext <> ret_assert rec
R39908:39917 VST.floyd.client_lemmas <> abbreviate def
R39919:39927 compcert.cfrontend.Clight <> statement ind
R39908:39917 VST.floyd.client_lemmas <> abbreviate def
R39919:39927 compcert.cfrontend.Clight <> statement ind
ind 39989:39998 <> Ridiculous
R40192:40226 VST.msl.functors MixVariantFunctor _functor proj
R40273:40277 VST.veric.mpred <> mpred def
R40234:40265 VST.veric.rmaps <> dependent_type_functor_rec def
R40064:40078 VST.veric.rmaps <> ConstType constr
R40080:40089 VST.floyd.forward <> Ridiculous ind
prf 41241:41264 <> trivial_Forall_inclusion
binder 41276:41276 <> A:272
R41283:41286 Coq.Init.Datatypes <> list ind
R41288:41288 VST.floyd.forward <> A:272 var
binder 41280:41280 <> G:273
R41292:41297 Coq.Lists.List <> Forall ind
R41317:41317 VST.floyd.forward <> G:273 var
binder 41304:41304 <> x:274
R41309:41310 Coq.Lists.List <> In def
R41314:41314 VST.floyd.forward <> G:273 var
R41312:41312 VST.floyd.forward <> x:274 var
R41341:41353 Coq.Lists.List <> Forall_forall thm
R41341:41353 Coq.Lists.List <> Forall_forall thm
prf 41382:41406 <> trivial_Forall_inclusion0
binder 41418:41418 <> A:275
R41425:41428 Coq.Init.Datatypes <> list ind
R41430:41430 VST.floyd.forward <> A:275 var
binder 41422:41422 <> G:276
R41434:41439 Coq.Lists.List <> Forall ind
R41459:41461 Coq.Init.Datatypes <> nil constr
binder 41446:41446 <> x:277
R41451:41452 Coq.Lists.List <> In def
R41456:41456 VST.floyd.forward <> G:276 var
R41454:41454 VST.floyd.forward <> x:277 var
prf 41504:41523 <> classify_fun_ty_hack
binder 41587:41588 <> fs:278
binder 41590:41592 <> fs':279
R41615:41620 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 41628:41629 <> ty:280
binder 41641:41644 <> typs:281
binder 41646:41650 <> retty:282
binder 41652:41653 <> cc:283
R41681:41686 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R41732:41738 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R41754:41756 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41739:41750 compcert.cfrontend.Cop <> classify_fun def
R41752:41753 VST.floyd.forward <> ty:280 var
R41757:41766 compcert.cfrontend.Cop <> fun_case_f constr
R41779:41780 VST.floyd.forward <> cc:283 var
R41773:41777 VST.floyd.forward <> retty:282 var
R41768:41771 VST.floyd.forward <> typs:281 var
R41706:41708 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41687:41701 VST.veric.mpred <> type_of_funspec def
R41703:41705 VST.floyd.forward <> fs':279 var
R41709:41717 compcert.cfrontend.Ctypes <> Tfunction constr
R41730:41731 VST.floyd.forward <> cc:283 var
R41724:41728 VST.floyd.forward <> retty:282 var
R41719:41722 VST.floyd.forward <> typs:281 var
R41660:41662 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41658:41659 VST.floyd.forward <> ty:280 var
R41663:41677 VST.veric.mpred <> type_of_funspec def
R41679:41680 VST.floyd.forward <> fs:278 var
R41597:41607 VST.veric.SeparationLogic <> funspec_sub def
R41612:41614 VST.floyd.forward <> fs':279 var
R41609:41610 VST.floyd.forward <> fs:278 var
R41966:41968 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41966:41968 Coq.Init.Logic <> ::type_scope:x_'='_x not
R42531:42535 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R42545:42547 VST.msl.seplog <> exp meth
R42531:42535 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R42545:42547 VST.msl.seplog <> exp meth
R42725:42729 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R42745:42749 VST.floyd.canon <> PROPx def
R42755:42760 VST.floyd.canon <> LOCALx def
R42766:42769 VST.floyd.canon <> SEPx def
R42725:42729 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R42745:42749 VST.floyd.canon <> PROPx def
R42755:42760 VST.floyd.canon <> LOCALx def
R42766:42769 VST.floyd.canon <> SEPx def
R42842:42846 compcert.cfrontend.Clight <> Scall constr
R42842:42846 compcert.cfrontend.Clight <> Scall constr
R43147:43151 compcert.cfrontend.Clight <> Scall constr
R43156:43159 compcert.cfrontend.Clight <> Evar constr
R43147:43151 compcert.cfrontend.Clight <> Scall constr
R43156:43159 compcert.cfrontend.Clight <> Evar constr
R43193:43206 VST.floyd.call_lemmas <> call_setup1_i2 thm
R43281:43299 VST.floyd.call_lemmas <> can_assume_funcptr2 thm
R43522:43541 VST.floyd.forward <> classify_fun_ty_hack thm
R42876:42888 VST.floyd.call_lemmas <> call_setup1_i thm
R43801:43807 Coq.Init.Logic <> I constr
R43862:43877 VST.floyd.call_lemmas <> check_gvars_spec def
R43885:43888 Coq.Init.Datatypes <> Some constr
R43879:43882 Coq.Init.Datatypes <> None constr
R43862:43877 VST.floyd.call_lemmas <> check_gvars_spec def
R43885:43888 Coq.Init.Datatypes <> Some constr
R43879:43882 Coq.Init.Datatypes <> None constr
R44209:44213 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R44224:44228 VST.floyd.canon <> PROPx def
R44234:44239 VST.floyd.canon <> LOCALx def
R44245:44248 VST.floyd.canon <> SEPx def
R44209:44213 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R44224:44228 VST.floyd.canon <> PROPx def
R44234:44239 VST.floyd.canon <> LOCALx def
R44245:44248 VST.floyd.canon <> SEPx def
R44308:44311 Coq.Init.Datatypes <> list ind
R44313:44317 VST.veric.mpred <> mpred def
R44353:44365 VST.floyd.call_lemmas <> call_setup2_i thm
R44623:44638 VST.floyd.call_lemmas <> check_gvars_spec def
R44654:44654 Coq.Init.Logic <> I constr
R44917:44921 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44864:44874 VST.floyd.call_lemmas <> call_setup1 def
R44917:44921 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44864:44874 VST.floyd.call_lemmas <> call_setup1 def
R45091:45095 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R45102:45110 compcert.cfrontend.Clight <> Ssequence constr
R45113:45117 compcert.cfrontend.Clight <> Scall constr
R45091:45095 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R45102:45110 compcert.cfrontend.Clight <> Ssequence constr
R45113:45117 compcert.cfrontend.Clight <> Scall constr
R45645:45649 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R45656:45664 compcert.cfrontend.Clight <> Ssequence constr
R45667:45675 compcert.cfrontend.Clight <> Ssequence constr
R45742:45745 compcert.cfrontend.Clight <> Sset constr
R45750:45754 compcert.cfrontend.Clight <> Ecast constr
R45757:45764 compcert.cfrontend.Clight <> Etempvar constr
R45678:45682 compcert.cfrontend.Clight <> Scall constr
R45685:45688 Coq.Init.Datatypes <> Some constr
R45645:45649 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R45656:45664 compcert.cfrontend.Clight <> Ssequence constr
R45667:45675 compcert.cfrontend.Clight <> Ssequence constr
R45742:45745 compcert.cfrontend.Clight <> Sset constr
R45750:45754 compcert.cfrontend.Clight <> Ecast constr
R45757:45764 compcert.cfrontend.Clight <> Etempvar constr
R45678:45682 compcert.cfrontend.Clight <> Scall constr
R45685:45688 Coq.Init.Datatypes <> Some constr
R46017:46021 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46028:46036 compcert.cfrontend.Clight <> Ssequence constr
R46039:46047 compcert.cfrontend.Clight <> Ssequence constr
R46114:46117 compcert.cfrontend.Clight <> Sset constr
R46122:46129 compcert.cfrontend.Clight <> Etempvar constr
R46050:46054 compcert.cfrontend.Clight <> Scall constr
R46057:46060 Coq.Init.Datatypes <> Some constr
R46017:46021 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46028:46036 compcert.cfrontend.Clight <> Ssequence constr
R46039:46047 compcert.cfrontend.Clight <> Ssequence constr
R46114:46117 compcert.cfrontend.Clight <> Sset constr
R46122:46129 compcert.cfrontend.Clight <> Etempvar constr
R46050:46054 compcert.cfrontend.Clight <> Scall constr
R46057:46060 Coq.Init.Datatypes <> Some constr
R46395:46403 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R46190:46199 VST.floyd.canon <> semax_seq' thm
R45828:45837 VST.floyd.canon <> semax_seq' thm
R45146:45155 VST.floyd.canon <> semax_seq' thm
R45292:45295 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45296:45300 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R45307:45311 compcert.cfrontend.Clight <> Scall constr
R45314:45317 Coq.Init.Datatypes <> Some constr
R45292:45295 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45296:45300 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R45307:45311 compcert.cfrontend.Clight <> Scall constr
R45314:45317 Coq.Init.Datatypes <> Some constr
R45447:45467 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45468:45472 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R45479:45483 compcert.cfrontend.Clight <> Scall constr
R45485:45488 Coq.Init.Datatypes <> None constr
R45373:45383 VST.floyd.call_lemmas <> call_setup2 def
R45447:45467 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45468:45472 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R45479:45483 compcert.cfrontend.Clight <> Scall constr
R45485:45488 Coq.Init.Datatypes <> None constr
R45373:45383 VST.floyd.call_lemmas <> call_setup2 def
R45527:45531 compcert.cfrontend.Ctypes <> Tvoid constr
R46519:46523 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46530:46534 compcert.cfrontend.Clight <> Scall constr
R46519:46523 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46530:46534 compcert.cfrontend.Clight <> Scall constr
R46559:46572 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R46620:46624 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46631:46639 compcert.cfrontend.Clight <> Ssequence constr
R46642:46650 compcert.cfrontend.Clight <> Ssequence constr
R46653:46661 compcert.cfrontend.Clight <> Ssequence constr
R46620:46624 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46631:46639 compcert.cfrontend.Clight <> Ssequence constr
R46642:46650 compcert.cfrontend.Clight <> Ssequence constr
R46653:46661 compcert.cfrontend.Clight <> Ssequence constr
R46696:46704 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R46736:46740 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46758:46766 compcert.cfrontend.Clight <> Ssequence constr
R46736:46740 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46758:46766 compcert.cfrontend.Clight <> Ssequence constr
R46807:46811 compcert.cfrontend.Clight <> Scall constr
R46807:46811 compcert.cfrontend.Clight <> Scall constr
R47062:47064 Coq.Init.Datatypes <> nil constr
R47184:47186 Coq.Init.Datatypes <> nil constr
R47275:47278 Coq.Init.Datatypes <> prod ind
R47275:47278 Coq.Init.Datatypes <> prod ind
R47382:47382 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R47385:47386 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R47389:47389 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R47529:47563 VST.msl.functors MixVariantFunctor _functor proj
R47614:47618 VST.veric.mpred <> mpred def
R47571:47602 VST.veric.rmaps <> dependent_type_functor_rec def
R47604:47606 Coq.Init.Datatypes <> nil constr
R48517:48534 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R48459:48469 VST.floyd.call_lemmas <> call_setup1 def
R48517:48534 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R48459:48469 VST.floyd.call_lemmas <> call_setup1 def
R48652:48654 Coq.Init.Datatypes <> nil constr
R48695:48696 Coq.Init.Datatypes <> tt constr
R48800:48804 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R48811:48819 compcert.cfrontend.Clight <> Ssequence constr
R48822:48826 compcert.cfrontend.Clight <> Scall constr
R48800:48804 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R48811:48819 compcert.cfrontend.Clight <> Ssequence constr
R48822:48826 compcert.cfrontend.Clight <> Scall constr
R49485:49489 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R49496:49504 compcert.cfrontend.Clight <> Ssequence constr
R49507:49515 compcert.cfrontend.Clight <> Ssequence constr
R49582:49585 compcert.cfrontend.Clight <> Sset constr
R49590:49594 compcert.cfrontend.Clight <> Ecast constr
R49597:49604 compcert.cfrontend.Clight <> Etempvar constr
R49518:49522 compcert.cfrontend.Clight <> Scall constr
R49525:49528 Coq.Init.Datatypes <> Some constr
R49485:49489 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R49496:49504 compcert.cfrontend.Clight <> Ssequence constr
R49507:49515 compcert.cfrontend.Clight <> Ssequence constr
R49582:49585 compcert.cfrontend.Clight <> Sset constr
R49590:49594 compcert.cfrontend.Clight <> Ecast constr
R49597:49604 compcert.cfrontend.Clight <> Etempvar constr
R49518:49522 compcert.cfrontend.Clight <> Scall constr
R49525:49528 Coq.Init.Datatypes <> Some constr
R49841:49845 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R49852:49860 compcert.cfrontend.Clight <> Ssequence constr
R49863:49871 compcert.cfrontend.Clight <> Ssequence constr
R49938:49941 compcert.cfrontend.Clight <> Sset constr
R49946:49953 compcert.cfrontend.Clight <> Etempvar constr
R49874:49878 compcert.cfrontend.Clight <> Scall constr
R49881:49884 Coq.Init.Datatypes <> Some constr
R49841:49845 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R49852:49860 compcert.cfrontend.Clight <> Ssequence constr
R49863:49871 compcert.cfrontend.Clight <> Ssequence constr
R49938:49941 compcert.cfrontend.Clight <> Sset constr
R49946:49953 compcert.cfrontend.Clight <> Etempvar constr
R49874:49878 compcert.cfrontend.Clight <> Scall constr
R49881:49884 Coq.Init.Datatypes <> Some constr
R50203:50211 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R50014:50023 VST.floyd.canon <> semax_seq' thm
R49668:49677 VST.floyd.canon <> semax_seq' thm
R48852:48861 VST.floyd.canon <> semax_seq' thm
R48982:48985 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R48986:48990 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R48997:49001 compcert.cfrontend.Clight <> Scall constr
R49004:49007 Coq.Init.Datatypes <> Some constr
R48982:48985 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R48986:48990 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R48997:49001 compcert.cfrontend.Clight <> Scall constr
R49004:49007 Coq.Init.Datatypes <> Some constr
R49282:49307 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R49308:49312 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R49319:49323 compcert.cfrontend.Clight <> Scall constr
R49325:49328 Coq.Init.Datatypes <> None constr
R49208:49218 VST.floyd.call_lemmas <> call_setup2 def
R49282:49307 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R49308:49312 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R49319:49323 compcert.cfrontend.Clight <> Scall constr
R49325:49328 Coq.Init.Datatypes <> None constr
R49208:49218 VST.floyd.call_lemmas <> call_setup2 def
R49367:49371 compcert.cfrontend.Ctypes <> Tvoid constr
R50291:50295 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R50302:50306 compcert.cfrontend.Clight <> Scall constr
R50291:50295 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R50302:50306 compcert.cfrontend.Clight <> Scall constr
R50331:50344 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R50392:50396 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R50403:50411 compcert.cfrontend.Clight <> Ssequence constr
R50414:50422 compcert.cfrontend.Clight <> Ssequence constr
R50425:50433 compcert.cfrontend.Clight <> Ssequence constr
R50392:50396 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R50403:50411 compcert.cfrontend.Clight <> Ssequence constr
R50414:50422 compcert.cfrontend.Clight <> Ssequence constr
R50425:50433 compcert.cfrontend.Clight <> Ssequence constr
R50468:50476 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R50508:50512 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R50530:50538 compcert.cfrontend.Clight <> Ssequence constr
R50508:50512 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R50530:50538 compcert.cfrontend.Clight <> Ssequence constr
R50579:50583 compcert.cfrontend.Clight <> Scall constr
R50579:50583 compcert.cfrontend.Clight <> Scall constr
prf 50688:50697 <> seq_assoc2
R50717:50726 VST.veric.juicy_extspec <> OracleKind class
binder 50710:50714 <> Espec:284
R50734:50742 VST.veric.mpred <> compspecs class
binder 50730:50731 <> cs:285
binder 50746:50750 <> Delta:286
binder 50752:50752 <> P:287
binder 50754:50755 <> c1:288
binder 50757:50758 <> c2:289
binder 50760:50761 <> c3:290
binder 50763:50764 <> c4:291
binder 50766:50766 <> Q:292
R50834:50839 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50840:50844 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R50902:50902 VST.floyd.forward <> Q:292 var
R50855:50863 compcert.cfrontend.Clight <> Ssequence constr
R50898:50899 VST.floyd.forward <> c4:291 var
R50866:50874 compcert.cfrontend.Clight <> Ssequence constr
R50894:50895 VST.floyd.forward <> c3:290 var
R50877:50885 compcert.cfrontend.Clight <> Ssequence constr
R50890:50891 VST.floyd.forward <> c2:289 var
R50887:50888 VST.floyd.forward <> c1:288 var
R50852:50852 VST.floyd.forward <> P:287 var
R50846:50850 VST.floyd.forward <> Delta:286 var
R50771:50775 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R50833:50833 VST.floyd.forward <> Q:292 var
R50786:50794 compcert.cfrontend.Clight <> Ssequence constr
R50815:50823 compcert.cfrontend.Clight <> Ssequence constr
R50828:50829 VST.floyd.forward <> c4:291 var
R50825:50826 VST.floyd.forward <> c3:290 var
R50797:50805 compcert.cfrontend.Clight <> Ssequence constr
R50810:50811 VST.floyd.forward <> c2:289 var
R50807:50808 VST.floyd.forward <> c1:288 var
R50783:50783 VST.floyd.forward <> P:287 var
R50777:50781 VST.floyd.forward <> Delta:286 var
R50932:50940 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R50932:50940 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R50932:50940 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R51114:51116 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51087:51102 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R51114:51116 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51087:51102 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R51165:51167 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51136:51153 VST.floyd.local2ptree_eval <> msubst_eval_lvalue def
R51165:51167 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51136:51153 VST.floyd.local2ptree_eval <> msubst_eval_lvalue def
R51219:51221 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51222:51225 Coq.Init.Datatypes <> Some constr
R51219:51221 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51222:51225 Coq.Init.Datatypes <> Some constr
R51324:51326 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51317:51320 Coq.Init.Datatypes <> Some constr
R51327:51330 Coq.Init.Datatypes <> Some constr
R51324:51326 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51317:51320 Coq.Init.Datatypes <> Some constr
R51327:51330 Coq.Init.Datatypes <> Some constr
R51873:51875 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51876:51879 Coq.Init.Datatypes <> Some constr
R51873:51875 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51876:51879 Coq.Init.Datatypes <> Some constr
R51422:51425 Coq.Init.Datatypes <> Some constr
R51445:51448 Coq.Init.Datatypes <> None constr
R51453:51458 compcert.common.Values <> Vundef constr
R51422:51425 Coq.Init.Datatypes <> Some constr
R51445:51448 Coq.Init.Datatypes <> None constr
R51453:51458 compcert.common.Values <> Vundef constr
R51553:51558 compcert.common.Values <> Vundef constr
R51563:51568 compcert.common.Values <> Vundef constr
R51581:51584 compcert.common.Values <> Vint constr
R51591:51596 compcert.common.Values <> Vundef constr
R51609:51613 compcert.common.Values <> Vlong constr
R51620:51625 compcert.common.Values <> Vundef constr
R51638:51643 compcert.common.Values <> Vfloat constr
R51650:51655 compcert.common.Values <> Vundef constr
R51668:51674 compcert.common.Values <> Vsingle constr
R51681:51686 compcert.common.Values <> Vundef constr
R51699:51702 compcert.common.Values <> Vptr constr
R51711:51714 compcert.common.Values <> Vptr constr
R51719:51728 compcert.lib.Integers Ptrofs add def
R51733:51743 compcert.lib.Integers Ptrofs repr def
R51553:51558 compcert.common.Values <> Vundef constr
R51563:51568 compcert.common.Values <> Vundef constr
R51581:51584 compcert.common.Values <> Vint constr
R51591:51596 compcert.common.Values <> Vundef constr
R51609:51613 compcert.common.Values <> Vlong constr
R51620:51625 compcert.common.Values <> Vundef constr
R51638:51643 compcert.common.Values <> Vfloat constr
R51650:51655 compcert.common.Values <> Vundef constr
R51668:51674 compcert.common.Values <> Vsingle constr
R51681:51686 compcert.common.Values <> Vundef constr
R51699:51702 compcert.common.Values <> Vptr constr
R51711:51714 compcert.common.Values <> Vptr constr
R51719:51728 compcert.lib.Integers Ptrofs add def
R51733:51743 compcert.lib.Integers Ptrofs repr def
R51793:51802 VST.veric.val_lemmas <> offset_val def
R51501:51509 VST.veric.val_lemmas <> force_val def
R52225:52229 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52205:52208 VST.msl.seplog <> ::logic:x_'&&'_x not
R52196:52200 VST.veric.SeparationLogic <> local def
R52209:52211 VST.msl.seplog <> exp meth
binder 52218:52218 <> y:293
R52225:52229 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52205:52208 VST.msl.seplog <> ::logic:x_'&&'_x not
R52196:52200 VST.veric.SeparationLogic <> local def
R52209:52211 VST.msl.seplog <> exp meth
binder 52218:52218 <> y:294
R52250:52258 VST.msl.log_normalize <> exp_andp2 thm
R52267:52274 VST.msl.seplog <> exp_left meth
R52404:52409 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52393:52397 VST.msl.seplog <> ::logic:x_'&&'_x not
R52403:52403 VST.msl.seplog <> ::logic:x_'&&'_x not
R52398:52400 VST.msl.seplog <> exp meth
R52404:52409 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52393:52397 VST.msl.seplog <> ::logic:x_'&&'_x not
R52403:52403 VST.msl.seplog <> ::logic:x_'&&'_x not
R52398:52400 VST.msl.seplog <> exp meth
R52453:52457 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52438:52442 VST.msl.seplog <> ::logic:x_'&&'_x not
R52452:52452 VST.msl.seplog <> ::logic:x_'&&'_x not
R52443:52447 VST.floyd.canon <> PROPx def
R52453:52457 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52438:52442 VST.msl.seplog <> ::logic:x_'&&'_x not
R52452:52452 VST.msl.seplog <> ::logic:x_'&&'_x not
R52443:52447 VST.floyd.canon <> PROPx def
R52504:52509 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52486:52490 VST.msl.seplog <> ::logic:x_'&&'_x not
R52503:52503 VST.msl.seplog <> ::logic:x_'&&'_x not
R52504:52509 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52486:52490 VST.msl.seplog <> ::logic:x_'&&'_x not
R52503:52503 VST.msl.seplog <> ::logic:x_'&&'_x not
R52556:52561 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52540:52544 VST.msl.seplog <> ::logic:x_'&&'_x not
R52555:52555 VST.msl.seplog <> ::logic:x_'&&'_x not
R52556:52561 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52540:52544 VST.msl.seplog <> ::logic:x_'&&'_x not
R52555:52555 VST.msl.seplog <> ::logic:x_'&&'_x not
R52606:52611 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52592:52596 VST.msl.seplog <> ::logic:x_'&&'_x not
R52605:52605 VST.msl.seplog <> ::logic:x_'&&'_x not
R52606:52611 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52592:52596 VST.msl.seplog <> ::logic:x_'&&'_x not
R52605:52605 VST.msl.seplog <> ::logic:x_'&&'_x not
R52654:52659 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52642:52646 VST.msl.seplog <> ::logic:x_'&&'_x not
R52653:52653 VST.msl.seplog <> ::logic:x_'&&'_x not
R52654:52659 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52642:52646 VST.msl.seplog <> ::logic:x_'&&'_x not
R52653:52653 VST.msl.seplog <> ::logic:x_'&&'_x not
R52700:52705 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52690:52694 VST.msl.seplog <> ::logic:x_'&&'_x not
R52699:52699 VST.msl.seplog <> ::logic:x_'&&'_x not
R52700:52705 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52690:52694 VST.msl.seplog <> ::logic:x_'&&'_x not
R52699:52699 VST.msl.seplog <> ::logic:x_'&&'_x not
R52744:52749 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52736:52740 VST.msl.seplog <> ::logic:x_'&&'_x not
R52743:52743 VST.msl.seplog <> ::logic:x_'&&'_x not
R52744:52749 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R52736:52740 VST.msl.seplog <> ::logic:x_'&&'_x not
R52743:52743 VST.msl.seplog <> ::logic:x_'&&'_x not
R52819:52833 VST.floyd.assert_lemmas <> local_lift2_and thm
R52913:52927 VST.floyd.assert_lemmas <> local_lift2_and thm
R52950:52959 VST.msl.log_normalize <> andp_assoc thm
R52970:52981 VST.floyd.canon <> insert_local thm
R53064:53069 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53075:53075 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53070:53072 VST.msl.seplog <> exp meth
R53064:53069 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53075:53075 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53070:53072 VST.msl.seplog <> exp meth
R53103:53108 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53118:53118 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53109:53113 VST.floyd.canon <> PROPx def
R53103:53108 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53118:53118 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53109:53113 VST.floyd.canon <> PROPx def
R53146:53151 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53164:53164 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53146:53151 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53164:53164 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53195:53200 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53211:53211 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53195:53200 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53211:53211 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53242:53247 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53256:53256 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53242:53247 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53256:53256 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53287:53292 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53299:53299 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53287:53292 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53299:53299 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53330:53335 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53340:53340 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53330:53335 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53340:53340 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53371:53376 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53379:53379 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53371:53376 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53379:53379 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R53471:53475 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53480:53480 VST.msl.seplog <> ::logic:x_'&&'_x not
R53488:53492 VST.msl.seplog <> ::logic:x_'&&'_x not
R53481:53485 VST.veric.SeparationLogic <> local def
R53493:53495 VST.msl.seplog <> exp meth
R53471:53475 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53480:53480 VST.msl.seplog <> ::logic:x_'&&'_x not
R53488:53492 VST.msl.seplog <> ::logic:x_'&&'_x not
R53481:53485 VST.veric.SeparationLogic <> local def
R53493:53495 VST.msl.seplog <> exp meth
R53529:53533 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53538:53538 VST.msl.seplog <> ::logic:x_'&&'_x not
R53546:53551 VST.msl.seplog <> ::logic:x_'&&'_x not
R53561:53561 VST.msl.seplog <> ::logic:x_'&&'_x not
R53539:53543 VST.veric.SeparationLogic <> local def
R53552:53556 VST.floyd.canon <> PROPx def
R53529:53533 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53538:53538 VST.msl.seplog <> ::logic:x_'&&'_x not
R53546:53551 VST.msl.seplog <> ::logic:x_'&&'_x not
R53561:53561 VST.msl.seplog <> ::logic:x_'&&'_x not
R53539:53543 VST.veric.SeparationLogic <> local def
R53552:53556 VST.floyd.canon <> PROPx def
R53593:53597 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53602:53602 VST.msl.seplog <> ::logic:x_'&&'_x not
R53610:53614 VST.msl.seplog <> ::logic:x_'&&'_x not
R53603:53607 VST.veric.SeparationLogic <> local def
R53593:53597 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53602:53602 VST.msl.seplog <> ::logic:x_'&&'_x not
R53610:53614 VST.msl.seplog <> ::logic:x_'&&'_x not
R53603:53607 VST.veric.SeparationLogic <> local def
R53665:53669 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53674:53674 VST.msl.seplog <> ::logic:x_'&&'_x not
R53682:53686 VST.msl.seplog <> ::logic:x_'&&'_x not
R53675:53679 VST.veric.SeparationLogic <> local def
R53665:53669 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53674:53674 VST.msl.seplog <> ::logic:x_'&&'_x not
R53682:53686 VST.msl.seplog <> ::logic:x_'&&'_x not
R53675:53679 VST.veric.SeparationLogic <> local def
R53735:53739 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53744:53744 VST.msl.seplog <> ::logic:x_'&&'_x not
R53752:53756 VST.msl.seplog <> ::logic:x_'&&'_x not
R53745:53749 VST.veric.SeparationLogic <> local def
R53735:53739 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53744:53744 VST.msl.seplog <> ::logic:x_'&&'_x not
R53752:53756 VST.msl.seplog <> ::logic:x_'&&'_x not
R53745:53749 VST.veric.SeparationLogic <> local def
R53803:53807 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53812:53812 VST.msl.seplog <> ::logic:x_'&&'_x not
R53820:53824 VST.msl.seplog <> ::logic:x_'&&'_x not
R53813:53817 VST.veric.SeparationLogic <> local def
R53803:53807 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53812:53812 VST.msl.seplog <> ::logic:x_'&&'_x not
R53820:53824 VST.msl.seplog <> ::logic:x_'&&'_x not
R53813:53817 VST.veric.SeparationLogic <> local def
R53869:53873 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53878:53878 VST.msl.seplog <> ::logic:x_'&&'_x not
R53886:53890 VST.msl.seplog <> ::logic:x_'&&'_x not
R53879:53883 VST.veric.SeparationLogic <> local def
R53869:53873 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53878:53878 VST.msl.seplog <> ::logic:x_'&&'_x not
R53886:53890 VST.msl.seplog <> ::logic:x_'&&'_x not
R53879:53883 VST.veric.SeparationLogic <> local def
R53933:53937 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53942:53942 VST.msl.seplog <> ::logic:x_'&&'_x not
R53950:53954 VST.msl.seplog <> ::logic:x_'&&'_x not
R53943:53947 VST.veric.SeparationLogic <> local def
R53933:53937 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R53942:53942 VST.msl.seplog <> ::logic:x_'&&'_x not
R53950:53954 VST.msl.seplog <> ::logic:x_'&&'_x not
R53943:53947 VST.veric.SeparationLogic <> local def
R54049:54053 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R54067:54070 VST.msl.seplog <> ::logic:x_'&&'_x not
R54058:54062 VST.veric.SeparationLogic <> local def
R54071:54073 VST.msl.seplog <> exp meth
binder 54080:54080 <> y:295
R54049:54053 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R54067:54070 VST.msl.seplog <> ::logic:x_'&&'_x not
R54058:54062 VST.veric.SeparationLogic <> local def
R54071:54073 VST.msl.seplog <> exp meth
binder 54080:54080 <> y:296
R54112:54120 VST.msl.log_normalize <> exp_andp2 thm
R54129:54146 VST.floyd.base <> extract_exists_pre def
R54279:54290 VST.floyd.canon <> insert_local thm
R54355:54358 Coq.Init.Datatypes <> Some constr
R54376:54379 Coq.Init.Datatypes <> Some constr
R54355:54358 Coq.Init.Datatypes <> Some constr
R54376:54379 Coq.Init.Datatypes <> Some constr
R54883:54885 Coq.Init.Logic <> ::type_scope:x_'='_x not
R54883:54885 Coq.Init.Logic <> ::type_scope:x_'='_x not
R55116:55128 VST.msl.seplog <> derives_trans meth
R55140:55158 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R55173:55184 VST.msl.log_normalize <> andp_derives thm
R55194:55205 VST.msl.seplog <> derives_refl meth
R55215:55227 VST.msl.log_normalize <> derives_refl' thm
R55237:55257 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R55378:55393 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R55395:55412 VST.floyd.local2ptree_eval <> msubst_eval_lvalue def
R55457:55465 compcert.lib.Maps PTree get def
R55457:55465 compcert.lib.Maps PTree get def
R55508:55516 compcert.lib.Maps PTree get def
R55593:55596 Coq.Init.Datatypes <> Some constr
R55593:55596 Coq.Init.Datatypes <> Some constr
R55681:55684 Coq.Init.Datatypes <> Some constr
R55916:55925 VST.veric.val_lemmas <> force_val2 def
R55928:55937 VST.veric.val_lemmas <> force_val1 def
R56233:56235 VST.msl.seplog <> exp meth
R56233:56235 VST.msl.seplog <> exp meth
R56853:56857 VST.floyd.canon <> PROPx def
R56863:56868 VST.floyd.canon <> LOCALx def
R56874:56877 VST.floyd.canon <> SEPx def
R56853:56857 VST.floyd.canon <> PROPx def
R56863:56868 VST.floyd.canon <> LOCALx def
R56874:56877 VST.floyd.canon <> SEPx def
R56945:56947 compcert.common.Values <> val ind
R56966:56972 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R56978:56979 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R57007:57031 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R56980:56984 VST.floyd.canon <> PROPx def
R56989:56994 VST.floyd.canon <> LOCALx def
R56999:57002 VST.floyd.canon <> SEPx def
R57032:57036 VST.veric.SeparationLogic <> local def
R57039:57040 VST.veric.lift LiftNotation :::'`('_x_')' not
R57045:57059 VST.veric.lift LiftNotation :::'`('_x_')' not
R57041:57042 Coq.Init.Logic <> eq ind
R57048:57056 VST.veric.expr <> eval_expr def
R56385:56388 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56389:56392 Coq.Init.Datatypes <> list ind
R56413:56416 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56417:56420 Coq.Init.Datatypes <> list ind
R56422:56429 VST.floyd.canon <> localdef ind
R56445:56448 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56449:56452 Coq.Init.Datatypes <> list ind
R56454:56458 VST.veric.mpred <> mpred def
R56480:56484 Coq.Init.Logic <> ::type_scope:x_'='_x not
R56533:56533 Coq.Init.Logic <> ::type_scope:x_'='_x not
binder 56489:56489 <> a:297
R56494:56498 VST.floyd.canon <> PROPx def
R56507:56512 VST.floyd.canon <> LOCALx def
R56521:56524 VST.floyd.canon <> SEPx def
R56529:56529 VST.floyd.forward <> a:297 var
R56517:56517 VST.floyd.forward <> a:297 var
R56503:56503 VST.floyd.forward <> a:297 var
R56622:56625 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56626:56628 compcert.common.Values <> val ind
binder 56653:56653 <> a:298
R56656:56662 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R56668:56669 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R56709:56736 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R56670:56674 VST.floyd.canon <> PROPx def
R56683:56688 VST.floyd.canon <> LOCALx def
R56697:56700 VST.floyd.canon <> SEPx def
R56705:56705 VST.floyd.forward <> a:298 var
R56693:56693 VST.floyd.forward <> a:298 var
R56679:56679 VST.floyd.forward <> a:298 var
R56737:56741 VST.veric.SeparationLogic <> local def
R56744:56745 VST.veric.lift LiftNotation :::'`('_x_')' not
R56754:56768 VST.veric.lift LiftNotation :::'`('_x_')' not
R56746:56747 Coq.Init.Logic <> eq ind
R56752:56752 VST.floyd.forward <> a:298 var
R56757:56765 VST.veric.expr <> eval_expr def
prf 57117:57126 <> int64_eq_e
binder 57136:57136 <> i:299
R57167:57170 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57172:57172 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57171:57171 VST.floyd.forward <> i:299 var
R57173:57182 compcert.lib.Integers Int64 zero def
R57160:57162 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57139:57146 compcert.lib.Integers Int64 eq def
R57150:57159 compcert.lib.Integers Int64 zero def
R57148:57148 VST.floyd.forward <> i:299 var
R57163:57166 Coq.Init.Datatypes <> true constr
R57212:57224 compcert.lib.Integers Int64 eq_spec thm
R57228:57237 compcert.lib.Integers Int64 zero def
R57212:57224 compcert.lib.Integers Int64 eq_spec thm
R57228:57237 compcert.lib.Integers Int64 zero def
prf 57276:57294 <> typed_true_nullptr3
binder 57306:57306 <> p:300
R57365:57370 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57372:57372 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57371:57371 VST.floyd.forward <> p:300 var
R57373:57379 VST.veric.base <> nullval def
R57311:57320 VST.veric.SeparationLogic <> typed_true def
R57328:57336 VST.veric.val_lemmas <> force_val def
R57339:57348 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R57356:57362 VST.veric.base <> nullval def
R57354:57354 VST.floyd.forward <> p:300 var
R57350:57352 compcert.lib.Integers <> Ceq constr
R57322:57325 compcert.exportclight.Clightdefs <> tint def
R57396:57402 VST.veric.base <> nullval def
R57419:57433 VST.veric.mpred <> strict_bool_val def
R57436:57445 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R57448:57461 compcert.common.Values Val cmplu_bool def
R57464:57476 compcert.common.Values Val cmpu_bool def
R57496:57506 compcert.x86_32.Archi <> ptr64 def
R57560:57574 VST.veric.mpred <> strict_bool_val def
R57496:57506 compcert.x86_32.Archi <> ptr64 def
R57593:57600 compcert.lib.Integers Int64 eq def
R57604:57613 compcert.lib.Integers Int64 zero def
R57593:57600 compcert.lib.Integers Int64 eq def
R57604:57613 compcert.lib.Integers Int64 zero def
R57637:57646 VST.floyd.forward <> int64_eq_e thm
R57637:57646 VST.floyd.forward <> int64_eq_e thm
R57687:57692 compcert.lib.Integers Int eq def
R57696:57703 compcert.lib.Integers Int zero def
R57687:57692 compcert.lib.Integers Int eq def
R57696:57703 compcert.lib.Integers Int zero def
R57727:57734 VST.veric.val_lemmas <> int_eq_e thm
R57727:57734 VST.veric.val_lemmas <> int_eq_e thm
prf 57777:57796 <> typed_false_nullptr3
binder 57808:57808 <> p:301
R57868:57873 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57875:57876 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R57874:57874 VST.floyd.forward <> p:301 var
R57877:57883 VST.veric.base <> nullval def
R57813:57823 VST.veric.SeparationLogic <> typed_false def
R57831:57839 VST.veric.val_lemmas <> force_val def
R57842:57851 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R57859:57865 VST.veric.base <> nullval def
R57857:57857 VST.floyd.forward <> p:301 var
R57853:57855 compcert.lib.Integers <> Ceq constr
R57825:57828 compcert.exportclight.Clightdefs <> tint def
R57934:57943 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R57946:57952 VST.veric.base <> nullval def
R57969:57979 compcert.x86_32.Archi <> ptr64 def
R57969:57979 compcert.x86_32.Archi <> ptr64 def
R58009:58021 compcert.lib.Integers Int64 eq_true thm
R58009:58021 compcert.lib.Integers Int64 eq_true thm
R58009:58021 compcert.lib.Integers Int64 eq_true thm
prf 58055:58073 <> typed_true_nullptr4
binder 58085:58085 <> p:302
R58144:58149 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R58151:58154 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R58150:58150 VST.floyd.forward <> p:302 var
R58155:58161 VST.veric.base <> nullval def
R58090:58099 VST.veric.SeparationLogic <> typed_true def
R58107:58115 VST.veric.val_lemmas <> force_val def
R58118:58127 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R58135:58141 VST.veric.base <> nullval def
R58133:58133 VST.floyd.forward <> p:302 var
R58129:58131 compcert.lib.Integers <> Cne constr
R58101:58104 compcert.exportclight.Clightdefs <> tint def
R58212:58221 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R58224:58230 VST.veric.base <> nullval def
R58247:58257 compcert.x86_32.Archi <> ptr64 def
R58247:58257 compcert.x86_32.Archi <> ptr64 def
R58287:58299 compcert.lib.Integers Int64 eq_true thm
R58287:58299 compcert.lib.Integers Int64 eq_true thm
R58287:58299 compcert.lib.Integers Int64 eq_true thm
prf 58333:58352 <> typed_false_nullptr4
binder 58364:58364 <> p:303
R58424:58429 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R58431:58431 Coq.Init.Logic <> ::type_scope:x_'='_x not
R58430:58430 VST.floyd.forward <> p:303 var
R58432:58438 VST.veric.base <> nullval def
R58369:58379 VST.veric.SeparationLogic <> typed_false def
R58387:58395 VST.veric.val_lemmas <> force_val def
R58398:58407 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R58415:58421 VST.veric.base <> nullval def
R58413:58413 VST.floyd.forward <> p:303 var
R58409:58411 compcert.lib.Integers <> Cne constr
R58381:58384 compcert.exportclight.Clightdefs <> tint def
R58473:58482 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R58485:58491 VST.veric.base <> nullval def
R58508:58518 compcert.x86_32.Archi <> ptr64 def
R58508:58518 compcert.x86_32.Archi <> ptr64 def
R58575:58582 compcert.lib.Integers Int64 eq def
R58586:58595 compcert.lib.Integers Int64 zero def
R58575:58582 compcert.lib.Integers Int64 eq def
R58586:58595 compcert.lib.Integers Int64 zero def
R58619:58628 VST.floyd.forward <> int64_eq_e thm
R58619:58628 VST.floyd.forward <> int64_eq_e thm
R58669:58674 compcert.lib.Integers Int eq def
R58678:58685 compcert.lib.Integers Int zero def
R58669:58674 compcert.lib.Integers Int eq def
R58678:58685 compcert.lib.Integers Int zero def
R58709:58716 VST.veric.val_lemmas <> int_eq_e thm
R58709:58716 VST.veric.val_lemmas <> int_eq_e thm
prf 58760:58766 <> ltu_inv
binder 58777:58777 <> x:304
binder 58779:58779 <> y:305
R58800:58803 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R58818:58820 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R58804:58815 compcert.lib.Integers Int unsigned def
R58817:58817 VST.floyd.forward <> x:304 var
R58821:58832 compcert.lib.Integers Int unsigned def
R58834:58834 VST.floyd.forward <> y:305 var
R58793:58795 Coq.Init.Logic <> ::type_scope:x_'='_x not
R58782:58788 compcert.lib.Integers Int ltu def
R58792:58792 VST.floyd.forward <> y:305 var
R58790:58790 VST.floyd.forward <> x:304 var
R58796:58799 Coq.Init.Datatypes <> true constr
R58858:58868 compcert.lib.Integers Int ltu_inv thm
R58858:58868 compcert.lib.Integers Int ltu_inv thm
prf 58906:58918 <> ltu_false_inv
binder 58929:58929 <> x:306
binder 58931:58931 <> y:307
R58953:58956 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R58971:58974 Coq.ZArith.BinInt <> ::Z_scope:x_'>='_x not
R58957:58968 compcert.lib.Integers Int unsigned def
R58970:58970 VST.floyd.forward <> x:306 var
R58975:58986 compcert.lib.Integers Int unsigned def
R58988:58988 VST.floyd.forward <> y:307 var
R58945:58947 Coq.Init.Logic <> ::type_scope:x_'='_x not
R58934:58940 compcert.lib.Integers Int ltu def
R58944:58944 VST.floyd.forward <> y:307 var
R58942:58942 VST.floyd.forward <> x:306 var
R58948:58952 Coq.Init.Datatypes <> false constr
R59013:59019 compcert.lib.Integers Int ltu def
prf 59065:59071 <> lt_repr
R59092:59092 Coq.Numbers.BinNums <> Z ind
binder 59086:59086 <> i:308
binder 59088:59088 <> j:309
R59118:59128 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59145:59155 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59195:59198 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59201:59203 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R59200:59200 VST.floyd.forward <> i:308 var
R59204:59204 VST.floyd.forward <> j:309 var
R59188:59190 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59156:59161 compcert.lib.Integers Int lt def
R59177:59184 compcert.lib.Integers Int repr def
R59186:59186 VST.floyd.forward <> j:309 var
R59164:59171 compcert.lib.Integers Int repr def
R59173:59173 VST.floyd.forward <> i:308 var
R59191:59194 Coq.Init.Datatypes <> true constr
R59129:59142 VST.floyd.functional_base <> repable_signed def
R59144:59144 VST.floyd.forward <> j:309 var
R59102:59115 VST.floyd.functional_base <> repable_signed def
R59117:59117 VST.floyd.forward <> i:308 var
R59232:59237 compcert.lib.Integers Int lt def
prf 59297:59309 <> lt_repr_false
R59330:59330 Coq.Numbers.BinNums <> Z ind
binder 59324:59324 <> i:310
binder 59326:59326 <> j:311
R59356:59366 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59383:59393 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59434:59437 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59440:59443 Coq.ZArith.BinInt <> ::Z_scope:x_'>='_x not
R59439:59439 VST.floyd.forward <> i:310 var
R59444:59444 VST.floyd.forward <> j:311 var
R59426:59428 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59394:59399 compcert.lib.Integers Int lt def
R59415:59422 compcert.lib.Integers Int repr def
R59424:59424 VST.floyd.forward <> j:311 var
R59402:59409 compcert.lib.Integers Int repr def
R59411:59411 VST.floyd.forward <> i:310 var
R59429:59433 Coq.Init.Datatypes <> false constr
R59367:59380 VST.floyd.functional_base <> repable_signed def
R59382:59382 VST.floyd.forward <> j:311 var
R59340:59353 VST.floyd.functional_base <> repable_signed def
R59355:59355 VST.floyd.forward <> i:310 var
R59472:59477 compcert.lib.Integers Int lt def
prf 59537:59542 <> lt_inv
binder 59553:59553 <> i:312
binder 59555:59555 <> j:313
R59578:59581 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59595:59597 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R59583:59592 compcert.lib.Integers Int signed def
R59594:59594 VST.floyd.forward <> i:312 var
R59598:59607 compcert.lib.Integers Int signed def
R59609:59609 VST.floyd.forward <> j:313 var
R59571:59573 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59561:59566 compcert.lib.Integers Int lt def
R59570:59570 VST.floyd.forward <> j:313 var
R59568:59568 VST.floyd.forward <> i:312 var
R59574:59577 Coq.Init.Datatypes <> true constr
R59637:59642 compcert.lib.Integers Int lt def
prf 59688:59699 <> lt_false_inv
binder 59710:59710 <> i:314
binder 59712:59712 <> j:315
R59736:59739 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R59753:59756 Coq.ZArith.BinInt <> ::Z_scope:x_'>='_x not
R59741:59750 compcert.lib.Integers Int signed def
R59752:59752 VST.floyd.forward <> i:314 var
R59757:59766 compcert.lib.Integers Int signed def
R59768:59768 VST.floyd.forward <> j:315 var
R59728:59730 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59718:59723 compcert.lib.Integers Int lt def
R59727:59727 VST.floyd.forward <> j:315 var
R59725:59725 VST.floyd.forward <> i:314 var
R59731:59735 Coq.Init.Datatypes <> false constr
R59796:59801 compcert.lib.Integers Int lt def
R59873:59880 VST.floyd.coqlib3 <> mul_repr thm
R59884:59891 VST.floyd.coqlib3 <> add_repr thm
R59895:59902 VST.floyd.coqlib3 <> sub_repr thm
R59964:59973 compcert.lib.Integers Int signed def
R59976:59983 compcert.lib.Integers Int repr def
R59937:59946 compcert.lib.Integers Int signed def
R59949:59956 compcert.lib.Integers Int repr def
R59964:59973 compcert.lib.Integers Int signed def
R59976:59983 compcert.lib.Integers Int repr def
R59937:59946 compcert.lib.Integers Int signed def
R59949:59956 compcert.lib.Integers Int repr def
R60137:60148 compcert.lib.Integers Int unsigned def
R60151:60158 compcert.lib.Integers Int repr def
R60108:60119 compcert.lib.Integers Int unsigned def
R60122:60129 compcert.lib.Integers Int repr def
R60137:60148 compcert.lib.Integers Int unsigned def
R60151:60158 compcert.lib.Integers Int repr def
R60108:60119 compcert.lib.Integers Int unsigned def
R60122:60129 compcert.lib.Integers Int repr def
R60293:60302 compcert.lib.Integers Int signed def
R60305:60312 compcert.lib.Integers Int repr def
R60293:60302 compcert.lib.Integers Int signed def
R60305:60312 compcert.lib.Integers Int repr def
R60389:60400 compcert.lib.Integers Int unsigned def
R60403:60410 compcert.lib.Integers Int repr def
R60389:60400 compcert.lib.Integers Int unsigned def
R60403:60410 compcert.lib.Integers Int repr def
R60439:60455 compcert.lib.Integers Int unsigned_repr thm
R60341:60355 compcert.lib.Integers Int signed_repr thm
R60186:60202 compcert.lib.Integers Int unsigned_repr thm
R60243:60259 compcert.lib.Integers Int unsigned_repr thm
R60011:60025 compcert.lib.Integers Int signed_repr thm
R60066:60080 compcert.lib.Integers Int signed_repr thm
prf 60489:60504 <> typed_true_ptr_e
binder 60515:60515 <> t:316
binder 60517:60517 <> v:317
R60541:60544 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R60545:60549 VST.veric.val_lemmas <> isptr def
R60551:60551 VST.floyd.forward <> v:317 var
R60520:60529 VST.veric.SeparationLogic <> typed_true def
R60540:60540 VST.floyd.forward <> v:317 var
R60532:60535 compcert.exportclight.Clightdefs <> tptr def
R60537:60537 VST.floyd.forward <> t:316 var
R60580:60589 VST.veric.SeparationLogic <> typed_true def
R60592:60606 VST.veric.mpred <> strict_bool_val def
R60609:60612 compcert.exportclight.Clightdefs <> tptr def
R60661:60663 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60657:60660 Coq.Init.Datatypes <> None constr
R60664:60667 Coq.Init.Datatypes <> Some constr
R60669:60672 Coq.Init.Datatypes <> true constr
R60661:60663 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60657:60660 Coq.Init.Datatypes <> None constr
R60664:60667 Coq.Init.Datatypes <> Some constr
R60669:60672 Coq.Init.Datatypes <> true constr
R60714:60724 compcert.x86_32.Archi <> ptr64 def
R60744:60749 compcert.lib.Integers Int eq def
R60753:60760 compcert.lib.Integers Int zero def
R60714:60724 compcert.x86_32.Archi <> ptr64 def
R60744:60749 compcert.lib.Integers Int eq def
R60753:60760 compcert.lib.Integers Int zero def
R60744:60749 compcert.lib.Integers Int eq def
R60753:60760 compcert.lib.Integers Int zero def
R60784:60794 compcert.x86_32.Archi <> ptr64 def
R60814:60821 compcert.lib.Integers Int64 eq def
R60825:60834 compcert.lib.Integers Int64 zero def
R60784:60794 compcert.x86_32.Archi <> ptr64 def
R60814:60821 compcert.lib.Integers Int64 eq def
R60825:60834 compcert.lib.Integers Int64 zero def
R60814:60821 compcert.lib.Integers Int64 eq def
R60825:60834 compcert.lib.Integers Int64 zero def
R60855:60870 Coq.Init.Logic <> I constr
R60855:60870 Coq.Init.Logic <> I constr
prf 60885:60901 <> typed_false_ptr_e
binder 60912:60912 <> t:318
binder 60914:60914 <> v:319
R60939:60942 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R60944:60944 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60943:60943 VST.floyd.forward <> v:319 var
R60945:60951 VST.veric.base <> nullval def
R60917:60927 VST.veric.SeparationLogic <> typed_false def
R60938:60938 VST.floyd.forward <> v:319 var
R60930:60933 compcert.exportclight.Clightdefs <> tptr def
R60935:60935 VST.floyd.forward <> t:318 var
R60999:61014 Coq.Init.Logic <> I constr
R60999:61014 Coq.Init.Logic <> I constr
R61024:61030 VST.veric.base <> nullval def
R61103:61115 compcert.lib.Integers Int64 eq_spec thm
R61119:61128 compcert.lib.Integers Int64 zero def
R61148:61155 compcert.lib.Integers Int64 eq def
R61159:61168 compcert.lib.Integers Int64 zero def
R61204:61214 compcert.lib.Integers Int eq_spec thm
R61218:61225 compcert.lib.Integers Int zero def
R61245:61250 compcert.lib.Integers Int eq def
R61254:61261 compcert.lib.Integers Int zero def
R61103:61115 compcert.lib.Integers Int64 eq_spec thm
R61119:61128 compcert.lib.Integers Int64 zero def
R61204:61214 compcert.lib.Integers Int eq_spec thm
R61218:61225 compcert.lib.Integers Int zero def
R61245:61250 compcert.lib.Integers Int eq def
R61254:61261 compcert.lib.Integers Int zero def
prf 61292:61301 <> repr_neq_e
binder 61312:61312 <> i:320
binder 61314:61314 <> j:321
R61341:61344 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61346:61349 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R61345:61345 VST.floyd.forward <> i:320 var
R61350:61350 VST.floyd.forward <> j:321 var
R61327:61330 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R61317:61324 compcert.lib.Integers Int repr def
R61326:61326 VST.floyd.forward <> i:320 var
R61331:61338 compcert.lib.Integers Int repr def
R61340:61340 VST.floyd.forward <> j:321 var
prf 61407:61418 <> repr64_neq_e
binder 61429:61429 <> i:322
binder 61431:61431 <> j:323
R61462:61465 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61467:61470 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R61466:61466 VST.floyd.forward <> i:322 var
R61471:61471 VST.floyd.forward <> j:323 var
R61446:61449 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R61434:61443 compcert.lib.Integers Int64 repr def
R61445:61445 VST.floyd.forward <> i:322 var
R61450:61459 compcert.lib.Integers Int64 repr def
R61461:61461 VST.floyd.forward <> j:323 var
prf 61528:61542 <> Byte_signed_lem
binder 61554:61554 <> b:324
R61559:61559 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61577:61581 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61595:61595 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61573:61575 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61560:61570 compcert.lib.Integers Byte signed def
R61572:61572 VST.floyd.forward <> b:324 var
R61583:61585 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61582:61582 VST.floyd.forward <> b:324 var
R61586:61594 compcert.lib.Integers Byte zero def
R61619:61626 VST.msl.Axioms <> prop_ext prfax
R61619:61626 VST.msl.Axioms <> prop_ext prfax
R61655:61670 compcert.lib.Integers Byte repr_signed thm
R61655:61670 compcert.lib.Integers Byte repr_signed thm
R61655:61670 compcert.lib.Integers Byte repr_signed thm
R61711:61726 compcert.lib.Integers Byte signed_repr thm
R61711:61726 compcert.lib.Integers Byte signed_repr thm
R61711:61726 compcert.lib.Integers Byte signed_repr thm
R61773:61787 VST.floyd.forward <> Byte_signed_lem thm
prf 61820:61835 <> Byte_signed_lem'
binder 61847:61847 <> b:325
binder 61849:61849 <> c:326
R61854:61854 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61884:61888 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61894:61894 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61868:61870 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61855:61865 compcert.lib.Integers Byte signed def
R61867:61867 VST.floyd.forward <> b:325 var
R61871:61881 compcert.lib.Integers Byte signed def
R61883:61883 VST.floyd.forward <> c:326 var
R61890:61892 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61889:61889 VST.floyd.forward <> b:325 var
R61893:61893 VST.floyd.forward <> c:326 var
R61918:61925 VST.msl.Axioms <> prop_ext prfax
R61918:61925 VST.msl.Axioms <> prop_ext prfax
R61954:61969 compcert.lib.Integers Byte repr_signed thm
R61954:61969 compcert.lib.Integers Byte repr_signed thm
R61954:61969 compcert.lib.Integers Byte repr_signed thm
R61987:62002 compcert.lib.Integers Byte repr_signed thm
R61987:62002 compcert.lib.Integers Byte repr_signed thm
R61987:62002 compcert.lib.Integers Byte repr_signed thm
R62063:62078 VST.floyd.forward <> Byte_signed_lem' thm
prf 62111:62134 <> int_repr_byte_signed_eq0
binder 62146:62146 <> c:327
R62149:62149 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62185:62189 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62203:62203 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62174:62176 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62150:62157 compcert.lib.Integers Int repr def
R62160:62170 compcert.lib.Integers Byte signed def
R62172:62172 VST.floyd.forward <> c:327 var
R62177:62184 compcert.lib.Integers Int zero def
R62191:62193 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62190:62190 VST.floyd.forward <> c:327 var
R62194:62202 compcert.lib.Integers Byte zero def
R62227:62234 VST.msl.Axioms <> prop_ext prfax
R62227:62234 VST.msl.Axioms <> prop_ext prfax
R62257:62271 VST.floyd.functional_base <> repr_inj_signed thm
R62257:62271 VST.floyd.functional_base <> repr_inj_signed thm
R62304:62319 compcert.lib.Integers Byte repr_signed thm
R62304:62319 compcert.lib.Integers Byte repr_signed thm
R62304:62319 compcert.lib.Integers Byte repr_signed thm
R62387:62410 VST.floyd.forward <> int_repr_byte_signed_eq0 thm
prf 62443:62465 <> int_repr_byte_signed_eq
binder 62477:62477 <> c:328
binder 62479:62479 <> d:329
R62482:62482 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62534:62538 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62544:62544 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62507:62509 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62483:62490 compcert.lib.Integers Int repr def
R62493:62503 compcert.lib.Integers Byte signed def
R62505:62505 VST.floyd.forward <> c:328 var
R62510:62517 compcert.lib.Integers Int repr def
R62520:62530 compcert.lib.Integers Byte signed def
R62532:62532 VST.floyd.forward <> d:329 var
R62540:62542 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62539:62539 VST.floyd.forward <> c:328 var
R62543:62543 VST.floyd.forward <> d:329 var
R62568:62575 VST.msl.Axioms <> prop_ext prfax
R62568:62575 VST.msl.Axioms <> prop_ext prfax
R62598:62612 VST.floyd.functional_base <> repr_inj_signed thm
R62598:62612 VST.floyd.functional_base <> repr_inj_signed thm
R62645:62660 compcert.lib.Integers Byte repr_signed thm
R62645:62660 compcert.lib.Integers Byte repr_signed thm
R62645:62660 compcert.lib.Integers Byte repr_signed thm
R62679:62694 compcert.lib.Integers Byte repr_signed thm
R62679:62694 compcert.lib.Integers Byte repr_signed thm
R62679:62694 compcert.lib.Integers Byte repr_signed thm
R62762:62784 VST.floyd.forward <> int_repr_byte_signed_eq thm
prf 62817:62842 <> typed_true_negb_bool_val_p
binder 62854:62854 <> p:330
R62982:62990 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R62992:62994 Coq.Init.Logic <> ::type_scope:x_'='_x not
R62991:62991 VST.floyd.forward <> p:330 var
R62995:63001 VST.veric.base <> nullval def
R62861:62870 VST.veric.SeparationLogic <> typed_true def
R62884:62892 VST.veric.val_lemmas <> force_val def
R62904:62913 compcert.lib.Coqlib <> option_map def
R62967:62976 VST.veric.Cop2 <> bool_val_p def
R62978:62978 VST.floyd.forward <> p:330 var
R62924:62927 Coq.Init.Datatypes <> bool ind
binder 62920:62920 <> b:331
R62932:62942 compcert.common.Values Val of_bool def
R62945:62948 Coq.Init.Datatypes <> negb def
R62950:62950 VST.floyd.forward <> b:331 var
R62872:62875 compcert.exportclight.Clightdefs <> tint def
R63047:63057 compcert.x86_32.Archi <> ptr64 def
R63098:63110 compcert.lib.Integers Int64 eq_spec thm
R63114:63123 compcert.lib.Integers Int64 zero def
R63143:63150 compcert.lib.Integers Int64 eq def
R63154:63163 compcert.lib.Integers Int64 zero def
R63199:63209 compcert.lib.Integers Int eq_spec thm
R63213:63220 compcert.lib.Integers Int zero def
R63240:63245 compcert.lib.Integers Int eq def
R63249:63256 compcert.lib.Integers Int zero def
R63047:63057 compcert.x86_32.Archi <> ptr64 def
R63098:63110 compcert.lib.Integers Int64 eq_spec thm
R63114:63123 compcert.lib.Integers Int64 zero def
R63098:63110 compcert.lib.Integers Int64 eq_spec thm
R63114:63123 compcert.lib.Integers Int64 zero def
R63199:63209 compcert.lib.Integers Int eq_spec thm
R63213:63220 compcert.lib.Integers Int zero def
R63240:63245 compcert.lib.Integers Int eq def
R63249:63256 compcert.lib.Integers Int zero def
R63199:63209 compcert.lib.Integers Int eq_spec thm
R63213:63220 compcert.lib.Integers Int zero def
R63240:63245 compcert.lib.Integers Int eq def
R63249:63256 compcert.lib.Integers Int zero def
prf 63288:63314 <> typed_false_negb_bool_val_p
binder 63326:63326 <> p:332
R63353:63359 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63482:63490 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63491:63495 VST.veric.val_lemmas <> isptr def
R63497:63497 VST.floyd.forward <> p:332 var
R63360:63370 VST.veric.SeparationLogic <> typed_false def
R63384:63392 VST.veric.val_lemmas <> force_val def
R63404:63413 compcert.lib.Coqlib <> option_map def
R63467:63476 VST.veric.Cop2 <> bool_val_p def
R63478:63478 VST.floyd.forward <> p:332 var
R63424:63427 Coq.Init.Datatypes <> bool ind
binder 63420:63420 <> b:333
R63432:63442 compcert.common.Values Val of_bool def
R63445:63448 Coq.Init.Datatypes <> negb def
R63450:63450 VST.floyd.forward <> b:333 var
R63372:63375 compcert.exportclight.Clightdefs <> tint def
R63333:63350 VST.veric.val_lemmas <> is_pointer_or_null def
R63352:63352 VST.floyd.forward <> p:332 var
R63600:63610 compcert.x86_32.Archi <> ptr64 def
R63651:63663 compcert.lib.Integers Int64 eq_spec thm
R63667:63676 compcert.lib.Integers Int64 zero def
R63696:63703 compcert.lib.Integers Int64 eq def
R63707:63716 compcert.lib.Integers Int64 zero def
R63752:63762 compcert.lib.Integers Int eq_spec thm
R63766:63773 compcert.lib.Integers Int zero def
R63793:63798 compcert.lib.Integers Int eq def
R63802:63809 compcert.lib.Integers Int zero def
R63600:63610 compcert.x86_32.Archi <> ptr64 def
R63651:63663 compcert.lib.Integers Int64 eq_spec thm
R63667:63676 compcert.lib.Integers Int64 zero def
R63651:63663 compcert.lib.Integers Int64 eq_spec thm
R63667:63676 compcert.lib.Integers Int64 zero def
R63752:63762 compcert.lib.Integers Int eq_spec thm
R63766:63773 compcert.lib.Integers Int zero def
R63793:63798 compcert.lib.Integers Int eq def
R63802:63809 compcert.lib.Integers Int zero def
R63752:63762 compcert.lib.Integers Int eq_spec thm
R63766:63773 compcert.lib.Integers Int zero def
R63793:63798 compcert.lib.Integers Int eq def
R63802:63809 compcert.lib.Integers Int zero def
prf 63841:63868 <> typed_false_negb_bool_val_p'
R63884:63886 compcert.common.Values <> val ind
binder 63880:63880 <> p:334
R63990:63996 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63998:64001 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R63997:63997 VST.floyd.forward <> p:334 var
R64002:64008 VST.veric.base <> nullval def
R63891:63901 VST.veric.SeparationLogic <> typed_false def
R63913:63921 VST.veric.val_lemmas <> force_val def
R63924:63933 compcert.lib.Coqlib <> option_map def
R63975:63984 VST.veric.Cop2 <> bool_val_p def
R63986:63986 VST.floyd.forward <> p:334 var
R63944:63947 Coq.Init.Datatypes <> bool ind
binder 63940:63940 <> b:335
R63952:63962 compcert.common.Values Val of_bool def
R63965:63968 Coq.Init.Datatypes <> negb def
R63970:63970 VST.floyd.forward <> b:335 var
R63903:63906 compcert.exportclight.Clightdefs <> tint def
R64211:64228 VST.floyd.val_lemmas <> typed_true_of_bool thm
R64257:64275 VST.floyd.val_lemmas <> typed_false_of_bool thm
R64305:64318 VST.floyd.val_lemmas <> typed_true_ptr thm
R64348:64364 VST.floyd.forward <> typed_false_ptr_e thm
R64394:64419 VST.floyd.forward <> typed_true_negb_bool_val_p thm
R64449:64475 VST.floyd.forward <> typed_false_negb_bool_val_p thm
R64523:64550 VST.floyd.forward <> typed_false_negb_bool_val_p' thm
R64581:64587 VST.veric.base <> nullval def
R64612:64631 VST.floyd.val_lemmas <> typed_true_tint_Vint thm
R64662:64668 VST.veric.base <> nullval def
R64693:64713 VST.floyd.val_lemmas <> typed_false_tint_Vint thm
R64750:64767 VST.floyd.coqlib3 <> ptrofs_to_int_repr thm
R64830:64843 Coq.Bool.Bool <> negb_false_iff thm
R64797:64809 Coq.Bool.Bool <> negb_true_iff thm
R64865:64872 VST.veric.val_lemmas <> int_eq_e thm
R65099:65102 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R65099:65102 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R65178:65181 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R65178:65181 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R65268:65270 Coq.Init.Logic <> ::type_scope:x_'='_x not
R65258:65263 compcert.lib.Integers Int eq def
R65271:65275 Coq.Init.Datatypes <> false constr
R65268:65270 Coq.Init.Logic <> ::type_scope:x_'='_x not
R65258:65263 compcert.lib.Integers Int eq def
R65271:65275 Coq.Init.Datatypes <> false constr
R65286:65299 VST.floyd.forward_lemmas <> int_eq_false_e thm
R65226:65237 VST.floyd.forward <> repr64_neq_e thm
R65147:65156 VST.floyd.forward <> repr_neq_e thm
R65359:65373 VST.floyd.functional_base <> repr_inj_signed thm
R65429:65445 VST.floyd.functional_base <> repr_inj_unsigned thm
R65501:65516 VST.floyd.functional_base <> repr_inj_signed' thm
R65572:65589 VST.floyd.functional_base <> repr_inj_unsigned' thm
R65667:65676 VST.veric.SeparationLogic <> typed_true def
R65682:65690 VST.veric.val_lemmas <> force_val def
R65693:65702 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R65704:65706 compcert.lib.Integers <> Ceq constr
R65667:65676 VST.veric.SeparationLogic <> typed_true def
R65682:65690 VST.veric.val_lemmas <> force_val def
R65693:65702 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R65704:65706 compcert.lib.Integers <> Ceq constr
R65798:65807 VST.veric.SeparationLogic <> typed_true def
R65813:65821 VST.veric.val_lemmas <> force_val def
R65824:65833 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R65835:65837 compcert.lib.Integers <> Cne constr
R65798:65807 VST.veric.SeparationLogic <> typed_true def
R65813:65821 VST.veric.val_lemmas <> force_val def
R65824:65833 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R65835:65837 compcert.lib.Integers <> Cne constr
R65929:65939 VST.veric.SeparationLogic <> typed_false def
R65945:65953 VST.veric.val_lemmas <> force_val def
R65956:65965 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R65967:65969 compcert.lib.Integers <> Ceq constr
R65929:65939 VST.veric.SeparationLogic <> typed_false def
R65945:65953 VST.veric.val_lemmas <> force_val def
R65956:65965 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R65967:65969 compcert.lib.Integers <> Ceq constr
R66062:66072 VST.veric.SeparationLogic <> typed_false def
R66078:66086 VST.veric.val_lemmas <> force_val def
R66089:66098 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R66100:66102 compcert.lib.Integers <> Cne constr
R66062:66072 VST.veric.SeparationLogic <> typed_false def
R66078:66086 VST.veric.val_lemmas <> force_val def
R66089:66098 VST.veric.Clight_Cop2 <> sem_cmp_pp def
R66100:66102 compcert.lib.Integers <> Cne constr
R66155:66174 VST.floyd.forward <> typed_false_nullptr4 thm
R66022:66041 VST.floyd.forward <> typed_false_nullptr3 thm
R65890:65908 VST.floyd.forward <> typed_true_nullptr4 thm
R65759:65777 VST.floyd.forward <> typed_true_nullptr3 thm
R66212:66231 VST.floyd.forward <> typed_false_nullptr4 thm
R66262:66269 VST.floyd.functional_base <> ltu_repr thm
R66324:66337 VST.floyd.functional_base <> ltu_repr_false thm
R66392:66398 VST.floyd.forward <> ltu_inv thm
R66445:66457 VST.floyd.forward <> ltu_false_inv thm
R66504:66510 VST.floyd.forward <> lt_repr thm
R66565:66577 VST.floyd.forward <> lt_repr_false thm
R66632:66637 VST.floyd.forward <> lt_inv thm
R66684:66695 VST.floyd.forward <> lt_false_inv thm
R66760:66774 VST.floyd.forward <> Byte_signed_lem thm
R66778:66793 VST.floyd.forward <> Byte_signed_lem' thm
R66814:66837 VST.floyd.forward <> int_repr_byte_signed_eq0 thm
R66841:66864 VST.floyd.forward <> int_repr_byte_signed_eq0 thm
R66938:66940 Coq.Init.Datatypes <> fst def
R66942:66942 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66945:66945 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66948:66948 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66938:66940 Coq.Init.Datatypes <> fst def
R66942:66942 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66945:66945 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66948:66948 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66995:66997 Coq.Init.Datatypes <> snd def
R66999:66999 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67002:67002 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67005:67005 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66995:66997 Coq.Init.Datatypes <> snd def
R66999:66999 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67002:67002 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67005:67005 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67020:67022 Coq.Init.Datatypes <> snd def
R67024:67024 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67026:67026 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67028:67028 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67020:67022 Coq.Init.Datatypes <> snd def
R67024:67024 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67026:67026 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67028:67028 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66963:66965 Coq.Init.Datatypes <> fst def
R66967:66967 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66969:66969 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66971:66971 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66963:66965 Coq.Init.Datatypes <> fst def
R66967:66967 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66969:66969 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66971:66971 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
def 67055:67062 <> EXP_NAME
R67067:67068 Coq.Init.Datatypes <> tt constr
def 67082:67091 <> MARKED_ONE
binder 67094:67094 <> A:336
R67101:67101 VST.floyd.forward <> A:336 var
binder 67098:67098 <> z:337
R67107:67107 VST.floyd.forward <> z:337 var
def 67121:67128 <> EXP_UNIT
R67133:67134 Coq.Init.Datatypes <> tt constr
R67193:67200 VST.floyd.forward <> EXP_UNIT def
R67193:67200 VST.floyd.forward <> EXP_UNIT def
R67248:67255 VST.floyd.forward <> EXP_NAME def
R67248:67255 VST.floyd.forward <> EXP_NAME def
R67349:67358 VST.floyd.forward <> MARKED_ONE def
R67430:67437 VST.floyd.forward <> EXP_NAME def
R67430:67437 VST.floyd.forward <> EXP_NAME def
R67445:67452 VST.floyd.forward <> EXP_NAME def
R67445:67452 VST.floyd.forward <> EXP_NAME def
R67458:67467 VST.floyd.forward <> MARKED_ONE def
R67458:67467 VST.floyd.forward <> MARKED_ONE def
R67671:67678 VST.floyd.forward <> EXP_NAME def
R67671:67678 VST.floyd.forward <> EXP_NAME def
R67684:67693 VST.floyd.forward <> MARKED_ONE def
R67684:67693 VST.floyd.forward <> MARKED_ONE def
R67732:67741 VST.floyd.forward <> MARKED_ONE def
R67506:67515 VST.floyd.forward <> MARKED_ONE def
R67621:67630 VST.floyd.forward <> MARKED_ONE def
prf 67817:67827 <> trivial_exp
R67848:67851 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R67852:67856 VST.veric.mpred <> mpred def
R67841:67847 VST.veric.mpred <> environ ind
binder 67838:67838 <> P:338
R67861:67863 Coq.Init.Logic <> ::type_scope:x_'='_x not
R67860:67860 VST.floyd.forward <> P:338 var
R67864:67866 VST.msl.seplog <> exp meth
R67876:67879 Coq.Init.Datatypes <> unit ind
binder 67873:67873 <> x:339
R67884:67884 VST.floyd.forward <> P:338 var
R67909:67916 VST.msl.seplog <> pred_ext meth
R67909:67916 VST.msl.seplog <> pred_ext meth
R67926:67927 Coq.Init.Datatypes <> tt constr
R67926:67927 Coq.Init.Datatypes <> tt constr
def 67967:67975 <> nobreaksx
R67981:67989 compcert.cfrontend.Clight <> statement ind
binder 67978:67978 <> s:340
R67994:67997 Coq.Init.Datatypes <> bool ind
R68008:68008 VST.floyd.forward <> s:340 var
R68017:68022 compcert.cfrontend.Clight <> Sbreak constr
R68027:68031 Coq.Init.Datatypes <> false constr
R68035:68043 compcert.cfrontend.Clight <> Scontinue constr
R68048:68052 Coq.Init.Datatypes <> false constr
R68056:68064 compcert.cfrontend.Clight <> Ssequence constr
R68087:68090 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R68075:68083 VST.floyd.forward <> nobreaksx:341 def
R68091:68099 VST.floyd.forward <> nobreaksx:341 def
R68106:68116 compcert.cfrontend.Clight <> Sifthenelse constr
R68141:68144 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R68129:68137 VST.floyd.forward <> nobreaksx:341 def
R68145:68153 VST.floyd.forward <> nobreaksx:341 def
R68165:68168 Coq.Init.Datatypes <> true constr
R68593:68601 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R68648:68652 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R68659:68667 compcert.cfrontend.Clight <> Ssequence constr
R68648:68652 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R68659:68667 compcert.cfrontend.Clight <> Ssequence constr
R68699:68708 VST.floyd.client_lemmas <> abbreviate def
R68710:68719 VST.veric.tycontext <> ret_assert rec
R68699:68708 VST.floyd.client_lemmas <> abbreviate def
R68710:68719 VST.veric.tycontext <> ret_assert rec
R68728:68732 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R68739:68744 compcert.cfrontend.Clight <> Swhile def
R68728:68732 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R68739:68744 compcert.cfrontend.Clight <> Swhile def
R68889:68893 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R68900:68905 compcert.cfrontend.Clight <> Swhile def
R68889:68893 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R68900:68905 compcert.cfrontend.Clight <> Swhile def
R69036:69049 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R69003:69016 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R68867:68880 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R69088:69089 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R69090:69094 VST.veric.mpred <> mpred def
R69081:69087 VST.veric.mpred <> environ ind
R69203:69211 VST.floyd.canon <> semax_pre thm
R69300:69304 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69309:69311 VST.msl.seplog <> exp meth
R69300:69304 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69309:69311 VST.msl.seplog <> exp meth
R69342:69346 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69351:69355 VST.floyd.canon <> PROPx def
R69342:69346 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69351:69355 VST.floyd.canon <> PROPx def
R69388:69392 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69388:69392 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69501:69505 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69510:69512 VST.msl.seplog <> exp meth
binder 69519:69520 <> a1:343
R69501:69505 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69510:69512 VST.msl.seplog <> exp meth
binder 69519:69520 <> a1:344
R69603:69607 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69612:69616 VST.floyd.canon <> PROPx def
R69603:69607 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69612:69616 VST.floyd.canon <> PROPx def
R69679:69686 VST.floyd.forward <> EXP_UNIT def
R69717:69727 VST.floyd.forward <> trivial_exp thm
R69730:69734 VST.floyd.canon <> PROPx def
R69581:69588 VST.floyd.forward <> EXP_NAME def
R69788:69792 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69797:69799 VST.msl.seplog <> exp meth
binder 69806:69807 <> a1:345
R69813:69815 VST.msl.seplog <> exp meth
binder 69822:69823 <> a2:346
R69788:69792 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69797:69799 VST.msl.seplog <> exp meth
binder 69806:69807 <> a1:347
R69813:69815 VST.msl.seplog <> exp meth
binder 69822:69823 <> a2:348
R69883:69890 VST.floyd.forward <> EXP_NAME def
R69912:69922 VST.msl.log_normalize <> exp_uncurry thm
R69948:69956 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R69985:69989 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R70004:70009 compcert.cfrontend.Clight <> Swhile def
R69985:69989 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R70004:70009 compcert.cfrontend.Clight <> Swhile def
R70045:70053 VST.floyd.forward <> nobreaksx def
R70058:70061 Coq.Init.Datatypes <> true constr
R70397:70401 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R70407:70409 VST.msl.seplog <> exp meth
R70397:70401 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R70407:70409 VST.msl.seplog <> exp meth
R70439:70453 VST.floyd.forward_lemmas <> semax_while_3g1 thm
R71973:71990 VST.floyd.canon <> semax_extract_PROP thm
R72053:72070 VST.floyd.canon <> semax_extract_PROP thm
R72143:72160 VST.floyd.base <> extract_exists_pre def
R72223:72240 VST.floyd.canon <> semax_extract_PROP thm
R72303:72320 VST.floyd.canon <> semax_extract_PROP thm
ind 72457:72525 <> Type_of_invariant_in_forward_for_should_be_environ_arrow_mpred_but_is
R72533:72536 Coq.Init.Logic <> ::type_scope:x_'->'_x not
ind 72557:72603 <> Type_of_bound_in_forward_for_should_be_Z_but_is
R72611:72614 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R72692:72696 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R72692:72696 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R72751:72759 compcert.cfrontend.Clight <> Ssequence constr
R72764:72768 compcert.cfrontend.Clight <> Sloop constr
R72773:72776 compcert.cfrontend.Clight <> Sset constr
R72788:72791 Coq.Init.Datatypes <> Some constr
R72794:72799 compcert.cfrontend.Clight <> typeof def
R72811:72814 Coq.Init.Datatypes <> None constr
R72973:72976 Coq.Init.Datatypes <> None constr
R72973:72976 Coq.Init.Datatypes <> None constr
R72998:73001 Coq.Init.Datatypes <> Some constr
R72998:73001 Coq.Init.Datatypes <> Some constr
R73030:73042 VST.veric.expr <> is_int32_type def
R73047:73050 Coq.Init.Datatypes <> true constr
R73355:73359 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R73366:73374 compcert.cfrontend.Clight <> Ssequence constr
R73377:73385 compcert.cfrontend.Clight <> Ssequence constr
R73388:73396 compcert.cfrontend.Clight <> Ssequence constr
R73355:73359 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R73366:73374 compcert.cfrontend.Clight <> Ssequence constr
R73377:73385 compcert.cfrontend.Clight <> Ssequence constr
R73388:73396 compcert.cfrontend.Clight <> Ssequence constr
R73429:73437 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R73489:73493 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R73500:73508 compcert.cfrontend.Clight <> Ssequence constr
R73511:73519 compcert.cfrontend.Clight <> Ssequence constr
R73522:73525 compcert.cfrontend.Clight <> Sfor def
R73489:73493 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R73500:73508 compcert.cfrontend.Clight <> Ssequence constr
R73511:73519 compcert.cfrontend.Clight <> Ssequence constr
R73522:73525 compcert.cfrontend.Clight <> Sfor def
R73562:73570 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R73659:73659 Coq.Numbers.BinNums <> Z ind
R73802:73803 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73804:73808 VST.veric.mpred <> mpred def
R73795:73801 VST.veric.mpred <> environ ind
R73945:73949 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R73956:73959 compcert.cfrontend.Clight <> Sfor def
R73945:73949 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R73956:73959 compcert.cfrontend.Clight <> Sfor def
R74018:74022 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R74029:74037 compcert.cfrontend.Clight <> Ssequence constr
R74042:74046 compcert.cfrontend.Clight <> Sloop constr
R74018:74022 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R74029:74037 compcert.cfrontend.Clight <> Ssequence constr
R74042:74046 compcert.cfrontend.Clight <> Sloop constr
R74102:74106 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R74113:74121 compcert.cfrontend.Clight <> Ssequence constr
R74102:74106 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R74113:74121 compcert.cfrontend.Clight <> Ssequence constr
R74235:74244 VST.floyd.client_lemmas <> abbreviate def
R74249:74253 compcert.cfrontend.Clight <> Sloop constr
binder 74217:74229 <> MORE_COMMANDS:354
R74235:74244 VST.floyd.client_lemmas <> abbreviate def
R74249:74253 compcert.cfrontend.Clight <> Sloop constr
binder 74217:74229 <> MORE_COMMANDS:355
R74322:74335 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R74078:74091 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R73994:74007 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R74513:74521 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R74554:74566 VST.floyd.forward_lemmas <> semax_for_3g1 thm
R74674:74680 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R74687:74688 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R74693:74697 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R74698:74702 VST.veric.SeparationLogic <> local def
R74705:74709 VST.veric.lift <> liftx def
R74719:74727 VST.veric.expr <> eval_expr def
R74712:74713 Coq.Init.Logic <> eq ind
R74674:74680 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R74687:74688 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R74693:74697 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R74698:74702 VST.veric.SeparationLogic <> local def
R74705:74709 VST.veric.lift <> liftx def
R74719:74727 VST.veric.expr <> eval_expr def
R74712:74713 Coq.Init.Logic <> eq ind
R74816:74818 compcert.common.Values <> val ind
R74816:74818 compcert.common.Values <> val ind
R74825:74831 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R74833:74835 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R74837:74841 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R74825:74831 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R74833:74835 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R74837:74841 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R74942:74959 VST.floyd.canon <> semax_extract_PROP thm
R75000:75017 VST.floyd.canon <> semax_extract_PROP thm
R75123:75140 VST.floyd.canon <> semax_extract_PROP thm
R75181:75198 VST.floyd.canon <> semax_extract_PROP thm
R75305:75324 VST.floyd.client_lemmas <> derives_extract_PROP thm
R75365:75384 VST.floyd.client_lemmas <> derives_extract_PROP thm
R75489:75497 VST.veric.tycontext <> RA_normal proj
R75500:75511 VST.veric.SeparationLogic <> overridePost def
R75489:75497 VST.veric.tycontext <> RA_normal proj
R75500:75511 VST.veric.SeparationLogic <> overridePost def
R75535:75543 VST.veric.tycontext <> RA_normal proj
R75546:75557 VST.veric.SeparationLogic <> overridePost def
R75535:75543 VST.veric.tycontext <> RA_normal proj
R75546:75557 VST.veric.SeparationLogic <> overridePost def
R75645:75662 VST.floyd.canon <> semax_extract_PROP thm
def 75702:75710 <> no_breaks
R75716:75724 compcert.cfrontend.Clight <> statement ind
binder 75713:75713 <> s:356
R75729:75732 Coq.Init.Datatypes <> bool ind
R75744:75744 VST.floyd.forward <> s:356 var
R75754:75759 compcert.cfrontend.Clight <> Sbreak constr
R75764:75768 Coq.Init.Datatypes <> false constr
R75773:75781 compcert.cfrontend.Clight <> Ssequence constr
R75790:75793 Coq.Init.Datatypes <> andb def
R75810:75818 VST.floyd.forward <> no_breaks:357 def
R75796:75804 VST.floyd.forward <> no_breaks:357 def
R75826:75836 compcert.cfrontend.Clight <> Sifthenelse constr
R75847:75850 Coq.Init.Datatypes <> andb def
R75867:75875 VST.floyd.forward <> no_breaks:357 def
R75853:75861 VST.floyd.forward <> no_breaks:357 def
R75883:75887 compcert.cfrontend.Clight <> Sloop constr
R75896:75899 Coq.Init.Datatypes <> true constr
R75951:75954 Coq.Init.Datatypes <> true constr
R76026:76035 VST.floyd.client_lemmas <> abbreviate def
R76037:76046 VST.veric.tycontext <> ret_assert rec
R76026:76035 VST.floyd.client_lemmas <> abbreviate def
R76037:76046 VST.veric.tycontext <> ret_assert rec
R76053:76057 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R76053:76057 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R76120:76129 VST.floyd.client_lemmas <> abbreviate def
R76181:76185 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R76192:76196 compcert.cfrontend.Clight <> Sloop constr
R76199:76207 compcert.cfrontend.Clight <> Ssequence constr
R76210:76220 compcert.cfrontend.Clight <> Sifthenelse constr
R76230:76235 compcert.cfrontend.Clight <> Sbreak constr
R76224:76228 compcert.cfrontend.Clight <> Sskip constr
R76181:76185 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R76192:76196 compcert.cfrontend.Clight <> Sloop constr
R76199:76207 compcert.cfrontend.Clight <> Ssequence constr
R76210:76220 compcert.cfrontend.Clight <> Sifthenelse constr
R76230:76235 compcert.cfrontend.Clight <> Sbreak constr
R76224:76228 compcert.cfrontend.Clight <> Sskip constr
R76270:76278 VST.floyd.forward <> no_breaks def
R76286:76289 Coq.Init.Datatypes <> true constr
R76471:76483 VST.floyd.forward_lemmas <> semax_for_3g2 thm
R76592:76598 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R76605:76606 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R76611:76615 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R76616:76620 VST.veric.SeparationLogic <> local def
R76623:76627 VST.veric.lift <> liftx def
R76637:76645 VST.veric.expr <> eval_expr def
R76630:76631 Coq.Init.Logic <> eq ind
R76592:76598 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R76605:76606 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R76611:76615 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R76616:76620 VST.veric.SeparationLogic <> local def
R76623:76627 VST.veric.lift <> liftx def
R76637:76645 VST.veric.expr <> eval_expr def
R76630:76631 Coq.Init.Logic <> eq ind
R76734:76736 compcert.common.Values <> val ind
R76734:76736 compcert.common.Values <> val ind
R76743:76749 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R76751:76753 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R76755:76759 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R76743:76749 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R76751:76753 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R76755:76759 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R76861:76878 VST.floyd.canon <> semax_extract_PROP thm
R76919:76936 VST.floyd.canon <> semax_extract_PROP thm
R77042:77059 VST.floyd.canon <> semax_extract_PROP thm
R77100:77117 VST.floyd.canon <> semax_extract_PROP thm
prf 77195:77204 <> seq_assoc1
R77226:77235 VST.veric.juicy_extspec <> OracleKind class
binder 77219:77223 <> Espec:359
R77244:77252 VST.veric.mpred <> compspecs class
binder 77239:77240 <> CS:360
R77264:77272 VST.veric.seplog <> tycontext ind
binder 77256:77260 <> Delta:361
R77287:77290 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R77291:77295 VST.veric.mpred <> mpred def
R77280:77286 VST.veric.mpred <> environ ind
binder 77276:77276 <> P:362
R77319:77327 compcert.cfrontend.Clight <> statement ind
binder 77308:77309 <> s1:363
binder 77311:77312 <> s2:364
binder 77314:77315 <> s3:365
R77335:77344 VST.veric.tycontext <> ret_assert rec
binder 77331:77331 <> R:366
R77403:77413 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R77414:77418 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R77461:77461 VST.floyd.forward <> R:366 var
R77429:77437 compcert.cfrontend.Clight <> Ssequence constr
R77457:77458 VST.floyd.forward <> s3:365 var
R77440:77448 compcert.cfrontend.Clight <> Ssequence constr
R77453:77454 VST.floyd.forward <> s2:364 var
R77450:77451 VST.floyd.forward <> s1:363 var
R77426:77426 VST.floyd.forward <> P:362 var
R77420:77424 VST.floyd.forward <> Delta:361 var
R77355:77359 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R77402:77402 VST.floyd.forward <> R:366 var
R77370:77378 compcert.cfrontend.Clight <> Ssequence constr
R77384:77392 compcert.cfrontend.Clight <> Ssequence constr
R77397:77398 VST.floyd.forward <> s3:365 var
R77394:77395 VST.floyd.forward <> s2:364 var
R77380:77381 VST.floyd.forward <> s1:363 var
R77367:77367 VST.floyd.forward <> P:362 var
R77361:77365 VST.floyd.forward <> Delta:361 var
R77488:77496 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R77488:77496 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
prf 77517:77533 <> semax_loop_noincr
R77554:77563 VST.veric.juicy_extspec <> OracleKind class
binder 77547:77551 <> Espec:367
R77570:77578 VST.veric.mpred <> compspecs class
binder 77566:77567 <> CS:368
binder 77590:77594 <> Delta:369
binder 77596:77596 <> Q:370
binder 77598:77601 <> body:371
binder 77603:77603 <> R:372
R77663:77671 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R77673:77677 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R77715:77715 VST.floyd.forward <> R:372 var
R77697:77701 compcert.cfrontend.Clight <> Sloop constr
R77708:77712 compcert.cfrontend.Clight <> Sskip constr
R77703:77706 VST.floyd.forward <> body:371 var
R77694:77694 VST.floyd.forward <> Q:370 var
R77688:77692 VST.floyd.forward <> Delta:369 var
R77682:77686 VST.floyd.forward <> Espec:367 var
R77679:77680 VST.floyd.forward <> CS:368 var
R77612:77616 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R77642:77657 VST.veric.SeparationLogic <> loop1_ret_assert def
R77661:77661 VST.floyd.forward <> R:372 var
R77659:77659 VST.floyd.forward <> Q:370 var
R77636:77639 VST.floyd.forward <> body:371 var
R77634:77634 VST.floyd.forward <> Q:370 var
R77627:77631 VST.floyd.forward <> Delta:369 var
R77621:77625 VST.floyd.forward <> Espec:367 var
R77618:77619 VST.floyd.forward <> CS:368 var
R77739:77748 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_loop prfax
R77739:77748 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_loop prfax
R77771:77788 VST.floyd.canon <> semax_post_flipped thm
R77771:77788 VST.floyd.canon <> semax_post_flipped thm
R77797:77806 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_skip prfax
R77797:77806 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_skip prfax
R77840:77849 VST.msl.seplog <> andp_left2 meth
R77874:77885 VST.msl.seplog <> derives_refl meth
R77894:77900 VST.msl.log_normalize <> FF_left thm
R77840:77849 VST.msl.seplog <> andp_left2 meth
R77874:77885 VST.msl.seplog <> derives_refl meth
R77840:77849 VST.msl.seplog <> andp_left2 meth
R77874:77885 VST.msl.seplog <> derives_refl meth
R77894:77900 VST.msl.log_normalize <> FF_left thm
R77840:77849 VST.msl.seplog <> andp_left2 meth
R77874:77885 VST.msl.seplog <> derives_refl meth
R77840:77849 VST.msl.seplog <> andp_left2 meth
R77874:77885 VST.msl.seplog <> derives_refl meth
R77894:77900 VST.msl.log_normalize <> FF_left thm
prf 77916:77926 <> semax_post1
binder 77936:77937 <> R':373
binder 77939:77943 <> Espec:374
R77950:77958 VST.veric.mpred <> compspecs class
binder 77946:77947 <> cs:375
binder 77961:77965 <> Delta:376
binder 77967:77967 <> R:377
binder 77969:77969 <> P:378
binder 77971:77971 <> c:379
R78017:78026 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R78072:78081 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R78083:78087 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R78108:78108 VST.floyd.forward <> R:377 var
R78106:78106 VST.floyd.forward <> c:379 var
R78104:78104 VST.floyd.forward <> P:378 var
R78098:78102 VST.floyd.forward <> Delta:376 var
R78092:78096 VST.floyd.forward <> Espec:374 var
R78089:78090 VST.floyd.forward <> cs:375 var
R78028:78032 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R78054:78065 VST.veric.SeparationLogic <> overridePost def
R78070:78070 VST.floyd.forward <> R:377 var
R78067:78068 VST.floyd.forward <> R':373 var
R78051:78051 VST.floyd.forward <> c:379 var
R78049:78049 VST.floyd.forward <> P:378 var
R78043:78047 VST.floyd.forward <> Delta:376 var
R78037:78041 VST.floyd.forward <> Espec:374 var
R78034:78035 VST.floyd.forward <> cs:375 var
R77985:77991 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R77997:77998 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78001:78005 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R77992:77996 VST.floyd.forward <> Delta:376 var
R77999:78000 VST.floyd.forward <> R':373 var
R78006:78014 VST.veric.tycontext <> RA_normal proj
R78016:78016 VST.floyd.forward <> R:377 var
R78133:78142 VST.floyd.canon <> semax_post thm
R78133:78142 VST.floyd.canon <> semax_post thm
R78213:78222 VST.msl.seplog <> andp_left2 meth
R78231:78242 VST.msl.seplog <> derives_refl meth
R78213:78222 VST.msl.seplog <> andp_left2 meth
R78213:78222 VST.msl.seplog <> andp_left2 meth
R78213:78222 VST.msl.seplog <> andp_left2 meth
R78231:78242 VST.msl.seplog <> derives_refl meth
R78231:78242 VST.msl.seplog <> derives_refl meth
R78231:78242 VST.msl.seplog <> derives_refl meth
prf 78257:78275 <> semax_post1_flipped
binder 78285:78286 <> R':380
binder 78288:78292 <> Espec:381
R78299:78307 VST.veric.mpred <> compspecs class
binder 78295:78296 <> cs:382
binder 78310:78314 <> Delta:383
binder 78316:78316 <> R:384
binder 78318:78318 <> P:385
binder 78320:78320 <> c:386
R78374:78386 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R78419:78428 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R78430:78434 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R78455:78455 VST.floyd.forward <> R:384 var
R78453:78453 VST.floyd.forward <> c:386 var
R78451:78451 VST.floyd.forward <> P:385 var
R78445:78449 VST.floyd.forward <> Delta:383 var
R78439:78443 VST.floyd.forward <> Espec:381 var
R78436:78437 VST.floyd.forward <> cs:382 var
R78387:78393 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78399:78400 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78403:78407 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R78394:78398 VST.floyd.forward <> Delta:383 var
R78401:78402 VST.floyd.forward <> R':380 var
R78408:78416 VST.veric.tycontext <> RA_normal proj
R78418:78418 VST.floyd.forward <> R:384 var
R78330:78334 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R78356:78367 VST.veric.SeparationLogic <> overridePost def
R78372:78372 VST.floyd.forward <> R:384 var
R78369:78370 VST.floyd.forward <> R':380 var
R78353:78353 VST.floyd.forward <> c:386 var
R78351:78351 VST.floyd.forward <> P:385 var
R78345:78349 VST.floyd.forward <> Delta:383 var
R78339:78343 VST.floyd.forward <> Espec:381 var
R78336:78337 VST.floyd.forward <> cs:382 var
R78479:78489 VST.floyd.forward <> semax_post1 thm
R78479:78489 VST.floyd.forward <> semax_post1 thm
prf 78518:78532 <> semax_skip_seq1
R78552:78561 VST.veric.juicy_extspec <> OracleKind class
binder 78545:78549 <> Espec:387
R78569:78577 VST.veric.mpred <> compspecs class
binder 78565:78566 <> CS:388
binder 78580:78584 <> Delta:389
binder 78586:78586 <> P:390
binder 78588:78589 <> s1:391
binder 78591:78592 <> s2:392
binder 78594:78594 <> Q:393
R78633:78639 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R78640:78644 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R78690:78690 VST.floyd.forward <> Q:393 var
R78655:78663 compcert.cfrontend.Clight <> Ssequence constr
R78686:78687 VST.floyd.forward <> s2:392 var
R78666:78674 compcert.cfrontend.Clight <> Ssequence constr
R78682:78683 VST.floyd.forward <> s1:391 var
R78676:78680 compcert.cfrontend.Clight <> Sskip constr
R78652:78652 VST.floyd.forward <> P:390 var
R78646:78650 VST.floyd.forward <> Delta:389 var
R78600:78604 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R78632:78632 VST.floyd.forward <> Q:393 var
R78615:78623 compcert.cfrontend.Clight <> Ssequence constr
R78628:78629 VST.floyd.forward <> s2:392 var
R78625:78626 VST.floyd.forward <> s1:391 var
R78612:78612 VST.floyd.forward <> P:390 var
R78606:78610 VST.floyd.forward <> Delta:389 var
R78714:78723 VST.floyd.forward <> seq_assoc1 thm
R78714:78723 VST.floyd.forward <> seq_assoc1 thm
R78735:78748 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_skip_seq prfax
R78735:78748 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_skip_seq prfax
R78800:78813 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_skip_seq prfax
R78827:78841 VST.floyd.forward <> semax_skip_seq1 thm
R78910:78914 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R78921:78925 compcert.cfrontend.Clight <> Sloop constr
R78929:78933 compcert.cfrontend.Clight <> Sskip constr
R78910:78914 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R78921:78925 compcert.cfrontend.Clight <> Sloop constr
R78929:78933 compcert.cfrontend.Clight <> Sskip constr
R79128:79132 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R79139:79143 compcert.cfrontend.Clight <> Sloop constr
R79128:79132 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R79139:79143 compcert.cfrontend.Clight <> Sloop constr
R79161:79170 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_loop prfax
R79059:79068 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_loop prfax
R78993:79009 VST.floyd.forward <> semax_loop_noincr thm
R79294:79298 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R79305:79308 compcert.cfrontend.Clight <> Sfor def
R79294:79298 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R79305:79308 compcert.cfrontend.Clight <> Sfor def
R79408:79412 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R79419:79423 compcert.cfrontend.Clight <> Sloop constr
R79408:79412 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R79419:79423 compcert.cfrontend.Clight <> Sloop constr
R79502:79506 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R79513:79518 compcert.cfrontend.Clight <> Swhile def
R79502:79506 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R79513:79518 compcert.cfrontend.Clight <> Swhile def
R79575:79580 compcert.cfrontend.Clight <> Swhile def
R79623:79631 VST.floyd.canon <> semax_pre thm
R79441:79449 VST.floyd.canon <> semax_pre thm
R79330:79339 VST.floyd.canon <> semax_seq' thm
R79823:79832 VST.floyd.forward <> seq_assoc1 thm
R79852:79865 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R79893:79897 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R79904:79912 compcert.cfrontend.Clight <> Ssequence constr
R79915:79919 compcert.cfrontend.Clight <> Sloop constr
R79893:79897 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R79904:79912 compcert.cfrontend.Clight <> Ssequence constr
R79915:79919 compcert.cfrontend.Clight <> Sloop constr
R80030:80034 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R80041:80049 compcert.cfrontend.Clight <> Ssequence constr
R80052:80055 compcert.cfrontend.Clight <> Sfor def
R80030:80034 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R80041:80049 compcert.cfrontend.Clight <> Ssequence constr
R80052:80055 compcert.cfrontend.Clight <> Sfor def
R80170:80174 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R80181:80189 compcert.cfrontend.Clight <> Ssequence constr
R80192:80197 compcert.cfrontend.Clight <> Swhile def
R80170:80174 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R80181:80189 compcert.cfrontend.Clight <> Ssequence constr
R80192:80197 compcert.cfrontend.Clight <> Swhile def
R80308:80312 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R80308:80312 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R80427:80445 VST.floyd.forward <> semax_post1_flipped thm
R80229:80237 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R80091:80099 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R79951:79959 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R80569:80577 compcert.cfrontend.Clight <> Ssequence constr
R80569:80577 compcert.cfrontend.Clight <> Ssequence constr
R80606:80610 compcert.cfrontend.Clight <> Sloop constr
R80606:80610 compcert.cfrontend.Clight <> Sloop constr
R80687:80691 compcert.cfrontend.Clight <> Sloop constr
R80687:80691 compcert.cfrontend.Clight <> Sloop constr
R80805:80808 compcert.cfrontend.Clight <> Sfor def
R80805:80808 compcert.cfrontend.Clight <> Sfor def
R80889:80892 compcert.cfrontend.Clight <> Sfor def
R80889:80892 compcert.cfrontend.Clight <> Sfor def
R80867:80871 compcert.cfrontend.Clight <> Sskip constr
R80867:80871 compcert.cfrontend.Clight <> Sskip constr
R80665:80669 compcert.cfrontend.Clight <> Sskip constr
R80665:80669 compcert.cfrontend.Clight <> Sskip constr
R81196:81209 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R81239:81243 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R81250:81258 compcert.cfrontend.Clight <> Ssequence constr
R81261:81265 compcert.cfrontend.Clight <> Sloop constr
R81239:81243 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R81250:81258 compcert.cfrontend.Clight <> Ssequence constr
R81261:81265 compcert.cfrontend.Clight <> Sloop constr
R81464:81468 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R81475:81483 compcert.cfrontend.Clight <> Ssequence constr
R81486:81489 compcert.cfrontend.Clight <> Sfor def
R81464:81468 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R81475:81483 compcert.cfrontend.Clight <> Ssequence constr
R81486:81489 compcert.cfrontend.Clight <> Sfor def
R81695:81704 VST.floyd.client_lemmas <> abbreviate def
R81706:81715 VST.veric.tycontext <> ret_assert rec
R81695:81704 VST.floyd.client_lemmas <> abbreviate def
R81706:81715 VST.veric.tycontext <> ret_assert rec
R81727:81731 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R81727:81731 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R82128:82132 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R82128:82132 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
def 82551:82559 <> quickflow
R82565:82573 compcert.cfrontend.Clight <> statement ind
binder 82562:82562 <> c:394
R82589:82590 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R82591:82594 Coq.Init.Datatypes <> bool ind
R82581:82588 VST.veric.tycontext <> exitkind ind
binder 82577:82578 <> ok:395
R82599:82602 Coq.Init.Datatypes <> bool ind
R82614:82614 VST.floyd.forward <> c:394 var
R82624:82630 compcert.cfrontend.Clight <> Sreturn constr
R82637:82638 VST.floyd.forward <> ok:395 var
R82640:82648 VST.veric.tycontext <> EK_return constr
R82653:82661 compcert.cfrontend.Clight <> Ssequence constr
R82677:82685 VST.floyd.forward <> quickflow:396 def
binder 82695:82696 <> ek:398
R82707:82708 VST.floyd.forward <> ek:398 var
R82743:82751 VST.veric.tycontext <> EK_normal constr
R82756:82764 VST.floyd.forward <> quickflow:396 def
R82769:82770 VST.floyd.forward <> ok:395 var
R82805:82806 VST.floyd.forward <> ok:395 var
R82808:82809 VST.floyd.forward <> ek:398 var
R82845:82855 compcert.cfrontend.Clight <> Sifthenelse constr
R82873:82876 Coq.Init.Datatypes <> andb def
R82897:82905 VST.floyd.forward <> quickflow:396 def
R82910:82911 VST.floyd.forward <> ok:395 var
R82879:82887 VST.floyd.forward <> quickflow:396 def
R82892:82893 VST.floyd.forward <> ok:395 var
R82917:82921 compcert.cfrontend.Clight <> Sloop constr
R82941:82944 Coq.Init.Datatypes <> andb def
R83251:83259 VST.floyd.forward <> quickflow:396 def
binder 83271:83272 <> ek:400
R83283:83284 VST.floyd.forward <> ek:400 var
R83323:83331 VST.veric.tycontext <> EK_normal constr
R83336:83339 Coq.Init.Datatypes <> true constr
R83373:83380 VST.veric.tycontext <> EK_break constr
R83385:83386 VST.floyd.forward <> ok:395 var
R83388:83396 VST.veric.tycontext <> EK_normal constr
R83430:83440 VST.veric.tycontext <> EK_continue constr
R83445:83449 Coq.Init.Datatypes <> false constr
R83483:83491 VST.veric.tycontext <> EK_return constr
R83496:83497 VST.floyd.forward <> ok:395 var
R83499:83507 VST.veric.tycontext <> EK_return constr
R82947:82955 VST.floyd.forward <> quickflow:396 def
binder 82967:82968 <> ek:402
R82979:82980 VST.floyd.forward <> ek:402 var
R83019:83027 VST.veric.tycontext <> EK_normal constr
R83032:83035 Coq.Init.Datatypes <> true constr
R83069:83076 VST.veric.tycontext <> EK_break constr
R83081:83082 VST.floyd.forward <> ok:395 var
R83084:83092 VST.veric.tycontext <> EK_normal constr
R83126:83136 VST.veric.tycontext <> EK_continue constr
R83141:83144 Coq.Init.Datatypes <> true constr
R83178:83186 VST.veric.tycontext <> EK_return constr
R83191:83192 VST.floyd.forward <> ok:395 var
R83194:83202 VST.veric.tycontext <> EK_return constr
R83548:83553 compcert.cfrontend.Clight <> Sbreak constr
R83558:83559 VST.floyd.forward <> ok:395 var
R83561:83568 VST.veric.tycontext <> EK_break constr
R83573:83581 compcert.cfrontend.Clight <> Scontinue constr
R83586:83587 VST.floyd.forward <> ok:395 var
R83589:83599 VST.veric.tycontext <> EK_continue constr
R83604:83610 compcert.cfrontend.Clight <> Sswitch constr
R83619:83623 Coq.Init.Datatypes <> false constr
R83669:83674 compcert.cfrontend.Clight <> Slabel constr
R83683:83691 VST.floyd.forward <> quickflow:396 def
R83695:83696 VST.floyd.forward <> ok:395 var
R83693:83693 VST.floyd.forward <> c:394 var
R83701:83705 compcert.cfrontend.Clight <> Sgoto constr
R83712:83716 Coq.Init.Datatypes <> false constr
R83726:83727 VST.floyd.forward <> ok:395 var
R83729:83737 VST.veric.tycontext <> EK_normal constr
R83825:83833 compcert.cfrontend.Clight <> Ssequence constr
R83825:83833 compcert.cfrontend.Clight <> Ssequence constr
R83865:83869 compcert.cfrontend.Clight <> Sloop constr
R83865:83869 compcert.cfrontend.Clight <> Sloop constr
R83889:83898 VST.veric.SeparationLogic <> nocontinue def
R83906:83909 Coq.Init.Datatypes <> true constr
R84034:84054 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_loop_nocontinue prfax
R84155:84159 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R84166:84169 compcert.cfrontend.Clight <> Sfor def
R84155:84159 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R84166:84169 compcert.cfrontend.Clight <> Sfor def
R84269:84273 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R84280:84284 compcert.cfrontend.Clight <> Sloop constr
R84269:84273 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R84280:84284 compcert.cfrontend.Clight <> Sloop constr
R84363:84367 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R84374:84379 compcert.cfrontend.Clight <> Swhile def
R84363:84367 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R84374:84379 compcert.cfrontend.Clight <> Swhile def
R84436:84441 compcert.cfrontend.Clight <> Swhile def
R84484:84492 VST.floyd.canon <> semax_pre thm
R84302:84310 VST.floyd.canon <> semax_pre thm
R84191:84200 VST.floyd.canon <> semax_seq' thm
R84608:84617 VST.floyd.forward <> seq_assoc1 thm
R84638:84651 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R84679:84683 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R84690:84698 compcert.cfrontend.Clight <> Ssequence constr
R84679:84683 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R84690:84698 compcert.cfrontend.Clight <> Ssequence constr
R84807:84811 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R84807:84811 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R84925:84943 VST.floyd.forward <> semax_post1_flipped thm
R84727:84735 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R85058:85071 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R85103:85107 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R85114:85122 compcert.cfrontend.Clight <> Ssequence constr
R85125:85130 compcert.cfrontend.Clight <> Swhile def
R85103:85107 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R85114:85122 compcert.cfrontend.Clight <> Ssequence constr
R85125:85130 compcert.cfrontend.Clight <> Swhile def
R85342:85346 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R85353:85361 compcert.cfrontend.Clight <> Ssequence constr
R85364:85368 compcert.cfrontend.Clight <> Sloop constr
R85342:85346 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R85353:85361 compcert.cfrontend.Clight <> Ssequence constr
R85364:85368 compcert.cfrontend.Clight <> Sloop constr
R85567:85571 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R85578:85586 compcert.cfrontend.Clight <> Ssequence constr
R85589:85592 compcert.cfrontend.Clight <> Sfor def
R85567:85571 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R85578:85586 compcert.cfrontend.Clight <> Ssequence constr
R85589:85592 compcert.cfrontend.Clight <> Sfor def
R85798:85807 VST.floyd.client_lemmas <> abbreviate def
R85809:85818 VST.veric.tycontext <> ret_assert rec
R85798:85807 VST.floyd.client_lemmas <> abbreviate def
R85809:85818 VST.veric.tycontext <> ret_assert rec
R85830:85834 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R85830:85834 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R86218:86222 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R86218:86222 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R85170:85179 VST.veric.SeparationLogic <> nocontinue def
R85184:85187 Coq.Init.Datatypes <> true constr
R85197:85205 VST.floyd.forward <> nobreaksx def
R85210:85213 Coq.Init.Datatypes <> true constr
R86443:86452 VST.floyd.forward <> seq_assoc1 thm
R86472:86485 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R86517:86521 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R86528:86536 compcert.cfrontend.Clight <> Ssequence constr
R86539:86542 compcert.cfrontend.Clight <> Sfor def
R86517:86521 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R86528:86536 compcert.cfrontend.Clight <> Ssequence constr
R86539:86542 compcert.cfrontend.Clight <> Sfor def
R86791:86795 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R86791:86795 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R86589:86593 compcert.cfrontend.Clight <> Sloop constr
R86596:86604 compcert.cfrontend.Clight <> Ssequence constr
R86607:86617 compcert.cfrontend.Clight <> Sifthenelse constr
R86628:86633 compcert.cfrontend.Clight <> Sbreak constr
R86622:86626 compcert.cfrontend.Clight <> Sskip constr
R87035:87044 VST.floyd.forward <> seq_assoc1 thm
R87064:87077 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R87109:87113 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R87120:87128 compcert.cfrontend.Clight <> Ssequence constr
R87131:87134 compcert.cfrontend.Clight <> Sfor def
R87109:87113 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R87120:87128 compcert.cfrontend.Clight <> Ssequence constr
R87131:87134 compcert.cfrontend.Clight <> Sfor def
R87398:87402 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R87398:87402 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R87181:87185 compcert.cfrontend.Clight <> Sloop constr
R87188:87196 compcert.cfrontend.Clight <> Ssequence constr
R87199:87209 compcert.cfrontend.Clight <> Sifthenelse constr
R87220:87225 compcert.cfrontend.Clight <> Sbreak constr
R87214:87218 compcert.cfrontend.Clight <> Sskip constr
R87692:87701 VST.floyd.forward <> seq_assoc1 thm
R87738:87741 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R87749:87752 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R87753:87757 VST.veric.mpred <> mpred def
R87742:87748 VST.veric.mpred <> environ ind
R87738:87741 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R87749:87752 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R87753:87757 VST.veric.mpred <> mpred def
R87742:87748 VST.veric.mpred <> environ ind
R87909:87912 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R87920:87923 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R87924:87928 VST.veric.mpred <> mpred def
R87913:87919 VST.veric.mpred <> environ ind
R87909:87912 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R87920:87923 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R87924:87928 VST.veric.mpred <> mpred def
R87913:87919 VST.veric.mpred <> environ ind
R88073:88077 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R88084:88092 compcert.cfrontend.Clight <> Ssequence constr
R88095:88098 compcert.cfrontend.Clight <> Sfor def
R88073:88077 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R88084:88092 compcert.cfrontend.Clight <> Ssequence constr
R88095:88098 compcert.cfrontend.Clight <> Sfor def
R88530:88534 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R88541:88544 compcert.cfrontend.Clight <> Sfor def
R88530:88534 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R88541:88544 compcert.cfrontend.Clight <> Sfor def
R88669:88673 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R88680:88684 compcert.cfrontend.Clight <> Sloop constr
R88687:88695 compcert.cfrontend.Clight <> Ssequence constr
R88698:88708 compcert.cfrontend.Clight <> Sifthenelse constr
R88718:88723 compcert.cfrontend.Clight <> Sbreak constr
R88712:88716 compcert.cfrontend.Clight <> Sskip constr
R88669:88673 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R88680:88684 compcert.cfrontend.Clight <> Sloop constr
R88687:88695 compcert.cfrontend.Clight <> Ssequence constr
R88698:88708 compcert.cfrontend.Clight <> Sifthenelse constr
R88718:88723 compcert.cfrontend.Clight <> Sbreak constr
R88712:88716 compcert.cfrontend.Clight <> Sskip constr
R88826:88830 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R88837:88841 compcert.cfrontend.Clight <> Sloop constr
R88844:88852 compcert.cfrontend.Clight <> Ssequence constr
R88855:88865 compcert.cfrontend.Clight <> Sifthenelse constr
R88875:88880 compcert.cfrontend.Clight <> Sbreak constr
R88869:88873 compcert.cfrontend.Clight <> Sskip constr
R88826:88830 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R88837:88841 compcert.cfrontend.Clight <> Sloop constr
R88844:88852 compcert.cfrontend.Clight <> Ssequence constr
R88855:88865 compcert.cfrontend.Clight <> Sifthenelse constr
R88875:88880 compcert.cfrontend.Clight <> Sbreak constr
R88869:88873 compcert.cfrontend.Clight <> Sskip constr
R88921:88923 VST.msl.seplog <> exp meth
R88905:88913 VST.floyd.canon <> semax_pre thm
R88768:88770 VST.msl.seplog <> exp meth
R88752:88760 VST.floyd.canon <> semax_pre thm
R88593:88595 VST.msl.seplog <> exp meth
R88576:88585 VST.floyd.canon <> semax_seq' thm
R88132:88140 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R88172:88174 VST.msl.seplog <> exp meth
R88155:88164 VST.floyd.canon <> semax_seq' thm
R88218:88226 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R88314:88331 VST.floyd.base <> extract_exists_pre def
R88392:88409 VST.floyd.canon <> semax_extract_PROP thm
R88450:88467 VST.floyd.canon <> semax_extract_PROP thm
R89220:89229 VST.floyd.forward <> seq_assoc1 thm
R89266:89269 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89277:89280 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89281:89285 VST.veric.mpred <> mpred def
R89270:89276 VST.veric.mpred <> environ ind
R89266:89269 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89277:89280 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89281:89285 VST.veric.mpred <> mpred def
R89270:89276 VST.veric.mpred <> environ ind
R89437:89440 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89448:89451 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89452:89456 VST.veric.mpred <> mpred def
R89441:89447 VST.veric.mpred <> environ ind
R89437:89440 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89448:89451 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89452:89456 VST.veric.mpred <> mpred def
R89441:89447 VST.veric.mpred <> environ ind
R89614:89617 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89618:89622 VST.veric.mpred <> mpred def
R89607:89613 VST.veric.mpred <> environ ind
R89614:89617 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89618:89622 VST.veric.mpred <> mpred def
R89607:89613 VST.veric.mpred <> environ ind
R89760:89764 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R89771:89779 compcert.cfrontend.Clight <> Ssequence constr
R89782:89785 compcert.cfrontend.Clight <> Sfor def
R89760:89764 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R89771:89779 compcert.cfrontend.Clight <> Ssequence constr
R89782:89785 compcert.cfrontend.Clight <> Sfor def
R89939:89943 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R89950:89954 compcert.cfrontend.Clight <> Sloop constr
R89957:89965 compcert.cfrontend.Clight <> Ssequence constr
R89968:89978 compcert.cfrontend.Clight <> Sifthenelse constr
R89988:89993 compcert.cfrontend.Clight <> Sbreak constr
R89982:89986 compcert.cfrontend.Clight <> Sskip constr
R89939:89943 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R89950:89954 compcert.cfrontend.Clight <> Sloop constr
R89957:89965 compcert.cfrontend.Clight <> Ssequence constr
R89968:89978 compcert.cfrontend.Clight <> Sifthenelse constr
R89988:89993 compcert.cfrontend.Clight <> Sbreak constr
R89982:89986 compcert.cfrontend.Clight <> Sskip constr
R90034:90036 VST.msl.seplog <> exp meth
R90018:90026 VST.floyd.canon <> semax_pre thm
R89819:89827 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R89859:89861 VST.msl.seplog <> exp meth
R89842:89851 VST.floyd.canon <> semax_seq' thm
prf 90674:90696 <> semax_convert_for_while
binder 90707:90708 <> CS:404
binder 90710:90714 <> Espec:405
binder 90716:90720 <> Delta:406
binder 90722:90724 <> Pre:407
binder 90726:90727 <> s1:408
binder 90729:90730 <> e2:409
binder 90732:90733 <> s3:410
binder 90735:90736 <> s4:411
binder 90738:90741 <> Post:412
R90766:90771 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R90792:90797 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R90873:90878 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R90880:90884 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R90924:90927 VST.floyd.forward <> Post:412 var
R90906:90909 compcert.cfrontend.Clight <> Sfor def
R90920:90921 VST.floyd.forward <> s3:410 var
R90917:90918 VST.floyd.forward <> s4:411 var
R90914:90915 VST.floyd.forward <> e2:409 var
R90911:90912 VST.floyd.forward <> s1:408 var
R90901:90903 VST.floyd.forward <> Pre:407 var
R90895:90899 VST.floyd.forward <> Delta:406 var
R90889:90893 VST.floyd.forward <> Espec:405 var
R90886:90887 VST.floyd.forward <> CS:404 var
R90799:90803 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R90869:90872 VST.floyd.forward <> Post:412 var
R90825:90833 compcert.cfrontend.Clight <> Ssequence constr
R90839:90844 compcert.cfrontend.Clight <> Swhile def
R90850:90858 compcert.cfrontend.Clight <> Ssequence constr
R90863:90864 VST.floyd.forward <> s3:410 var
R90860:90861 VST.floyd.forward <> s4:411 var
R90846:90847 VST.floyd.forward <> e2:409 var
R90835:90836 VST.floyd.forward <> s1:408 var
R90820:90822 VST.floyd.forward <> Pre:407 var
R90814:90818 VST.floyd.forward <> Delta:406 var
R90808:90812 VST.floyd.forward <> Espec:405 var
R90805:90806 VST.floyd.forward <> CS:404 var
R90785:90787 Coq.Init.Logic <> ::type_scope:x_'='_x not
R90772:90781 VST.veric.SeparationLogic <> nocontinue def
R90783:90784 VST.floyd.forward <> s3:410 var
R90788:90791 Coq.Init.Datatypes <> true constr
R90759:90761 Coq.Init.Logic <> ::type_scope:x_'='_x not
R90746:90755 VST.veric.SeparationLogic <> nocontinue def
R90757:90758 VST.floyd.forward <> s4:411 var
R90762:90765 Coq.Init.Datatypes <> true constr
R90957:90980 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_convert_for_while' prfax
R91013:91017 compcert.cfrontend.Clight <> Sskip constr
R90957:90980 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_convert_for_while' prfax
R91013:91017 compcert.cfrontend.Clight <> Sskip constr
R91052:91065 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R91052:91065 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R91086:91094 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R91086:91094 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R91118:91131 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R91118:91131 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R91259:91268 VST.floyd.forward <> seq_assoc1 thm
R91305:91308 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R91316:91319 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R91320:91324 VST.veric.mpred <> mpred def
R91309:91315 VST.veric.mpred <> environ ind
R91305:91308 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R91316:91319 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R91320:91324 VST.veric.mpred <> mpred def
R91309:91315 VST.veric.mpred <> environ ind
R91468:91472 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R91479:91487 compcert.cfrontend.Clight <> Ssequence constr
R91490:91493 compcert.cfrontend.Clight <> Sfor def
R91468:91472 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R91479:91487 compcert.cfrontend.Clight <> Ssequence constr
R91490:91493 compcert.cfrontend.Clight <> Sfor def
R91932:91936 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R91943:91946 compcert.cfrontend.Clight <> Sfor def
R91932:91936 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R91943:91946 compcert.cfrontend.Clight <> Sfor def
R91976:91998 VST.floyd.forward <> semax_convert_for_while thm
R92274:92276 VST.msl.seplog <> exp meth
R92257:92266 VST.floyd.canon <> semax_seq' thm
R92324:92326 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R92330:92331 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 92327:92327 <> x:413
R92336:92336 VST.floyd.forward <> x:413 var
R92377:92387 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R92402:92420 VST.floyd.canon <> semax_post_flipped' thm
R92430:92439 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_skip prfax
R91526:91549 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_convert_for_while' prfax
R91825:91827 VST.msl.seplog <> exp meth
R91808:91817 VST.floyd.canon <> semax_seq' thm
R91875:91877 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R91881:91882 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 91878:91878 <> x:414
R91887:91887 VST.floyd.forward <> x:414 var
R91899:91909 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R92518:92522 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R92529:92552 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R92566:92583 compcert.cfrontend.Clight <> select_switch_case def
R92589:92594 compcert.cfrontend.Clight <> LScons constr
R92597:92600 Coq.Init.Datatypes <> Some constr
R92625:92628 Coq.Init.Datatypes <> Some constr
R92639:92642 Coq.Init.Datatypes <> None constr
R92518:92522 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R92529:92552 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R92566:92583 compcert.cfrontend.Clight <> select_switch_case def
R92589:92594 compcert.cfrontend.Clight <> LScons constr
R92597:92600 Coq.Init.Datatypes <> Some constr
R92625:92628 Coq.Init.Datatypes <> Some constr
R92639:92642 Coq.Init.Datatypes <> None constr
R93476:93480 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R93487:93510 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R93524:93541 compcert.cfrontend.Clight <> select_switch_case def
R93547:93552 compcert.cfrontend.Clight <> LScons constr
R93554:93557 Coq.Init.Datatypes <> None constr
R93578:93581 Coq.Init.Datatypes <> Some constr
R93592:93595 Coq.Init.Datatypes <> None constr
R93476:93480 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R93487:93510 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R93524:93541 compcert.cfrontend.Clight <> select_switch_case def
R93547:93552 compcert.cfrontend.Clight <> LScons constr
R93554:93557 Coq.Init.Datatypes <> None constr
R93578:93581 Coq.Init.Datatypes <> Some constr
R93592:93595 Coq.Init.Datatypes <> None constr
R93736:93740 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R93747:93770 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R93784:93801 compcert.cfrontend.Clight <> select_switch_case def
R93806:93810 compcert.cfrontend.Clight <> LSnil constr
R93823:93826 Coq.Init.Datatypes <> Some constr
R93837:93840 Coq.Init.Datatypes <> None constr
R93736:93740 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R93747:93770 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R93784:93801 compcert.cfrontend.Clight <> select_switch_case def
R93806:93810 compcert.cfrontend.Clight <> LSnil constr
R93823:93826 Coq.Init.Datatypes <> Some constr
R93837:93840 Coq.Init.Datatypes <> None constr
R93871:93888 compcert.cfrontend.Clight <> select_switch_case def
R93892:93896 compcert.cfrontend.Clight <> LSnil constr
R93871:93888 compcert.cfrontend.Clight <> select_switch_case def
R93892:93896 compcert.cfrontend.Clight <> LSnil constr
R93917:93920 Coq.Init.Datatypes <> None constr
R93922:93939 compcert.cfrontend.Clight <> labeled_statements ind
R93972:93995 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R94025:94038 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_skip_seq prfax
R93626:93643 compcert.cfrontend.Clight <> select_switch_case def
R93648:93653 compcert.cfrontend.Clight <> LScons constr
R93655:93658 Coq.Init.Datatypes <> None constr
R93626:93643 compcert.cfrontend.Clight <> select_switch_case def
R93648:93653 compcert.cfrontend.Clight <> LScons constr
R93655:93658 Coq.Init.Datatypes <> None constr
R93680:93697 compcert.cfrontend.Clight <> select_switch_case def
R92683:92697 VST.floyd.forward_lemmas <> adjust_for_sign def
R92756:92780 VST.floyd.forward_lemmas <> select_switch_case_signed thm
R92919:92921 compcert.lib.Coqlib <> zeq def
R92926:92937 compcert.lib.Integers Int unsigned def
R92940:92947 compcert.lib.Integers Int repr def
R92981:92987 VST.msl.Coqlib2 <> if_true thm
R92999:93022 compcert.cfrontend.Clight <> seq_of_labeled_statement def
R93065:93078 VST.floyd.client_lemmas <> unsigned_eq_eq thm
R93120:93125 compcert.cfrontend.Ctypes <> Signed constr
R93120:93125 compcert.cfrontend.Ctypes <> Signed constr
R93191:93198 compcert.cfrontend.Ctypes <> Unsigned constr
R93191:93198 compcert.cfrontend.Ctypes <> Unsigned constr
R93209:93225 VST.floyd.functional_base <> repr_inj_unsigned thm
R93136:93150 VST.floyd.functional_base <> repr_inj_signed thm
R93304:93306 Coq.Init.Logic <> ::type_scope:x_'='_x not
R93304:93306 Coq.Init.Logic <> ::type_scope:x_'='_x not
R93359:93372 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_skip_seq prfax
R93389:93396 VST.msl.Coqlib2 <> if_false thm
R94092:94096 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R94111:94117 compcert.cfrontend.Clight <> Sswitch constr
R94092:94096 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R94111:94117 compcert.cfrontend.Clight <> Sswitch constr
R94153:94158 VST.floyd.forward_lemmas <> signof def
R94400:94402 compcert.lib.Integers <> int syndef
R94441:94441 Coq.Init.Logic <> ::type_scope:x_'='_x not
R94442:94445 compcert.common.Values <> Vint constr
R94637:94648 compcert.lib.Integers Int unsigned def
R94691:94693 Coq.Init.Logic <> ::type_scope:x_'='_x not
R94694:94701 compcert.lib.Integers Int repr def
R94737:94753 compcert.lib.Integers Int repr_unsigned thm
R94841:94857 compcert.lib.Integers Int repr_unsigned thm
R94860:94867 compcert.lib.Integers Int repr def
R94897:94912 VST.floyd.forward_lemmas <> semax_switch_PQR thm
R95002:95014 compcert.cfrontend.Clight <> select_switch def
R95029:95049 compcert.cfrontend.Clight <> select_switch_default def
R95096:95105 VST.floyd.client_lemmas <> abbreviate def
R95107:95115 compcert.cfrontend.Clight <> statement ind
R95096:95105 VST.floyd.client_lemmas <> abbreviate def
R95107:95115 compcert.cfrontend.Clight <> statement ind
def 95193:95205 <> nofallthrough
binder 95207:95208 <> ek:415
R95220:95221 VST.floyd.forward <> ek:415 var
R95231:95239 VST.veric.tycontext <> EK_normal constr
R95244:95248 Coq.Init.Datatypes <> false constr
R95258:95261 Coq.Init.Datatypes <> true constr
R95347:95360 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R95378:95387 VST.floyd.forward <> seq_assoc1 thm
R95403:95416 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R95441:95445 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R95460:95470 compcert.cfrontend.Clight <> Sifthenelse constr
R95441:95445 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R95460:95470 compcert.cfrontend.Clight <> Sifthenelse constr
R96281:96285 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R96328:96336 compcert.cfrontend.Clight <> Ssequence constr
R96339:96349 compcert.cfrontend.Clight <> Sifthenelse constr
R96295:96299 VST.floyd.canon <> PROPx def
R96305:96310 VST.floyd.canon <> LOCALx def
R96316:96319 VST.floyd.canon <> SEPx def
R96281:96285 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R96328:96336 compcert.cfrontend.Clight <> Ssequence constr
R96339:96349 compcert.cfrontend.Clight <> Sifthenelse constr
R96295:96299 VST.floyd.canon <> PROPx def
R96305:96310 VST.floyd.canon <> LOCALx def
R96316:96319 VST.floyd.canon <> SEPx def
R96691:96695 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R96701:96703 VST.msl.seplog <> exp meth
R96691:96695 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R96701:96703 VST.msl.seplog <> exp meth
R96835:96839 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R96846:96852 compcert.cfrontend.Clight <> Sswitch constr
R96835:96839 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R96846:96852 compcert.cfrontend.Clight <> Sswitch constr
R96887:96891 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R96898:96906 compcert.cfrontend.Clight <> Ssequence constr
R96909:96919 compcert.cfrontend.Clight <> Sifthenelse constr
R96887:96891 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R96898:96906 compcert.cfrontend.Clight <> Ssequence constr
R96909:96919 compcert.cfrontend.Clight <> Sifthenelse constr
R97048:97052 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R97059:97067 compcert.cfrontend.Clight <> Ssequence constr
R97070:97076 compcert.cfrontend.Clight <> Sswitch constr
R97048:97052 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R97059:97067 compcert.cfrontend.Clight <> Ssequence constr
R97070:97076 compcert.cfrontend.Clight <> Sswitch constr
R96474:96485 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_if_seq prfax
R96389:96391 Coq.Init.Datatypes <> orb def
R96423:96431 VST.floyd.forward <> quickflow def
R96436:96448 VST.floyd.forward <> nofallthrough def
R96394:96402 VST.floyd.forward <> quickflow def
R96407:96419 VST.floyd.forward <> nofallthrough def
R96452:96455 Coq.Init.Datatypes <> true constr
R95665:95685 VST.floyd.forward_lemmas <> semax_ifthenelse_PQR' thm
R95781:95798 VST.floyd.canon <> semax_extract_PROP thm
R95857:95874 VST.floyd.canon <> semax_extract_PROP thm
R95904:95918 compcert.lib.Integers Int signed_repr thm
R95962:95975 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_skip_seq prfax
R96048:96065 VST.floyd.canon <> semax_extract_PROP thm
R96124:96141 VST.floyd.canon <> semax_extract_PROP thm
R96171:96185 compcert.lib.Integers Int signed_repr thm
R96229:96242 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_skip_seq prfax
prf 97285:97303 <> ENTAIL_break_normal
binder 97314:97318 <> Delta:417
binder 97320:97320 <> R:418
binder 97322:97322 <> S:419
R97325:97331 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97337:97338 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97369:97373 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97332:97336 VST.floyd.forward <> Delta:417 var
R97339:97346 VST.veric.tycontext <> RA_break proj
R97349:97365 VST.veric.SeparationLogic <> normal_ret_assert def
R97367:97367 VST.floyd.forward <> R:418 var
R97374:97374 VST.floyd.forward <> S:419 var
R97416:97425 VST.msl.seplog <> andp_left2 meth
R97434:97440 VST.msl.log_normalize <> FF_left thm
R97416:97425 VST.msl.seplog <> andp_left2 meth
R97434:97440 VST.msl.log_normalize <> FF_left thm
prf 97455:97476 <> ENTAIL_continue_normal
binder 97487:97491 <> Delta:420
binder 97493:97493 <> R:421
binder 97495:97495 <> S:422
R97498:97504 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97510:97511 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97545:97549 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97505:97509 VST.floyd.forward <> Delta:420 var
R97512:97522 VST.veric.tycontext <> RA_continue proj
R97525:97541 VST.veric.SeparationLogic <> normal_ret_assert def
R97543:97543 VST.floyd.forward <> R:421 var
R97550:97550 VST.floyd.forward <> S:422 var
R97592:97601 VST.msl.seplog <> andp_left2 meth
R97610:97616 VST.msl.log_normalize <> FF_left thm
R97592:97601 VST.msl.seplog <> andp_left2 meth
R97610:97616 VST.msl.log_normalize <> FF_left thm
prf 97631:97650 <> ENTAIL_return_normal
binder 97661:97665 <> Delta:423
binder 97667:97667 <> R:424
binder 97669:97669 <> v:425
binder 97671:97671 <> S:426
R97674:97680 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97686:97687 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97721:97725 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97681:97685 VST.floyd.forward <> Delta:423 var
R97688:97696 VST.veric.tycontext <> RA_return proj
R97720:97720 VST.floyd.forward <> v:425 var
R97699:97715 VST.veric.SeparationLogic <> normal_ret_assert def
R97717:97717 VST.floyd.forward <> R:424 var
R97726:97726 VST.floyd.forward <> S:426 var
R97768:97777 VST.msl.seplog <> andp_left2 meth
R97786:97792 VST.msl.log_normalize <> FF_left thm
R97768:97777 VST.msl.seplog <> andp_left2 meth
R97786:97792 VST.msl.log_normalize <> FF_left thm
R97902:97908 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97910:97911 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97913:97917 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97944:97950 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97952:97953 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97956:97960 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97944:97950 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97952:97953 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97956:97960 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R97995:98005 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R98103:98111 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R98151:98164 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R98195:98196 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R98197:98201 VST.veric.mpred <> mpred def
R98188:98194 VST.veric.mpred <> environ ind
R98318:98322 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R98349:98360 VST.veric.SeparationLogic <> overridePost def
R98329:98339 compcert.cfrontend.Clight <> Sifthenelse constr
R98318:98322 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R98349:98360 VST.veric.SeparationLogic <> overridePost def
R98329:98339 compcert.cfrontend.Clight <> Sifthenelse constr
R98402:98406 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R98413:98419 compcert.cfrontend.Clight <> Sswitch constr
R98402:98406 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R98413:98419 compcert.cfrontend.Clight <> Sswitch constr
R98460:98464 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R98471:98481 compcert.cfrontend.Clight <> Sifthenelse constr
R98460:98464 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R98471:98481 compcert.cfrontend.Clight <> Sifthenelse constr
R98997:99001 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R99008:99016 compcert.cfrontend.Clight <> Ssequence constr
R99019:99029 compcert.cfrontend.Clight <> Sifthenelse constr
R98997:99001 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R99008:99016 compcert.cfrontend.Clight <> Ssequence constr
R99019:99029 compcert.cfrontend.Clight <> Sifthenelse constr
R99195:99199 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R99206:99214 compcert.cfrontend.Clight <> Ssequence constr
R99217:99223 compcert.cfrontend.Clight <> Sswitch constr
R99195:99199 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R99206:99214 compcert.cfrontend.Clight <> Ssequence constr
R99217:99223 compcert.cfrontend.Clight <> Sswitch constr
R99249:99257 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R99057:99065 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R98509:98526 VST.floyd.canon <> semax_post_flipped thm
R98529:98540 VST.veric.SeparationLogic <> overridePost def
R98804:98813 VST.floyd.client_lemmas <> abbreviate def
R98919:98929 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R98604:98613 VST.floyd.client_lemmas <> abbreviate def
R98719:98729 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R99437:99452 VST.floyd.canon <> find_LOCAL_index def
R99459:99459 Coq.Init.Datatypes <> O constr
R99490:99493 Coq.Init.Datatypes <> Some constr
R99490:99493 Coq.Init.Datatypes <> Some constr
R99611:99614 Coq.Init.Datatypes <> None constr
R99611:99614 Coq.Init.Datatypes <> None constr
R99566:99575 VST.floyd.find_nth_tactic <> delete_nth def
R99695:99697 Coq.Init.Datatypes <> nil constr
R99695:99697 Coq.Init.Datatypes <> nil constr
R99717:99720 Coq.Init.Datatypes <> cons constr
R99717:99720 Coq.Init.Datatypes <> cons constr
R99776:99779 VST.floyd.canon <> temp constr
R99776:99779 VST.floyd.canon <> temp constr
R100137:100140 Coq.Init.Datatypes <> list ind
R100137:100140 Coq.Init.Datatypes <> list ind
R100340:100347 VST.floyd.canon <> localdef ind
R100340:100347 VST.floyd.canon <> localdef ind
R100565:100568 Coq.Init.Datatypes <> list ind
R100570:100577 VST.floyd.canon <> localdef ind
R100565:100568 Coq.Init.Datatypes <> list ind
R100570:100577 VST.floyd.canon <> localdef ind
R100615:100619 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R100624:100628 VST.floyd.canon <> PROPx def
R100636:100641 VST.floyd.canon <> LOCALx def
R100615:100619 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R100624:100628 VST.floyd.canon <> PROPx def
R100636:100641 VST.floyd.canon <> LOCALx def
R100767:100770 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R100804:100808 VST.floyd.canon <> PROPx def
R100815:100820 VST.floyd.canon <> LOCALx def
R100385:100389 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R100394:100398 VST.floyd.canon <> PROPx def
R100406:100411 VST.floyd.canon <> LOCALx def
R100385:100389 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R100394:100398 VST.floyd.canon <> PROPx def
R100406:100411 VST.floyd.canon <> LOCALx def
R100470:100473 Coq.Init.Datatypes <> cons constr
R100480:100482 Coq.Init.Datatypes <> nil constr
R100516:100520 VST.floyd.canon <> PROPx def
R100527:100532 VST.floyd.canon <> LOCALx def
R100539:100542 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R100183:100187 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R100192:100196 VST.floyd.canon <> PROPx def
R100183:100187 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R100192:100196 VST.floyd.canon <> PROPx def
R100278:100281 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R100314:100318 VST.floyd.canon <> PROPx def
R100045:100049 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R100054:100058 VST.floyd.canon <> PROPx def
R100045:100049 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R100054:100058 VST.floyd.canon <> PROPx def
R100102:100106 VST.floyd.canon <> PROPx def
R100113:100116 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R102078:102082 VST.veric.seplog <> subst def
R102078:102082 VST.veric.seplog <> subst def
R102220:102229 VST.veric.tycontext <> ret_assert rec
R102220:102229 VST.veric.tycontext <> ret_assert rec
R102363:102367 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R102363:102367 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R102488:102505 VST.floyd.canon <> semax_extract_PROP thm
prf 102857:102870 <> eqb_ident_true
binder 102880:102880 <> i:427
R102896:102898 Coq.Init.Logic <> ::type_scope:x_'='_x not
R102883:102891 VST.veric.Cop2 <> eqb_ident def
R102895:102895 VST.floyd.forward <> i:427 var
R102893:102893 VST.floyd.forward <> i:427 var
R102899:102902 Coq.Init.Datatypes <> true constr
R102926:102935 Coq.PArith.BinPos Pos eqb_eq thm
R102926:102935 Coq.PArith.BinPos Pos eqb_eq thm
prf 102956:102970 <> eqb_ident_false
binder 102980:102980 <> i:428
binder 102982:102982 <> j:429
R102989:102992 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R103006:103008 Coq.Init.Logic <> ::type_scope:x_'='_x not
R102993:103001 VST.veric.Cop2 <> eqb_ident def
R103005:103005 VST.floyd.forward <> j:429 var
R103003:103003 VST.floyd.forward <> i:428 var
R103009:103013 Coq.Init.Datatypes <> false constr
R102986:102987 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R102985:102985 VST.floyd.forward <> i:428 var
R102988:102988 VST.floyd.forward <> j:429 var
R103041:103049 VST.veric.Cop2 <> eqb_ident def
R103041:103049 VST.veric.Cop2 <> eqb_ident def
R103075:103084 Coq.PArith.BinPos Pos eqb_eq thm
R103075:103084 Coq.PArith.BinPos Pos eqb_eq thm
R103126:103139 VST.floyd.forward <> eqb_ident_true thm
R103163:103177 VST.floyd.forward <> eqb_ident_false thm
prf 103214:103231 <> subst_temp_special
binder 103243:103243 <> i:430
binder 103245:103245 <> e:431
R103254:103257 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R103251:103253 compcert.common.Values <> val ind
binder 103248:103248 <> f:432
binder 103264:103264 <> j:433
R103276:103279 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R103306:103308 Coq.Init.Logic <> ::type_scope:x_'='_x not
R103280:103284 VST.veric.seplog <> subst def
R103291:103291 VST.veric.lift LiftNotation :::'`'_x not
R103293:103304 VST.veric.lift LiftNotation :::'`'_x not
R103292:103292 VST.floyd.forward <> f:432 var
R103295:103301 VST.veric.mpred <> eval_id def
R103303:103303 VST.floyd.forward <> j:433 var
R103288:103288 VST.floyd.forward <> e:431 var
R103286:103286 VST.floyd.forward <> i:430 var
R103309:103309 VST.veric.lift LiftNotation :::'`'_x not
R103311:103322 VST.veric.lift LiftNotation :::'`'_x not
R103310:103310 VST.floyd.forward <> f:432 var
R103313:103319 VST.veric.mpred <> eval_id def
R103321:103321 VST.floyd.forward <> j:433 var
R103271:103274 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R103270:103270 VST.floyd.forward <> i:430 var
R103275:103275 VST.floyd.forward <> j:433 var
R103390:103407 VST.floyd.forward <> subst_temp_special thm
R103502:103506 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R103515:103531 VST.veric.SeparationLogic <> normal_ret_assert def
R103502:103506 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R103515:103531 VST.veric.SeparationLogic <> normal_ret_assert def
R103551:103555 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R103551:103555 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R103574:103583 VST.floyd.canon <> sequential thm
R103648:103658 VST.floyd.canon <> sequential' thm
R103684:103688 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R103697:103713 VST.veric.SeparationLogic <> normal_ret_assert def
R103684:103688 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R103697:103713 VST.veric.SeparationLogic <> normal_ret_assert def
def 103750:103766 <> This_is_a_warning
R103771:103772 Coq.Init.Datatypes <> tt constr
ind 103786:103792 <> Warning
constr 103823:103825 <> ack
R103799:103802 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R103807:103810 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R103803:103806 Coq.Init.Datatypes <> unit ind
R103795:103798 Coq.Init.Datatypes <> unit ind
binder 103836:103836 <> s:436
binder 103838:103839 <> s':437
R103842:103848 VST.floyd.forward <> Warning:434 ind
R103852:103853 VST.floyd.forward <> s':437 var
R103850:103850 VST.floyd.forward <> s:436 var
def 103867:103918 <> IGNORE_THIS_WARNING_USING_THE_ack_TACTIC_IF_YOU_WISH
R103923:103924 Coq.Init.Datatypes <> tt constr
R103946:103948 VST.floyd.forward <> ack constr
R104047:104053 VST.floyd.forward <> Warning ind
R104072:104123 VST.floyd.forward <> IGNORE_THIS_WARNING_USING_THE_ack_TACTIC_IF_YOU_WISH def
prf 104135:104145 <> semax_post3
binder 104157:104158 <> R':438
binder 104160:104164 <> Espec:439
R104171:104179 VST.veric.mpred <> compspecs class
binder 104167:104168 <> cs:440
binder 104182:104186 <> Delta:441
binder 104188:104188 <> P:442
binder 104190:104190 <> c:443
binder 104192:104192 <> R:444
R104235:104242 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R104291:104298 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R104300:104304 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R104326:104342 VST.veric.SeparationLogic <> normal_ret_assert def
R104344:104344 VST.floyd.forward <> R:444 var
R104323:104323 VST.floyd.forward <> c:443 var
R104321:104321 VST.floyd.forward <> P:442 var
R104315:104319 VST.floyd.forward <> Delta:441 var
R104309:104313 VST.floyd.forward <> Espec:439 var
R104306:104307 VST.floyd.forward <> cs:440 var
R104244:104248 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R104270:104286 VST.veric.SeparationLogic <> normal_ret_assert def
R104288:104289 VST.floyd.forward <> R':438 var
R104267:104267 VST.floyd.forward <> c:443 var
R104265:104265 VST.floyd.forward <> P:442 var
R104259:104263 VST.floyd.forward <> Delta:441 var
R104253:104257 VST.floyd.forward <> Espec:439 var
R104250:104251 VST.floyd.forward <> cs:440 var
R104229:104233 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R104223:104226 VST.msl.seplog <> ::logic:x_'&&'_x not
R104199:104203 VST.veric.SeparationLogic <> local def
R104206:104215 VST.veric.SeparationLogic <> tc_environ def
R104217:104221 VST.floyd.forward <> Delta:441 var
R104227:104228 VST.floyd.forward <> R':438 var
R104234:104234 VST.floyd.forward <> R:444 var
R104372:104382 VST.floyd.canon <> semax_post' thm
R104372:104382 VST.floyd.canon <> semax_post' thm
prf 104418:104436 <> semax_post_flipped3
binder 104448:104449 <> R':445
binder 104451:104455 <> Espec:446
R104462:104470 VST.veric.mpred <> compspecs class
binder 104458:104459 <> cs:447
binder 104473:104477 <> Delta:448
binder 104479:104479 <> P:449
binder 104481:104481 <> c:450
binder 104483:104483 <> R:451
R104538:104545 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R104582:104589 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R104591:104595 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R104617:104633 VST.veric.SeparationLogic <> normal_ret_assert def
R104635:104635 VST.floyd.forward <> R:451 var
R104614:104614 VST.floyd.forward <> c:450 var
R104612:104612 VST.floyd.forward <> P:449 var
R104606:104610 VST.floyd.forward <> Delta:448 var
R104600:104604 VST.floyd.forward <> Espec:446 var
R104597:104598 VST.floyd.forward <> cs:447 var
R104576:104580 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R104570:104573 VST.msl.seplog <> ::logic:x_'&&'_x not
R104546:104550 VST.veric.SeparationLogic <> local def
R104553:104562 VST.veric.SeparationLogic <> tc_environ def
R104564:104568 VST.floyd.forward <> Delta:448 var
R104574:104575 VST.floyd.forward <> R':445 var
R104581:104581 VST.floyd.forward <> R:451 var
R104491:104495 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R104517:104533 VST.veric.SeparationLogic <> normal_ret_assert def
R104535:104536 VST.floyd.forward <> R':445 var
R104514:104514 VST.floyd.forward <> c:450 var
R104512:104512 VST.floyd.forward <> P:449 var
R104506:104510 VST.floyd.forward <> Delta:448 var
R104500:104504 VST.floyd.forward <> Espec:446 var
R104497:104498 VST.floyd.forward <> cs:447 var
R104662:104672 VST.floyd.forward <> semax_post3 thm
R104662:104672 VST.floyd.forward <> semax_post3 thm
prf 104694:104708 <> focus_make_args
binder 104720:104720 <> A:452
binder 104722:104722 <> Q:453
binder 104724:104724 <> R:454
binder 104726:104727 <> R':455
binder 104729:104733 <> Frame:456
R104746:104753 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R104801:104809 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R104811:104815 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R104810:104810 VST.floyd.forward <> A:452 var
R104816:104820 VST.floyd.canon <> PROPx def
R104827:104832 VST.floyd.canon <> LOCALx def
R104837:104840 VST.floyd.canon <> SEPx def
R104844:104847 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R104843:104843 VST.floyd.forward <> R:454 var
R104848:104852 VST.floyd.forward <> Frame:456 var
R104834:104834 VST.floyd.forward <> Q:453 var
R104822:104824 Coq.Init.Datatypes <> nil constr
R104755:104759 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R104754:104754 VST.floyd.forward <> A:452 var
R104760:104764 VST.floyd.canon <> PROPx def
R104771:104776 VST.floyd.canon <> LOCALx def
R104781:104784 VST.floyd.canon <> SEPx def
R104789:104792 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R104787:104788 VST.floyd.forward <> R':455 var
R104793:104797 VST.floyd.forward <> Frame:456 var
R104778:104778 VST.floyd.forward <> Q:453 var
R104766:104768 Coq.Init.Datatypes <> nil constr
R104741:104743 Coq.Init.Logic <> ::type_scope:x_'='_x not
R104740:104740 VST.floyd.forward <> R:454 var
R104744:104745 VST.floyd.forward <> R':455 var
prf 104899:104914 <> subst_make_args1
binder 104926:104926 <> i:457
binder 104928:104928 <> e:458
binder 104930:104930 <> j:459
binder 104932:104932 <> v:460
R104978:104980 Coq.Init.Logic <> ::type_scope:x_'='_x not
R104939:104943 VST.veric.seplog <> subst def
R104950:104958 VST.veric.SeparationLogic <> make_args def
R104971:104972 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R104970:104970 VST.floyd.forward <> v:460 var
R104973:104975 Coq.Init.Datatypes <> nil constr
R104962:104963 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R104961:104961 VST.floyd.forward <> j:459 var
R104964:104966 Coq.Init.Datatypes <> nil constr
R104947:104947 VST.floyd.forward <> e:458 var
R104945:104945 VST.floyd.forward <> i:457 var
R104981:104989 VST.veric.SeparationLogic <> make_args def
R105002:105003 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R105001:105001 VST.floyd.forward <> v:460 var
R105004:105006 Coq.Init.Datatypes <> nil constr
R104993:104994 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R104992:104992 VST.floyd.forward <> j:459 var
R104995:104997 Coq.Init.Datatypes <> nil constr
R105166:105170 compcert.cfrontend.Clight <> Sskip constr
R105166:105170 compcert.cfrontend.Clight <> Sskip constr
R105184:105190 compcert.cfrontend.Clight <> Sassign constr
R105184:105190 compcert.cfrontend.Clight <> Sassign constr
R105208:105211 compcert.cfrontend.Clight <> Sset constr
R105208:105211 compcert.cfrontend.Clight <> Sset constr
R105229:105233 compcert.cfrontend.Clight <> Scall constr
R105229:105233 compcert.cfrontend.Clight <> Scall constr
R105253:105261 compcert.cfrontend.Clight <> Ssequence constr
R105253:105261 compcert.cfrontend.Clight <> Ssequence constr
R105379:105383 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R105394:105410 VST.veric.SeparationLogic <> normal_ret_assert def
R105379:105383 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R105394:105410 VST.veric.SeparationLogic <> normal_ret_assert def
R105433:105437 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R105433:105437 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R105480:105489 VST.floyd.canon <> sequential thm
R105576:105578 Coq.ZArith.BinInt <> ::Z_scope:x_'>'_x not
R105565:105570 VST.veric.expr <> sizeof def
R105616:105621 VST.veric.expr <> sizeof def
R105785:105794 VST.floyd.client_lemmas <> abbreviate def
R105796:105804 compcert.cfrontend.Clight <> statement ind
R105785:105794 VST.floyd.client_lemmas <> abbreviate def
R105796:105804 compcert.cfrontend.Clight <> statement ind
R105863:105872 VST.floyd.client_lemmas <> abbreviate def
R105874:105883 VST.veric.tycontext <> ret_assert rec
R105863:105872 VST.floyd.client_lemmas <> abbreviate def
R105874:105883 VST.veric.tycontext <> ret_assert rec
ind 105921:105984 <> Type_of_right_hand_side_does_not_match_type_of_assigned_variable
R106217:106221 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R106269:106272 compcert.cfrontend.Clight <> Sset constr
R106231:106234 VST.msl.seplog <> ::logic:'|>'_x not
R106265:106265 VST.msl.seplog <> ::logic:'|>'_x not
R106235:106239 VST.floyd.canon <> PROPx def
R106245:106250 VST.floyd.canon <> LOCALx def
R106256:106259 VST.floyd.canon <> SEPx def
R106217:106221 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R106269:106272 compcert.cfrontend.Clight <> Sset constr
R106231:106234 VST.msl.seplog <> ::logic:'|>'_x not
R106265:106265 VST.msl.seplog <> ::logic:'|>'_x not
R106235:106239 VST.floyd.canon <> PROPx def
R106245:106250 VST.floyd.canon <> LOCALx def
R106256:106259 VST.floyd.canon <> SEPx def
R106300:106314 VST.floyd.sc_set_load_store <> semax_PTree_set thm
R106717:106737 VST.floyd.efield_lemmas <> compute_nested_efield def
R106776:106778 Coq.Init.Datatypes <> fst def
R106781:106783 Coq.Init.Datatypes <> fst def
R106786:106788 Coq.Init.Datatypes <> fst def
R106813:106815 Coq.Init.Datatypes <> snd def
R106818:106820 Coq.Init.Datatypes <> fst def
R106823:106825 Coq.Init.Datatypes <> fst def
R106851:106853 Coq.Init.Datatypes <> snd def
R106856:106858 Coq.Init.Datatypes <> fst def
R106883:106885 Coq.Init.Datatypes <> snd def
R106948:106960 VST.floyd.efield_lemmas <> nested_efield def
prf 106996:107019 <> efield_denote_cons_array
R107034:107042 VST.veric.mpred <> compspecs class
binder 107030:107031 <> cs:463
binder 107045:107045 <> P:464
binder 107047:107049 <> efs:465
binder 107051:107053 <> gfs:466
binder 107055:107056 <> ei:467
binder 107058:107058 <> i:468
R107098:107103 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R107147:107152 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R107183:107188 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R107190:107194 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R107189:107189 VST.floyd.forward <> P:464 var
R107195:107199 VST.veric.SeparationLogic <> local def
R107202:107214 VST.floyd.efield_lemmas <> efield_denote ind
R107301:107304 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R107252:107261 VST.floyd.nested_field_lemmas <> ArraySubsc constr
R107264:107285 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R107299:107299 VST.floyd.forward <> i:468 var
R107288:107293 compcert.cfrontend.Clight <> typeof def
R107295:107296 VST.floyd.forward <> ei:467 var
R107305:107307 VST.floyd.forward <> gfs:466 var
R107231:107234 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R107217:107227 VST.floyd.efield_lemmas <> eArraySubsc constr
R107229:107230 VST.floyd.forward <> ei:467 var
R107235:107237 VST.floyd.forward <> efs:465 var
R107176:107178 Coq.Init.Logic <> ::type_scope:x_'='_x not
R107153:107163 VST.veric.expr <> is_int_type def
R107166:107171 compcert.cfrontend.Clight <> typeof def
R107173:107174 VST.floyd.forward <> ei:467 var
R107179:107182 Coq.Init.Datatypes <> true constr
R107105:107109 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R107104:107104 VST.floyd.forward <> P:464 var
R107110:107114 VST.veric.SeparationLogic <> local def
R107117:107118 VST.veric.lift LiftNotation :::'`('_x_')' not
R107130:107145 VST.veric.lift LiftNotation :::'`('_x_')' not
R107119:107120 Coq.Init.Logic <> eq ind
R107123:107126 compcert.common.Values <> Vint constr
R107128:107128 VST.floyd.forward <> i:468 var
R107133:107141 VST.veric.expr <> eval_expr def
R107143:107144 VST.floyd.forward <> ei:467 var
R107064:107068 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R107063:107063 VST.floyd.forward <> P:464 var
R107069:107073 VST.veric.SeparationLogic <> local def
R107076:107088 VST.floyd.efield_lemmas <> efield_denote ind
R107094:107096 VST.floyd.forward <> gfs:466 var
R107090:107092 VST.floyd.forward <> efs:465 var
R107340:107347 VST.msl.log_normalize <> add_andp thm
R107358:107365 VST.msl.log_normalize <> add_andp thm
R107376:107385 VST.msl.log_normalize <> andp_assoc thm
R107340:107347 VST.msl.log_normalize <> add_andp thm
R107340:107347 VST.msl.log_normalize <> add_andp thm
R107358:107365 VST.msl.log_normalize <> add_andp thm
R107358:107365 VST.msl.log_normalize <> add_andp thm
R107376:107385 VST.msl.log_normalize <> andp_assoc thm
R107376:107385 VST.msl.log_normalize <> andp_assoc thm
R107396:107405 VST.msl.seplog <> andp_left2 meth
R107396:107405 VST.msl.seplog <> andp_left2 meth
R107436:107440 VST.veric.SeparationLogic <> local def
R107443:107447 VST.veric.mpred <> lift1 def
R107566:107571 compcert.cfrontend.Clight <> typeof def
R107566:107571 compcert.cfrontend.Clight <> typeof def
R107595:107616 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R107680:107685 compcert.cfrontend.Clight <> typeof def
R107680:107685 compcert.cfrontend.Clight <> typeof def
R107709:107730 VST.floyd.simpl_reptype <> int_signed_or_unsigned def
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107766:107780 compcert.lib.Integers Int repr_signed thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
R107784:107800 compcert.lib.Integers Int repr_unsigned thm
prf 107822:107846 <> efield_denote_cons_struct
R107861:107869 VST.veric.mpred <> compspecs class
binder 107857:107858 <> cs:469
binder 107872:107872 <> P:470
binder 107874:107876 <> efs:471
binder 107878:107880 <> gfs:472
binder 107882:107882 <> i:473
R107922:107927 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R107929:107933 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R107928:107928 VST.floyd.forward <> P:470 var
R107934:107938 VST.veric.SeparationLogic <> local def
R107941:107953 VST.floyd.efield_lemmas <> efield_denote ind
R107993:107996 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R107980:107990 VST.floyd.nested_field_lemmas <> StructField constr
R107992:107992 VST.floyd.forward <> i:473 var
R107997:107999 VST.floyd.forward <> gfs:472 var
R107970:107973 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R107956:107967 VST.floyd.efield_lemmas <> eStructField constr
R107969:107969 VST.floyd.forward <> i:473 var
R107974:107976 VST.floyd.forward <> efs:471 var
R107888:107892 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R107887:107887 VST.floyd.forward <> P:470 var
R107893:107897 VST.veric.SeparationLogic <> local def
R107900:107912 VST.floyd.efield_lemmas <> efield_denote ind
R107918:107920 VST.floyd.forward <> gfs:472 var
R107914:107916 VST.floyd.forward <> efs:471 var
R108030:108042 VST.msl.seplog <> derives_trans meth
R108030:108042 VST.msl.seplog <> derives_trans meth
R108086:108090 VST.veric.SeparationLogic <> local def
R108093:108097 VST.veric.mpred <> lift1 def
prf 108178:108201 <> efield_denote_cons_union
R108216:108224 VST.veric.mpred <> compspecs class
binder 108212:108213 <> cs:474
binder 108227:108227 <> P:475
binder 108229:108231 <> efs:476
binder 108233:108235 <> gfs:477
binder 108237:108237 <> i:478
R108277:108282 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R108284:108288 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R108283:108283 VST.floyd.forward <> P:475 var
R108289:108293 VST.veric.SeparationLogic <> local def
R108296:108308 VST.floyd.efield_lemmas <> efield_denote ind
R108346:108349 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R108334:108343 VST.floyd.nested_field_lemmas <> UnionField constr
R108345:108345 VST.floyd.forward <> i:478 var
R108350:108352 VST.floyd.forward <> gfs:477 var
R108324:108327 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R108311:108321 VST.floyd.efield_lemmas <> eUnionField constr
R108323:108323 VST.floyd.forward <> i:478 var
R108328:108330 VST.floyd.forward <> efs:476 var
R108243:108247 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R108242:108242 VST.floyd.forward <> P:475 var
R108248:108252 VST.veric.SeparationLogic <> local def
R108255:108267 VST.floyd.efield_lemmas <> efield_denote ind
R108273:108275 VST.floyd.forward <> gfs:477 var
R108269:108271 VST.floyd.forward <> efs:476 var
R108383:108395 VST.msl.seplog <> derives_trans meth
R108383:108395 VST.msl.seplog <> derives_trans meth
R108439:108443 VST.veric.SeparationLogic <> local def
R108446:108450 VST.veric.mpred <> lift1 def
R108755:108757 Coq.Init.Peano <> ::nat_scope:x_'-'_x not
R108745:108750 Coq.Lists.List <> length syndef
R108758:108763 Coq.Lists.List <> length syndef
R108851:108856 Coq.Lists.List <> firstn def
R109077:109080 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R109194:109196 compcert.common.Values <> val ind
R109219:109222 VST.floyd.jmeq_lemmas <> JMeq def
R109225:109236 VST.floyd.proj_reptype_lemmas <> proj_reptype def
R109239:109255 VST.floyd.nested_field_lemmas <> nested_field_type def
R109458:109461 Coq.Init.Datatypes <> list ind
R109463:109468 VST.floyd.nested_field_lemmas <> gfield ind
R109482:109488 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R109494:109495 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R109523:109527 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R109496:109500 VST.floyd.canon <> PROPx def
R109505:109510 VST.floyd.canon <> LOCALx def
R109515:109518 VST.floyd.canon <> SEPx def
R109528:109532 VST.veric.SeparationLogic <> local def
R109535:109547 VST.floyd.efield_lemmas <> efield_denote ind
R109623:109625 Coq.Init.Datatypes <> nil constr
R109623:109625 Coq.Init.Datatypes <> nil constr
R109729:109732 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R109729:109732 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R110004:110014 VST.floyd.efield_lemmas <> eArraySubsc constr
R110004:110014 VST.floyd.efield_lemmas <> eArraySubsc constr
R111397:111408 VST.floyd.efield_lemmas <> eStructField constr
R111397:111408 VST.floyd.efield_lemmas <> eStructField constr
R111525:111535 VST.floyd.efield_lemmas <> eUnionField constr
R111525:111535 VST.floyd.efield_lemmas <> eUnionField constr
R111583:111586 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R111571:111580 VST.floyd.nested_field_lemmas <> UnionField constr
R111611:111634 VST.floyd.forward <> efield_denote_cons_union thm
R111457:111460 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R111444:111454 VST.floyd.nested_field_lemmas <> StructField constr
R111485:111509 VST.floyd.forward <> efield_denote_cons_struct thm
R110132:110136 VST.floyd.canon <> PROPx def
R110141:110146 VST.floyd.canon <> LOCALx def
R110151:110154 VST.floyd.canon <> SEPx def
binder 110402:110403 <> vi:479
binder 110402:110403 <> vi:480
R110553:110555 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110556:110559 compcert.common.Values <> Vint constr
R110562:110569 compcert.lib.Integers Int repr def
R110553:110555 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110556:110559 compcert.common.Values <> Vint constr
R110562:110569 compcert.lib.Integers Int repr def
R110596:110598 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110599:110602 compcert.common.Values <> Vint constr
R110605:110611 compcert.lib.Integers Int sub def
R110596:110598 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110599:110602 compcert.common.Values <> Vint constr
R110605:110611 compcert.lib.Integers Int sub def
R110657:110659 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110660:110663 compcert.common.Values <> Vint constr
R110666:110672 compcert.lib.Integers Int add def
R110657:110659 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110660:110663 compcert.common.Values <> Vint constr
R110666:110672 compcert.lib.Integers Int add def
R110718:110720 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110721:110724 compcert.common.Values <> Vint constr
R110727:110733 compcert.lib.Integers Int mul def
R110718:110720 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110721:110724 compcert.common.Values <> Vint constr
R110727:110733 compcert.lib.Integers Int mul def
R110779:110781 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110782:110785 compcert.common.Values <> Vint constr
R110788:110794 compcert.lib.Integers Int and def
R110779:110781 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110782:110785 compcert.common.Values <> Vint constr
R110788:110794 compcert.lib.Integers Int and def
R110840:110842 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110843:110846 compcert.common.Values <> Vint constr
R110849:110854 compcert.lib.Integers Int or def
R110840:110842 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110843:110846 compcert.common.Values <> Vint constr
R110849:110854 compcert.lib.Integers Int or def
R110899:110901 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110902:110905 compcert.common.Values <> Vint constr
R110899:110901 Coq.Init.Logic <> ::type_scope:x_'='_x not
R110902:110905 compcert.common.Values <> Vint constr
R110941:110948 compcert.lib.Integers Int repr def
R110951:110962 compcert.lib.Integers Int unsigned def
R111003:111019 compcert.lib.Integers Int repr_unsigned thm
R110871:110876 compcert.lib.Integers Int or def
R110811:110817 compcert.lib.Integers Int and def
R110750:110756 compcert.lib.Integers Int mul def
R110689:110695 compcert.lib.Integers Int add def
R110628:110634 compcert.lib.Integers Int sub def
R111134:111137 compcert.common.Values <> Vint constr
R111140:111147 compcert.lib.Integers Int repr def
R111134:111137 compcert.common.Values <> Vint constr
R111140:111147 compcert.lib.Integers Int repr def
R111191:111194 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R111179:111188 VST.floyd.nested_field_lemmas <> ArraySubsc constr
R111292:111294 Coq.Init.Logic <> ::type_scope:x_'='_x not
R111269:111279 VST.veric.expr <> is_int_type def
R111282:111287 compcert.cfrontend.Clight <> typeof def
R111295:111298 Coq.Init.Datatypes <> true constr
R111341:111364 VST.floyd.forward <> efield_denote_cons_array thm
R109659:109661 Coq.Init.Datatypes <> nil constr
R109689:109698 VST.msl.seplog <> prop_right meth
prf 111683:111701 <> sem_add_ptr_int_lem
R111717:111725 VST.veric.mpred <> compspecs class
binder 111713:111714 <> cs:481
binder 111728:111728 <> v:482
binder 111730:111730 <> t:483
binder 111732:111732 <> i:484
R111768:111774 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R111782:111788 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R111844:111846 Coq.Init.Logic <> ::type_scope:x_'='_x not
R111789:111807 VST.veric.Clight_Cop2 <> sem_add def
R111826:111829 compcert.common.Values <> Vint constr
R111832:111839 compcert.lib.Integers Int repr def
R111841:111841 VST.floyd.forward <> i:484 var
R111823:111823 VST.floyd.forward <> v:482 var
R111818:111821 compcert.exportclight.Clightdefs <> tint def
R111810:111813 compcert.exportclight.Clightdefs <> tptr def
R111815:111815 VST.floyd.forward <> t:483 var
R111847:111850 Coq.Init.Datatypes <> Some constr
R111853:111863 VST.floyd.val_lemmas <> add_ptr_int def
R111869:111869 VST.floyd.forward <> i:484 var
R111867:111867 VST.floyd.forward <> v:482 var
R111865:111865 VST.floyd.forward <> t:483 var
R111775:111779 VST.veric.val_lemmas <> isptr def
R111781:111781 VST.floyd.forward <> v:482 var
R111761:111763 Coq.Init.Logic <> ::type_scope:x_'='_x not
R111738:111750 compcert.cfrontend.Ctypes <> complete_type def
R111760:111760 VST.floyd.forward <> t:483 var
R111752:111758 VST.veric.mpred <> cenv_cs meth
R111764:111767 Coq.Init.Datatypes <> true constr
R111922:111932 VST.floyd.val_lemmas <> add_ptr_int def
R111949:111963 VST.veric.Clight_Cop2 <> sem_add_ptr_int def
R112009:112027 VST.floyd.forward <> sem_add_ptr_int_lem thm
prf 112081:112091 <> sem_add_pi'
R112106:112114 VST.veric.mpred <> compspecs class
binder 112102:112103 <> CS:485
binder 112117:112118 <> t0:486
binder 112120:112121 <> si:487
binder 112123:112123 <> v:488
binder 112125:112125 <> i:489
R112162:112167 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R112175:112180 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R112295:112301 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R112357:112362 Coq.Init.Logic <> ::type_scope:x_'='_x not
R112302:112310 VST.veric.val_lemmas <> force_val def
R112313:112327 VST.veric.Clight_Cop2 <> sem_add_ptr_int def
R112338:112341 compcert.common.Values <> Vint constr
R112344:112351 compcert.lib.Integers Int repr def
R112353:112353 VST.floyd.forward <> i:489 var
R112335:112335 VST.floyd.forward <> v:488 var
R112332:112333 VST.floyd.forward <> si:487 var
R112329:112330 VST.floyd.forward <> t0:486 var
R112363:112372 VST.veric.val_lemmas <> offset_val def
R112390:112390 VST.floyd.forward <> v:488 var
R112384:112386 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R112375:112380 VST.veric.expr <> sizeof def
R112382:112383 VST.floyd.forward <> t0:486 var
R112387:112387 VST.floyd.forward <> i:489 var
R112187:112188 VST.floyd.forward <> si:487 var
R112199:112204 compcert.cfrontend.Ctypes <> Signed constr
R112223:112226 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R112228:112231 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R112209:112222 compcert.lib.Integers Int min_signed def
R112227:112227 VST.floyd.forward <> i:489 var
R112227:112227 VST.floyd.forward <> i:489 var
R112232:112245 compcert.lib.Integers Int max_signed def
R112251:112258 compcert.cfrontend.Ctypes <> Unsigned constr
R112264:112267 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R112269:112272 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R112268:112268 VST.floyd.forward <> i:489 var
R112268:112268 VST.floyd.forward <> i:489 var
R112273:112288 compcert.lib.Integers Int max_unsigned def
R112168:112172 VST.veric.val_lemmas <> isptr def
R112174:112174 VST.floyd.forward <> v:488 var
R112155:112157 Coq.Init.Logic <> ::type_scope:x_'='_x not
R112131:112143 compcert.cfrontend.Ctypes <> complete_type def
R112153:112154 VST.floyd.forward <> t0:486 var
R112145:112151 VST.veric.mpred <> cenv_cs meth
R112158:112161 Coq.Init.Datatypes <> true constr
R112419:112433 VST.veric.Clight_Cop2 <> sem_add_ptr_int def
R112459:112472 VST.floyd.val_lemmas <> sem_add_pi_ptr thm
R112459:112472 VST.floyd.val_lemmas <> sem_add_pi_ptr thm
R112459:112472 VST.floyd.val_lemmas <> sem_add_pi_ptr thm
R112459:112472 VST.floyd.val_lemmas <> sem_add_pi_ptr thm
R112459:112472 VST.floyd.val_lemmas <> sem_add_pi_ptr thm
R112500:112510 VST.floyd.forward <> sem_add_pi' thm
R112589:112598 VST.floyd.fieldlist <> field_type def
R112618:112634 VST.floyd.nested_field_lemmas <> nested_field_type def
R112618:112634 VST.floyd.nested_field_lemmas <> nested_field_type def
prf 112772:112783 <> eq_rect_r_eq
binder 112796:112796 <> U:491
R112809:112809 VST.floyd.forward <> U:491 var
binder 112806:112806 <> p:492
binder 112812:112812 <> Q:493
binder 112814:112814 <> x:494
binder 112816:112816 <> h:495
R112845:112847 Coq.Init.Logic <> ::type_scope:x_'='_x not
R112824:112832 Coq.Init.Logic <> eq_rect_r def
R112844:112844 VST.floyd.forward <> h:495 var
R112842:112842 VST.floyd.forward <> p:492 var
R112840:112840 VST.floyd.forward <> x:494 var
R112838:112838 VST.floyd.forward <> Q:493 var
R112836:112836 VST.floyd.forward <> p:492 var
R112834:112834 VST.floyd.forward <> U:491 var
R112848:112848 VST.floyd.forward <> x:494 var
R112875:112883 Coq.Init.Logic <> eq_rect_r def
R112902:112911 VST.msl.Extensionality EqdepTh eq_rect_eq thm
R112902:112911 VST.msl.Extensionality EqdepTh eq_rect_eq thm
prf 112926:112935 <> pair_congr
binder 112946:112946 <> A:496
binder 112948:112948 <> B:497
R112964:112964 VST.floyd.forward <> A:496 var
binder 112958:112958 <> x:498
binder 112960:112961 <> x':499
R112974:112974 VST.floyd.forward <> B:497 var
binder 112968:112968 <> y:500
binder 112970:112971 <> y':501
R112984:112987 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R112992:112995 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R113001:113001 Coq.Init.Logic <> ::type_scope:x_'='_x not
R112996:112996 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R112998:112998 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113000:113000 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R112997:112997 VST.floyd.forward <> x:498 var
R112999:112999 VST.floyd.forward <> y:500 var
R113002:113002 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113005:113005 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113008:113008 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113003:113004 VST.floyd.forward <> x':499 var
R113006:113007 VST.floyd.forward <> y':501 var
R112989:112989 Coq.Init.Logic <> ::type_scope:x_'='_x not
R112988:112988 VST.floyd.forward <> y:500 var
R112990:112991 VST.floyd.forward <> y':501 var
R112981:112981 Coq.Init.Logic <> ::type_scope:x_'='_x not
R112980:112980 VST.floyd.forward <> x:498 var
R112982:112983 VST.floyd.forward <> x':499 var
R113085:113090 compcert.common.Values <> Vundef constr
R113085:113090 compcert.common.Values <> Vundef constr
R113104:113107 compcert.common.Values <> Vint constr
R113104:113107 compcert.common.Values <> Vint constr
R113123:113127 compcert.common.Values <> Vlong constr
R113123:113127 compcert.common.Values <> Vlong constr
R113143:113148 compcert.common.Values <> Vfloat constr
R113143:113148 compcert.common.Values <> Vfloat constr
R113164:113170 compcert.common.Values <> Vsingle constr
R113164:113170 compcert.common.Values <> Vsingle constr
R113186:113189 compcert.common.Values <> Vptr constr
R113186:113189 compcert.common.Values <> Vptr constr
R113207:113217 compcert.lib.Coqlib <> list_repeat def
R113220:113227 Coq.ZArith.BinInt Z to_nat def
R113207:113217 compcert.lib.Coqlib <> list_repeat def
R113220:113227 Coq.ZArith.BinInt Z to_nat def
ind 113272:113298 <> undo_and_first__assert_PROP
R113305:113308 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R113649:113660 VST.floyd.proj_reptype_lemmas <> proj_reptype def
R113649:113660 VST.floyd.proj_reptype_lemmas <> proj_reptype def
R113742:113753 VST.floyd.proj_reptype_lemmas <> proj_reptype def
R113788:113799 VST.floyd.proj_reptype_lemmas <> proj_reptype def
R113802:113820 VST.floyd.proj_reptype_lemmas <> proj_gfield_reptype def
R113823:113836 VST.floyd.reptype_lemmas <> unfold_reptype def
R113842:113858 VST.floyd.nested_field_lemmas <> nested_field_type def
R113861:113876 VST.floyd.nested_field_lemmas <> nested_field_rec def
R113895:113906 VST.floyd.forward <> eq_rect_r_eq thm
R113913:113922 VST.msl.Extensionality EqdepTh eq_rect_eq thm
R113967:113978 VST.floyd.forward <> eq_rect_r_eq thm
R113985:113994 VST.msl.Extensionality EqdepTh eq_rect_eq thm
R114261:114265 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R114279:114287 compcert.cfrontend.Clight <> Ssequence constr
R114261:114265 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R114279:114287 compcert.cfrontend.Clight <> Ssequence constr
R114380:114381 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R114382:114386 VST.veric.mpred <> mpred def
R114373:114379 VST.veric.mpred <> environ ind
R114410:114419 VST.floyd.canon <> semax_seq' thm
prf 114939:114954 <> bind_ret_derives
binder 114956:114956 <> t:504
binder 114958:114958 <> P:505
binder 114960:114960 <> Q:506
binder 114962:114962 <> v:507
R114971:114974 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R114989:114993 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R114975:114982 VST.veric.SeparationLogic <> bind_ret def
R114988:114988 VST.floyd.forward <> P:505 var
R114986:114986 VST.floyd.forward <> t:504 var
R114984:114984 VST.floyd.forward <> v:507 var
R114994:115001 VST.veric.SeparationLogic <> bind_ret def
R115007:115007 VST.floyd.forward <> Q:506 var
R115005:115005 VST.floyd.forward <> t:504 var
R115003:115003 VST.floyd.forward <> v:507 var
R114966:114969 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R114965:114965 VST.floyd.forward <> P:505 var
R114970:114970 VST.floyd.forward <> Q:506 var
R115096:115107 VST.msl.seplog <> derives_refl meth
R115096:115107 VST.msl.seplog <> derives_refl meth
R115096:115107 VST.msl.seplog <> derives_refl meth
R115096:115107 VST.msl.seplog <> derives_refl meth
R115096:115107 VST.msl.seplog <> derives_refl meth
R115096:115107 VST.msl.seplog <> derives_refl meth
R115096:115107 VST.msl.seplog <> derives_refl meth
R115096:115107 VST.msl.seplog <> derives_refl meth
R115096:115107 VST.msl.seplog <> derives_refl meth
R115096:115107 VST.msl.seplog <> derives_refl meth
R115536:115551 VST.floyd.canon <> return_inner_gen ind
R115536:115551 VST.floyd.canon <> return_inner_gen ind
R115589:115591 VST.msl.seplog <> exp meth
R115589:115591 VST.msl.seplog <> exp meth
R115783:115787 VST.floyd.canon <> PROPx def
R115792:115797 VST.floyd.canon <> LOCALx def
R115802:115805 VST.floyd.canon <> SEPx def
R115783:115787 VST.floyd.canon <> PROPx def
R115792:115797 VST.floyd.canon <> LOCALx def
R115802:115805 VST.floyd.canon <> SEPx def
R116513:116533 VST.floyd.canon <> return_inner_gen_main constr
R115841:115844 Coq.Init.Datatypes <> Some constr
R115841:115844 Coq.Init.Datatypes <> Some constr
R116240:116243 Coq.Init.Datatypes <> None constr
R116240:116243 Coq.Init.Datatypes <> None constr
R116271:116296 VST.floyd.canon <> return_inner_gen_canon_nil thm
R116332:116344 VST.floyd.computable_functions <> VST_floyd_app def
R115872:115898 VST.floyd.canon <> return_inner_gen_canon_Some thm
R115934:115946 VST.floyd.computable_functions <> VST_floyd_app def
R116000:116025 VST.floyd.canon <> return_inner_gen_canon_nil thm
R116061:116073 VST.floyd.computable_functions <> VST_floyd_app def
R115617:115635 VST.floyd.canon <> return_inner_gen_EX thm
ind 116795:116804 <> fn_data_at
constr 116904:116919 <> fn_data_at_intro
R116811:116819 VST.veric.mpred <> compspecs class
binder 116807:116808 <> cs:508
R116830:116838 VST.veric.seplog <> tycontext ind
binder 116823:116827 <> Delta:509
R116846:116852 compcert.lib.Maps PTree t def
R116859:116861 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R116855:116858 compcert.cfrontend.Ctypes <> type ind
R116862:116864 compcert.common.Values <> val ind
binder 116842:116843 <> T2:510
R116881:116884 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R116890:116893 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R116885:116889 VST.veric.mpred <> mpred def
R116874:116876 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R116869:116873 compcert.common.AST <> ident def
R116877:116880 compcert.cfrontend.Ctypes <> type ind
binder 116929:116929 <> i:513
binder 116931:116931 <> t:514
binder 116933:116933 <> p:515
R117058:117065 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R117104:117111 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R117112:117121 VST.floyd.forward <> fn_data_at:511 ind
R117140:117147 VST.floyd.field_at <> data_at_ def
R117155:117155 VST.floyd.forward <> p:515 var
R117153:117153 VST.floyd.forward <> t:514 var
R117149:117151 VST.veric.shares <> Tsh def
R117132:117132 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R117134:117135 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R117137:117137 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R117133:117133 VST.floyd.forward <> i:513 var
R117136:117136 VST.floyd.forward <> t:514 var
R117129:117130 VST.floyd.forward <> T2:510 var
R117123:117127 VST.floyd.forward <> Delta:509 var
R117095:117097 Coq.Init.Logic <> ::type_scope:x_'='_x not
R117066:117081 VST.floyd.local2ptree_eval <> msubst_eval_lvar def
R117094:117094 VST.floyd.forward <> t:514 var
R117092:117092 VST.floyd.forward <> i:513 var
R117089:117090 VST.floyd.forward <> T2:510 var
R117083:117087 VST.floyd.forward <> Delta:509 var
R117098:117101 Coq.Init.Datatypes <> Some constr
R117103:117103 VST.floyd.forward <> p:515 var
R117045:117047 Coq.Init.Logic <> ::type_scope:x_'='_x not
R116999:117002 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R116967:116971 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R116998:116998 Coq.Init.Datatypes <> ::bool_scope:x_'&&'_x not
R116941:116964 VST.veric.composite_compute <> complete_legal_cosu_type def
R116966:116966 VST.floyd.forward <> t:514 var
R116980:116983 Coq.ZArith.BinInt <> ::Z_scope:x_'<?'_x not
R116972:116977 VST.veric.expr <> sizeof def
R116979:116979 VST.floyd.forward <> t:514 var
R116984:116997 compcert.lib.Integers Ptrofs modulus def
R117003:117012 VST.veric.align_mem LegalAlignasFacts.LegalAlignasDefs is_aligned def
R117042:117042 VST.floyd.forward <> t:514 var
R117032:117040 VST.veric.mpred <> la_env_cs meth
R117022:117030 VST.veric.mpred <> ha_env_cs meth
R117014:117020 VST.veric.mpred <> cenv_cs meth
R117048:117051 Coq.Init.Datatypes <> true constr
prf 117166:117188 <> canonicalize_stackframe
R117203:117211 VST.veric.mpred <> compspecs class
binder 117199:117200 <> cs:516
binder 117214:117218 <> Delta:517
binder 117220:117220 <> P:518
binder 117222:117222 <> Q:519
binder 117224:117224 <> R:520
binder 117226:117227 <> T1:521
binder 117229:117230 <> T2:522
binder 117232:117233 <> GV:523
binder 117235:117236 <> fn:524
R117274:117279 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R117314:117319 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R117375:117379 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R117344:117347 VST.msl.seplog <> ::logic:x_'&&'_x not
R117320:117324 VST.veric.SeparationLogic <> local def
R117327:117336 VST.veric.SeparationLogic <> tc_environ def
R117338:117342 VST.floyd.forward <> Delta:517 var
R117348:117352 VST.floyd.canon <> PROPx def
R117357:117362 VST.floyd.canon <> LOCALx def
R117367:117370 VST.floyd.canon <> SEPx def
R117372:117372 VST.floyd.forward <> R:520 var
R117364:117364 VST.floyd.forward <> Q:519 var
R117354:117354 VST.floyd.forward <> P:518 var
R117380:117389 Coq.Lists.List <> fold_right def
R117403:117405 Coq.Lists.List <> map def
R117423:117424 VST.floyd.forward <> fn:524 var
R117408:117416 VST.veric.SeparationLogic <> var_block def
R117418:117420 VST.veric.shares <> Tsh def
R117398:117400 VST.msl.seplog <> emp meth
R117391:117396 VST.msl.seplog <> sepcon meth
R117280:117286 Coq.Lists.List <> Forall2 ind
R117313:117313 VST.floyd.forward <> R:520 var
R117310:117311 VST.floyd.forward <> fn:524 var
R117289:117298 VST.floyd.forward <> fn_data_at ind
R117306:117307 VST.floyd.forward <> T2:522 var
R117300:117304 VST.floyd.forward <> Delta:517 var
R117254:117256 Coq.Init.Logic <> ::type_scope:x_'='_x not
R117241:117251 VST.floyd.local2ptree_denote <> local2ptree def
R117253:117253 VST.floyd.forward <> Q:519 var
R117257:117257 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R117260:117261 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R117264:117265 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R117269:117270 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R117273:117273 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R117258:117259 VST.floyd.forward <> T1:521 var
R117262:117263 VST.floyd.forward <> T2:522 var
R117266:117268 Coq.Init.Datatypes <> nil constr
R117271:117272 VST.floyd.forward <> GV:523 var
R117488:117494 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R117500:117501 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R117537:117541 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R117502:117506 VST.floyd.canon <> PROPx def
R117511:117516 VST.floyd.canon <> LOCALx def
R117521:117524 VST.floyd.canon <> SEPx def
R117528:117531 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R117557:117559 VST.msl.seplog <> ::logic:x_'*'_x not
R117542:117550 VST.veric.SeparationLogic <> var_block def
R117552:117554 VST.veric.shares <> Tsh def
R117560:117569 Coq.Lists.List <> fold_right def
R117583:117585 Coq.Lists.List <> map def
R117588:117596 VST.veric.SeparationLogic <> var_block def
R117598:117600 VST.veric.shares <> Tsh def
R117578:117580 VST.msl.seplog <> emp meth
R117571:117576 VST.msl.seplog <> sepcon meth
R117488:117494 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R117500:117501 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R117537:117541 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R117502:117506 VST.floyd.canon <> PROPx def
R117511:117516 VST.floyd.canon <> LOCALx def
R117521:117524 VST.floyd.canon <> SEPx def
R117528:117531 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R117557:117559 VST.msl.seplog <> ::logic:x_'*'_x not
R117542:117550 VST.veric.SeparationLogic <> var_block def
R117552:117554 VST.veric.shares <> Tsh def
R117560:117569 Coq.Lists.List <> fold_right def
R117583:117585 Coq.Lists.List <> map def
R117588:117596 VST.veric.SeparationLogic <> var_block def
R117598:117600 VST.veric.shares <> Tsh def
R117578:117580 VST.msl.seplog <> emp meth
R117571:117576 VST.msl.seplog <> sepcon meth
R117619:117631 VST.msl.seplog <> derives_trans meth
R117643:117656 VST.msl.seplog <> sepcon_derives meth
R117666:117677 VST.msl.seplog <> derives_refl meth
R117619:117631 VST.msl.seplog <> derives_trans meth
R117643:117656 VST.msl.seplog <> sepcon_derives meth
R117666:117677 VST.msl.seplog <> derives_refl meth
R117728:117748 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R117756:117759 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R117728:117748 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R117756:117759 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R117812:117824 Coq.Bool.Bool <> andb_true_iff thm
R117812:117824 Coq.Bool.Bool <> andb_true_iff thm
R117812:117824 Coq.Bool.Bool <> andb_true_iff thm
R117812:117824 Coq.Bool.Bool <> andb_true_iff thm
R117812:117824 Coq.Bool.Bool <> andb_true_iff thm
R117870:117888 VST.floyd.local2ptree_eval <> msubst_eval_lvar_eq thm
R117924:117927 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R117908:117915 VST.floyd.field_at <> data_at_ def
R117917:117919 VST.veric.shares <> Tsh def
R117870:117888 VST.floyd.local2ptree_eval <> msubst_eval_lvar_eq thm
R117924:117927 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R117908:117915 VST.floyd.field_at <> data_at_ def
R117917:117919 VST.veric.shares <> Tsh def
R117986:117993 VST.msl.log_normalize <> add_andp thm
R117986:117993 VST.msl.log_normalize <> add_andp thm
R117986:117993 VST.msl.log_normalize <> add_andp thm
R118039:118052 VST.msl.seplog <> sepcon_derives meth
R118039:118052 VST.msl.seplog <> sepcon_derives meth
R118084:118101 VST.floyd.field_at <> var_block_data_at_ thm
R118084:118101 VST.floyd.field_at <> var_block_data_at_ thm
R118084:118101 VST.floyd.field_at <> var_block_data_at_ thm
R118118:118129 VST.msl.seplog <> derives_refl meth
R118118:118129 VST.msl.seplog <> derives_refl meth
prf 118144:118170 <> canonicalize_stackframe_emp
R118185:118193 VST.veric.mpred <> compspecs class
binder 118181:118182 <> cs:525
binder 118196:118200 <> Delta:526
binder 118202:118202 <> P:527
binder 118204:118204 <> Q:528
R118266:118270 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R118233:118236 VST.msl.seplog <> ::logic:x_'&&'_x not
R118209:118213 VST.veric.SeparationLogic <> local def
R118216:118225 VST.veric.SeparationLogic <> tc_environ def
R118227:118231 VST.floyd.forward <> Delta:526 var
R118237:118241 VST.floyd.canon <> PROPx def
R118246:118251 VST.floyd.canon <> LOCALx def
R118256:118259 VST.floyd.canon <> SEPx def
R118261:118263 Coq.Init.Datatypes <> nil constr
R118253:118253 VST.floyd.forward <> Q:528 var
R118243:118243 VST.floyd.forward <> P:527 var
R118271:118273 VST.msl.seplog <> emp meth
R118365:118375 Coq.Lists.List <> Forall2_nil constr
R118389:118400 Coq.Lists.List <> Forall2_cons constr
R118411:118426 VST.floyd.forward <> fn_data_at_intro constr
R118565:118591 VST.floyd.forward <> canonicalize_stackframe_emp thm
R118610:118622 VST.veric.SeparationLogic <> stackframe_of def
R118645:118667 VST.floyd.forward <> canonicalize_stackframe thm
R118800:118809 VST.floyd.client_lemmas <> abbreviate def
R118811:118820 VST.veric.tycontext <> ret_assert rec
R118800:118809 VST.floyd.client_lemmas <> abbreviate def
R118811:118820 VST.veric.tycontext <> ret_assert rec
R118839:118848 VST.floyd.client_lemmas <> abbreviate def
R118888:118892 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R118888:118892 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R118923:118931 VST.veric.tycontext <> RA_return proj
R118923:118931 VST.veric.tycontext <> RA_return proj
binder 118941:118942 <> vl:529
binder 118944:118946 <> rho:530
R118969:118971 VST.msl.seplog <> ::logic:x_'*'_x not
R118951:118958 VST.veric.SeparationLogic <> bind_ret def
R118972:118984 VST.veric.SeparationLogic <> stackframe_of def
R118923:118931 VST.veric.tycontext <> RA_return proj
R118923:118931 VST.veric.tycontext <> RA_return proj
binder 118941:118942 <> vl:531
binder 118944:118946 <> rho:532
R118969:118971 VST.msl.seplog <> ::logic:x_'*'_x not
R118951:118958 VST.veric.SeparationLogic <> bind_ret def
R118972:118984 VST.veric.SeparationLogic <> stackframe_of def
R119023:119038 VST.veric.SeparationLogic <> frame_ret_assert def
R119072:119084 VST.veric.SeparationLogic <> stackframe_of def
R119041:119064 VST.veric.SeparationLogic <> function_body_ret_assert def
R119006:119015 VST.floyd.canon <> semax_post thm
R119122:119130 VST.msl.log_normalize <> FF_sepcon thm
R119139:119148 VST.msl.seplog <> andp_left2 meth
R119157:119163 VST.msl.log_normalize <> FF_left thm
R119196:119204 VST.msl.log_normalize <> FF_sepcon thm
R119213:119222 VST.msl.seplog <> andp_left2 meth
R119231:119237 VST.msl.log_normalize <> FF_left thm
R119270:119278 VST.msl.log_normalize <> FF_sepcon thm
R119287:119296 VST.msl.seplog <> andp_left2 meth
R119305:119311 VST.msl.log_normalize <> FF_left thm
prf 119372:119393 <> fold_another_var_block
R119410:119418 VST.veric.mpred <> compspecs class
binder 119406:119407 <> cs:533
binder 119421:119425 <> Delta:534
binder 119427:119427 <> P:535
binder 119429:119429 <> Q:536
binder 119431:119431 <> R:537
binder 119433:119434 <> P':538
binder 119436:119437 <> Q':539
binder 119439:119440 <> R':540
binder 119442:119442 <> i:541
R119448:119451 compcert.cfrontend.Ctypes <> type ind
binder 119445:119445 <> t:542
binder 119454:119456 <> vbs:543
binder 119458:119459 <> T1:544
binder 119461:119462 <> T2:545
binder 119464:119465 <> GV:546
binder 119467:119467 <> p:547
R119501:119506 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R119540:119545 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R119579:119584 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R119634:119639 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R119670:119675 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R119695:119700 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R119869:119874 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R119875:119881 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R119887:119888 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R119916:119925 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R119882:119886 VST.floyd.forward <> Delta:534 var
R119889:119893 VST.floyd.canon <> PROPx def
R119898:119903 VST.floyd.canon <> LOCALx def
R119908:119911 VST.floyd.canon <> SEPx def
R119913:119913 VST.floyd.forward <> R:537 var
R119905:119905 VST.floyd.forward <> Q:536 var
R119895:119895 VST.floyd.forward <> P:535 var
R119956:119970 VST.msl.seplog <> ::logic:x_'*'_x not
R119926:119930 VST.floyd.canon <> PROPx def
R119936:119941 VST.floyd.canon <> LOCALx def
R119947:119950 VST.floyd.canon <> SEPx def
R119952:119953 VST.floyd.forward <> R':540 var
R119943:119944 VST.floyd.forward <> Q':539 var
R119932:119933 VST.floyd.forward <> P':538 var
R119971:119980 Coq.Lists.List <> fold_right def
R119994:119996 Coq.Lists.List <> map def
R120020:120021 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R120015:120015 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R120017:120017 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R120019:120019 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R120016:120016 VST.floyd.forward <> i:541 var
R120018:120018 VST.floyd.forward <> t:542 var
R120022:120024 VST.floyd.forward <> vbs:543 var
R119999:120007 VST.veric.SeparationLogic <> var_block def
R120009:120011 VST.veric.shares <> Tsh def
R119989:119991 VST.msl.seplog <> emp meth
R119982:119987 VST.msl.seplog <> sepcon meth
R119701:119707 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R119713:119714 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R119742:119753 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R119708:119712 VST.floyd.forward <> Delta:534 var
R119715:119719 VST.floyd.canon <> PROPx def
R119724:119729 VST.floyd.canon <> LOCALx def
R119734:119737 VST.floyd.canon <> SEPx def
R119739:119739 VST.floyd.forward <> R:537 var
R119731:119731 VST.floyd.forward <> Q:536 var
R119721:119721 VST.floyd.forward <> P:535 var
R119806:119821 VST.msl.seplog <> ::logic:x_'*'_x not
R119754:119758 VST.floyd.canon <> PROPx def
R119764:119769 VST.floyd.canon <> LOCALx def
R119775:119778 VST.floyd.canon <> SEPx def
R119797:119800 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R119781:119788 VST.floyd.field_at <> data_at_ def
R119796:119796 VST.floyd.forward <> p:547 var
R119794:119794 VST.floyd.forward <> t:542 var
R119790:119792 VST.veric.shares <> Tsh def
R119801:119802 VST.floyd.forward <> R':540 var
R119771:119772 VST.floyd.forward <> Q':539 var
R119760:119761 VST.floyd.forward <> P':538 var
R119822:119831 Coq.Lists.List <> fold_right def
R119845:119847 Coq.Lists.List <> map def
R119865:119867 VST.floyd.forward <> vbs:543 var
R119850:119858 VST.veric.SeparationLogic <> var_block def
R119860:119862 VST.veric.shares <> Tsh def
R119840:119842 VST.msl.seplog <> emp meth
R119833:119838 VST.msl.seplog <> sepcon meth
R119682:119684 Coq.Init.Logic <> ::type_scope:x_'='_x not
R119678:119680 compcert.lib.Maps <> :::x_'!'_x not
R119681:119681 VST.floyd.forward <> i:541 var
R119676:119677 VST.floyd.forward <> T2:545 var
R119685:119688 Coq.Init.Datatypes <> Some constr
R119690:119690 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R119692:119692 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R119694:119694 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R119691:119691 VST.floyd.forward <> t:542 var
R119693:119693 VST.floyd.forward <> p:547 var
R119661:119663 Coq.Init.Logic <> ::type_scope:x_'='_x not
R119640:119640 compcert.lib.Maps <> :::x_'!'_x not
R119656:119659 compcert.lib.Maps <> :::x_'!'_x not
R119660:119660 VST.floyd.forward <> i:541 var
R119641:119649 VST.veric.seplog <> var_types def
R119651:119655 VST.floyd.forward <> Delta:534 var
R119664:119667 Coq.Init.Datatypes <> Some constr
R119669:119669 VST.floyd.forward <> t:542 var
R119627:119629 Coq.Init.Logic <> ::type_scope:x_'='_x not
R119585:119594 VST.veric.align_mem LegalAlignasFacts.LegalAlignasDefs is_aligned def
R119624:119624 VST.floyd.forward <> t:542 var
R119614:119622 VST.veric.mpred <> la_env_cs meth
R119604:119612 VST.veric.mpred <> ha_env_cs meth
R119596:119602 VST.veric.mpred <> cenv_cs meth
R119630:119633 Coq.Init.Datatypes <> true constr
R119572:119574 Coq.Init.Logic <> ::type_scope:x_'='_x not
R119554:119557 Coq.ZArith.BinInt <> ::Z_scope:x_'<?'_x not
R119546:119551 VST.veric.expr <> sizeof def
R119553:119553 VST.floyd.forward <> t:542 var
R119558:119571 compcert.lib.Integers Ptrofs modulus def
R119575:119578 Coq.Init.Datatypes <> true constr
R119533:119535 Coq.Init.Logic <> ::type_scope:x_'='_x not
R119507:119530 VST.veric.composite_compute <> complete_legal_cosu_type def
R119532:119532 VST.floyd.forward <> t:542 var
R119536:119539 Coq.Init.Datatypes <> true constr
R119485:119487 Coq.Init.Logic <> ::type_scope:x_'='_x not
R119472:119482 VST.floyd.local2ptree_denote <> local2ptree def
R119484:119484 VST.floyd.forward <> Q:536 var
R119488:119488 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R119491:119491 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R119494:119494 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R119497:119497 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R119500:119500 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R119489:119490 VST.floyd.forward <> T1:544 var
R119492:119493 VST.floyd.forward <> T2:545 var
R119495:119496 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R119498:119499 VST.floyd.forward <> GV:546 var
R120089:120096 VST.floyd.field_at <> data_at_ def
R120098:120100 VST.veric.shares <> Tsh def
R120089:120096 VST.floyd.field_at <> data_at_ def
R120098:120100 VST.veric.shares <> Tsh def
R120121:120127 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R120133:120134 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R120162:120171 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R120135:120139 VST.floyd.canon <> PROPx def
R120144:120149 VST.floyd.canon <> LOCALx def
R120154:120157 VST.floyd.canon <> SEPx def
R120202:120205 VST.msl.seplog <> ::logic:x_'*'_x not
R120275:120275 VST.msl.seplog <> ::logic:x_'*'_x not
R120172:120176 VST.floyd.canon <> PROPx def
R120182:120187 VST.floyd.canon <> LOCALx def
R120193:120196 VST.floyd.canon <> SEPx def
R120225:120227 VST.msl.seplog <> ::logic:x_'*'_x not
R120206:120214 VST.veric.SeparationLogic <> var_block def
R120220:120220 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R120222:120222 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R120224:120224 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R120216:120218 VST.veric.shares <> Tsh def
R120228:120237 Coq.Lists.List <> fold_right def
R120251:120253 Coq.Lists.List <> map def
R120256:120264 VST.veric.SeparationLogic <> var_block def
R120266:120268 VST.veric.shares <> Tsh def
R120246:120248 VST.msl.seplog <> emp meth
R120239:120244 VST.msl.seplog <> sepcon meth
R120121:120127 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R120133:120134 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R120162:120171 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R120135:120139 VST.floyd.canon <> PROPx def
R120144:120149 VST.floyd.canon <> LOCALx def
R120154:120157 VST.floyd.canon <> SEPx def
R120202:120205 VST.msl.seplog <> ::logic:x_'*'_x not
R120275:120275 VST.msl.seplog <> ::logic:x_'*'_x not
R120172:120176 VST.floyd.canon <> PROPx def
R120182:120187 VST.floyd.canon <> LOCALx def
R120193:120196 VST.floyd.canon <> SEPx def
R120225:120227 VST.msl.seplog <> ::logic:x_'*'_x not
R120206:120214 VST.veric.SeparationLogic <> var_block def
R120220:120220 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R120222:120222 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R120224:120224 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R120216:120218 VST.veric.shares <> Tsh def
R120228:120237 Coq.Lists.List <> fold_right def
R120251:120253 Coq.Lists.List <> map def
R120256:120264 VST.veric.SeparationLogic <> var_block def
R120266:120268 VST.veric.shares <> Tsh def
R120246:120248 VST.msl.seplog <> emp meth
R120239:120244 VST.msl.seplog <> sepcon meth
R120288:120297 Coq.Lists.List <> fold_right def
R120311:120313 Coq.Lists.List <> map def
R120316:120324 VST.veric.SeparationLogic <> var_block def
R120326:120328 VST.veric.shares <> Tsh def
R120306:120308 VST.msl.seplog <> emp meth
R120299:120304 VST.msl.seplog <> sepcon meth
R120288:120297 Coq.Lists.List <> fold_right def
R120311:120313 Coq.Lists.List <> map def
R120316:120324 VST.veric.SeparationLogic <> var_block def
R120326:120328 VST.veric.shares <> Tsh def
R120306:120308 VST.msl.seplog <> emp meth
R120299:120304 VST.msl.seplog <> sepcon meth
R120392:120394 VST.msl.seplog <> ::logic:x_'*'_x not
R120354:120358 VST.floyd.canon <> PROPx def
R120364:120369 VST.floyd.canon <> LOCALx def
R120375:120378 VST.floyd.canon <> SEPx def
R120383:120386 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R120439:120442 VST.msl.seplog <> ::logic:x_'*'_x not
R120457:120457 VST.msl.seplog <> ::logic:x_'*'_x not
R120409:120413 VST.floyd.canon <> PROPx def
R120419:120424 VST.floyd.canon <> LOCALx def
R120430:120433 VST.floyd.canon <> SEPx def
R120451:120453 VST.msl.seplog <> ::logic:x_'*'_x not
R120443:120447 VST.veric.lift <> liftx def
R120392:120394 VST.msl.seplog <> ::logic:x_'*'_x not
R120354:120358 VST.floyd.canon <> PROPx def
R120364:120369 VST.floyd.canon <> LOCALx def
R120375:120378 VST.floyd.canon <> SEPx def
R120383:120386 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R120439:120442 VST.msl.seplog <> ::logic:x_'*'_x not
R120457:120457 VST.msl.seplog <> ::logic:x_'*'_x not
R120409:120413 VST.floyd.canon <> PROPx def
R120419:120424 VST.floyd.canon <> LOCALx def
R120430:120433 VST.floyd.canon <> SEPx def
R120451:120453 VST.msl.seplog <> ::logic:x_'*'_x not
R120443:120447 VST.veric.lift <> liftx def
R120501:120505 VST.floyd.canon <> PROPx def
R120508:120513 VST.floyd.canon <> LOCALx def
R120516:120519 VST.floyd.canon <> SEPx def
R120550:120554 VST.veric.SeparationLogic <> local def
R120557:120561 VST.veric.mpred <> lift1 def
R120617:120628 VST.msl.seplog <> sepcon_assoc meth
R120617:120628 VST.msl.seplog <> sepcon_assoc meth
R120617:120628 VST.msl.seplog <> sepcon_assoc meth
R120680:120680 VST.msl.seplog <> ::logic:x_'&&'_x not
R120737:120746 VST.msl.seplog <> ::logic:x_'&&'_x not
R120812:120812 VST.msl.seplog <> ::logic:x_'&&'_x not
R120705:120709 VST.msl.seplog <> ::logic:x_'&&'_x not
R120681:120685 VST.veric.SeparationLogic <> local def
R120688:120697 VST.veric.SeparationLogic <> tc_environ def
R120710:120714 VST.floyd.canon <> PROPx def
R120719:120724 VST.floyd.canon <> LOCALx def
R120729:120732 VST.floyd.canon <> SEPx def
R120771:120775 VST.msl.seplog <> ::logic:x_'&&'_x not
R120747:120751 VST.veric.SeparationLogic <> local def
R120754:120763 VST.veric.SeparationLogic <> tc_environ def
R120776:120780 VST.floyd.canon <> PROPx def
R120787:120792 VST.floyd.canon <> LOCALx def
R120797:120800 VST.floyd.canon <> SEPx def
R120804:120805 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R120802:120803 VST.msl.seplog <> TT meth
R120806:120808 Coq.Init.Datatypes <> nil constr
R120782:120784 Coq.Init.Datatypes <> nil constr
R120660:120672 VST.msl.seplog <> derives_trans meth
R120680:120680 VST.msl.seplog <> ::logic:x_'&&'_x not
R120737:120746 VST.msl.seplog <> ::logic:x_'&&'_x not
R120812:120812 VST.msl.seplog <> ::logic:x_'&&'_x not
R120705:120709 VST.msl.seplog <> ::logic:x_'&&'_x not
R120681:120685 VST.veric.SeparationLogic <> local def
R120688:120697 VST.veric.SeparationLogic <> tc_environ def
R120710:120714 VST.floyd.canon <> PROPx def
R120719:120724 VST.floyd.canon <> LOCALx def
R120729:120732 VST.floyd.canon <> SEPx def
R120771:120775 VST.msl.seplog <> ::logic:x_'&&'_x not
R120747:120751 VST.veric.SeparationLogic <> local def
R120754:120763 VST.veric.SeparationLogic <> tc_environ def
R120776:120780 VST.floyd.canon <> PROPx def
R120787:120792 VST.floyd.canon <> LOCALx def
R120797:120800 VST.floyd.canon <> SEPx def
R120804:120805 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R120802:120803 VST.msl.seplog <> TT meth
R120806:120808 Coq.Init.Datatypes <> nil constr
R120782:120784 Coq.Init.Datatypes <> nil constr
R120660:120672 VST.msl.seplog <> derives_trans meth
R120840:120849 VST.msl.seplog <> andp_right meth
R120868:120877 VST.msl.seplog <> prop_right meth
R120840:120849 VST.msl.seplog <> andp_right meth
R120840:120849 VST.msl.seplog <> andp_right meth
R120840:120849 VST.msl.seplog <> andp_right meth
R120840:120849 VST.msl.seplog <> andp_right meth
R120840:120849 VST.msl.seplog <> andp_right meth
R120840:120849 VST.msl.seplog <> andp_right meth
R120840:120849 VST.msl.seplog <> andp_right meth
R120868:120877 VST.msl.seplog <> prop_right meth
R120868:120877 VST.msl.seplog <> prop_right meth
R120868:120877 VST.msl.seplog <> prop_right meth
R120894:120903 VST.msl.seplog <> sepcon_emp meth
R120894:120903 VST.msl.seplog <> sepcon_emp meth
R120894:120903 VST.msl.seplog <> sepcon_emp meth
R120912:120919 VST.msl.log_normalize <> TT_right thm
R120912:120919 VST.msl.log_normalize <> TT_right thm
R120932:120952 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R120954:120956 Coq.Init.Datatypes <> nil constr
R120932:120952 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R120954:120956 Coq.Init.Datatypes <> nil constr
R120932:120952 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R120954:120956 Coq.Init.Datatypes <> nil constr
R120984:120996 VST.msl.seplog <> derives_trans meth
R120984:120996 VST.msl.seplog <> derives_trans meth
R121005:121016 VST.msl.log_normalize <> andp_derives thm
R121005:121016 VST.msl.log_normalize <> andp_derives thm
R121035:121046 VST.msl.seplog <> derives_refl meth
R121035:121046 VST.msl.seplog <> derives_refl meth
R121057:121061 VST.floyd.canon <> PROPx def
R121067:121072 VST.floyd.canon <> LOCALx def
R121078:121081 VST.floyd.canon <> SEPx def
R121057:121061 VST.floyd.canon <> PROPx def
R121067:121072 VST.floyd.canon <> LOCALx def
R121078:121081 VST.floyd.canon <> SEPx def
R121137:121156 VST.floyd.go_lower <> msubst_extract_local def
R121174:121177 VST.floyd.canon <> lvar constr
R121137:121156 VST.floyd.go_lower <> msubst_extract_local def
R121174:121177 VST.floyd.canon <> lvar constr
R121213:121225 VST.veric.Cop2 <> eqb_type_refl thm
R121213:121225 VST.veric.Cop2 <> eqb_type_refl thm
R121213:121225 VST.veric.Cop2 <> eqb_type_refl thm
R121274:121276 Coq.Init.Datatypes <> nil constr
R121284:121284 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R121287:121287 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R121285:121286 VST.msl.seplog <> TT meth
R121240:121263 VST.floyd.go_lower <> localdef_local_facts_inv thm
R121274:121276 Coq.Init.Datatypes <> nil constr
R121284:121284 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R121287:121287 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R121285:121286 VST.msl.seplog <> TT meth
R121240:121263 VST.floyd.go_lower <> localdef_local_facts_inv thm
R121305:121310 VST.floyd.local2ptree_denote <> LocalD def
R121305:121310 VST.floyd.local2ptree_denote <> LocalD def
R121378:121383 VST.msl.seplog <> ::logic:x_'&&'_x not
R121446:121446 VST.msl.seplog <> ::logic:x_'&&'_x not
R121359:121362 VST.msl.seplog <> ::logic:x_'*'_x not
R121377:121377 VST.msl.seplog <> ::logic:x_'*'_x not
R121371:121373 VST.msl.seplog <> ::logic:x_'*'_x not
R121363:121367 VST.veric.lift <> liftx def
R121408:121411 VST.msl.seplog <> ::logic:x_'&&'_x not
R121384:121388 VST.veric.SeparationLogic <> local def
R121391:121400 VST.veric.SeparationLogic <> tc_environ def
R121412:121416 VST.veric.SeparationLogic <> local def
R121419:121431 VST.floyd.canon <> locald_denote def
R121434:121437 VST.floyd.canon <> lvar constr
R121335:121347 VST.msl.seplog <> derives_trans meth
R121378:121383 VST.msl.seplog <> ::logic:x_'&&'_x not
R121446:121446 VST.msl.seplog <> ::logic:x_'&&'_x not
R121359:121362 VST.msl.seplog <> ::logic:x_'*'_x not
R121377:121377 VST.msl.seplog <> ::logic:x_'*'_x not
R121371:121373 VST.msl.seplog <> ::logic:x_'*'_x not
R121363:121367 VST.veric.lift <> liftx def
R121408:121411 VST.msl.seplog <> ::logic:x_'&&'_x not
R121384:121388 VST.veric.SeparationLogic <> local def
R121391:121400 VST.veric.SeparationLogic <> tc_environ def
R121412:121416 VST.veric.SeparationLogic <> local def
R121419:121431 VST.floyd.canon <> locald_denote def
R121434:121437 VST.floyd.canon <> lvar constr
R121335:121347 VST.msl.seplog <> derives_trans meth
R121456:121467 VST.msl.log_normalize <> andp_derives thm
R121456:121467 VST.msl.log_normalize <> andp_derives thm
R121482:121491 VST.msl.seplog <> andp_right meth
R121482:121491 VST.msl.seplog <> andp_right meth
R121500:121509 VST.msl.seplog <> andp_left1 meth
R121500:121509 VST.msl.seplog <> andp_left1 meth
R121552:121565 VST.msl.seplog <> sepcon_derives meth
R121552:121565 VST.msl.seplog <> sepcon_derives meth
R121580:121593 VST.msl.seplog <> sepcon_derives meth
R121580:121593 VST.msl.seplog <> sepcon_derives meth
R121609:121623 VST.floyd.forward <> var_block_lvar0 thm
R121609:121623 VST.floyd.forward <> var_block_lvar0 thm
R121649:121656 Coq.ZArith.BinInt Z ltb_lt thm
R121649:121656 Coq.ZArith.BinInt Z ltb_lt thm
prf 121677:121694 <> no_more_var_blocks
R121710:121718 VST.veric.mpred <> compspecs class
binder 121706:121707 <> cs:548
binder 121721:121725 <> Delta:549
binder 121727:121729 <> PQR:550
binder 121731:121734 <> PQR':551
R121765:121770 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R121771:121777 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R121783:121784 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R121788:121792 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R121778:121782 VST.floyd.forward <> Delta:549 var
R121785:121787 VST.floyd.forward <> PQR:550 var
R121797:121799 VST.msl.seplog <> ::logic:x_'*'_x not
R121793:121796 VST.floyd.forward <> PQR':551 var
R121800:121809 Coq.Lists.List <> fold_right def
R121823:121825 Coq.Lists.List <> map def
R121843:121844 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R121828:121836 VST.veric.SeparationLogic <> var_block def
R121838:121840 VST.veric.shares <> Tsh def
R121818:121820 VST.msl.seplog <> emp meth
R121811:121816 VST.msl.seplog <> sepcon meth
R121739:121745 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R121751:121752 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R121756:121760 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R121746:121750 VST.floyd.forward <> Delta:549 var
R121753:121755 VST.floyd.forward <> PQR:550 var
R121761:121764 VST.floyd.forward <> PQR':551 var
R121870:121872 Coq.Lists.List <> map def
R121882:121891 Coq.Lists.List <> fold_right def
R121902:121911 VST.msl.seplog <> sepcon_emp meth
R121902:121911 VST.msl.seplog <> sepcon_emp meth
R121902:121911 VST.msl.seplog <> sepcon_emp meth
R121988:121994 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R121996:121997 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122025:122037 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R121998:122002 VST.floyd.canon <> PROPx def
R122007:122012 VST.floyd.canon <> LOCALx def
R122017:122020 VST.floyd.canon <> SEPx def
R122065:122067 VST.msl.seplog <> ::logic:x_'*'_x not
R122038:122042 VST.floyd.canon <> PROPx def
R122047:122052 VST.floyd.canon <> LOCALx def
R122057:122060 VST.floyd.canon <> SEPx def
R122068:122080 VST.veric.SeparationLogic <> stackframe_of def
R121988:121994 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R121996:121997 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122025:122037 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R121998:122002 VST.floyd.canon <> PROPx def
R122007:122012 VST.floyd.canon <> LOCALx def
R122017:122020 VST.floyd.canon <> SEPx def
R122065:122067 VST.msl.seplog <> ::logic:x_'*'_x not
R122038:122042 VST.floyd.canon <> PROPx def
R122047:122052 VST.floyd.canon <> LOCALx def
R122057:122060 VST.floyd.canon <> SEPx def
R122068:122080 VST.veric.SeparationLogic <> stackframe_of def
R122099:122111 VST.veric.SeparationLogic <> stackframe_of def
R122167:122188 VST.floyd.forward <> fold_another_var_block thm
R122319:122336 VST.floyd.forward <> no_more_var_blocks thm
R122422:122428 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122430:122431 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122459:122471 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122432:122436 VST.floyd.canon <> PROPx def
R122441:122446 VST.floyd.canon <> LOCALx def
R122451:122454 VST.floyd.canon <> SEPx def
R122499:122501 VST.msl.seplog <> ::logic:x_'*'_x not
R122472:122476 VST.floyd.canon <> PROPx def
R122481:122486 VST.floyd.canon <> LOCALx def
R122491:122494 VST.floyd.canon <> SEPx def
R122502:122514 VST.veric.SeparationLogic <> stackframe_of def
R122422:122428 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122430:122431 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122459:122471 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122432:122436 VST.floyd.canon <> PROPx def
R122441:122446 VST.floyd.canon <> LOCALx def
R122451:122454 VST.floyd.canon <> SEPx def
R122499:122501 VST.msl.seplog <> ::logic:x_'*'_x not
R122472:122476 VST.floyd.canon <> PROPx def
R122481:122486 VST.floyd.canon <> LOCALx def
R122491:122494 VST.floyd.canon <> SEPx def
R122502:122514 VST.veric.SeparationLogic <> stackframe_of def
R122779:122785 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122787:122789 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122791:122795 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122801:122803 VST.msl.seplog <> ::logic:x_'*'_x not
R122796:122798 VST.msl.seplog <> exp meth
R122804:122816 VST.veric.SeparationLogic <> stackframe_of def
R122779:122785 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122787:122789 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122791:122795 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122801:122803 VST.msl.seplog <> ::logic:x_'*'_x not
R122796:122798 VST.msl.seplog <> exp meth
R122804:122816 VST.veric.SeparationLogic <> stackframe_of def
R122960:122966 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122968:122970 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122972:122976 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122977:122979 VST.msl.seplog <> exp meth
R122960:122966 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122968:122970 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122972:122976 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R122977:122979 VST.msl.seplog <> exp meth
R123022:123034 VST.veric.SeparationLogic <> stackframe_of def
R123022:123034 VST.veric.SeparationLogic <> stackframe_of def
R122533:122545 VST.veric.SeparationLogic <> stackframe_of def
R122601:122622 VST.floyd.forward <> fold_another_var_block thm
R122753:122770 VST.floyd.forward <> no_more_var_blocks thm
R123311:123315 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R123336:123342 compcert.cfrontend.Clight <> Sreturn constr
R123311:123315 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R123336:123342 compcert.cfrontend.Clight <> Sreturn constr
R123378:123381 Coq.Init.Datatypes <> None constr
R123378:123381 Coq.Init.Datatypes <> None constr
R123903:123906 Coq.Init.Datatypes <> Some constr
R123903:123906 Coq.Init.Datatypes <> Some constr
R124021:124025 compcert.cfrontend.Clight <> Ecast constr
R124032:124039 VST.veric.seplog <> ret_type def
R124168:124184 VST.floyd.canon <> semax_return_Some thm
R124488:124497 VST.veric.tycontext <> ret_assert rec
R124488:124497 VST.veric.tycontext <> ret_assert rec
R124526:124535 VST.floyd.client_lemmas <> abbreviate def
R123401:123417 VST.floyd.canon <> semax_return_None thm
R123744:123753 VST.veric.tycontext <> ret_assert rec
R123744:123753 VST.veric.tycontext <> ret_assert rec
R123782:123791 VST.floyd.client_lemmas <> abbreviate def
R124732:124735 compcert.cfrontend.Clight <> Sset constr
R124741:124746 compcert.cfrontend.Clight <> Ebinop constr
R124770:124779 compcert.cfrontend.Clight <> Econst_int constr
R124782:124789 compcert.lib.Integers Int repr def
R124754:124761 compcert.cfrontend.Clight <> Etempvar constr
R124748:124751 compcert.cfrontend.Cop <> Oadd constr
R124732:124735 compcert.cfrontend.Clight <> Sset constr
R124741:124746 compcert.cfrontend.Clight <> Ebinop constr
R124770:124779 compcert.cfrontend.Clight <> Econst_int constr
R124782:124789 compcert.lib.Integers Int repr def
R124754:124761 compcert.cfrontend.Clight <> Etempvar constr
R124748:124751 compcert.cfrontend.Cop <> Oadd constr
R124851:124856 compcert.cfrontend.Clight <> Ebinop constr
R124863:124870 compcert.cfrontend.Clight <> Etempvar constr
R124858:124860 compcert.cfrontend.Cop <> Olt constr
R124851:124856 compcert.cfrontend.Clight <> Ebinop constr
R124863:124870 compcert.cfrontend.Clight <> Etempvar constr
R124858:124860 compcert.cfrontend.Cop <> Olt constr
R125450:125459 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_skip prfax
R125530:125535 compcert.cfrontend.Ctypes <> Tarray constr
R125530:125535 compcert.cfrontend.Ctypes <> Tarray constr
R125609:125618 compcert.cfrontend.Clight <> Econst_int constr
R125609:125618 compcert.cfrontend.Clight <> Econst_int constr
R125636:125647 compcert.cfrontend.Clight <> Econst_float constr
R125636:125647 compcert.cfrontend.Clight <> Econst_float constr
R125665:125677 compcert.cfrontend.Clight <> Econst_single constr
R125665:125677 compcert.cfrontend.Clight <> Econst_single constr
R125695:125705 compcert.cfrontend.Clight <> Econst_long constr
R125695:125705 compcert.cfrontend.Clight <> Econst_long constr
R125723:125726 compcert.cfrontend.Clight <> Evar constr
R125723:125726 compcert.cfrontend.Clight <> Evar constr
R125805:125812 compcert.cfrontend.Clight <> Etempvar constr
R125805:125812 compcert.cfrontend.Clight <> Etempvar constr
R125830:125835 compcert.cfrontend.Clight <> Ederef constr
R125830:125835 compcert.cfrontend.Clight <> Ederef constr
R125898:125904 compcert.cfrontend.Clight <> Eaddrof constr
R125898:125904 compcert.cfrontend.Clight <> Eaddrof constr
R125940:125944 compcert.cfrontend.Clight <> Eunop constr
R125940:125944 compcert.cfrontend.Clight <> Eunop constr
R125987:125992 compcert.cfrontend.Clight <> Ebinop constr
R125987:125992 compcert.cfrontend.Clight <> Ebinop constr
R126068:126072 compcert.cfrontend.Clight <> Ecast constr
R126068:126072 compcert.cfrontend.Clight <> Ecast constr
R126113:126118 compcert.cfrontend.Clight <> Efield constr
R126113:126118 compcert.cfrontend.Clight <> Efield constr
R126256:126262 compcert.cfrontend.Clight <> Esizeof constr
R126256:126262 compcert.cfrontend.Clight <> Esizeof constr
R126280:126287 compcert.cfrontend.Clight <> Ealignof constr
R126280:126287 compcert.cfrontend.Clight <> Ealignof constr
R126153:126156 Coq.Init.Datatypes <> true constr
R126153:126156 Coq.Init.Datatypes <> true constr
R126169:126173 Coq.Init.Datatypes <> false constr
R126169:126173 Coq.Init.Datatypes <> false constr
R125757:125760 Coq.Init.Datatypes <> true constr
R125757:125760 Coq.Init.Datatypes <> true constr
R125773:125777 Coq.Init.Datatypes <> false constr
R125773:125777 Coq.Init.Datatypes <> false constr
def 126319:126408 <> Undo__Then_do__forward_call_W__where_W_is_a_witness_whose_type_is_given_above_the_line_now
R126413:126417 Coq.Init.Logic <> False ind
R126575:126578 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R126515:126525 VST.floyd.call_lemmas <> call_setup1 def
R126575:126578 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R126515:126525 VST.floyd.call_lemmas <> call_setup1 def
R126607:126621 VST.veric.rmaps <> ConstType constr
R126607:126621 VST.veric.rmaps <> ConstType constr
R126915:126924 VST.veric.tycontext <> ret_assert rec
R126915:126924 VST.veric.tycontext <> ret_assert rec
R126929:126933 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R126929:126933 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R126997:127006 VST.floyd.client_lemmas <> abbreviate def
R127083:127092 VST.floyd.client_lemmas <> abbreviate def
R127094:127102 VST.veric.seplog <> tycontext ind
R127083:127092 VST.floyd.client_lemmas <> abbreviate def
R127094:127102 VST.veric.seplog <> tycontext ind
R127109:127113 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R127109:127113 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R127355:127359 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R127355:127359 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R127543:127552 VST.floyd.client_lemmas <> abbreviate def
R127554:127562 compcert.cfrontend.Clight <> statement ind
R127543:127552 VST.floyd.client_lemmas <> abbreviate def
R127554:127562 compcert.cfrontend.Clight <> statement ind
R127626:127635 VST.floyd.forward <> seq_assoc1 thm
R127591:127600 VST.floyd.client_lemmas <> abbreviate def
R127662:127670 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R127730:127733 compcert.cfrontend.Clight <> Sfor def
R127739:127743 compcert.cfrontend.Clight <> Sskip constr
R127730:127733 compcert.cfrontend.Clight <> Sfor def
R127739:127743 compcert.cfrontend.Clight <> Sskip constr
R127917:127922 compcert.cfrontend.Clight <> Swhile def
R127917:127922 compcert.cfrontend.Clight <> Swhile def
R128089:128093 compcert.cfrontend.Clight <> Sloop constr
R128142:128146 compcert.cfrontend.Clight <> Sskip constr
R128096:128104 compcert.cfrontend.Clight <> Ssequence constr
R128107:128117 compcert.cfrontend.Clight <> Sifthenelse constr
R128128:128132 compcert.cfrontend.Clight <> Sskip constr
R128121:128126 compcert.cfrontend.Clight <> Sbreak constr
R128089:128093 compcert.cfrontend.Clight <> Sloop constr
R128142:128146 compcert.cfrontend.Clight <> Sskip constr
R128096:128104 compcert.cfrontend.Clight <> Ssequence constr
R128107:128117 compcert.cfrontend.Clight <> Sifthenelse constr
R128128:128132 compcert.cfrontend.Clight <> Sskip constr
R128121:128126 compcert.cfrontend.Clight <> Sbreak constr
R128166:128174 VST.floyd.forward <> nobreaksx def
R128182:128185 Coq.Init.Datatypes <> true constr
R127950:127958 VST.floyd.forward <> nobreaksx def
R127966:127969 Coq.Init.Datatypes <> true constr
R127769:127777 VST.floyd.forward <> nobreaksx def
R127785:127788 Coq.Init.Datatypes <> true constr
R128330:128333 compcert.cfrontend.Clight <> Sfor def
R128330:128333 compcert.cfrontend.Clight <> Sfor def
R129293:129297 compcert.cfrontend.Clight <> Sloop constr
R129293:129297 compcert.cfrontend.Clight <> Sloop constr
R128380:128388 VST.floyd.forward <> nobreaksx def
R128396:128399 Coq.Init.Datatypes <> true constr
R129578:129582 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R129589:129592 compcert.cfrontend.Clight <> Sfor def
R129604:129608 compcert.cfrontend.Clight <> Sskip constr
R129578:129582 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R129589:129592 compcert.cfrontend.Clight <> Sfor def
R129604:129608 compcert.cfrontend.Clight <> Sskip constr
R130597:130601 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R130608:130611 compcert.cfrontend.Clight <> Sfor def
R130597:130601 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R130608:130611 compcert.cfrontend.Clight <> Sfor def
R130689:130697 VST.floyd.forward <> no_breaks def
R130705:130708 Coq.Init.Datatypes <> true constr
R129637:129645 VST.floyd.forward <> no_breaks def
R129653:129656 Coq.Init.Datatypes <> true constr
R132952:132956 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R132963:132973 compcert.cfrontend.Clight <> Sifthenelse constr
R132952:132956 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R132963:132973 compcert.cfrontend.Clight <> Sifthenelse constr
R133336:133340 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R133347:133353 compcert.cfrontend.Clight <> Sswitch constr
R133336:133340 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R133347:133353 compcert.cfrontend.Clight <> Sswitch constr
R133812:133816 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R133823:133828 compcert.cfrontend.Clight <> Swhile def
R133812:133816 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R133823:133828 compcert.cfrontend.Clight <> Swhile def
R134104:134110 compcert.cfrontend.Clight <> Sassign constr
R134104:134110 compcert.cfrontend.Clight <> Sassign constr
R134152:134155 compcert.cfrontend.Clight <> Sset constr
R134152:134155 compcert.cfrontend.Clight <> Sset constr
R134247:134257 compcert.cfrontend.Clight <> Sifthenelse constr
R134247:134257 compcert.cfrontend.Clight <> Sifthenelse constr
R134290:134296 compcert.cfrontend.Clight <> Sswitch constr
R134290:134296 compcert.cfrontend.Clight <> Sswitch constr
R134327:134332 compcert.cfrontend.Clight <> Swhile def
R134327:134332 compcert.cfrontend.Clight <> Swhile def
R134366:134369 compcert.cfrontend.Clight <> Sfor def
R134366:134369 compcert.cfrontend.Clight <> Sfor def
R134408:134412 compcert.cfrontend.Clight <> Sloop constr
R134408:134412 compcert.cfrontend.Clight <> Sloop constr
R134447:134451 compcert.cfrontend.Clight <> Scall constr
R134456:134459 compcert.cfrontend.Clight <> Evar constr
R134447:134451 compcert.cfrontend.Clight <> Scall constr
R134456:134459 compcert.cfrontend.Clight <> Evar constr
R134496:134500 compcert.cfrontend.Clight <> Sskip constr
R134496:134500 compcert.cfrontend.Clight <> Sskip constr
R134590:134601 VST.msl.seplog <> derives_refl meth
R134639:134649 VST.floyd.assert_lemmas <> ENTAIL_refl thm
R134845:134853 VST.floyd.canon <> semax_pre thm
R134866:134876 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_break prfax
R134987:134995 VST.floyd.canon <> semax_pre thm
R135008:135021 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_continue prfax
R135150:135154 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R135159:135163 VST.floyd.canon <> PROPx def
R135168:135173 VST.floyd.canon <> LOCALx def
R135185:135188 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R135176:135179 VST.floyd.canon <> temp constr
R135150:135154 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R135159:135163 VST.floyd.canon <> PROPx def
R135168:135173 VST.floyd.canon <> LOCALx def
R135185:135188 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R135176:135179 VST.floyd.canon <> temp constr
R135283:135283 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R135319:135324 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R135284:135288 VST.floyd.canon <> PROPx def
R135293:135298 VST.floyd.canon <> LOCALx def
R135310:135313 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R135301:135304 VST.floyd.canon <> temp constr
R135283:135283 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R135319:135324 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R135284:135288 VST.floyd.canon <> PROPx def
R135293:135298 VST.floyd.canon <> LOCALx def
R135310:135313 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R135301:135304 VST.floyd.canon <> temp constr
R135502:135521 VST.floyd.client_lemmas <> remove_localdef_temp def
R135502:135521 VST.floyd.client_lemmas <> remove_localdef_temp def
R135552:135571 VST.floyd.client_lemmas <> remove_localdef_temp def
R135634:135644 VST.floyd.canon <> replace_nth def
R135647:135655 VST.floyd.reptype_lemmas <> repinject def
R135764:135768 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R135773:135777 VST.floyd.canon <> PROPx def
R135782:135787 VST.floyd.canon <> LOCALx def
R135792:135795 VST.floyd.canon <> SEPx def
R135764:135768 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R135773:135777 VST.floyd.canon <> PROPx def
R135782:135787 VST.floyd.canon <> LOCALx def
R135792:135795 VST.floyd.canon <> SEPx def
R136101:136105 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R136110:136112 VST.msl.seplog <> exp meth
R136101:136105 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R136110:136112 VST.msl.seplog <> exp meth
R135851:135854 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R135841:135846 VST.msl.seplog <> sepcon meth
R135851:135854 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R135841:135846 VST.msl.seplog <> sepcon meth
R136574:136582 compcert.cfrontend.Clight <> Ssequence constr
R136574:136582 compcert.cfrontend.Clight <> Ssequence constr
R136636:136639 compcert.cfrontend.Clight <> Sset constr
R136644:136649 compcert.cfrontend.Clight <> Efield constr
R136636:136639 compcert.cfrontend.Clight <> Sset constr
R136644:136649 compcert.cfrontend.Clight <> Efield constr
R136747:136752 compcert.cfrontend.Clight <> typeof def
R136804:136809 compcert.cfrontend.Ctypes <> Tunion constr
R136804:136809 compcert.cfrontend.Ctypes <> Tunion constr
R136874:136883 VST.floyd.canon <> semax_seq' thm
R137001:137011 VST.floyd.canon <> replace_nth def
R137089:137095 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R137097:137098 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R137100:137104 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R137106:137108 VST.msl.seplog <> ::logic:x_'*'_x not
R137109:137121 VST.veric.SeparationLogic <> stackframe_of def
R137089:137095 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R137097:137098 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R137100:137104 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R137106:137108 VST.msl.seplog <> ::logic:x_'*'_x not
R137109:137121 VST.veric.SeparationLogic <> stackframe_of def
R137237:137244 VST.floyd.canon <> semax_ff thm
R137303:137311 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic seq_assoc prfax
R137344:137348 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137355:137363 compcert.cfrontend.Clight <> Ssequence constr
R137366:137372 compcert.cfrontend.Clight <> Sreturn constr
R137344:137348 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137355:137363 compcert.cfrontend.Clight <> Ssequence constr
R137366:137372 compcert.cfrontend.Clight <> Sreturn constr
R137480:137484 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137491:137497 compcert.cfrontend.Clight <> Sreturn constr
R137480:137484 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137491:137497 compcert.cfrontend.Clight <> Sreturn constr
R137549:137553 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137560:137568 compcert.cfrontend.Clight <> Ssequence constr
R137570:137575 compcert.cfrontend.Clight <> Sbreak constr
R137549:137553 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137560:137568 compcert.cfrontend.Clight <> Ssequence constr
R137570:137575 compcert.cfrontend.Clight <> Sbreak constr
R137657:137661 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137668:137676 compcert.cfrontend.Clight <> Ssequence constr
R137678:137686 compcert.cfrontend.Clight <> Scontinue constr
R137657:137661 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137668:137676 compcert.cfrontend.Clight <> Ssequence constr
R137678:137686 compcert.cfrontend.Clight <> Scontinue constr
R137771:137775 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137781:137786 compcert.cfrontend.Clight <> Sbreak constr
R137771:137775 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137781:137786 compcert.cfrontend.Clight <> Sbreak constr
R137814:137818 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137824:137832 compcert.cfrontend.Clight <> Scontinue constr
R137814:137818 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137824:137832 compcert.cfrontend.Clight <> Scontinue constr
R137863:137867 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137873:137877 compcert.cfrontend.Clight <> Sskip constr
R137863:137867 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137873:137877 compcert.cfrontend.Clight <> Sskip constr
R137900:137904 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137900:137904 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R137943:137951 compcert.cfrontend.Clight <> Ssequence constr
R137943:137951 compcert.cfrontend.Clight <> Ssequence constr
R137988:138001 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_seq_skip prfax
R138041:138045 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R138052:138060 compcert.cfrontend.Clight <> Ssequence constr
R138063:138069 compcert.cfrontend.Clight <> Sassign constr
R138072:138077 compcert.cfrontend.Clight <> Efield constr
R138041:138045 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R138052:138060 compcert.cfrontend.Clight <> Ssequence constr
R138063:138069 compcert.cfrontend.Clight <> Sassign constr
R138072:138077 compcert.cfrontend.Clight <> Efield constr
R138163:138167 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R138174:138182 compcert.cfrontend.Clight <> Ssequence constr
R138163:138167 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R138174:138182 compcert.cfrontend.Clight <> Ssequence constr
R138234:138243 VST.floyd.canon <> semax_seq' thm
R137721:137722 VST.msl.seplog <> FF meth
R137706:137714 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R137735:137742 VST.floyd.canon <> semax_ff thm
R137610:137611 VST.msl.seplog <> FF meth
R137595:137603 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R137624:137631 VST.floyd.canon <> semax_ff thm
R137410:137411 VST.msl.seplog <> FF meth
R137395:137403 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_seq prfax
R137424:137431 VST.floyd.canon <> semax_ff thm
prf 138404:138422 <> start_function_aux1
R138442:138451 VST.veric.juicy_extspec <> OracleKind class
binder 138435:138439 <> Espec:552
R138459:138467 VST.veric.mpred <> compspecs class
binder 138455:138456 <> cs:553
binder 138470:138474 <> Delta:554
binder 138476:138477 <> R1:555
binder 138479:138479 <> P:556
binder 138481:138481 <> Q:557
binder 138483:138483 <> R:558
binder 138485:138485 <> c:559
binder 138487:138490 <> Post:560
R138550:138556 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R138557:138561 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R138609:138612 VST.floyd.forward <> Post:560 var
R138607:138607 VST.floyd.forward <> c:559 var
R138570:138570 VST.msl.seplog <> ::logic:x_'*'_x not
R138598:138601 VST.msl.seplog <> ::logic:x_'*'_x not
R138571:138575 VST.floyd.canon <> PROPx def
R138580:138585 VST.floyd.canon <> LOCALx def
R138590:138593 VST.floyd.canon <> SEPx def
R138595:138595 VST.floyd.forward <> R:558 var
R138587:138587 VST.floyd.forward <> Q:557 var
R138577:138577 VST.floyd.forward <> P:556 var
R138602:138602 VST.veric.lift LiftNotation :::'`'_x not
R138603:138604 VST.floyd.forward <> R1:555 var
R138563:138567 VST.floyd.forward <> Delta:554 var
R138496:138500 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R138546:138549 VST.floyd.forward <> Post:560 var
R138544:138544 VST.floyd.forward <> c:559 var
R138509:138513 VST.floyd.canon <> PROPx def
R138518:138523 VST.floyd.canon <> LOCALx def
R138528:138531 VST.floyd.canon <> SEPx def
R138536:138537 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R138534:138535 VST.floyd.forward <> R1:555 var
R138538:138538 VST.floyd.forward <> R:558 var
R138525:138525 VST.floyd.forward <> Q:557 var
R138515:138515 VST.floyd.forward <> P:556 var
R138502:138506 VST.floyd.forward <> Delta:554 var
R138638:138648 VST.msl.seplog <> sepcon_comm meth
R138638:138648 VST.msl.seplog <> sepcon_comm meth
R138638:138648 VST.msl.seplog <> sepcon_comm meth
R138659:138668 VST.floyd.canon <> insert_SEP thm
R138659:138668 VST.floyd.canon <> insert_SEP thm
R138659:138668 VST.floyd.canon <> insert_SEP thm
prf 138692:138711 <> semax_stackframe_emp
binder 138722:138726 <> Espec:561
R138733:138741 VST.veric.mpred <> compspecs class
binder 138729:138730 <> cs:562
binder 138744:138748 <> Delta:563
binder 138750:138750 <> P:564
binder 138752:138752 <> c:565
binder 138754:138754 <> R:566
R138785:138790 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R138792:138796 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R138826:138841 VST.veric.SeparationLogic <> frame_ret_assert def
R138845:138847 VST.msl.seplog <> emp meth
R138843:138843 VST.floyd.forward <> R:566 var
R138823:138823 VST.floyd.forward <> c:565 var
R138815:138817 VST.msl.seplog <> ::logic:x_'*'_x not
R138814:138814 VST.floyd.forward <> P:564 var
R138818:138820 VST.msl.seplog <> emp meth
R138807:138811 VST.floyd.forward <> Delta:563 var
R138801:138805 VST.floyd.forward <> Espec:561 var
R138798:138799 VST.floyd.forward <> cs:562 var
R138759:138763 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R138784:138784 VST.floyd.forward <> R:566 var
R138782:138782 VST.floyd.forward <> c:565 var
R138780:138780 VST.floyd.forward <> P:564 var
R138774:138778 VST.floyd.forward <> Delta:563 var
R138768:138772 VST.floyd.forward <> Espec:561 var
R138765:138766 VST.floyd.forward <> cs:562 var
R138887:138896 VST.msl.seplog <> sepcon_emp meth
R138919:138938 VST.floyd.assert_lemmas <> frame_ret_assert_emp thm
R138887:138896 VST.msl.seplog <> sepcon_emp meth
R138887:138896 VST.msl.seplog <> sepcon_emp meth
R138919:138938 VST.floyd.assert_lemmas <> frame_ret_assert_emp thm
R138919:138938 VST.floyd.assert_lemmas <> frame_ret_assert_emp thm
def 138967:138977 <> must_return
R138984:138991 VST.veric.tycontext <> exitkind ind
binder 138980:138981 <> ek:567
R138996:138999 Coq.Init.Datatypes <> bool ind
R139012:139013 VST.floyd.forward <> ek:567 var
R139020:139028 VST.veric.tycontext <> EK_return constr
R139033:139036 Coq.Init.Datatypes <> true constr
R139045:139049 Coq.Init.Datatypes <> false constr
R139092:139104 VST.floyd.local2ptree_denote <> make_func_ptr thm
R139687:139693 VST.veric.SeparationLogic <> globals def
R139687:139693 VST.veric.SeparationLogic <> globals def
R139698:139702 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R139707:139711 VST.floyd.canon <> PROPx def
R139716:139721 VST.floyd.canon <> LOCALx def
R139727:139730 VST.floyd.canon <> SEPx def
R139698:139702 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R139707:139711 VST.floyd.canon <> PROPx def
R139716:139721 VST.floyd.canon <> LOCALx def
R139727:139730 VST.floyd.canon <> SEPx def
R139773:139778 VST.veric.SeparationLogic <> mapsto def
R139788:139797 VST.veric.val_lemmas <> offset_val def
R139773:139778 VST.veric.SeparationLogic <> mapsto def
R139788:139797 VST.veric.val_lemmas <> offset_val def
R140158:140163 VST.veric.SeparationLogic <> mapsto def
R140158:140163 VST.veric.SeparationLogic <> mapsto def
R140206:140212 VST.floyd.val_lemmas <> headptr def
R140264:140279 VST.floyd.field_at <> mapsto_data_at'' thm
R140345:140353 VST.floyd.jmeq_lemmas <> JMeq_refl thm
R139836:139842 VST.floyd.val_lemmas <> headptr def
R139845:139854 VST.veric.val_lemmas <> offset_val def
R139900:139918 VST.floyd.val_lemmas <> headptr_offset_zero thm
R139946:139961 VST.floyd.field_at <> mapsto_data_at'' thm
R139972:139981 VST.veric.val_lemmas <> offset_val def
R140041:140049 VST.floyd.jmeq_lemmas <> JMeq_refl thm
R140125:140143 VST.floyd.field_at <> data_at_offset_zero thm
R140472:140483 compcert.cfrontend.Ctypes <> Tcons constr
R140472:140483 compcert.cfrontend.Ctypes <> Tcons constr
R140687:140697 compcert.cfrontend.Ctypes <> Tnil constr
R140687:140697 compcert.cfrontend.Ctypes <> Tnil constr
R140716:140726 compcert.cfrontend.Ctypes <> Tnil constr
R140716:140726 compcert.cfrontend.Ctypes <> Tnil constr
R140510:140521 compcert.cfrontend.Ctypes <> Tcons constr
R140510:140521 compcert.cfrontend.Ctypes <> Tcons constr
R140578:140590 VST.veric.Clight_Cop2 <> classify_cast def
R140597:140613 compcert.cfrontend.Cop <> cast_case_pointer constr
R140806:140814 compcert.cfrontend.Ctypes <> Tfunction constr
R140806:140814 compcert.cfrontend.Ctypes <> Tfunction constr
R140846:140854 compcert.cfrontend.Ctypes <> Tfunction constr
R140846:140854 compcert.cfrontend.Ctypes <> Tfunction constr
R140939:140951 VST.veric.Clight_Cop2 <> classify_cast def
R140960:140976 compcert.cfrontend.Cop <> cast_case_pointer constr
R141176:141179 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R141166:141169 VST.floyd.canon <> temp constr
R141176:141179 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R141166:141169 VST.floyd.canon <> temp constr
R142123:142126 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R142123:142126 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R142169:142171 Coq.Init.Datatypes <> nil constr
R142169:142171 Coq.Init.Datatypes <> nil constr
R141210:141210 compcert.lib.Maps <> :::x_'!'_x not
R141227:141230 compcert.lib.Maps <> :::x_'!'_x not
R141211:141220 VST.veric.seplog <> temp_types def
R141298:141301 Coq.Init.Datatypes <> Some constr
R141298:141301 Coq.Init.Datatypes <> Some constr
R142003:142006 Coq.Init.Datatypes <> None constr
R142003:142006 Coq.Init.Datatypes <> None constr
R141334:141343 VST.floyd.val_lemmas <> tc_val_dec thm
R141609:141613 Coq.Init.Specif <> right constr
R141609:141613 Coq.Init.Specif <> right constr
R141699:141702 Coq.Init.Specif <> left constr
R141699:141702 Coq.Init.Specif <> left constr
def 142198:142207 <> find_lvars
R142218:142221 Coq.Init.Datatypes <> list ind
R142223:142230 VST.floyd.canon <> localdef ind
binder 142210:142215 <> locals:569
R142238:142244 compcert.lib.Maps PTree t def
R142246:142249 Coq.Init.Datatypes <> unit ind
binder 142235:142235 <> m:570
R142254:142260 compcert.lib.Maps PTree t def
R142262:142265 Coq.Init.Datatypes <> unit ind
R142277:142282 VST.floyd.forward <> locals:569 var
R142302:142305 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R142292:142295 VST.floyd.canon <> lvar constr
R142316:142325 VST.floyd.forward <> find_lvars:571 def
R142336:142344 compcert.lib.Maps PTree set def
R142351:142351 VST.floyd.forward <> m:570 var
R142348:142349 Coq.Init.Datatypes <> tt constr
R142358:142361 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R142373:142382 VST.floyd.forward <> find_lvars:571 def
R142392:142392 VST.floyd.forward <> m:570 var
R142397:142399 Coq.Init.Datatypes <> nil constr
R142404:142404 VST.floyd.forward <> m:570 var
def 142424:142435 <> another_gvar
R142441:142445 compcert.common.AST <> ident def
binder 142438:142438 <> i:573
R142465:142467 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R142453:142459 compcert.lib.Maps PTree t def
R142461:142464 Coq.Init.Datatypes <> unit ind
R142468:142471 Coq.Init.Datatypes <> list ind
R142473:142477 compcert.common.AST <> ident def
binder 142449:142450 <> ml:574
R142495:142497 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R142483:142489 compcert.lib.Maps PTree t def
R142491:142494 Coq.Init.Datatypes <> unit ind
R142498:142501 Coq.Init.Datatypes <> list ind
R142503:142507 compcert.common.AST <> ident def
R142520:142521 VST.floyd.forward <> ml:574 var
R142528:142528 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R142530:142530 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R142533:142533 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R142546:142554 compcert.lib.Maps PTree get def
R142556:142556 VST.floyd.forward <> i:573 var
R142565:142568 Coq.Init.Datatypes <> Some constr
R142575:142576 VST.floyd.forward <> ml:574 var
R142580:142583 Coq.Init.Datatypes <> None constr
R142589:142589 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R142606:142607 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R142615:142615 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R142590:142598 compcert.lib.Maps PTree set def
R142602:142603 Coq.Init.Datatypes <> tt constr
R142600:142600 VST.floyd.forward <> i:573 var
R142609:142612 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R142608:142608 VST.floyd.forward <> i:573 var
R142637:142648 VST.floyd.forward <> another_gvar def
def 142823:142830 <> firstopt
binder 142833:142833 <> A:576
R142844:142849 Coq.Init.Datatypes <> option ind
R142851:142851 VST.floyd.forward <> A:576 var
binder 142837:142838 <> e1:577
binder 142840:142841 <> e2:578
R142864:142865 VST.floyd.forward <> e1:577 var
R142872:142875 Coq.Init.Datatypes <> None constr
R142880:142881 VST.floyd.forward <> e2:578 var
R142885:142888 Coq.Init.Datatypes <> Some constr
R142895:142898 Coq.Init.Datatypes <> Some constr
ind 142918:142930 <> diagnose_expr
constr 142938:142942 <> DE_OK
constr 142963:142970 <> DE_value
constr 142998:143004 <> DE_copy
constr 143032:143041 <> DE_nothing
R142946:142958 VST.floyd.forward <> diagnose_expr:580 ind
R142977:142980 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R142981:142993 VST.floyd.forward <> diagnose_expr:580 ind
R142973:142976 compcert.cfrontend.Clight <> expr ind
R143011:143014 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R143015:143027 VST.floyd.forward <> diagnose_expr:580 ind
R143007:143010 compcert.cfrontend.Clight <> expr ind
R143048:143051 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R143052:143064 VST.floyd.forward <> diagnose_expr:580 ind
R143044:143047 compcert.cfrontend.Clight <> expr ind
def 143079:143088 <> DE_compose
R143098:143110 VST.floyd.forward <> diagnose_expr ind
binder 143091:143092 <> e1:582
binder 143094:143095 <> e2:583
R143123:143124 VST.floyd.forward <> e1:582 var
R143131:143135 VST.floyd.forward <> DE_OK constr
R143140:143141 VST.floyd.forward <> e2:583 var
R143150:143151 VST.floyd.forward <> e1:582 var
def 143170:143187 <> diagnose_this_expr
R143193:143196 compcert.cfrontend.Ctypes <> mode ind
binder 143190:143190 <> m:585
R143203:143206 compcert.cfrontend.Clight <> expr ind
binder 143200:143200 <> e:586
R143211:143223 VST.floyd.forward <> diagnose_expr ind
R143235:143235 VST.floyd.forward <> m:585 var
R143245:143256 compcert.cfrontend.Ctypes <> By_reference constr
R143261:143265 VST.floyd.forward <> DE_OK constr
R143270:143276 compcert.cfrontend.Ctypes <> By_copy constr
R143281:143287 VST.floyd.forward <> DE_copy constr
R143289:143289 VST.floyd.forward <> e:586 var
R143294:143301 compcert.cfrontend.Ctypes <> By_value constr
R143308:143315 VST.floyd.forward <> DE_value constr
R143317:143317 VST.floyd.forward <> e:586 var
R143322:143331 compcert.cfrontend.Ctypes <> By_nothing constr
R143336:143345 VST.floyd.forward <> DE_nothing constr
R143347:143347 VST.floyd.forward <> e:586 var
def 143366:143380 <> check_norm_expr
def 144194:144210 <> check_norm_lvalue
R143386:143389 compcert.cfrontend.Clight <> expr ind
binder 143383:143383 <> e:588
R144216:144219 compcert.cfrontend.Clight <> expr ind
binder 144213:144213 <> e:589
R143394:143406 VST.floyd.forward <> diagnose_expr ind
R144224:144236 VST.floyd.forward <> diagnose_expr ind
R143417:143417 VST.floyd.forward <> e:588 var
R143427:143430 compcert.cfrontend.Clight <> Evar constr
R143440:143457 VST.floyd.forward <> diagnose_this_expr def
R143476:143476 VST.floyd.forward <> e:588 var
R143460:143470 compcert.cfrontend.Ctypes <> access_mode def
R143481:143486 compcert.cfrontend.Clight <> Ederef constr
R143502:143512 compcert.cfrontend.Ctypes <> access_mode def
R143542:143553 compcert.cfrontend.Ctypes <> By_reference constr
R143561:143575 VST.veric.expr <> is_pointer_type def
R143578:143583 compcert.cfrontend.Clight <> typeof def
R143711:143718 VST.floyd.forward <> DE_value constr
R143720:143720 VST.floyd.forward <> e:588 var
R143641:143655 VST.floyd.forward <> check_norm_expr:590 def
R143747:143764 VST.floyd.forward <> diagnose_this_expr def
R143768:143768 VST.floyd.forward <> e:588 var
R143794:143798 compcert.cfrontend.Clight <> Eunop constr
R143809:143823 VST.floyd.forward <> check_norm_expr:590 def
R143825:143825 VST.floyd.forward <> e:588 var
R143829:143834 compcert.cfrontend.Clight <> Ebinop constr
R143849:143858 VST.floyd.forward <> DE_compose def
R143882:143896 VST.floyd.forward <> check_norm_expr:590 def
R143861:143875 VST.floyd.forward <> check_norm_expr:590 def
R143904:143908 compcert.cfrontend.Clight <> Ecast constr
R143917:143931 VST.floyd.forward <> check_norm_expr:590 def
R143933:143933 VST.floyd.forward <> e:588 var
R143937:143942 compcert.cfrontend.Clight <> Efield constr
R143960:143970 compcert.cfrontend.Ctypes <> access_mode def
R144010:144021 compcert.cfrontend.Ctypes <> By_reference constr
R144026:144042 VST.floyd.forward <> check_norm_lvalue:591 def
R144081:144098 VST.floyd.forward <> diagnose_this_expr def
R144102:144102 VST.floyd.forward <> e:588 var
R144137:144143 compcert.cfrontend.Clight <> Eaddrof constr
R144152:144168 VST.floyd.forward <> check_norm_lvalue:591 def
R144170:144170 VST.floyd.forward <> e:588 var
R144179:144183 VST.floyd.forward <> DE_OK constr
R144247:144247 VST.floyd.forward <> e:589 var
R144256:144261 compcert.cfrontend.Clight <> Ederef constr
R144273:144287 VST.veric.expr <> is_pointer_type def
R144290:144295 compcert.cfrontend.Clight <> typeof def
R144389:144396 VST.floyd.forward <> DE_value constr
R144398:144398 VST.floyd.forward <> e:589 var
R144336:144350 VST.floyd.forward <> check_norm_expr:590 def
R144402:144406 compcert.cfrontend.Clight <> Ecast constr
R144415:144431 VST.floyd.forward <> check_norm_lvalue:591 def
R144433:144433 VST.floyd.forward <> e:589 var
R144437:144442 compcert.cfrontend.Clight <> Efield constr
R144453:144469 VST.floyd.forward <> check_norm_lvalue:591 def
R144471:144471 VST.floyd.forward <> e:589 var
R144475:144479 compcert.cfrontend.Clight <> Eunop constr
R144490:144504 VST.floyd.forward <> check_norm_expr:590 def
R144506:144506 VST.floyd.forward <> e:589 var
R144510:144515 compcert.cfrontend.Clight <> Ebinop constr
R144530:144539 VST.floyd.forward <> DE_compose def
R144563:144577 VST.floyd.forward <> check_norm_expr:590 def
R144542:144556 VST.floyd.forward <> check_norm_expr:590 def
R144590:144594 VST.floyd.forward <> DE_OK constr
def 144611:144625 <> check_norm_stmt
def 145431:145443 <> check_norm_ls
R144631:144639 compcert.cfrontend.Clight <> statement ind
binder 144628:144628 <> s:594
R145450:145467 compcert.cfrontend.Clight <> labeled_statements ind
binder 145446:145447 <> ls:595
R144644:144656 VST.floyd.forward <> diagnose_expr ind
R145472:145484 VST.floyd.forward <> diagnose_expr ind
R144667:144667 VST.floyd.forward <> s:594 var
R144676:144682 compcert.cfrontend.Clight <> Sassign constr
R144693:144702 VST.floyd.forward <> DE_compose def
R144728:144742 VST.floyd.forward <> check_norm_expr def
R144705:144721 VST.floyd.forward <> check_norm_lvalue def
R144750:144753 compcert.cfrontend.Clight <> Sset constr
R144763:144779 VST.floyd.forward <> check_norm_lvalue def
R144786:144790 compcert.cfrontend.Clight <> Scall constr
R144795:144798 compcert.cfrontend.Clight <> Evar constr
R144811:144820 Coq.Lists.List <> fold_right def
R144840:144842 Coq.Lists.List <> map def
R144844:144858 VST.floyd.forward <> check_norm_expr def
R144833:144837 VST.floyd.forward <> DE_OK constr
R144822:144831 VST.floyd.forward <> DE_compose def
R144866:144870 compcert.cfrontend.Clight <> Scall constr
R144882:144891 Coq.Lists.List <> fold_right def
R144911:144913 Coq.Lists.List <> map def
R144933:144934 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R144915:144929 VST.floyd.forward <> check_norm_expr def
R144904:144908 VST.floyd.forward <> DE_OK constr
R144893:144902 VST.floyd.forward <> DE_compose def
R144942:144949 compcert.cfrontend.Clight <> Sbuiltin constr
R144963:144972 Coq.Lists.List <> fold_right def
R144992:144994 Coq.Lists.List <> map def
R144996:145010 VST.floyd.forward <> check_norm_expr def
R144985:144989 VST.floyd.forward <> DE_OK constr
R144974:144983 VST.floyd.forward <> DE_compose def
R145018:145026 compcert.cfrontend.Clight <> Ssequence constr
R145037:145046 VST.floyd.forward <> DE_compose def
R145070:145084 VST.floyd.forward <> check_norm_stmt:596 def
R145049:145063 VST.floyd.forward <> check_norm_stmt:596 def
R145092:145102 compcert.cfrontend.Clight <> Sifthenelse constr
R145115:145124 VST.floyd.forward <> DE_compose def
R145147:145156 VST.floyd.forward <> DE_compose def
R145180:145194 VST.floyd.forward <> check_norm_stmt:596 def
R145159:145173 VST.floyd.forward <> check_norm_stmt:596 def
R145127:145141 VST.floyd.forward <> check_norm_expr def
R145203:145207 compcert.cfrontend.Clight <> Sloop constr
R145218:145227 VST.floyd.forward <> DE_compose def
R145251:145265 VST.floyd.forward <> check_norm_stmt:596 def
R145230:145244 VST.floyd.forward <> check_norm_stmt:596 def
R145273:145279 compcert.cfrontend.Clight <> Sreturn constr
R145282:145285 Coq.Init.Datatypes <> Some constr
R145293:145307 VST.floyd.forward <> check_norm_expr def
R145313:145319 compcert.cfrontend.Clight <> Sswitch constr
R145329:145338 VST.floyd.forward <> DE_compose def
R145391:145403 VST.floyd.forward <> check_norm_ls:597 def
R145341:145355 VST.floyd.forward <> check_norm_expr def
R145416:145420 VST.floyd.forward <> DE_OK constr
R145495:145496 VST.floyd.forward <> ls:595 var
R145506:145510 compcert.cfrontend.Clight <> LSnil constr
R145515:145519 VST.floyd.forward <> DE_OK constr
R145524:145529 compcert.cfrontend.Clight <> LScons constr
R145542:145551 VST.floyd.forward <> DE_compose def
R145575:145587 VST.floyd.forward <> check_norm_ls:597 def
R145554:145568 VST.floyd.forward <> check_norm_stmt:596 def
R145644:145658 VST.floyd.forward <> check_norm_stmt def
R145661:145667 compcert.cfrontend.Clight <> fn_body proj
R145718:145722 VST.floyd.forward <> DE_OK constr
R145718:145722 VST.floyd.forward <> DE_OK constr
R145735:145742 VST.floyd.forward <> DE_value constr
R145735:145742 VST.floyd.forward <> DE_value constr
R145950:145956 VST.floyd.forward <> DE_copy constr
R145950:145956 VST.floyd.forward <> DE_copy constr
R146089:146098 VST.floyd.forward <> DE_nothing constr
R146089:146098 VST.floyd.forward <> DE_nothing constr
prf 146711:146733 <> elim_close_precondition
R146750:146758 VST.veric.mpred <> compspecs class
binder 146746:146747 <> CS:600
R146769:146778 VST.veric.juicy_extspec <> OracleKind class
binder 146762:146766 <> Espec:601
binder 146781:146782 <> al:602
binder 146784:146788 <> Delta:603
binder 146790:146790 <> P:604
binder 146792:146792 <> F:605
binder 146794:146794 <> c:606
binder 146796:146796 <> Q:607
R146848:146854 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R146855:146859 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R146899:146899 VST.floyd.forward <> Q:607 var
R146897:146897 VST.floyd.forward <> c:606 var
R146891:146893 VST.msl.seplog <> ::logic:x_'*'_x not
R146868:146885 VST.veric.SeparationLogic <> close_precondition def
R146890:146890 VST.floyd.forward <> P:604 var
R146887:146888 VST.floyd.forward <> al:602 var
R146894:146894 VST.floyd.forward <> F:605 var
R146861:146865 VST.floyd.forward <> Delta:603 var
R146802:146806 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R146847:146847 VST.floyd.forward <> Q:607 var
R146845:146845 VST.floyd.forward <> c:606 var
R146815:146815 VST.msl.seplog <> ::logic:x_'*'_x not
R146838:146841 VST.msl.seplog <> ::logic:x_'*'_x not
R146816:146832 VST.veric.SeparationLogic <> argsassert2assert def
R146837:146837 VST.floyd.forward <> P:604 var
R146834:146835 VST.floyd.forward <> al:602 var
R146842:146842 VST.floyd.forward <> F:605 var
R146808:146812 VST.floyd.forward <> Delta:603 var
R146940:146940 VST.msl.seplog <> ::logic:x_'*'_x not
R146963:146964 VST.msl.seplog <> ::logic:x_'*'_x not
R146941:146957 VST.veric.SeparationLogic <> argsassert2assert def
R146924:146932 VST.floyd.canon <> semax_pre thm
R146940:146940 VST.msl.seplog <> ::logic:x_'*'_x not
R146963:146964 VST.msl.seplog <> ::logic:x_'*'_x not
R146941:146957 VST.veric.SeparationLogic <> argsassert2assert def
R146924:146932 VST.floyd.canon <> semax_pre thm
R146982:146991 VST.msl.seplog <> andp_left2 meth
R146982:146991 VST.msl.seplog <> andp_left2 meth
R147001:147014 VST.msl.seplog <> sepcon_derives meth
R147035:147046 VST.msl.seplog <> derives_refl meth
R147001:147014 VST.msl.seplog <> sepcon_derives meth
R147035:147046 VST.msl.seplog <> derives_refl meth
R147069:147086 VST.veric.SeparationLogic <> close_precondition def
R147089:147105 VST.veric.SeparationLogic <> argsassert2assert def
R147126:147138 VST.msl.log_normalize <> derives_refl' thm
R147126:147138 VST.msl.log_normalize <> derives_refl' thm
R147168:147174 VST.veric.mpred <> eval_id def
R147403:147405 Coq.Init.Logic <> ::type_scope:x_'='_x not
R147403:147405 Coq.Init.Logic <> ::type_scope:x_'='_x not
R147584:147586 Coq.Init.Logic <> ::type_scope:x_'='_x not
R147584:147586 Coq.Init.Logic <> ::type_scope:x_'='_x not
def 147704:147715 <> rename_ident
R147729:147732 Coq.Init.Datatypes <> list ind
R147734:147738 compcert.common.AST <> ident def
binder 147718:147721 <> olds:608
binder 147723:147726 <> news:609
binder 147741:147741 <> i:610
R147759:147762 VST.floyd.forward <> news:609 var
R147753:147756 VST.floyd.forward <> olds:608 var
R147773:147774 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R147780:147781 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R147791:147798 compcert.common.AST <> ident_eq def
R147800:147800 VST.floyd.forward <> i:610 var
R147821:147832 VST.floyd.forward <> rename_ident:611 def
R147840:147840 VST.floyd.forward <> i:610 var
R147809:147812 Coq.Init.Datatypes <> Some constr
R147852:147855 Coq.Init.Datatypes <> None constr
def 147873:147888 <> rename_localdefs
R147902:147905 Coq.Init.Datatypes <> list ind
R147907:147911 compcert.common.AST <> ident def
binder 147891:147894 <> olds:614
binder 147896:147899 <> news:615
R147919:147922 Coq.Init.Datatypes <> list ind
R147924:147931 VST.floyd.canon <> localdef ind
binder 147915:147916 <> ds:616
R147936:147941 Coq.Init.Datatypes <> option ind
R147944:147947 Coq.Init.Datatypes <> list ind
R147949:147956 VST.floyd.canon <> localdef ind
R147969:147970 VST.floyd.forward <> ds:616 var
R147988:147991 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R147980:147983 VST.floyd.canon <> temp constr
R148031:148046 VST.floyd.forward <> rename_localdefs:617 def
R148053:148056 VST.floyd.forward <> news:615 var
R148048:148051 VST.floyd.forward <> olds:614 var
R148005:148016 VST.floyd.forward <> rename_ident def
R148023:148026 VST.floyd.forward <> news:615 var
R148018:148021 VST.floyd.forward <> olds:614 var
R148099:148102 Coq.Init.Datatypes <> Some constr
R148107:148110 Coq.Init.Datatypes <> Some constr
R148117:148120 Coq.Init.Datatypes <> Some constr
R148131:148132 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R148123:148126 VST.floyd.canon <> temp constr
R148176:148179 Coq.Init.Datatypes <> None constr
R148228:148231 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R148218:148221 VST.floyd.canon <> lvar constr
R148237:148240 Coq.Init.Datatypes <> None constr
R148253:148255 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R148245:148249 VST.floyd.canon <> gvars constr
R148269:148284 VST.floyd.forward <> rename_localdefs:617 def
R148291:148294 VST.floyd.forward <> news:615 var
R148286:148289 VST.floyd.forward <> olds:614 var
R148325:148328 Coq.Init.Datatypes <> Some constr
R148335:148338 Coq.Init.Datatypes <> Some constr
R148349:148352 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R148341:148345 VST.floyd.canon <> gvars constr
R148376:148379 Coq.Init.Datatypes <> None constr
R148384:148387 Coq.Init.Datatypes <> None constr
R148414:148416 Coq.Init.Datatypes <> nil constr
R148421:148424 Coq.Init.Datatypes <> Some constr
R148426:148428 Coq.Init.Datatypes <> nil constr
def 151491:151498 <> computeQ
R151505:151508 Coq.Init.Datatypes <> list ind
R151510:151514 compcert.common.AST <> ident def
binder 151501:151503 <> ids:619
R151523:151526 Coq.Init.Datatypes <> list ind
R151528:151530 compcert.common.Values <> val ind
binder 151518:151521 <> vals:620
R151535:151540 Coq.Init.Datatypes <> option ind
R151543:151546 Coq.Init.Datatypes <> list ind
R151548:151555 VST.floyd.canon <> localdef ind
R151574:151577 VST.floyd.forward <> vals:620 var
R151569:151571 VST.floyd.forward <> ids:619 var
R151588:151590 Coq.Init.Datatypes <> nil constr
R151593:151595 Coq.Init.Datatypes <> nil constr
R151600:151603 Coq.Init.Datatypes <> Some constr
R151605:151607 Coq.Init.Datatypes <> nil constr
R151615:151616 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R151626:151627 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R151644:151651 VST.floyd.forward <> computeQ:621 def
R151699:151702 Coq.Init.Datatypes <> None constr
R151707:151710 Coq.Init.Datatypes <> None constr
R151742:151745 Coq.Init.Datatypes <> Some constr
R151755:151758 Coq.Init.Datatypes <> Some constr
R151769:151772 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R151761:151764 VST.floyd.canon <> temp constr
R151823:151826 Coq.Init.Datatypes <> None constr
prf 151842:151876 <> compute_close_precondition_entails1
binder 151889:151891 <> ids:624
binder 151893:151893 <> P:625
binder 151895:151896 <> gv:626
binder 151898:151901 <> vals:627
binder 151903:151903 <> Q:628
binder 151905:151905 <> R:629
R151941:151946 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R151973:151978 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R152024:152030 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R151979:151983 VST.floyd.canon <> PROPx def
R151988:151993 VST.floyd.canon <> LOCALx def
R152016:152019 VST.floyd.canon <> SEPx def
R152021:152021 VST.floyd.forward <> R:629 var
R151996:151996 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R152009:152011 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R151997:151999 Coq.Lists.List <> map def
R152007:152008 VST.floyd.forward <> gv:626 var
R152001:152005 VST.floyd.canon <> gvars constr
R152012:152012 VST.floyd.forward <> Q:628 var
R151985:151985 VST.floyd.forward <> P:625 var
R152031:152048 VST.veric.SeparationLogic <> close_precondition def
R152055:152059 VST.floyd.canon <> PROPx def
R152064:152070 VST.floyd.client_lemmas <> LAMBDAx syndef
R152075:152078 VST.floyd.forward <> vals:627 var
R152072:152073 VST.floyd.forward <> gv:626 var
R152081:152084 VST.floyd.canon <> SEPx def
R152086:152086 VST.floyd.forward <> R:629 var
R152061:152061 VST.floyd.forward <> P:625 var
R152050:152052 VST.floyd.forward <> ids:624 var
R151964:151966 Coq.Init.Logic <> ::type_scope:x_'='_x not
R151947:151954 VST.floyd.forward <> computeQ def
R151960:151963 VST.floyd.forward <> vals:627 var
R151956:151958 VST.floyd.forward <> ids:624 var
R151967:151970 Coq.Init.Datatypes <> Some constr
R151972:151972 VST.floyd.forward <> Q:628 var
R151934:151936 Coq.Init.Logic <> ::type_scope:x_'='_x not
R151910:151929 VST.veric.base <> compute_list_norepet def
R151931:151933 VST.floyd.forward <> ids:624 var
R151937:151940 Coq.Init.Datatypes <> true constr
R152118:152130 VST.floyd.local2ptree_denote <> insert_locals thm
R152118:152130 VST.floyd.local2ptree_denote <> insert_locals thm
R152118:152130 VST.floyd.local2ptree_denote <> insert_locals thm
R152152:152169 VST.veric.SeparationLogic <> close_precondition def
R152204:152211 VST.floyd.canon <> GLOBALSx def
R152214:152220 VST.floyd.canon <> PARAMSx def
R152239:152255 VST.veric.SeparationLogic <> argsassert2assert def
R152267:152271 VST.floyd.canon <> PROPx def
R152274:152279 VST.floyd.canon <> LOCALx def
R152282:152285 VST.floyd.canon <> SEPx def
R152316:152325 VST.msl.seplog <> andp_right meth
R152316:152325 VST.msl.seplog <> andp_right meth
R152338:152347 VST.msl.seplog <> andp_left2 meth
R152338:152347 VST.msl.seplog <> andp_left2 meth
R152356:152365 VST.msl.seplog <> andp_left1 meth
R152356:152365 VST.msl.seplog <> andp_left1 meth
R152375:152379 VST.veric.SeparationLogic <> local def
R152382:152386 VST.veric.lift <> liftx def
R152389:152393 VST.veric.mpred <> lift1 def
R152396:152399 VST.veric.lift <> lift def
R152419:152430 VST.msl.log_normalize <> prop_derives thm
R152419:152430 VST.msl.log_normalize <> prop_derives thm
R152503:152518 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R152487:152489 Coq.Init.Logic <> ::type_scope:x_'='_x not
R152458:152460 Coq.Lists.List <> map def
R152463:152469 VST.veric.mpred Map get def
R152472:152476 VST.veric.mpred <> te_of def
R152490:152492 Coq.Lists.List <> map def
R152494:152497 Coq.Init.Datatypes <> Some constr
R152519:152524 Coq.Lists.List <> Forall ind
R152535:152537 compcert.common.Values <> val ind
binder 152531:152531 <> v:630
R152543:152546 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R152542:152542 VST.floyd.forward <> v:630 var
R152547:152552 compcert.common.Values <> Vundef constr
R152503:152518 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R152487:152489 Coq.Init.Logic <> ::type_scope:x_'='_x not
R152458:152460 Coq.Lists.List <> map def
R152463:152469 VST.veric.mpred Map get def
R152472:152476 VST.veric.mpred <> te_of def
R152490:152492 Coq.Lists.List <> map def
R152494:152497 Coq.Init.Datatypes <> Some constr
R152519:152524 Coq.Lists.List <> Forall ind
R152535:152537 compcert.common.Values <> val ind
binder 152531:152531 <> v:631
R152543:152546 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R152542:152542 VST.floyd.forward <> v:631 var
R152547:152552 compcert.common.Values <> Vundef constr
R152750:152757 VST.floyd.forward <> computeQ def
R152750:152757 VST.floyd.forward <> computeQ def
R152864:152873 VST.veric.base <> id_in_list def
R152864:152873 VST.veric.base <> id_in_list def
R153035:153041 VST.veric.mpred <> eval_id def
R153044:153048 VST.veric.lift <> liftx def
R153051:153054 VST.veric.lift <> lift def
R153101:153109 VST.veric.val_lemmas <> force_val def
R153127:153133 VST.veric.mpred Map get def
R153136:153140 VST.veric.mpred <> te_of def
R153127:153133 VST.veric.mpred Map get def
R153136:153140 VST.veric.mpred <> te_of def
R153250:153259 VST.msl.seplog <> andp_right meth
R153250:153259 VST.msl.seplog <> andp_right meth
R153272:153281 VST.msl.seplog <> andp_left1 meth
R153272:153281 VST.msl.seplog <> andp_left1 meth
R153298:153302 VST.veric.SeparationLogic <> local def
R153305:153309 VST.veric.lift <> liftx def
R153312:153316 VST.veric.mpred <> lift1 def
R153319:153322 VST.veric.lift <> lift def
R153338:153349 VST.msl.log_normalize <> prop_derives thm
R153338:153349 VST.msl.log_normalize <> prop_derives thm
R153371:153389 VST.veric.Clight_seplog <> mkEnv def
R153406:153424 VST.veric.seplog <> globals_only def
R153517:153526 VST.msl.seplog <> andp_left2 meth
R153517:153526 VST.msl.seplog <> andp_left2 meth
R153517:153526 VST.msl.seplog <> andp_left2 meth
prf 153550:153584 <> compute_close_precondition_entails2
binder 153597:153599 <> ids:632
binder 153601:153601 <> P:633
binder 153603:153604 <> gv:634
binder 153606:153609 <> vals:635
binder 153611:153611 <> Q:636
binder 153613:153613 <> R:637
R153649:153654 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R153681:153686 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R153746:153754 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R153800:153800 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R153687:153704 VST.veric.SeparationLogic <> close_precondition def
R153711:153715 VST.floyd.canon <> PROPx def
R153720:153726 VST.floyd.client_lemmas <> LAMBDAx syndef
R153731:153734 VST.floyd.forward <> vals:635 var
R153728:153729 VST.floyd.forward <> gv:634 var
R153737:153740 VST.floyd.canon <> SEPx def
R153742:153742 VST.floyd.forward <> R:637 var
R153717:153717 VST.floyd.forward <> P:633 var
R153706:153708 VST.floyd.forward <> ids:632 var
R153755:153759 VST.floyd.canon <> PROPx def
R153764:153769 VST.floyd.canon <> LOCALx def
R153792:153795 VST.floyd.canon <> SEPx def
R153797:153797 VST.floyd.forward <> R:637 var
R153772:153772 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R153785:153787 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R153773:153775 Coq.Lists.List <> map def
R153783:153784 VST.floyd.forward <> gv:634 var
R153777:153781 VST.floyd.canon <> gvars constr
R153788:153788 VST.floyd.forward <> Q:636 var
R153761:153761 VST.floyd.forward <> P:633 var
R153672:153674 Coq.Init.Logic <> ::type_scope:x_'='_x not
R153655:153662 VST.floyd.forward <> computeQ def
R153668:153671 VST.floyd.forward <> vals:635 var
R153664:153666 VST.floyd.forward <> ids:632 var
R153675:153678 Coq.Init.Datatypes <> Some constr
R153680:153680 VST.floyd.forward <> Q:636 var
R153642:153644 Coq.Init.Logic <> ::type_scope:x_'='_x not
R153618:153637 VST.veric.base <> compute_list_norepet def
R153639:153641 VST.floyd.forward <> ids:632 var
R153645:153648 Coq.Init.Datatypes <> true constr
R153829:153841 VST.floyd.local2ptree_denote <> insert_locals thm
R153829:153841 VST.floyd.local2ptree_denote <> insert_locals thm
R153829:153841 VST.floyd.local2ptree_denote <> insert_locals thm
R153863:153880 VST.veric.SeparationLogic <> close_precondition def
R153901:153908 VST.floyd.canon <> GLOBALSx def
R153911:153917 VST.floyd.canon <> PARAMSx def
R153920:153936 VST.veric.SeparationLogic <> argsassert2assert def
R153939:153943 VST.floyd.canon <> PROPx def
R153946:153951 VST.floyd.canon <> LOCALx def
R153954:153957 VST.floyd.canon <> SEPx def
R153987:153996 VST.msl.seplog <> andp_right meth
R153987:153996 VST.msl.seplog <> andp_right meth
R154009:154018 VST.msl.seplog <> andp_left1 meth
R154009:154018 VST.msl.seplog <> andp_left1 meth
R154028:154046 VST.veric.Clight_seplog <> mkEnv def
R154067:154085 VST.veric.seplog <> globals_only def
R154102:154106 VST.veric.SeparationLogic <> local def
R154109:154113 VST.veric.lift <> liftx def
R154116:154120 VST.veric.mpred <> lift1 def
R154123:154126 VST.veric.lift <> lift def
R154153:154164 VST.msl.log_normalize <> prop_derives thm
R154153:154164 VST.msl.log_normalize <> prop_derives thm
R154225:154236 VST.floyd.canon <> gvars_denote def
R154292:154303 VST.msl.log_normalize <> andp_derives thm
R154292:154303 VST.msl.log_normalize <> andp_derives thm
R154324:154328 VST.veric.SeparationLogic <> local def
R154331:154335 VST.veric.lift <> liftx def
R154338:154342 VST.veric.mpred <> lift1 def
R154345:154348 VST.veric.lift <> lift def
R154364:154373 VST.msl.seplog <> prop_right meth
R154364:154373 VST.msl.seplog <> prop_right meth
R154561:154568 VST.floyd.forward <> computeQ def
R154561:154568 VST.floyd.forward <> computeQ def
R154683:154692 VST.veric.base <> id_in_list def
R154683:154692 VST.veric.base <> id_in_list def
R154789:154793 VST.veric.lift <> liftx def
R154796:154799 VST.veric.lift <> lift def
R154816:154822 VST.veric.mpred <> eval_id def
prf 154865:154893 <> compute_close_precondition_eq
binder 154905:154907 <> ids:638
binder 154909:154909 <> P:639
binder 154911:154912 <> gv:640
binder 154914:154917 <> vals:641
binder 154919:154919 <> Q:642
binder 154921:154921 <> R:643
R154957:154962 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R154989:154994 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R155054:155059 Coq.Init.Logic <> ::type_scope:x_'='_x not
R155105:155105 Coq.Init.Logic <> ::type_scope:x_'='_x not
R154995:155012 VST.veric.SeparationLogic <> close_precondition def
R155019:155023 VST.floyd.canon <> PROPx def
R155028:155034 VST.floyd.client_lemmas <> LAMBDAx syndef
R155039:155042 VST.floyd.forward <> vals:641 var
R155036:155037 VST.floyd.forward <> gv:640 var
R155045:155048 VST.floyd.canon <> SEPx def
R155050:155050 VST.floyd.forward <> R:643 var
R155025:155025 VST.floyd.forward <> P:639 var
R155014:155016 VST.floyd.forward <> ids:638 var
R155060:155064 VST.floyd.canon <> PROPx def
R155069:155074 VST.floyd.canon <> LOCALx def
R155097:155100 VST.floyd.canon <> SEPx def
R155102:155102 VST.floyd.forward <> R:643 var
R155077:155077 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R155090:155092 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R155078:155080 Coq.Lists.List <> map def
R155088:155089 VST.floyd.forward <> gv:640 var
R155082:155086 VST.floyd.canon <> gvars constr
R155093:155093 VST.floyd.forward <> Q:642 var
R155066:155066 VST.floyd.forward <> P:639 var
R154980:154982 Coq.Init.Logic <> ::type_scope:x_'='_x not
R154963:154970 VST.floyd.forward <> computeQ def
R154976:154979 VST.floyd.forward <> vals:641 var
R154972:154974 VST.floyd.forward <> ids:638 var
R154983:154986 Coq.Init.Datatypes <> Some constr
R154988:154988 VST.floyd.forward <> Q:642 var
R154950:154952 Coq.Init.Logic <> ::type_scope:x_'='_x not
R154926:154945 VST.veric.base <> compute_list_norepet def
R154947:154949 VST.floyd.forward <> ids:638 var
R154953:154956 Coq.Init.Datatypes <> true constr
R155131:155138 VST.msl.seplog <> pred_ext meth
R155131:155138 VST.msl.seplog <> pred_ext meth
R155148:155182 VST.floyd.forward <> compute_close_precondition_entails2 thm
R155148:155182 VST.floyd.forward <> compute_close_precondition_entails2 thm
R155203:155237 VST.floyd.forward <> compute_close_precondition_entails1 thm
R155203:155237 VST.floyd.forward <> compute_close_precondition_entails1 thm
prf 155261:155289 <> semax_elim_close_precondition
R155306:155314 VST.veric.mpred <> compspecs class
binder 155302:155303 <> CS:644
R155325:155334 VST.veric.juicy_extspec <> OracleKind class
binder 155318:155322 <> Espec:645
binder 155337:155339 <> ids:646
binder 155341:155345 <> Delta:647
binder 155347:155347 <> P:648
binder 155349:155350 <> gv:649
binder 155352:155355 <> vals:650
binder 155357:155357 <> R:651
binder 155359:155359 <> F:652
binder 155361:155361 <> c:653
binder 155363:155363 <> Q:654
binder 155365:155365 <> T:655
R155401:155406 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R155433:155439 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R155507:155513 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R155514:155518 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R155596:155596 VST.floyd.forward <> T:655 var
R155594:155594 VST.floyd.forward <> c:653 var
R155588:155590 VST.msl.seplog <> ::logic:x_'*'_x not
R155527:155544 VST.veric.SeparationLogic <> close_precondition def
R155552:155556 VST.floyd.canon <> PROPx def
R155561:155567 VST.floyd.client_lemmas <> LAMBDAx syndef
R155572:155575 VST.floyd.forward <> vals:650 var
R155569:155570 VST.floyd.forward <> gv:649 var
R155578:155581 VST.floyd.canon <> SEPx def
R155583:155583 VST.floyd.forward <> R:651 var
R155558:155558 VST.floyd.forward <> P:648 var
R155546:155548 VST.floyd.forward <> ids:646 var
R155591:155591 VST.floyd.forward <> F:652 var
R155520:155524 VST.floyd.forward <> Delta:647 var
R155440:155444 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R155506:155506 VST.floyd.forward <> T:655 var
R155504:155504 VST.floyd.forward <> c:653 var
R155498:155500 VST.msl.seplog <> ::logic:x_'*'_x not
R155453:155457 VST.floyd.canon <> PROPx def
R155462:155467 VST.floyd.canon <> LOCALx def
R155490:155493 VST.floyd.canon <> SEPx def
R155495:155495 VST.floyd.forward <> R:651 var
R155470:155470 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R155483:155485 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R155471:155473 Coq.Lists.List <> map def
R155481:155482 VST.floyd.forward <> gv:649 var
R155475:155479 VST.floyd.canon <> gvars constr
R155486:155486 VST.floyd.forward <> Q:654 var
R155459:155459 VST.floyd.forward <> P:648 var
R155501:155501 VST.floyd.forward <> F:652 var
R155446:155450 VST.floyd.forward <> Delta:647 var
R155424:155426 Coq.Init.Logic <> ::type_scope:x_'='_x not
R155407:155414 VST.floyd.forward <> computeQ def
R155420:155423 VST.floyd.forward <> vals:650 var
R155416:155418 VST.floyd.forward <> ids:646 var
R155427:155430 Coq.Init.Datatypes <> Some constr
R155432:155432 VST.floyd.forward <> Q:654 var
R155394:155396 Coq.Init.Logic <> ::type_scope:x_'='_x not
R155370:155389 VST.veric.base <> compute_list_norepet def
R155391:155393 VST.floyd.forward <> ids:646 var
R155397:155400 Coq.Init.Datatypes <> true constr
R155623:155651 VST.floyd.forward <> compute_close_precondition_eq thm
R155623:155651 VST.floyd.forward <> compute_close_precondition_eq thm
R155623:155651 VST.floyd.forward <> compute_close_precondition_eq thm
R155623:155651 VST.floyd.forward <> compute_close_precondition_eq thm
R155623:155651 VST.floyd.forward <> compute_close_precondition_eq thm
R155846:155855 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R155846:155855 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R156132:156132 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156134:156135 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156158:156158 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156136:156147 VST.veric.SeparationLogic <> NDmk_funspec def
R156132:156132 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156134:156135 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156158:156158 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156136:156147 VST.veric.SeparationLogic <> NDmk_funspec def
R156184:156184 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156186:156187 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156212:156212 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156188:156197 VST.veric.mpred <> mk_funspec constr
R156184:156184 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156186:156187 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156212:156212 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156188:156197 VST.veric.mpred <> mk_funspec constr
R156238:156238 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156240:156241 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156252:156252 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156238:156238 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156240:156241 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156252:156252 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156287:156287 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156289:156290 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156299:156299 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156287:156287 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156289:156290 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156299:156299 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156334:156334 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156336:156337 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156344:156344 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156334:156334 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156336:156337 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156344:156344 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156379:156379 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156381:156382 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156387:156387 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156379:156379 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156381:156382 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156387:156387 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156422:156422 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156424:156425 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156428:156428 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156422:156422 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156424:156425 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156428:156428 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156497:156497 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156499:156501 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156586:156586 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156502:156506 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R156508:156509 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R156517:156540 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R156555:156577 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R156582:156584 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R156578:156581 compcert.exportclight.Clightdefs <> tint def
R156510:156516 VST.veric.SeparationLogic <> globals def
R156541:156548 VST.veric.SeparationLogic <> main_pre def
R156497:156497 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156499:156501 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156586:156586 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R156502:156506 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R156508:156509 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R156517:156540 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R156555:156577 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R156582:156584 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R156578:156581 compcert.exportclight.Clightdefs <> tint def
R156510:156516 VST.veric.SeparationLogic <> globals def
R156541:156548 VST.veric.SeparationLogic <> main_pre def
R156677:156686 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R156717:156729 VST.floyd.client_lemmas <> NDmk_funspec' def
R156798:156809 VST.veric.SeparationLogic <> NDmk_funspec def
R156833:156842 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R156851:156854 Coq.Init.Datatypes <> pair constr
R156859:156868 VST.veric.mpred <> mk_funspec constr
R156833:156842 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R156851:156854 Coq.Init.Datatypes <> pair constr
R156859:156868 VST.veric.mpred <> mk_funspec constr
R157219:157228 VST.floyd.client_lemmas <> convertPre def
binder 157239:157239 <> i:656
R157219:157228 VST.floyd.client_lemmas <> convertPre def
binder 157239:157239 <> i:657
binder 157296:157296 <> x:658
R157314:157314 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157316:157316 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157318:157318 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 157296:157296 <> x:659
R157314:157314 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157316:157316 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157318:157318 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 157381:157381 <> i:660
binder 157381:157381 <> i:661
R157513:157517 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
binder 157526:157528 <> rho:662
R157539:157541 VST.msl.seplog <> ::logic:x_'*'_x not
R157536:157538 VST.floyd.forward <> rho:662 var
R157545:157547 VST.floyd.forward <> rho:662 var
R157513:157517 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
binder 157526:157528 <> rho:663
R157539:157541 VST.msl.seplog <> ::logic:x_'*'_x not
R157536:157538 VST.floyd.forward <> rho:663 var
R157545:157547 VST.floyd.forward <> rho:663 var
binder 157574:157576 <> rho:664
R157587:157589 VST.msl.seplog <> ::logic:x_'*'_x not
R157584:157586 VST.floyd.forward <> rho:664 var
R157593:157595 VST.floyd.forward <> rho:664 var
binder 157574:157576 <> rho:665
R157587:157589 VST.msl.seplog <> ::logic:x_'*'_x not
R157584:157586 VST.floyd.forward <> rho:665 var
R157593:157595 VST.floyd.forward <> rho:665 var
R157605:157607 VST.msl.seplog <> ::logic:x_'*'_x not
R157787:157791 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R157828:157830 VST.msl.seplog <> ::logic:x_'*'_x not
R157814:157814 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157816:157816 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157818:157818 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157787:157791 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R157828:157830 VST.msl.seplog <> ::logic:x_'*'_x not
R157814:157814 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157816:157816 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157818:157818 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157881:157885 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R157943:157945 VST.msl.seplog <> ::logic:x_'*'_x not
R157894:157911 VST.veric.SeparationLogic <> close_precondition def
R157929:157929 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157931:157931 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157933:157933 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157881:157885 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R157943:157945 VST.msl.seplog <> ::logic:x_'*'_x not
R157894:157911 VST.veric.SeparationLogic <> close_precondition def
R157929:157929 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157931:157931 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157933:157933 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R157996:158000 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R158047:158049 VST.msl.seplog <> ::logic:x_'*'_x not
R158024:158024 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158026:158026 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158028:158028 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158040:158046 Coq.Init.Logic <> eq_refl constr
R157996:158000 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R158047:158049 VST.msl.seplog <> ::logic:x_'*'_x not
R158024:158024 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158026:158026 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158028:158028 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158040:158046 Coq.Init.Logic <> eq_refl constr
R158100:158104 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R158174:158176 VST.msl.seplog <> ::logic:x_'*'_x not
R158113:158130 VST.veric.SeparationLogic <> close_precondition def
R158150:158150 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158152:158152 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158154:158154 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158166:158172 Coq.Init.Logic <> eq_refl constr
R158100:158104 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R158174:158176 VST.msl.seplog <> ::logic:x_'*'_x not
R158113:158130 VST.veric.SeparationLogic <> close_precondition def
R158150:158150 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158152:158152 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158154:158154 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158166:158172 Coq.Init.Logic <> eq_refl constr
R158226:158230 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R158460:158462 VST.msl.seplog <> ::logic:x_'*'_x not
R158235:158252 VST.veric.SeparationLogic <> close_precondition def
binder 158309:158310 <> ae:666
R158350:158353 VST.msl.seplog <> ::logic:x_'&&'_x not
R158315:158318 VST.msl.seplog <> ::logic:'!!'_x not
R158349:158349 VST.msl.seplog <> ::logic:'!!'_x not
R158344:158346 Coq.Init.Logic <> ::type_scope:x_'='_x not
R158319:158334 Coq.Init.Datatypes <> length def
R158337:158339 Coq.Init.Datatypes <> snd def
R158341:158342 VST.floyd.forward <> ae:666 var
R158412:158420 VST.veric.SeparationLogic <> make_args def
R158435:158443 VST.veric.mpred <> mkEnviron constr
R158446:158448 Coq.Init.Datatypes <> fst def
R158450:158451 VST.floyd.forward <> ae:666 var
R158426:158428 Coq.Init.Datatypes <> snd def
R158430:158431 VST.floyd.forward <> ae:666 var
R158226:158230 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R158460:158462 VST.msl.seplog <> ::logic:x_'*'_x not
R158235:158252 VST.veric.SeparationLogic <> close_precondition def
binder 158309:158310 <> ae:667
R158350:158353 VST.msl.seplog <> ::logic:x_'&&'_x not
R158315:158318 VST.msl.seplog <> ::logic:'!!'_x not
R158349:158349 VST.msl.seplog <> ::logic:'!!'_x not
R158344:158346 Coq.Init.Logic <> ::type_scope:x_'='_x not
R158319:158334 Coq.Init.Datatypes <> length def
R158337:158339 Coq.Init.Datatypes <> snd def
R158341:158342 VST.floyd.forward <> ae:667 var
R158412:158420 VST.veric.SeparationLogic <> make_args def
R158435:158443 VST.veric.mpred <> mkEnviron constr
R158446:158448 Coq.Init.Datatypes <> fst def
R158450:158451 VST.floyd.forward <> ae:667 var
R158426:158428 Coq.Init.Datatypes <> snd def
R158430:158431 VST.floyd.forward <> ae:667 var
R158510:158510 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158512:158512 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158514:158514 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158510:158510 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158512:158512 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R158514:158514 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R159107:159111 compcert.cfrontend.Clight <> Sloop constr
R159158:159162 compcert.cfrontend.Clight <> Sskip constr
R159114:159122 compcert.cfrontend.Clight <> Ssequence constr
R159125:159135 compcert.cfrontend.Clight <> Sifthenelse constr
R159146:159151 compcert.cfrontend.Clight <> Sbreak constr
R159140:159144 compcert.cfrontend.Clight <> Sskip constr
R159107:159111 compcert.cfrontend.Clight <> Sloop constr
R159158:159162 compcert.cfrontend.Clight <> Sskip constr
R159114:159122 compcert.cfrontend.Clight <> Ssequence constr
R159125:159135 compcert.cfrontend.Clight <> Sifthenelse constr
R159146:159151 compcert.cfrontend.Clight <> Sbreak constr
R159140:159144 compcert.cfrontend.Clight <> Sskip constr
R159208:159216 compcert.cfrontend.Clight <> Ssequence constr
R159223:159227 compcert.cfrontend.Clight <> Sloop constr
R159230:159238 compcert.cfrontend.Clight <> Ssequence constr
R159241:159251 compcert.cfrontend.Clight <> Sifthenelse constr
R159262:159267 compcert.cfrontend.Clight <> Sbreak constr
R159256:159260 compcert.cfrontend.Clight <> Sskip constr
R159208:159216 compcert.cfrontend.Clight <> Ssequence constr
R159223:159227 compcert.cfrontend.Clight <> Sloop constr
R159230:159238 compcert.cfrontend.Clight <> Ssequence constr
R159241:159251 compcert.cfrontend.Clight <> Sifthenelse constr
R159262:159267 compcert.cfrontend.Clight <> Sbreak constr
R159256:159260 compcert.cfrontend.Clight <> Sskip constr
R159313:159316 compcert.cfrontend.Clight <> Sset constr
R159313:159316 compcert.cfrontend.Clight <> Sset constr
R159340:159343 compcert.cfrontend.Clight <> Sset constr
R159340:159343 compcert.cfrontend.Clight <> Sset constr
R159367:159371 compcert.cfrontend.Clight <> Sskip constr
R159367:159371 compcert.cfrontend.Clight <> Sskip constr
R159409:159412 compcert.cfrontend.Clight <> Sfor def
R159181:159186 compcert.cfrontend.Clight <> Swhile def
R159675:159694 VST.floyd.field_at <> data_at__offset_zero thm
R159715:159733 VST.floyd.forward <> start_function_aux1 thm
R159751:159768 VST.floyd.canon <> semax_extract_PROP thm
R159825:159828 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R159825:159828 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R159892:159896 VST.msl.shares <> share def
R159892:159896 VST.msl.shares <> share def
R159931:159937 VST.msl.shares Share t defax
R159931:159937 VST.msl.shares Share t defax
R160273:160277 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R160287:160291 VST.floyd.canon <> PROPx def
R160296:160301 VST.floyd.canon <> LOCALx def
R160273:160277 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R160287:160291 VST.floyd.canon <> PROPx def
R160296:160301 VST.floyd.canon <> LOCALx def
R160394:160403 VST.floyd.client_lemmas <> abbreviate def
R160423:160432 compcert.lib.Maps PTree Leaf constr
R160406:160412 compcert.lib.Maps PTree t def
R160414:160420 VST.veric.mpred <> funspec ind
R160394:160403 VST.floyd.client_lemmas <> abbreviate def
R160423:160432 compcert.lib.Maps PTree Leaf constr
R160406:160412 compcert.lib.Maps PTree t def
R160414:160420 VST.veric.mpred <> funspec ind
R160550:160578 VST.floyd.forward <> compute_close_precondition_eq thm
R160630:160652 VST.floyd.globals_lemmas <> close_precondition_main thm
R160684:160689 VST.msl.seplog <> sepcon meth
R160699:160701 VST.msl.seplog <> emp meth
R160711:160714 VST.msl.seplog <> andp meth
R160728:160739 VST.veric.SeparationLogic <> overridePost def
R160759:160764 VST.msl.eq_dec <> eq_dec def
R160793:160806 VST.veric.tycontext <> EqDec_exitkind inst
prf 160851:160877 <> composite_env_consistent_i'
R160902:160905 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R160893:160901 compcert.cfrontend.Ctypes <> composite rec
binder 160890:160890 <> f:668
R160918:160930 compcert.cfrontend.Ctypes <> composite_env class
binder 160913:160915 <> env:669
R160991:160998 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R161039:161039 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 161006:161007 <> id:670
binder 161009:161010 <> co:671
R161031:161034 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R161035:161035 VST.floyd.forward <> f:668 var
R161037:161038 VST.floyd.forward <> co:671 var
R161021:161023 Coq.Init.Logic <> ::type_scope:x_'='_x not
R161016:161018 compcert.lib.Maps <> :::x_'!'_x not
R161019:161020 VST.floyd.forward <> id:670 var
R161013:161015 VST.floyd.forward <> env:669 var
R161024:161027 Coq.Init.Datatypes <> Some constr
R161029:161030 VST.floyd.forward <> co:671 var
R160937:160942 Coq.Lists.List <> Forall ind
R160972:160985 compcert.lib.Maps PTree elements def
R160987:160989 VST.floyd.forward <> env:669 var
binder 160949:160952 <> idco:672
R160957:160957 VST.floyd.forward <> f:668 var
R160960:160962 Coq.Init.Datatypes <> snd def
R160964:160967 VST.floyd.forward <> idco:672 var
R161069:161091 VST.floyd.call_lemmas <> Forall_ptree_elements_e thm
R161115:161117 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R161107:161114 Coq.Numbers.BinNums <> positive ind
R161118:161126 compcert.cfrontend.Ctypes <> composite rec
binder 161100:161103 <> idco:673
R161134:161136 Coq.Init.Datatypes <> snd def
R161138:161141 VST.floyd.forward <> idco:673 var
R161069:161091 VST.floyd.call_lemmas <> Forall_ptree_elements_e thm
R161115:161117 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R161107:161114 Coq.Numbers.BinNums <> positive ind
R161118:161126 compcert.cfrontend.Ctypes <> composite rec
binder 161100:161103 <> idco:674
R161134:161136 Coq.Init.Datatypes <> snd def
R161138:161141 VST.floyd.forward <> idco:674 var
prf 161196:161221 <> composite_env_consistent_i
R161250:161253 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R161263:161266 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R161254:161262 compcert.cfrontend.Ctypes <> composite rec
R161237:161249 compcert.cfrontend.Ctypes <> composite_env class
binder 161234:161234 <> f:675
R161279:161291 compcert.cfrontend.Ctypes <> composite_env class
binder 161274:161276 <> env:676
R161356:161363 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R161408:161408 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 161371:161372 <> id:677
binder 161374:161375 <> co:678
R161396:161399 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R161400:161400 VST.floyd.forward <> f:675 var
R161406:161407 VST.floyd.forward <> co:678 var
R161402:161404 VST.floyd.forward <> env:676 var
R161386:161388 Coq.Init.Logic <> ::type_scope:x_'='_x not
R161381:161383 compcert.lib.Maps <> :::x_'!'_x not
R161384:161385 VST.floyd.forward <> id:677 var
R161378:161380 VST.floyd.forward <> env:676 var
R161389:161392 Coq.Init.Datatypes <> Some constr
R161394:161395 VST.floyd.forward <> co:678 var
R161298:161303 Coq.Lists.List <> Forall ind
R161337:161350 compcert.lib.Maps PTree elements def
R161352:161354 VST.floyd.forward <> env:676 var
binder 161310:161313 <> idco:679
R161318:161318 VST.floyd.forward <> f:675 var
R161325:161327 Coq.Init.Datatypes <> snd def
R161329:161332 VST.floyd.forward <> idco:679 var
R161320:161322 VST.floyd.forward <> env:676 var
R161433:161459 VST.floyd.forward <> composite_env_consistent_i' thm
R161433:161459 VST.floyd.forward <> composite_env_consistent_i' thm
prf 161487:161516 <> legal_alignas_env_consistency'
R161534:161546 compcert.cfrontend.Ctypes <> composite_env class
binder 161527:161530 <> cenv:680
R161559:161565 compcert.lib.Maps PTree t def
R161567:161567 Coq.Numbers.BinNums <> Z ind
binder 161550:161555 <> ha_env:681
R161579:161585 compcert.lib.Maps PTree t def
R161587:161603 VST.veric.align_mem LegalAlignasFacts.LegalAlignas legal_alignas_obs def
binder 161571:161576 <> la_env:682
R161638:161643 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R161682:161689 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R161690:161717 VST.veric.align_mem LegalAlignasFacts.LegalAlignasDefs legal_alignas_env_consistent def
R161731:161736 VST.floyd.forward <> la_env:682 var
R161724:161729 VST.floyd.forward <> ha_env:681 var
R161719:161722 VST.floyd.forward <> cenv:680 var
R161650:161652 Coq.Init.Logic <> ::type_scope:x_'='_x not
R161644:161649 VST.floyd.forward <> la_env:682 var
R161653:161669 VST.veric.align_mem LegalAlignasFacts.LegalAlignas legal_alignas_env def
R161676:161681 VST.floyd.forward <> ha_env:681 var
R161671:161674 VST.floyd.forward <> cenv:680 var
R161609:161632 compcert.cfrontend.Ctypes <> composite_env_consistent def
R161634:161637 VST.floyd.forward <> cenv:680 var
R161773:161801 VST.veric.align_mem LegalAlignasFacts legal_alignas_env_consistency prfax
R161773:161801 VST.veric.align_mem LegalAlignasFacts legal_alignas_env_consistency prfax
prf 161822:161852 <> legal_alignas_env_completeness'
R161870:161882 compcert.cfrontend.Ctypes <> composite_env class
binder 161863:161866 <> cenv:683
R161895:161901 compcert.lib.Maps PTree t def
R161903:161903 Coq.Numbers.BinNums <> Z ind
binder 161886:161891 <> ha_env:684
R161915:161921 compcert.lib.Maps PTree t def
R161923:161939 VST.veric.align_mem LegalAlignasFacts.LegalAlignas legal_alignas_obs def
binder 161907:161912 <> la_env:685
R161983:161990 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R161991:162016 VST.veric.align_mem LegalAlignasFacts.LegalAlignasDefs legal_alignas_env_complete def
R162023:162028 VST.floyd.forward <> la_env:685 var
R162018:162021 VST.floyd.forward <> cenv:683 var
R161951:161953 Coq.Init.Logic <> ::type_scope:x_'='_x not
R161945:161950 VST.floyd.forward <> la_env:685 var
R161954:161970 VST.veric.align_mem LegalAlignasFacts.LegalAlignas legal_alignas_env def
R161977:161982 VST.floyd.forward <> ha_env:684 var
R161972:161975 VST.floyd.forward <> cenv:683 var
R162065:162094 VST.veric.align_mem LegalAlignasFacts legal_alignas_env_completeness prfax
R162065:162094 VST.veric.align_mem LegalAlignasFacts legal_alignas_env_completeness prfax
prf 162115:162123 <> Zgeb0_ge0
binder 162133:162133 <> n:686
R162152:162155 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R162157:162160 Coq.ZArith.BinInt <> ::Z_scope:x_'>='_x not
R162156:162156 VST.floyd.forward <> n:686 var
R162145:162147 Coq.Init.Logic <> ::type_scope:x_'='_x not
R162136:162140 Coq.ZArith.BinInt Z geb def
R162142:162142 VST.floyd.forward <> n:686 var
R162148:162151 Coq.Init.Datatypes <> true constr
R162185:162192 Coq.ZArith.BinInt Z geb_le thm
R162185:162192 Coq.ZArith.BinInt Z geb_le thm
prf 162217:162235 <> prove_alignof_two_p
R162241:162241 Coq.Numbers.BinNums <> Z ind
binder 162238:162238 <> i:687
R162295:162298 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R162299:162305 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R162312:162313 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R162309:162311 Coq.Init.Datatypes <> nat ind
binder 162306:162306 <> n:688
R162315:162317 Coq.Init.Logic <> ::type_scope:x_'='_x not
R162314:162314 VST.floyd.forward <> i:687 var
R162318:162330 Coq.ZArith.Zpower <> two_power_nat def
R162332:162332 VST.floyd.forward <> n:688 var
R162252:162254 Coq.Init.Logic <> ::type_scope:x_'='_x not
R162251:162251 VST.floyd.forward <> i:687 var
R162255:162267 Coq.ZArith.Zpower <> two_power_nat def
R162270:162280 Coq.Arith.PeanoNat Nat log2_up def
R162283:162290 Coq.ZArith.BinInt Z to_nat def
R162292:162292 VST.floyd.forward <> i:687 var
prf 162384:162396 <> prove_Zdivide
R162404:162404 Coq.Numbers.BinNums <> Z ind
binder 162399:162399 <> a:689
binder 162401:162401 <> b:690
R162431:162434 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R162435:162442 Coq.ZArith.BinInt Z divide def
R162446:162446 VST.floyd.forward <> b:690 var
R162444:162444 VST.floyd.forward <> a:689 var
R162409:162411 Coq.Init.Logic <> ::type_scope:x_'='_x not
R162408:162408 VST.floyd.forward <> b:690 var
R162412:162416 Coq.ZArith.BinInt Z mul def
R162430:162430 VST.floyd.forward <> a:689 var
R162419:162423 Coq.ZArith.BinInt Z div def
R162427:162427 VST.floyd.forward <> a:689 var
R162425:162425 VST.floyd.forward <> b:690 var
R162573:162581 compcert.common.Errors <> OK constr
R162591:162595 compcert.cfrontend.Ctypes <> co_su proj
R162591:162595 compcert.cfrontend.Ctypes <> co_su proj
R162612:162621 compcert.cfrontend.Ctypes <> co_members proj
R162637:162643 compcert.cfrontend.Ctypes <> co_attr proj
R162659:162667 compcert.cfrontend.Ctypes <> co_sizeof proj
R162684:162693 compcert.cfrontend.Ctypes <> co_alignof proj
R162710:162716 compcert.cfrontend.Ctypes <> co_rank proj
R162735:162747 compcert.cfrontend.Ctypes <> co_sizeof_pos proj
R162762:162777 compcert.cfrontend.Ctypes <> co_alignof_two_p proj
R162792:162808 compcert.cfrontend.Ctypes <> co_sizeof_alignof proj
R162573:162581 compcert.common.Errors <> OK constr
R162591:162595 compcert.cfrontend.Ctypes <> co_su proj
R162591:162595 compcert.cfrontend.Ctypes <> co_su proj
R162612:162621 compcert.cfrontend.Ctypes <> co_members proj
R162637:162643 compcert.cfrontend.Ctypes <> co_attr proj
R162659:162667 compcert.cfrontend.Ctypes <> co_sizeof proj
R162684:162693 compcert.cfrontend.Ctypes <> co_alignof proj
R162710:162716 compcert.cfrontend.Ctypes <> co_rank proj
R162735:162747 compcert.cfrontend.Ctypes <> co_sizeof_pos proj
R162762:162777 compcert.cfrontend.Ctypes <> co_alignof_two_p proj
R162792:162808 compcert.cfrontend.Ctypes <> co_sizeof_alignof proj
R162951:162959 VST.floyd.forward <> Zgeb0_ge0 thm
R162965:162971 Coq.Init.Logic <> eq_refl constr
R163004:163022 VST.floyd.forward <> prove_alignof_two_p thm
R163028:163034 Coq.Init.Logic <> eq_refl constr
R163063:163075 VST.floyd.forward <> prove_Zdivide thm
R163084:163090 Coq.Init.Logic <> eq_refl constr
R163123:163127 compcert.cfrontend.Ctypes <> co_su proj
R163123:163127 compcert.cfrontend.Ctypes <> co_su proj
R163143:163152 compcert.cfrontend.Ctypes <> co_members proj
R163167:163173 compcert.cfrontend.Ctypes <> co_attr proj
R163188:163196 compcert.cfrontend.Ctypes <> co_sizeof proj
R163212:163221 compcert.cfrontend.Ctypes <> co_alignof proj
R163237:163243 compcert.cfrontend.Ctypes <> co_rank proj
R163261:163273 compcert.cfrontend.Ctypes <> co_sizeof_pos proj
R163289:163304 compcert.cfrontend.Ctypes <> co_alignof_two_p proj
R163323:163339 compcert.cfrontend.Ctypes <> co_sizeof_alignof proj
R163458:163461 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R163435:163443 compcert.cfrontend.Ctypes <> Composite constr
R163458:163461 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R163435:163443 compcert.cfrontend.Ctypes <> Composite constr
R163720:163722 Coq.Init.Datatypes <> nil constr
R163720:163722 Coq.Init.Datatypes <> nil constr
R163735:163743 compcert.common.Errors <> OK constr
R163491:163506 compcert.cfrontend.Ctypes <> composite_of_def def
R163599:163607 compcert.lib.Maps PTree set def
R163811:163830 compcert.exportclight.Clightdefs <> build_composite_env' def
R163843:163843 Coq.Init.Logic <> I constr
R164046:164070 compcert.cfrontend.Ctypes <> add_composite_definitions def
R164072:164081 compcert.lib.Maps PTree Leaf constr
R164046:164070 compcert.cfrontend.Ctypes <> add_composite_definitions def
R164072:164081 compcert.lib.Maps PTree Leaf constr
R164150:164159 compcert.lib.Maps PTree Leaf constr
R164161:164169 compcert.cfrontend.Ctypes <> composite rec
R164290:164299 compcert.cfrontend.Ctypes <> prog_types proj
R164433:164452 compcert.exportclight.Clightdefs <> build_composite_env' def
R164460:164460 Coq.Init.Logic <> I constr
R164433:164452 compcert.exportclight.Clightdefs <> build_composite_env' def
R164460:164460 Coq.Init.Logic <> I constr
R164557:164560 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R164557:164560 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R164597:164599 Coq.Init.Datatypes <> nil constr
R164597:164599 Coq.Init.Datatypes <> nil constr
R164701:164709 compcert.common.Errors <> OK constr
R164701:164709 compcert.common.Errors <> OK constr
R164932:164955 compcert.cfrontend.Ctypes <> composite_env_consistent def
R164851:164876 VST.floyd.forward <> composite_env_consistent_i thm
R164878:164897 compcert.cfrontend.Ctypes <> composite_consistent rec
R165093:165121 VST.veric.mpred <> composite_env_legal_fieldlist def
R165006:165032 VST.floyd.forward <> composite_env_consistent_i' thm
R165034:165058 VST.veric.mpred <> composite_legal_fieldlist def
R165299:165336 VST.veric.composite_compute <> composite_env_complete_legal_cosu_type def
R165165:165190 VST.floyd.forward <> composite_env_consistent_i thm
binder 165197:165197 <> c:691
binder 165199:165200 <> co:692
R165257:165259 Coq.Init.Logic <> ::type_scope:x_'='_x not
R165205:165238 VST.veric.composite_compute <> composite_complete_legal_cosu_type def
R165243:165252 compcert.cfrontend.Ctypes <> co_members proj
R165254:165255 VST.floyd.forward <> co:692 var
R165240:165240 VST.floyd.forward <> c:691 var
R165260:165263 Coq.Init.Datatypes <> true constr
R165376:165395 VST.veric.align_mem <> hardware_alignof_env def
R165447:165449 Coq.Init.Logic <> ::type_scope:x_'='_x not
R165450:165469 VST.veric.align_mem <> hardware_alignof_env def
R165432:165438 Coq.Init.Logic <> eq_refl constr
R165516:165543 VST.veric.align_mem hardware_alignof_facts hardware_alignof_consistency prfax
R165620:165648 VST.veric.align_mem hardware_alignof_facts hardware_alignof_completeness prfax
R165703:165719 VST.veric.align_mem LegalAlignasFacts.LegalAlignas legal_alignas_env def
R165778:165780 Coq.Init.Logic <> ::type_scope:x_'='_x not
R165781:165797 VST.veric.align_mem LegalAlignasFacts.LegalAlignas legal_alignas_env def
R165763:165769 Coq.Init.Logic <> eq_refl constr
R165851:165880 VST.floyd.forward <> legal_alignas_env_consistency' thm
R165964:165994 VST.floyd.forward <> legal_alignas_env_completeness' thm
R166058:166080 VST.veric.align_mem LegalAlignasFacts legal_alignas_soundness prfax
R166220:166226 VST.veric.mpred <> cenv_cs meth
R166220:166226 VST.veric.mpred <> cenv_cs meth
R166242:166256 VST.veric.mpred <> cenv_consistent meth
R166283:166302 VST.veric.mpred <> cenv_legal_fieldlist meth
R166334:166346 VST.veric.mpred <> cenv_legal_su meth
R166371:166379 VST.veric.mpred <> ha_env_cs meth
R166396:166415 VST.veric.mpred <> ha_env_cs_consistent meth
R166443:166460 VST.veric.mpred <> ha_env_cs_complete meth
R166486:166494 VST.veric.mpred <> la_env_cs meth
R166511:166530 VST.veric.mpred <> la_env_cs_consistent meth
R166558:166575 VST.veric.mpred <> la_env_cs_complete meth
R166601:166615 VST.veric.mpred <> la_env_cs_sound meth
def 166648:166658 <> missing_ids
binder 166661:166661 <> A:693
R166668:166677 compcert.lib.Maps PTree tree ind
R166679:166679 VST.floyd.forward <> A:693 var
binder 166665:166665 <> t:694
R166687:166690 Coq.Init.Datatypes <> list ind
R166692:166696 compcert.common.AST <> ident def
binder 166683:166684 <> al:695
R166710:166711 VST.floyd.forward <> al:695 var
R166723:166724 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R166786:166806 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R166738:166746 compcert.lib.Maps PTree get def
R166750:166750 VST.floyd.forward <> t:694 var
R166757:166760 Coq.Init.Datatypes <> None constr
R166766:166767 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R166768:166770 Coq.Init.Datatypes <> nil constr
R166779:166781 Coq.Init.Datatypes <> nil constr
R166807:166817 VST.floyd.forward <> missing_ids:696 def
R166819:166819 VST.floyd.forward <> t:694 var
R166829:166831 Coq.Init.Datatypes <> nil constr
R166836:166838 Coq.Init.Datatypes <> nil constr
R166902:166910 compcert.cfrontend.Ctypes <> prog_defs proj
R166913:166932 compcert.exportclight.Clightdefs <> mkprogram def
R166902:166910 compcert.cfrontend.Ctypes <> prog_defs proj
R166913:166932 compcert.exportclight.Clightdefs <> mkprogram def
R166999:167007 compcert.cfrontend.Ctypes <> prog_defs proj
R167013:167021 compcert.cfrontend.Ctypes <> prog_defs proj
R167013:167021 compcert.cfrontend.Ctypes <> prog_defs proj
R166999:167007 compcert.cfrontend.Ctypes <> prog_defs proj
R167013:167021 compcert.cfrontend.Ctypes <> prog_defs proj
R167013:167021 compcert.cfrontend.Ctypes <> prog_defs proj
def 167091:167103 <> duplicate_ids
R167110:167113 Coq.Init.Datatypes <> list ind
R167115:167119 compcert.common.AST <> ident def
binder 167106:167107 <> il:698
R167124:167127 Coq.Init.Datatypes <> list ind
R167129:167133 compcert.common.AST <> ident def
binder 167161:167161 <> t:699
binder 167163:167164 <> id:700
R167184:167192 compcert.lib.Maps PTree get def
R167197:167197 VST.floyd.forward <> t:699 var
R167194:167195 VST.floyd.forward <> id:700 var
R167214:167217 Coq.Init.Datatypes <> Some constr
R167224:167232 compcert.lib.Maps PTree set def
R167247:167247 VST.floyd.forward <> t:699 var
R167237:167237 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R167242:167242 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R167245:167245 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R167238:167241 Coq.Init.Datatypes <> true constr
R167243:167244 VST.floyd.forward <> id:700 var
R167234:167235 VST.floyd.forward <> id:700 var
R167259:167262 Coq.Init.Datatypes <> None constr
R167267:167275 compcert.lib.Maps PTree set def
R167291:167291 VST.floyd.forward <> t:699 var
R167280:167280 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R167286:167286 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R167289:167289 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R167281:167285 Coq.Init.Datatypes <> false constr
R167287:167288 VST.floyd.forward <> id:700 var
R167277:167278 VST.floyd.forward <> id:700 var
binder 167143:167152 <> ptree_incr:701
R167319:167332 Coq.Lists.List <> fold_left def
R167349:167359 compcert.lib.Maps PTree empty def
R167366:167366 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R167362:167365 Coq.Init.Datatypes <> bool ind
R167367:167371 compcert.common.AST <> ident def
R167345:167346 VST.floyd.forward <> il:698 var
R167334:167343 VST.floyd.forward <> ptree_incr:701 var
binder 167314:167314 <> t:702
R167390:167399 compcert.lib.Maps PTree fold def
R167514:167516 Coq.Init.Datatypes <> nil constr
R167512:167512 VST.floyd.forward <> t:702 var
R167411:167414 Coq.Init.Datatypes <> list ind
R167416:167420 compcert.common.AST <> ident def
binder 167407:167408 <> dl:703
R167428:167432 compcert.common.AST <> ident def
binder 167424:167425 <> id:704
R167443:167443 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R167439:167442 Coq.Init.Datatypes <> bool ind
R167444:167448 compcert.common.AST <> ident def
binder 167436:167436 <> b:705
R167480:167482 Coq.Init.Datatypes <> fst def
R167484:167484 VST.floyd.forward <> b:705 var
R167508:167509 VST.floyd.forward <> dl:703 var
R167491:167491 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R167497:167499 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R167492:167494 Coq.Init.Datatypes <> snd def
R167496:167496 VST.floyd.forward <> b:705 var
R167500:167501 VST.floyd.forward <> dl:703 var
binder 167384:167385 <> dl:706
R167523:167524 VST.floyd.forward <> dl:706 var
R167763:167779 VST.floyd.base2 <> augment_funspecs' def
R167782:167791 VST.veric.SeparationLogic <> prog_funct def
R167945:167948 Coq.Init.Datatypes <> Some constr
R167945:167948 Coq.Init.Datatypes <> Some constr
R167968:167971 Coq.Init.Datatypes <> None constr
R167968:167971 Coq.Init.Datatypes <> None constr
R167997:168011 Coq.Lists.List <> fold_right def
R168087:168089 Coq.Lists.List <> map def
R168096:168105 VST.veric.SeparationLogic <> prog_funct def
R168091:168093 Coq.Init.Datatypes <> fst def
R168044:168054 compcert.lib.Maps PTree empty def
binder 168018:168018 <> i:707
binder 168020:168020 <> t:708
R168025:168033 compcert.lib.Maps PTree set def
R168040:168040 VST.floyd.forward <> t:708 var
R168037:168038 Coq.Init.Datatypes <> tt constr
R168035:168035 VST.floyd.forward <> i:707 var
R168174:168184 VST.floyd.forward <> missing_ids def
R168189:168191 Coq.Lists.List <> map def
R168193:168195 Coq.Init.Datatypes <> fst def
R168270:168282 VST.floyd.forward <> duplicate_ids def
R168285:168287 Coq.Lists.List <> map def
R168289:168291 Coq.Init.Datatypes <> fst def
R168401:168403 Coq.Init.Datatypes <> nil constr
R168401:168403 Coq.Init.Datatypes <> nil constr
R168420:168421 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R168420:168421 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R168498:168500 Coq.Init.Datatypes <> nil constr
R168498:168500 Coq.Init.Datatypes <> nil constr
def 168746:168755 <> ptree_incr
R168760:168766 compcert.lib.Maps PTree t def
R168772:168772 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R168768:168771 Coq.Init.Datatypes <> bool ind
R168773:168777 compcert.common.AST <> ident def
binder 168758:168758 <> s:709
R168785:168789 compcert.common.AST <> ident def
binder 168782:168783 <> id:710
R168810:168818 compcert.lib.Maps PTree get def
R168823:168823 VST.floyd.forward <> s:709 var
R168820:168821 VST.floyd.forward <> id:710 var
R168840:168843 Coq.Init.Datatypes <> Some constr
R168850:168858 compcert.lib.Maps PTree set def
R168873:168873 VST.floyd.forward <> s:709 var
R168863:168863 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R168868:168868 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R168871:168871 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R168864:168867 Coq.Init.Datatypes <> true constr
R168869:168870 VST.floyd.forward <> id:710 var
R168860:168861 VST.floyd.forward <> id:710 var
R168885:168888 Coq.Init.Datatypes <> None constr
R168893:168901 compcert.lib.Maps PTree set def
R168917:168917 VST.floyd.forward <> s:709 var
R168906:168906 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R168912:168912 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R168915:168915 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R168907:168911 Coq.Init.Datatypes <> false constr
R168913:168914 VST.floyd.forward <> id:710 var
R168903:168904 VST.floyd.forward <> id:710 var
R168979:168993 Coq.Lists.List <> fold_right def
R169069:169071 Coq.Lists.List <> map def
R169078:169087 VST.veric.SeparationLogic <> prog_funct def
R169073:169075 Coq.Init.Datatypes <> fst def
R169026:169036 compcert.lib.Maps PTree empty def
binder 169000:169000 <> i:711
binder 169002:169002 <> t:712
R169007:169015 compcert.lib.Maps PTree set def
R169022:169022 VST.floyd.forward <> t:712 var
R169019:169020 Coq.Init.Datatypes <> tt constr
R169017:169017 VST.floyd.forward <> i:711 var
R169156:169166 VST.floyd.forward <> missing_ids def
R169171:169173 Coq.Lists.List <> map def
R169175:169177 Coq.Init.Datatypes <> fst def
R169249:169262 Coq.Lists.List <> fold_left def
R169288:169298 compcert.lib.Maps PTree empty def
R169305:169305 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R169301:169304 Coq.Init.Datatypes <> bool ind
R169306:169310 compcert.common.AST <> ident def
R169276:169278 Coq.Lists.List <> map def
R169280:169282 Coq.Init.Datatypes <> fst def
R169264:169273 VST.floyd.forward <> ptree_incr def
R169375:169384 compcert.lib.Maps PTree fold def
R169499:169501 Coq.Init.Datatypes <> nil constr
R169396:169399 Coq.Init.Datatypes <> list ind
R169401:169405 compcert.common.AST <> ident def
binder 169392:169393 <> dl:713
R169413:169417 compcert.common.AST <> ident def
binder 169409:169410 <> id:714
R169428:169428 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R169424:169427 Coq.Init.Datatypes <> bool ind
R169429:169433 compcert.common.AST <> ident def
binder 169421:169421 <> b:715
R169465:169467 Coq.Init.Datatypes <> fst def
R169469:169469 VST.floyd.forward <> b:715 var
R169493:169494 VST.floyd.forward <> dl:713 var
R169476:169476 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R169482:169484 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R169477:169479 Coq.Init.Datatypes <> snd def
R169481:169481 VST.floyd.forward <> b:715 var
R169485:169486 VST.floyd.forward <> dl:713 var
R169573:169575 Coq.Init.Datatypes <> nil constr
R169573:169575 Coq.Init.Datatypes <> nil constr
R169592:169593 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R169592:169593 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R169670:169672 Coq.Init.Datatypes <> nil constr
R169670:169672 Coq.Init.Datatypes <> nil constr
def 169931:169940 <> semax_prog
binder 169943:169947 <> Espec:716
binder 169951:169952 <> CS:717
binder 169955:169958 <> prog:718
binder 169960:169960 <> z:719
binder 169962:169962 <> V:720
binder 169964:169964 <> G:721
R169971:170052 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_MinimumLogic.CSHL_Defs semax_prog def
R170075:170090 VST.floyd.base2 <> augment_funspecs def
R170097:170097 VST.floyd.forward <> G:721 var
R170092:170095 VST.floyd.forward <> prog:718 var
R170072:170072 VST.floyd.forward <> V:720 var
R170070:170070 VST.floyd.forward <> z:719 var
R170065:170068 VST.floyd.forward <> prog:718 var
R170062:170063 VST.floyd.forward <> CS:717 var
R170056:170060 VST.floyd.forward <> Espec:716 var
prf 170108:170123 <> mk_funspec_congr
binder 170135:170135 <> a:722
binder 170137:170137 <> b:723
binder 170139:170139 <> c:724
binder 170141:170141 <> d:725
binder 170143:170143 <> e:726
binder 170145:170145 <> f:727
binder 170147:170147 <> g:728
binder 170149:170150 <> a':729
binder 170152:170153 <> b':730
binder 170155:170156 <> c':731
binder 170158:170159 <> d':732
binder 170161:170162 <> e':733
binder 170164:170165 <> f':734
binder 170167:170168 <> g':735
R170178:170181 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R170186:170189 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R170194:170197 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R170207:170210 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R170220:170224 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R170249:170251 Coq.Init.Logic <> ::type_scope:x_'='_x not
R170225:170234 VST.veric.mpred <> mk_funspec constr
R170248:170248 VST.floyd.forward <> g:728 var
R170246:170246 VST.floyd.forward <> f:727 var
R170244:170244 VST.floyd.forward <> e:726 var
R170242:170242 VST.floyd.forward <> d:725 var
R170240:170240 VST.floyd.forward <> c:724 var
R170238:170238 VST.floyd.forward <> b:723 var
R170236:170236 VST.floyd.forward <> a:722 var
R170252:170261 VST.veric.mpred <> mk_funspec constr
R170281:170282 VST.floyd.forward <> g':735 var
R170278:170279 VST.floyd.forward <> f':734 var
R170275:170276 VST.floyd.forward <> e':733 var
R170272:170273 VST.floyd.forward <> d':732 var
R170269:170270 VST.floyd.forward <> c':731 var
R170266:170267 VST.floyd.forward <> b':730 var
R170263:170264 VST.floyd.forward <> a':729 var
R170211:170214 VST.floyd.jmeq_lemmas <> JMeq def
R170218:170219 VST.floyd.forward <> e':733 var
R170216:170216 VST.floyd.forward <> e:726 var
R170198:170201 VST.floyd.jmeq_lemmas <> JMeq def
R170205:170206 VST.floyd.forward <> d':732 var
R170203:170203 VST.floyd.forward <> d:725 var
R170191:170191 Coq.Init.Logic <> ::type_scope:x_'='_x not
R170190:170190 VST.floyd.forward <> c:724 var
R170192:170193 VST.floyd.forward <> c':731 var
R170183:170183 Coq.Init.Logic <> ::type_scope:x_'='_x not
R170182:170182 VST.floyd.forward <> b:723 var
R170184:170185 VST.floyd.forward <> b':730 var
R170175:170175 Coq.Init.Logic <> ::type_scope:x_'='_x not
R170174:170174 VST.floyd.forward <> a:722 var
R170176:170177 VST.floyd.forward <> a':729 var
R170322:170328 VST.floyd.jmeq_lemmas <> JMeq_eq thm
R170322:170328 VST.floyd.jmeq_lemmas <> JMeq_eq thm
R170343:170349 VST.floyd.jmeq_lemmas <> JMeq_eq thm
R170343:170349 VST.floyd.jmeq_lemmas <> JMeq_eq thm
R170386:170394 VST.msl.Axioms <> proof_irr thm
R170386:170394 VST.msl.Axioms <> proof_irr thm
R170386:170394 VST.msl.Axioms <> proof_irr thm
R170617:170625 VST.msl.Axioms <> proof_irr thm
R170877:170881 Coq.Init.Logic <> False ind
R170877:170881 Coq.Init.Logic <> False ind
R171074:171100 VST.floyd.forward_lemmas <> semax_func_cons_ext_vacuous thm
prf 171264:171280 <> extract_prog_main
binder 171282:171282 <> t:736
binder 171284:171284 <> d:737
binder 171286:171286 <> p:738
binder 171288:171288 <> m:739
binder 171290:171290 <> w:740
R171337:171339 Coq.Init.Logic <> ::type_scope:x_'='_x not
R171295:171303 compcert.cfrontend.Ctypes <> prog_main proj
R171306:171325 compcert.exportclight.Clightdefs <> mkprogram def
R171335:171335 VST.floyd.forward <> w:740 var
R171333:171333 VST.floyd.forward <> m:739 var
R171331:171331 VST.floyd.forward <> p:738 var
R171329:171329 VST.floyd.forward <> d:737 var
R171327:171327 VST.floyd.forward <> t:736 var
R171340:171340 VST.floyd.forward <> m:739 var
R171359:171378 compcert.exportclight.Clightdefs <> mkprogram def
R171393:171412 compcert.exportclight.Clightdefs <> build_composite_env' def
R171393:171412 compcert.exportclight.Clightdefs <> build_composite_env' def
prf 171447:171464 <> extract_prog_main'
binder 171467:171467 <> F:741
binder 171470:171473 <> defs:742
binder 171475:171481 <> publics:743
binder 171483:171486 <> main:744
binder 171488:171492 <> types:745
binder 171494:171500 <> compenv:746
binder 171502:171504 <> prf:747
R171677:171679 Coq.Init.Logic <> ::type_scope:x_'='_x not
R171510:171518 compcert.cfrontend.Ctypes <> prog_main proj
R171525:171533 compcert.cfrontend.Ctypes <> prog_defs proj
R171525:171533 compcert.cfrontend.Ctypes <> prog_defs proj
R171544:171554 compcert.cfrontend.Ctypes <> prog_public proj
R171568:171576 compcert.cfrontend.Ctypes <> prog_main proj
R171585:171594 compcert.cfrontend.Ctypes <> prog_types proj
R171625:171637 compcert.cfrontend.Ctypes <> prog_comp_env proj
R171651:171666 compcert.cfrontend.Ctypes <> prog_comp_env_eq proj
R171671:171673 VST.floyd.forward <> prf:747 var
R171642:171648 VST.floyd.forward <> compenv:746 var
R171597:171601 VST.floyd.forward <> types:745 var
R171579:171582 VST.floyd.forward <> main:744 var
R171559:171565 VST.floyd.forward <> publics:743 var
R171538:171541 VST.floyd.forward <> defs:742 var
R171520:171520 VST.floyd.forward <> F:741 var
R171680:171683 VST.floyd.forward <> main:744 var
prf 171718:171732 <> extract_compEnv
binder 171734:171734 <> t:748
binder 171736:171736 <> a:749
R171763:171765 Coq.Init.Logic <> ::type_scope:x_'='_x not
R171742:171760 compcert.cfrontend.Ctypes <> build_composite_env def
R171762:171762 VST.floyd.forward <> t:748 var
R171766:171774 compcert.common.Errors <> OK constr
R171776:171776 VST.floyd.forward <> a:749 var
binder 171739:171739 <> H:750
binder 171785:171785 <> d:751
binder 171787:171787 <> p:752
binder 171789:171789 <> m:753
binder 171791:171791 <> w:754
R171797:171799 Coq.Init.Logic <> ::type_scope:x_'='_x not
R171796:171796 VST.floyd.forward <> a:749 var
R171800:171812 compcert.cfrontend.Ctypes <> prog_comp_env proj
R171815:171834 compcert.exportclight.Clightdefs <> mkprogram def
R171844:171844 VST.floyd.forward <> w:754 var
R171842:171842 VST.floyd.forward <> m:753 var
R171840:171840 VST.floyd.forward <> p:752 var
R171838:171838 VST.floyd.forward <> d:751 var
R171836:171836 VST.floyd.forward <> t:748 var
R171864:171883 compcert.exportclight.Clightdefs <> mkprogram def
R171898:171917 compcert.exportclight.Clightdefs <> build_composite_env' def
R171898:171917 compcert.exportclight.Clightdefs <> build_composite_env' def
R172019:172021 Coq.Init.Logic <> ::type_scope:x_'='_x not
R172369:172389 Coq.Init.Logic <> ::type_scope:x_'='_x not
R172737:172745 Coq.Init.Logic <> ::type_scope:x_'='_x not
R172022:172026 compcert.cfrontend.Ctypes <> co_su proj
R172022:172026 compcert.cfrontend.Ctypes <> co_su proj
R172049:172058 compcert.cfrontend.Ctypes <> co_members proj
R172086:172092 compcert.cfrontend.Ctypes <> co_attr proj
R172117:172125 compcert.cfrontend.Ctypes <> co_sizeof proj
R172151:172160 compcert.cfrontend.Ctypes <> co_alignof proj
R172188:172194 compcert.cfrontend.Ctypes <> co_rank proj
R172219:172231 compcert.cfrontend.Ctypes <> co_sizeof_pos proj
R172268:172283 compcert.cfrontend.Ctypes <> co_alignof_two_p proj
R172323:172339 compcert.cfrontend.Ctypes <> co_sizeof_alignof proj
R172390:172394 compcert.cfrontend.Ctypes <> co_su proj
R172390:172394 compcert.cfrontend.Ctypes <> co_su proj
R172417:172426 compcert.cfrontend.Ctypes <> co_members proj
R172454:172460 compcert.cfrontend.Ctypes <> co_attr proj
R172485:172493 compcert.cfrontend.Ctypes <> co_sizeof proj
R172519:172528 compcert.cfrontend.Ctypes <> co_alignof proj
R172556:172562 compcert.cfrontend.Ctypes <> co_rank proj
R172587:172599 compcert.cfrontend.Ctypes <> co_sizeof_pos proj
R172636:172651 compcert.cfrontend.Ctypes <> co_alignof_two_p proj
R172691:172707 compcert.cfrontend.Ctypes <> co_sizeof_alignof proj
R172019:172021 Coq.Init.Logic <> ::type_scope:x_'='_x not
R172369:172389 Coq.Init.Logic <> ::type_scope:x_'='_x not
R172737:172745 Coq.Init.Logic <> ::type_scope:x_'='_x not
R172022:172026 compcert.cfrontend.Ctypes <> co_su proj
R172022:172026 compcert.cfrontend.Ctypes <> co_su proj
R172049:172058 compcert.cfrontend.Ctypes <> co_members proj
R172086:172092 compcert.cfrontend.Ctypes <> co_attr proj
R172117:172125 compcert.cfrontend.Ctypes <> co_sizeof proj
R172151:172160 compcert.cfrontend.Ctypes <> co_alignof proj
R172188:172194 compcert.cfrontend.Ctypes <> co_rank proj
R172219:172231 compcert.cfrontend.Ctypes <> co_sizeof_pos proj
R172268:172283 compcert.cfrontend.Ctypes <> co_alignof_two_p proj
R172323:172339 compcert.cfrontend.Ctypes <> co_sizeof_alignof proj
R172390:172394 compcert.cfrontend.Ctypes <> co_su proj
R172390:172394 compcert.cfrontend.Ctypes <> co_su proj
R172417:172426 compcert.cfrontend.Ctypes <> co_members proj
R172454:172460 compcert.cfrontend.Ctypes <> co_attr proj
R172485:172493 compcert.cfrontend.Ctypes <> co_sizeof proj
R172519:172528 compcert.cfrontend.Ctypes <> co_alignof proj
R172556:172562 compcert.cfrontend.Ctypes <> co_rank proj
R172587:172599 compcert.cfrontend.Ctypes <> co_sizeof_pos proj
R172636:172651 compcert.cfrontend.Ctypes <> co_alignof_two_p proj
R172691:172707 compcert.cfrontend.Ctypes <> co_sizeof_alignof proj
prf 172975:173003 <> add_composite_definitions_nil
binder 173005:173007 <> env:755
R173043:173045 Coq.Init.Logic <> ::type_scope:x_'='_x not
R173010:173034 compcert.cfrontend.Ctypes <> add_composite_definitions def
R173040:173042 Coq.Init.Datatypes <> nil constr
R173036:173038 VST.floyd.forward <> env:755 var
R173046:173054 compcert.common.Errors <> OK constr
R173056:173058 VST.floyd.forward <> env:755 var
def 173098:173111 <> mk_OKComposite
binder 173113:173115 <> env:756
binder 173117:173118 <> su:757
binder 173120:173120 <> m:758
binder 173122:173122 <> a:759
binder 173124:173125 <> al:760
binder 173127:173129 <> PR1:761
binder 173131:173133 <> PR2:762
binder 173135:173137 <> PR3:763
R173141:173149 compcert.cfrontend.Ctypes <> composite rec
R173167:173171 compcert.cfrontend.Ctypes <> co_su proj
R173167:173171 compcert.cfrontend.Ctypes <> co_su proj
R173187:173196 compcert.cfrontend.Ctypes <> co_members proj
R173211:173217 compcert.cfrontend.Ctypes <> co_attr proj
R173232:173240 compcert.cfrontend.Ctypes <> co_sizeof proj
R173290:173299 compcert.cfrontend.Ctypes <> co_alignof proj
R173315:173321 compcert.cfrontend.Ctypes <> co_rank proj
R173353:173365 compcert.cfrontend.Ctypes <> co_sizeof_pos proj
R173382:173397 compcert.cfrontend.Ctypes <> co_alignof_two_p proj
R173414:173430 compcert.cfrontend.Ctypes <> co_sizeof_alignof proj
R173435:173437 VST.floyd.forward <> PR3:763 var
R173402:173404 VST.floyd.forward <> PR2:762 var
R173370:173372 VST.floyd.forward <> PR1:761 var
R173326:173337 compcert.cfrontend.Ctypes <> rank_members def
R173343:173343 VST.floyd.forward <> m:758 var
R173339:173341 VST.floyd.forward <> env:756 var
R173304:173305 VST.floyd.forward <> al:760 var
R173245:173249 compcert.lib.Coqlib <> align def
R173279:173280 VST.floyd.forward <> al:760 var
R173252:173267 compcert.cfrontend.Ctypes <> sizeof_composite def
R173276:173276 VST.floyd.forward <> m:758 var
R173273:173274 VST.floyd.forward <> su:757 var
R173269:173271 VST.floyd.forward <> env:756 var
R173222:173222 VST.floyd.forward <> a:759 var
R173201:173201 VST.floyd.forward <> m:758 var
R173176:173177 VST.floyd.forward <> su:757 var
prf 173452:173466 <> composite_abbrv
binder 173468:173470 <> env:764
binder 173472:173473 <> id:765
binder 173475:173476 <> su:766
binder 173478:173478 <> m:767
binder 173480:173480 <> a:768
R173513:173518 Coq.Init.Logic <> ::type_scope:x_'='_x not
R173483:173498 compcert.cfrontend.Ctypes <> composite_of_def def
R173512:173512 VST.floyd.forward <> a:768 var
R173510:173510 VST.floyd.forward <> m:767 var
R173507:173508 VST.floyd.forward <> su:766 var
R173504:173505 VST.floyd.forward <> id:765 var
R173500:173502 VST.floyd.forward <> env:764 var
R173528:173530 compcert.lib.Maps <> :::x_'!'_x not
R173531:173532 VST.floyd.forward <> id:765 var
R173525:173527 VST.floyd.forward <> env:764 var
R173543:173546 Coq.Init.Datatypes <> Some constr
R173553:173564 compcert.common.Errors <> Error constr
R173566:173566 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R173620:173621 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R173635:173635 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R173567:173576 compcert.common.Errors <> MSG constr
R173622:173631 compcert.common.Errors <> CTX constr
R173633:173634 VST.floyd.forward <> id:765 var
R173641:173644 Coq.Init.Datatypes <> None constr
R173652:173667 compcert.cfrontend.Ctypes <> complete_members def
R173673:173673 VST.floyd.forward <> m:767 var
R173669:173671 VST.floyd.forward <> env:764 var
R174433:174444 compcert.common.Errors <> Error constr
R174446:174446 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R174487:174488 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R174502:174502 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R174447:174456 compcert.common.Errors <> MSG constr
R174489:174498 compcert.common.Errors <> CTX constr
R174500:174501 VST.floyd.forward <> id:765 var
R173702:173711 compcert.cfrontend.Ctypes <> align_attr def
R173716:173732 compcert.cfrontend.Ctypes <> alignof_composite def
R173738:173738 VST.floyd.forward <> m:767 var
R173734:173736 VST.floyd.forward <> env:764 var
R173713:173713 VST.floyd.forward <> a:768 var
binder 173696:173697 <> al:769
R173756:173764 compcert.common.Errors <> OK constr
R173767:173780 VST.floyd.forward <> mk_OKComposite def
R174237:174249 compcert.cfrontend.Ctypes <> composite_env class
binder 174230:174233 <> env0:770
R174257:174261 compcert.common.AST <> ident def
R174271:174285 compcert.cfrontend.Ctypes <> struct_or_union ind
binder 174265:174267 <> su0:771
R174294:174300 compcert.cfrontend.Ctypes <> members def
binder 174289:174290 <> m0:772
R174309:174312 compcert.cfrontend.Ctypes <> attr rec
binder 174304:174305 <> a0:773
R174347:174382 compcert.cfrontend.Ctypes <> composite_of_def_obligation_3 thm
R174396:174397 VST.floyd.forward <> a0:773 var
R174393:174394 VST.floyd.forward <> m0:772 var
R174389:174391 VST.floyd.forward <> su0:771 var
R174384:174387 VST.floyd.forward <> env0:770 var
R174412:174412 VST.floyd.forward <> a:768 var
R174410:174410 VST.floyd.forward <> m:767 var
R174407:174408 VST.floyd.forward <> su:766 var
R174404:174405 VST.floyd.forward <> id:765 var
R174400:174402 VST.floyd.forward <> env:764 var
R174034:174046 compcert.cfrontend.Ctypes <> composite_env class
binder 174027:174030 <> env0:774
R174054:174058 compcert.common.AST <> ident def
R174066:174080 compcert.cfrontend.Ctypes <> struct_or_union ind
R174089:174095 compcert.cfrontend.Ctypes <> members def
binder 174084:174085 <> m0:775
R174104:174107 compcert.cfrontend.Ctypes <> attr rec
binder 174099:174100 <> a0:776
R174141:174176 compcert.cfrontend.Ctypes <> composite_of_def_obligation_2 thm
R174186:174187 VST.floyd.forward <> a0:776 var
R174183:174184 VST.floyd.forward <> m0:775 var
R174178:174181 VST.floyd.forward <> env0:774 var
R174202:174202 VST.floyd.forward <> a:768 var
R174200:174200 VST.floyd.forward <> m:767 var
R174197:174198 VST.floyd.forward <> su:766 var
R174194:174195 VST.floyd.forward <> id:765 var
R174190:174192 VST.floyd.forward <> env:764 var
R173828:173840 compcert.cfrontend.Ctypes <> composite_env class
binder 173821:173824 <> env0:777
R173848:173852 compcert.common.AST <> ident def
R173862:173876 compcert.cfrontend.Ctypes <> struct_or_union ind
binder 173856:173858 <> su0:778
R173885:173891 compcert.cfrontend.Ctypes <> members def
binder 173880:173881 <> m0:779
R173900:173903 compcert.cfrontend.Ctypes <> attr rec
binder 173895:173896 <> a0:780
R173934:173969 compcert.cfrontend.Ctypes <> composite_of_def_obligation_1 thm
R173983:173984 VST.floyd.forward <> a0:780 var
R173980:173981 VST.floyd.forward <> m0:779 var
R173976:173978 VST.floyd.forward <> su0:778 var
R173971:173974 VST.floyd.forward <> env0:777 var
R173999:173999 VST.floyd.forward <> a:768 var
R173997:173997 VST.floyd.forward <> m:767 var
R173994:173995 VST.floyd.forward <> su:766 var
R173991:173992 VST.floyd.forward <> id:765 var
R173987:173989 VST.floyd.forward <> env:764 var
R173793:173794 VST.floyd.forward <> al:769 var
R173791:173791 VST.floyd.forward <> a:768 var
R173789:173789 VST.floyd.forward <> m:767 var
R173786:173787 VST.floyd.forward <> su:766 var
R173782:173784 VST.floyd.forward <> env:764 var
R174596:174620 compcert.cfrontend.Ctypes <> add_composite_definitions def
R174627:174630 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R174596:174620 compcert.cfrontend.Ctypes <> add_composite_definitions def
R174627:174630 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R174678:174702 compcert.cfrontend.Ctypes <> add_composite_definitions def
R174717:174731 VST.floyd.forward <> composite_abbrv thm
R174743:174767 compcert.cfrontend.Ctypes <> add_composite_definitions def
R174857:174860 Coq.Init.Datatypes <> Some constr
R174863:174876 VST.floyd.forward <> mk_OKComposite def
R174857:174860 Coq.Init.Datatypes <> Some constr
R174863:174876 VST.floyd.forward <> mk_OKComposite def
R174982:174995 VST.floyd.forward <> mk_OKComposite def
R175144:175146 Coq.Init.Logic <> ::type_scope:x_'='_x not
R175144:175146 Coq.Init.Logic <> ::type_scope:x_'='_x not
R175163:175165 Coq.Init.Logic <> ::type_scope:x_'='_x not
R175163:175165 Coq.Init.Logic <> ::type_scope:x_'='_x not
R175249:175257 VST.msl.Axioms <> proof_irr thm
R175338:175340 Coq.Init.Logic <> ::type_scope:x_'='_x not
R175338:175340 Coq.Init.Logic <> ::type_scope:x_'='_x not
R175444:175452 VST.msl.Axioms <> proof_irr thm
R175826:175834 VST.msl.Axioms <> proof_irr thm
R175494:175508 VST.floyd.forward <> extract_compEnv thm
R175560:175562 Coq.Init.Logic <> ::type_scope:x_'='_x not
R175536:175554 compcert.cfrontend.Ctypes <> build_composite_env def
R175563:175571 compcert.common.Errors <> OK constr
R175560:175562 Coq.Init.Logic <> ::type_scope:x_'='_x not
R175536:175554 compcert.cfrontend.Ctypes <> build_composite_env def
R175563:175571 compcert.common.Errors <> OK constr
R175596:175614 compcert.cfrontend.Ctypes <> build_composite_env def
R175666:175694 VST.floyd.forward <> add_composite_definitions_nil thm
R175704:175717 VST.floyd.forward <> mk_OKComposite def
R175899:175908 VST.floyd.forward <> semax_prog def
R175899:175908 VST.floyd.forward <> semax_prog def
R176011:176092 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_MinimumLogic.CSHL_Defs semax_prog def
R176504:176524 VST.veric.initial_world <> find_id def
R176527:176535 compcert.cfrontend.Ctypes <> prog_main proj
R176504:176524 VST.veric.initial_world <> find_id def
R176527:176535 compcert.cfrontend.Ctypes <> prog_main proj
R176631:176648 VST.floyd.forward <> extract_prog_main' thm
R176602:176618 VST.floyd.forward <> extract_prog_main thm
R176708:176710 Coq.Init.Logic <> ::type_scope:x_'='_x not
R176702:176704 Coq.Init.Datatypes <> snd def
R176708:176710 Coq.Init.Logic <> ::type_scope:x_'='_x not
R176702:176704 Coq.Init.Datatypes <> snd def
R176772:176774 Coq.Init.Datatypes <> snd def
R176804:176816 VST.floyd.client_lemmas <> NDmk_funspec' def
R176951:176960 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax_func defax
R176951:176960 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax_func defax
R177034:177043 VST.floyd.client_lemmas <> abbreviate def
R177062:177071 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax_func defax
R177143:177169 VST.floyd.forward_lemmas <> semax_func_cons_ext_vacuous thm
R177390:177390 Coq.Init.Datatypes <> O constr
R177390:177390 Coq.Init.Datatypes <> O constr
R177423:177423 Coq.Init.Datatypes <> S constr
R177423:177423 Coq.Init.Datatypes <> S constr
R177445:177453 compcert.cfrontend.Clight <> Ssequence constr
R177445:177453 compcert.cfrontend.Clight <> Ssequence constr
R177482:177490 compcert.cfrontend.Clight <> Ssequence constr
R177403:177411 compcert.cfrontend.Clight <> Ssequence constr
R177618:177618 Coq.Numbers.BinNums <> Z ind
R177618:177618 Coq.Numbers.BinNums <> Z ind
R177640:177647 Coq.ZArith.BinInt Z to_nat def
R177753:177757 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R177764:177772 compcert.cfrontend.Clight <> Ssequence constr
R177775:177783 compcert.cfrontend.Clight <> Ssequence constr
R177753:177757 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R177764:177772 compcert.cfrontend.Clight <> Ssequence constr
R177775:177783 compcert.cfrontend.Clight <> Ssequence constr
R178018:178022 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R178029:178037 compcert.cfrontend.Clight <> Ssequence constr
R178018:178022 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R178029:178037 compcert.cfrontend.Clight <> Ssequence constr
R178099:178120 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_unfold_Ssequence prfax
R177856:177864 compcert.cfrontend.Clight <> Ssequence constr
R177856:177864 compcert.cfrontend.Clight <> Ssequence constr
R177904:177912 compcert.cfrontend.Clight <> Ssequence constr
R177917:177925 compcert.cfrontend.Clight <> Ssequence constr
R177956:177977 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_unfold_Ssequence prfax
R178156:178165 VST.floyd.canon <> semax_seq' thm
R178233:178249 VST.floyd.subsume_funspec <> NDsubsume_subsume thm
R178587:178618 VST.veric.rmaps <> dependent_type_functor_rec def
