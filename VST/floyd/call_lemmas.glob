DIGEST 1d4dd8cb2dc0cfa3786a1ae855547f04
FVST.floyd.call_lemmas
R15:29 VST.floyd.base2 <> <> lib
R47:69 VST.floyd.client_lemmas <> <> lib
R87:109 VST.floyd.closed_lemmas <> <> lib
R127:155 VST.floyd.mapsto_memory_block <> <> lib
R173:200 VST.floyd.local2ptree_denote <> <> lib
R218:243 VST.floyd.local2ptree_eval <> <> lib
R261:285 VST.floyd.subsume_funspec <> <> lib
def 343:350 <> argtypes
R357:360 Coq.Init.Datatypes <> list ind
R368:370 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R363:367 compcert.common.AST <> ident def
R371:374 compcert.cfrontend.Ctypes <> type ind
binder 353:354 <> al:1
R380:383 Coq.Init.Datatypes <> list ind
R385:388 compcert.cfrontend.Ctypes <> type ind
R400:401 VST.floyd.call_lemmas <> al:1 var
R413:414 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R408:408 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R410:410 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R412:412 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R423:426 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R427:434 VST.floyd.call_lemmas <> argtypes:2 def
R442:444 Coq.Init.Datatypes <> nil constr
R449:451 Coq.Init.Datatypes <> nil constr
prf 465:475 <> argtypes_eq
binder 485:486 <> al:4
R500:502 Coq.Init.Logic <> ::type_scope:x_'='_x not
R489:496 VST.floyd.call_lemmas <> argtypes def
R498:499 VST.floyd.call_lemmas <> al:4 var
R503:505 Coq.Init.Datatypes <> snd def
R508:512 Coq.Lists.List <> split def
R514:515 VST.floyd.call_lemmas <> al:4 var
R581:585 Coq.Lists.List <> split def
R581:585 Coq.Lists.List <> split def
def 634:645 <> maybe_retval
R658:661 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R662:666 VST.veric.mpred <> mpred def
R651:657 VST.veric.mpred <> environ ind
binder 648:648 <> Q:5
binder 669:673 <> retty:6
binder 675:677 <> ret:7
R689:691 VST.floyd.call_lemmas <> ret:7 var
R701:704 Coq.Init.Datatypes <> Some constr
binder 716:718 <> rho:9
R723:723 VST.floyd.call_lemmas <> Q:5 var
R726:736 VST.veric.SeparationLogic <> get_result1 def
R741:743 VST.floyd.call_lemmas <> rho:9 var
R749:752 Coq.Init.Datatypes <> None constr
R767:771 VST.floyd.call_lemmas <> retty:6 var
R784:788 compcert.cfrontend.Ctypes <> Tvoid constr
binder 798:800 <> rho:11
R805:805 VST.floyd.call_lemmas <> Q:5 var
R808:819 VST.veric.SeparationLogic <> globals_only def
R821:823 VST.floyd.call_lemmas <> rho:11 var
binder 842:844 <> rho:12
R849:851 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R858:859 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R855:857 compcert.common.Values <> val ind
binder 852:852 <> v:13
R860:860 VST.floyd.call_lemmas <> Q:5 var
R863:871 VST.veric.SeparationLogic <> make_args def
R898:900 VST.floyd.call_lemmas <> rho:12 var
R891:892 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R890:890 VST.floyd.call_lemmas <> v:13 var
R893:895 Coq.Init.Datatypes <> nil constr
R882:883 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R874:881 VST.veric.SeparationLogic <> ret_temp def
R884:886 Coq.Init.Datatypes <> nil constr
def 929:946 <> removeopt_localdef
R954:959 Coq.Init.Datatypes <> option ind
R961:965 compcert.common.AST <> ident def
binder 949:951 <> ret:14
R972:975 Coq.Init.Datatypes <> list ind
R977:984 VST.floyd.canon <> localdef ind
binder 969:969 <> l:15
R989:992 Coq.Init.Datatypes <> list ind
R994:1001 VST.floyd.canon <> localdef ind
R1014:1016 VST.floyd.call_lemmas <> ret:14 var
R1028:1031 Coq.Init.Datatypes <> Some constr
R1039:1058 VST.floyd.client_lemmas <> remove_localdef_temp def
R1063:1063 VST.floyd.call_lemmas <> l:15 var
R1070:1073 Coq.Init.Datatypes <> None constr
R1078:1078 VST.floyd.call_lemmas <> l:15 var
prf 1095:1105 <> semax_call'
binder 1115:1119 <> Espec:17
R1126:1134 VST.veric.mpred <> compspecs class
binder 1122:1123 <> cs:18
binder 1137:1141 <> Delta:19
binder 1143:1144 <> fs:20
binder 1146:1146 <> A:21
binder 1148:1150 <> Pre:22
binder 1152:1155 <> Post:23
binder 1157:1161 <> NEPre:24
binder 1163:1168 <> NEPost:25
binder 1170:1171 <> ts:26
binder 1173:1173 <> x:27
binder 1175:1177 <> ret:28
binder 1179:1184 <> argsig:29
binder 1186:1191 <> retsig:30
binder 1193:1194 <> cc:31
binder 1196:1196 <> a:32
binder 1198:1199 <> bl:33
binder 1201:1201 <> P:34
binder 1203:1203 <> Q:35
binder 1205:1205 <> R:36
R1296:1302 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1403:1409 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1424:1435 VST.veric.SeparationLogic <> tc_fn_return def
R1447:1452 VST.floyd.call_lemmas <> retsig:30 var
R1443:1445 VST.floyd.call_lemmas <> ret:28 var
R1437:1441 VST.floyd.call_lemmas <> Delta:19 var
binder 1418:1421 <> Hret:37
R1465:1475 VST.veric.SeparationLogic <> funspec_sub def
R1481:1490 VST.veric.mpred <> mk_funspec constr
R1528:1533 VST.floyd.call_lemmas <> NEPost:25 var
R1522:1526 VST.floyd.call_lemmas <> NEPre:24 var
R1517:1520 VST.floyd.call_lemmas <> Post:23 var
R1513:1515 VST.floyd.call_lemmas <> Pre:22 var
R1511:1511 VST.floyd.call_lemmas <> A:21 var
R1508:1509 VST.floyd.call_lemmas <> cc:31 var
R1492:1492 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1499:1499 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1506:1506 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1493:1498 VST.floyd.call_lemmas <> argsig:29 var
R1500:1505 VST.floyd.call_lemmas <> retsig:30 var
R1477:1478 VST.floyd.call_lemmas <> fs:20 var
binder 1459:1462 <> Hsub:38
R1756:1760 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R2060:2076 VST.veric.SeparationLogic <> normal_ret_assert def
R2126:2143 VST.msl.seplog <> ::logic:x_'*'_x not
R2091:2102 VST.floyd.call_lemmas <> maybe_retval def
R2123:2125 VST.floyd.call_lemmas <> ret:28 var
R2116:2121 VST.floyd.call_lemmas <> retsig:30 var
R2105:2108 VST.floyd.call_lemmas <> Post:23 var
R2113:2113 VST.floyd.call_lemmas <> x:27 var
R2110:2111 VST.floyd.call_lemmas <> ts:26 var
R2144:2148 VST.floyd.canon <> PROPx def
R2153:2158 VST.floyd.canon <> LOCALx def
R2188:2191 VST.floyd.canon <> SEPx def
R2193:2193 VST.floyd.call_lemmas <> R:36 var
R2161:2178 VST.floyd.call_lemmas <> removeopt_localdef def
R2184:2184 VST.floyd.call_lemmas <> Q:35 var
R2180:2182 VST.floyd.call_lemmas <> ret:28 var
R2150:2150 VST.floyd.call_lemmas <> P:34 var
R2033:2037 compcert.cfrontend.Clight <> Scall constr
R2045:2046 VST.floyd.call_lemmas <> bl:33 var
R2043:2043 VST.floyd.call_lemmas <> a:32 var
R2039:2041 VST.floyd.call_lemmas <> ret:28 var
R1794:1794 VST.msl.seplog <> ::logic:x_'&&'_x not
R1841:1860 VST.msl.seplog <> ::logic:x_'&&'_x not
R2019:2019 VST.msl.seplog <> ::logic:x_'&&'_x not
R1810:1813 VST.msl.seplog <> ::logic:x_'&&'_x not
R1795:1801 VST.veric.SeparationLogic <> tc_expr def
R1809:1809 VST.floyd.call_lemmas <> a:32 var
R1803:1807 VST.floyd.call_lemmas <> Delta:19 var
R1814:1824 VST.veric.SeparationLogic <> tc_exprlist def
R1839:1840 VST.floyd.call_lemmas <> bl:33 var
R1832:1837 VST.floyd.call_lemmas <> argsig:29 var
R1826:1830 VST.floyd.call_lemmas <> Delta:19 var
R1982:1989 VST.msl.seplog <> ::logic:x_'*'_x not
R1928:1952 VST.msl.seplog <> ::logic:x_'*'_x not
R1861:1864 VST.msl.seplog <> ::logic:'|>'_x not
R1927:1927 VST.msl.seplog <> ::logic:'|>'_x not
binder 1869:1871 <> rho:39
R1877:1879 VST.floyd.call_lemmas <> Pre:22 var
R1886:1886 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1896:1897 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1925:1925 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1887:1891 VST.veric.mpred <> ge_of def
R1893:1895 VST.floyd.call_lemmas <> rho:39 var
R1898:1910 VST.veric.expr <> eval_exprlist def
R1922:1924 VST.floyd.call_lemmas <> rho:39 var
R1919:1920 VST.floyd.call_lemmas <> bl:33 var
R1912:1917 VST.floyd.call_lemmas <> argsig:29 var
R1884:1884 VST.floyd.call_lemmas <> x:27 var
R1881:1882 VST.floyd.call_lemmas <> ts:26 var
R1953:1954 VST.veric.lift LiftNotation :::'`('_x_')' not
R1967:1981 VST.veric.lift LiftNotation :::'`('_x_')' not
R1955:1963 VST.floyd.client_lemmas <> func_ptr' def
R1965:1966 VST.floyd.call_lemmas <> fs:20 var
R1970:1978 VST.veric.expr <> eval_expr def
R1980:1980 VST.floyd.call_lemmas <> a:32 var
R1990:1991 VST.msl.seplog <> ::logic:'|>'_x not
R1992:1996 VST.floyd.canon <> PROPx def
R2001:2006 VST.floyd.canon <> LOCALx def
R2011:2014 VST.floyd.canon <> SEPx def
R2016:2016 VST.floyd.call_lemmas <> R:36 var
R2008:2008 VST.floyd.call_lemmas <> Q:35 var
R1998:1998 VST.floyd.call_lemmas <> P:34 var
R1771:1775 VST.floyd.call_lemmas <> Delta:19 var
R1765:1769 VST.floyd.call_lemmas <> Espec:17 var
R1762:1763 VST.floyd.call_lemmas <> cs:18 var
R1317:1319 VST.floyd.call_lemmas <> ret:28 var
R1309:1314 VST.floyd.call_lemmas <> retsig:30 var
R1331:1335 compcert.cfrontend.Ctypes <> Tvoid constr
R1338:1341 Coq.Init.Datatypes <> None constr
R1346:1349 Coq.Init.Logic <> True ind
R1356:1360 compcert.cfrontend.Ctypes <> Tvoid constr
R1363:1366 Coq.Init.Datatypes <> Some constr
R1373:1377 Coq.Init.Logic <> False ind
R1392:1395 Coq.Init.Logic <> True ind
R1238:1240 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1211:1226 compcert.cfrontend.Cop <> classify_fun def
R1229:1234 compcert.cfrontend.Clight <> typeof def
R1236:1236 VST.floyd.call_lemmas <> a:32 var
R1241:1254 compcert.cfrontend.Cop <> fun_case_f constr
R1294:1295 VST.floyd.call_lemmas <> cc:31 var
R1287:1292 VST.floyd.call_lemmas <> retsig:30 var
R1257:1277 VST.veric.mpred <> typelist_of_type_list def
R1279:1284 VST.floyd.call_lemmas <> argsig:29 var
R2254:2268 VST.floyd.canon <> semax_pre_post' thm
R2288:2305 VST.floyd.subsume_funspec <> semax_call_subsume thm
R2372:2376 VST.floyd.canon <> PROPx def
R2381:2386 VST.floyd.canon <> LOCALx def
R2391:2394 VST.floyd.canon <> SEPx def
R2254:2268 VST.floyd.canon <> semax_pre_post' thm
R2288:2305 VST.floyd.subsume_funspec <> semax_call_subsume thm
R2372:2376 VST.floyd.canon <> PROPx def
R2381:2386 VST.floyd.canon <> LOCALx def
R2391:2394 VST.floyd.canon <> SEPx def
R2577:2581 VST.veric.SeparationLogic <> local def
R2584:2588 VST.veric.mpred <> lift1 def
R2598:2606 VST.floyd.client_lemmas <> func_ptr' def
R2714:2725 VST.msl.log_normalize <> andp_derives thm
R2714:2725 VST.msl.log_normalize <> andp_derives thm
R2746:2757 VST.msl.seplog <> sepcon_assoc meth
R2760:2770 VST.msl.seplog <> sepcon_comm meth
R2746:2757 VST.msl.seplog <> sepcon_assoc meth
R2746:2757 VST.msl.seplog <> sepcon_assoc meth
R2760:2770 VST.msl.seplog <> sepcon_comm meth
R2760:2770 VST.msl.seplog <> sepcon_comm meth
R2816:2831 VST.veric.SeparationLogic <> corable_func_ptr thm
R2786:2805 VST.msl.seplog <> corable_andp_sepcon1 meth
R2786:2805 VST.msl.seplog <> corable_andp_sepcon1 meth
R2816:2831 VST.veric.SeparationLogic <> corable_func_ptr thm
R2786:2805 VST.msl.seplog <> corable_andp_sepcon1 meth
R2816:2831 VST.veric.SeparationLogic <> corable_func_ptr thm
R2786:2805 VST.msl.seplog <> corable_andp_sepcon1 meth
R2786:2805 VST.msl.seplog <> corable_andp_sepcon1 meth
R2846:2856 VST.msl.seplog <> sepcon_comm meth
R2846:2856 VST.msl.seplog <> sepcon_comm meth
R2846:2856 VST.msl.seplog <> sepcon_comm meth
R2867:2876 VST.msl.log_normalize <> emp_sepcon thm
R2867:2876 VST.msl.log_normalize <> emp_sepcon thm
R2867:2876 VST.msl.log_normalize <> emp_sepcon thm
R2889:2900 VST.msl.log_normalize <> andp_derives thm
R2889:2900 VST.msl.log_normalize <> andp_derives thm
R2921:2931 VST.msl.seplog <> sepcon_comm meth
R2937:2948 VST.msl.seplog <> later_sepcon meth
R2921:2931 VST.msl.seplog <> sepcon_comm meth
R2921:2931 VST.msl.seplog <> sepcon_comm meth
R2937:2948 VST.msl.seplog <> later_sepcon meth
R2937:2948 VST.msl.seplog <> later_sepcon meth
R3104:3116 VST.msl.seplog <> derives_trans meth
R3128:3141 VST.msl.seplog <> sepcon_derives meth
R3151:3162 VST.msl.seplog <> derives_refl meth
R3172:3196 VST.floyd.client_lemmas <> remove_localdef_temp_PROP thm
R3104:3116 VST.msl.seplog <> derives_trans meth
R3128:3141 VST.msl.seplog <> sepcon_derives meth
R3151:3162 VST.msl.seplog <> derives_refl meth
R3172:3196 VST.floyd.client_lemmas <> remove_localdef_temp_PROP thm
R3230:3238 VST.msl.seplog <> exp_right meth
R3230:3238 VST.msl.seplog <> exp_right meth
R3376:3386 VST.msl.seplog <> sepcon_comm meth
R3376:3386 VST.msl.seplog <> sepcon_comm meth
R3376:3386 VST.msl.seplog <> sepcon_comm meth
R3444:3454 VST.msl.seplog <> sepcon_comm meth
R3444:3454 VST.msl.seplog <> sepcon_comm meth
R3444:3454 VST.msl.seplog <> sepcon_comm meth
R3476:3483 VST.veric.SeparationLogic <> substopt def
R3507:3523 compcert.lib.Coqlib <> list_map_identity thm
R3507:3523 compcert.lib.Coqlib <> list_map_identity thm
R3602:3615 VST.msl.seplog <> sepcon_derives meth
R3602:3615 VST.msl.seplog <> sepcon_derives meth
R3676:3686 VST.msl.log_normalize <> exp_derives thm
R3705:3714 VST.msl.seplog <> andp_left2 meth
R3676:3686 VST.msl.log_normalize <> exp_derives thm
R3676:3686 VST.msl.log_normalize <> exp_derives thm
R3676:3686 VST.msl.log_normalize <> exp_derives thm
R3676:3686 VST.msl.log_normalize <> exp_derives thm
R3676:3686 VST.msl.log_normalize <> exp_derives thm
R3676:3686 VST.msl.log_normalize <> exp_derives thm
R3676:3686 VST.msl.log_normalize <> exp_derives thm
R3676:3686 VST.msl.log_normalize <> exp_derives thm
R3705:3714 VST.msl.seplog <> andp_left2 meth
R3705:3714 VST.msl.seplog <> andp_left2 meth
R3705:3714 VST.msl.seplog <> andp_left2 meth
R3705:3714 VST.msl.seplog <> andp_left2 meth
R3705:3714 VST.msl.seplog <> andp_left2 meth
R3705:3714 VST.msl.seplog <> andp_left2 meth
R3705:3714 VST.msl.seplog <> andp_left2 meth
R3705:3714 VST.msl.seplog <> andp_left2 meth
prf 3738:3748 <> semax_call1
binder 3758:3762 <> Espec:42
R3769:3777 VST.veric.mpred <> compspecs class
binder 3765:3766 <> cs:43
binder 3780:3784 <> Delta:44
binder 3786:3787 <> fs:45
binder 3789:3789 <> A:46
binder 3791:3793 <> Pre:47
binder 3795:3798 <> Post:48
binder 3800:3804 <> NEPre:49
binder 3806:3811 <> NEPost:50
binder 3813:3814 <> ts:51
binder 3816:3816 <> x:52
binder 3818:3819 <> id:53
binder 3821:3826 <> argsig:54
binder 3828:3833 <> retsig:55
binder 3835:3836 <> cc:56
binder 3838:3838 <> a:57
binder 3840:3841 <> bl:58
binder 3843:3843 <> P:59
binder 3845:3845 <> Q:60
binder 3847:3847 <> R:61
R3859:3869 VST.veric.SeparationLogic <> funspec_sub def
R3875:3884 VST.veric.mpred <> mk_funspec constr
R3922:3927 VST.floyd.call_lemmas <> NEPost:50 var
R3916:3920 VST.floyd.call_lemmas <> NEPre:49 var
R3911:3914 VST.floyd.call_lemmas <> Post:48 var
R3907:3909 VST.floyd.call_lemmas <> Pre:47 var
R3905:3905 VST.floyd.call_lemmas <> A:46 var
R3902:3903 VST.floyd.call_lemmas <> cc:56 var
R3886:3886 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3893:3893 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3900:3900 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3887:3892 VST.floyd.call_lemmas <> argsig:54 var
R3894:3899 VST.floyd.call_lemmas <> retsig:55 var
R3871:3872 VST.floyd.call_lemmas <> fs:45 var
binder 3853:3856 <> Hsub:62
R4020:4027 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4087:4093 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4129:4134 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4136:4140 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R4447:4463 VST.veric.SeparationLogic <> normal_ret_assert def
R4525:4542 VST.msl.seplog <> ::logic:x_'*'_x not
R4478:4479 VST.veric.lift LiftNotation :::'`('_x_')' not
R4507:4524 VST.veric.lift LiftNotation :::'`('_x_')' not
R4498:4501 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4502:4506 VST.veric.mpred <> mpred def
R4491:4497 VST.veric.mpred <> environ ind
R4480:4483 VST.floyd.call_lemmas <> Post:48 var
R4488:4488 VST.floyd.call_lemmas <> x:52 var
R4485:4486 VST.floyd.call_lemmas <> ts:51 var
R4510:4520 VST.veric.SeparationLogic <> get_result1 def
R4522:4523 VST.floyd.call_lemmas <> id:53 var
R4543:4547 VST.floyd.canon <> PROPx def
R4552:4557 VST.floyd.canon <> LOCALx def
R4588:4591 VST.floyd.canon <> SEPx def
R4593:4593 VST.floyd.call_lemmas <> R:61 var
R4560:4579 VST.floyd.client_lemmas <> remove_localdef_temp def
R4584:4584 VST.floyd.call_lemmas <> Q:60 var
R4581:4582 VST.floyd.call_lemmas <> id:53 var
R4549:4549 VST.floyd.call_lemmas <> P:59 var
R4414:4418 compcert.cfrontend.Clight <> Scall constr
R4432:4433 VST.floyd.call_lemmas <> bl:58 var
R4430:4430 VST.floyd.call_lemmas <> a:57 var
R4421:4424 Coq.Init.Datatypes <> Some constr
R4426:4427 VST.floyd.call_lemmas <> id:53 var
R4173:4173 VST.msl.seplog <> ::logic:x_'&&'_x not
R4220:4236 VST.msl.seplog <> ::logic:x_'&&'_x not
R4400:4400 VST.msl.seplog <> ::logic:x_'&&'_x not
R4189:4192 VST.msl.seplog <> ::logic:x_'&&'_x not
R4174:4180 VST.veric.SeparationLogic <> tc_expr def
R4188:4188 VST.floyd.call_lemmas <> a:57 var
R4182:4186 VST.floyd.call_lemmas <> Delta:44 var
R4193:4203 VST.veric.SeparationLogic <> tc_exprlist def
R4218:4219 VST.floyd.call_lemmas <> bl:58 var
R4211:4216 VST.floyd.call_lemmas <> argsig:54 var
R4205:4209 VST.floyd.call_lemmas <> Delta:44 var
R4350:4370 VST.msl.seplog <> ::logic:x_'*'_x not
R4301:4320 VST.msl.seplog <> ::logic:x_'*'_x not
R4237:4239 VST.msl.seplog <> ::logic:'|>'_x not
R4300:4300 VST.msl.seplog <> ::logic:'|>'_x not
binder 4244:4246 <> rho:63
R4251:4253 VST.floyd.call_lemmas <> Pre:47 var
R4260:4260 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4270:4271 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4299:4299 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4261:4265 VST.veric.mpred <> ge_of def
R4267:4269 VST.floyd.call_lemmas <> rho:63 var
R4272:4284 VST.veric.expr <> eval_exprlist def
R4296:4298 VST.floyd.call_lemmas <> rho:63 var
R4293:4294 VST.floyd.call_lemmas <> bl:58 var
R4286:4291 VST.floyd.call_lemmas <> argsig:54 var
R4258:4258 VST.floyd.call_lemmas <> x:52 var
R4255:4256 VST.floyd.call_lemmas <> ts:51 var
R4321:4322 VST.veric.lift LiftNotation :::'`('_x_')' not
R4335:4349 VST.veric.lift LiftNotation :::'`('_x_')' not
R4323:4331 VST.floyd.client_lemmas <> func_ptr' def
R4333:4334 VST.floyd.call_lemmas <> fs:45 var
R4338:4346 VST.veric.expr <> eval_expr def
R4348:4348 VST.floyd.call_lemmas <> a:57 var
R4371:4372 VST.msl.seplog <> ::logic:'|>'_x not
R4373:4377 VST.floyd.canon <> PROPx def
R4382:4387 VST.floyd.canon <> LOCALx def
R4392:4395 VST.floyd.canon <> SEPx def
R4397:4397 VST.floyd.call_lemmas <> R:61 var
R4389:4389 VST.floyd.call_lemmas <> Q:60 var
R4379:4379 VST.floyd.call_lemmas <> P:59 var
R4151:4155 VST.floyd.call_lemmas <> Delta:44 var
R4145:4149 VST.floyd.call_lemmas <> Espec:42 var
R4142:4143 VST.floyd.call_lemmas <> cs:43 var
R4094:4105 VST.veric.SeparationLogic <> tc_fn_return def
R4123:4128 VST.floyd.call_lemmas <> retsig:55 var
R4114:4117 Coq.Init.Datatypes <> Some constr
R4119:4120 VST.floyd.call_lemmas <> id:53 var
R4107:4111 VST.floyd.call_lemmas <> Delta:44 var
R4034:4039 VST.floyd.call_lemmas <> retsig:55 var
R4051:4055 compcert.cfrontend.Ctypes <> Tvoid constr
R4060:4064 Coq.Init.Logic <> False ind
R4076:4079 Coq.Init.Logic <> True ind
R3962:3964 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3935:3950 compcert.cfrontend.Cop <> classify_fun def
R3953:3958 compcert.cfrontend.Clight <> typeof def
R3960:3960 VST.floyd.call_lemmas <> a:57 var
R3965:3978 compcert.cfrontend.Cop <> fun_case_f constr
R4018:4019 VST.floyd.call_lemmas <> cc:56 var
R4011:4016 VST.floyd.call_lemmas <> retsig:55 var
R3981:4001 VST.veric.mpred <> typelist_of_type_list def
R4003:4008 VST.floyd.call_lemmas <> argsig:54 var
R4623:4633 VST.floyd.call_lemmas <> semax_call' thm
R4683:4686 Coq.Init.Datatypes <> Some constr
R4623:4633 VST.floyd.call_lemmas <> semax_call' thm
R4683:4686 Coq.Init.Datatypes <> Some constr
def 4752:4757 <> ifvoid
binder 4760:4760 <> T:65
binder 4763:4763 <> t:66
R4771:4771 VST.floyd.call_lemmas <> T:65 var
binder 4766:4766 <> A:67
binder 4768:4768 <> B:68
R4784:4784 VST.floyd.call_lemmas <> t:66 var
R4791:4795 compcert.cfrontend.Ctypes <> Tvoid constr
R4800:4800 VST.floyd.call_lemmas <> A:67 var
R4809:4809 VST.floyd.call_lemmas <> B:68 var
prf 4823:4833 <> semax_call0
binder 4843:4847 <> Espec:70
R4854:4862 VST.veric.mpred <> compspecs class
binder 4850:4851 <> cs:71
binder 4865:4869 <> Delta:72
binder 4871:4872 <> fs:73
binder 4874:4874 <> A:74
binder 4876:4878 <> Pre:75
binder 4880:4883 <> Post:76
binder 4885:4889 <> NEPre:77
binder 4891:4896 <> NEPost:78
binder 4898:4899 <> ts:79
binder 4901:4901 <> x:80
binder 4909:4914 <> argsig:81
binder 4916:4920 <> retty:82
binder 4922:4923 <> cc:83
binder 4925:4925 <> a:84
binder 4927:4928 <> bl:85
binder 4930:4930 <> P:86
binder 4932:4932 <> Q:87
binder 4934:4934 <> R:88
R4946:4956 VST.veric.SeparationLogic <> funspec_sub def
R4962:4971 VST.veric.mpred <> mk_funspec constr
R5008:5013 VST.floyd.call_lemmas <> NEPost:78 var
R5002:5006 VST.floyd.call_lemmas <> NEPre:77 var
R4997:5000 VST.floyd.call_lemmas <> Post:76 var
R4993:4995 VST.floyd.call_lemmas <> Pre:75 var
R4991:4991 VST.floyd.call_lemmas <> A:74 var
R4988:4989 VST.floyd.call_lemmas <> cc:83 var
R4973:4973 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4980:4980 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4986:4986 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4974:4979 VST.floyd.call_lemmas <> argsig:81 var
R4981:4985 VST.floyd.call_lemmas <> retty:82 var
R4958:4959 VST.floyd.call_lemmas <> fs:73 var
binder 4940:4943 <> Hsub:89
R5105:5109 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5111:5115 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R5416:5432 VST.veric.SeparationLogic <> normal_ret_assert def
R5648:5662 VST.msl.seplog <> ::logic:x_'*'_x not
R5447:5452 VST.floyd.call_lemmas <> ifvoid def
R5570:5572 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R5578:5579 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R5575:5577 compcert.common.Values <> val ind
binder 5573:5573 <> v:90
R5580:5581 VST.veric.lift LiftNotation :::'`('_x_')' not
R5609:5646 VST.veric.lift LiftNotation :::'`('_x_')' not
R5600:5603 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5604:5608 VST.veric.mpred <> mpred def
R5593:5599 VST.veric.mpred <> environ ind
R5582:5585 VST.floyd.call_lemmas <> Post:76 var
R5590:5590 VST.floyd.call_lemmas <> x:80 var
R5587:5588 VST.floyd.call_lemmas <> ts:79 var
R5612:5620 VST.veric.SeparationLogic <> make_args def
R5640:5641 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R5639:5639 VST.floyd.call_lemmas <> v:90 var
R5642:5644 Coq.Init.Datatypes <> nil constr
R5631:5632 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R5623:5630 VST.veric.SeparationLogic <> ret_temp def
R5633:5635 Coq.Init.Datatypes <> nil constr
R5461:5462 VST.veric.lift LiftNotation :::'`('_x_')' not
R5490:5510 VST.veric.lift LiftNotation :::'`('_x_')' not
R5481:5484 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5485:5489 VST.veric.mpred <> mpred def
R5474:5480 VST.veric.mpred <> environ ind
R5463:5466 VST.floyd.call_lemmas <> Post:76 var
R5471:5471 VST.floyd.call_lemmas <> x:80 var
R5468:5469 VST.floyd.call_lemmas <> ts:79 var
R5493:5501 VST.veric.SeparationLogic <> make_args def
R5507:5509 Coq.Init.Datatypes <> nil constr
R5503:5505 Coq.Init.Datatypes <> nil constr
R5454:5458 VST.floyd.call_lemmas <> retty:82 var
R5663:5667 VST.floyd.canon <> PROPx def
R5672:5677 VST.floyd.canon <> LOCALx def
R5682:5685 VST.floyd.canon <> SEPx def
R5687:5687 VST.floyd.call_lemmas <> R:88 var
R5679:5679 VST.floyd.call_lemmas <> Q:87 var
R5669:5669 VST.floyd.call_lemmas <> P:86 var
R5388:5392 compcert.cfrontend.Clight <> Scall constr
R5401:5402 VST.floyd.call_lemmas <> bl:85 var
R5399:5399 VST.floyd.call_lemmas <> a:84 var
R5394:5397 Coq.Init.Datatypes <> None constr
R5148:5148 VST.msl.seplog <> ::logic:x_'&&'_x not
R5195:5211 VST.msl.seplog <> ::logic:x_'&&'_x not
R5374:5374 VST.msl.seplog <> ::logic:x_'&&'_x not
R5164:5167 VST.msl.seplog <> ::logic:x_'&&'_x not
R5149:5155 VST.veric.SeparationLogic <> tc_expr def
R5163:5163 VST.floyd.call_lemmas <> a:84 var
R5157:5161 VST.floyd.call_lemmas <> Delta:72 var
R5168:5178 VST.veric.SeparationLogic <> tc_exprlist def
R5193:5194 VST.floyd.call_lemmas <> bl:85 var
R5186:5191 VST.floyd.call_lemmas <> argsig:81 var
R5180:5184 VST.floyd.call_lemmas <> Delta:72 var
R5325:5344 VST.msl.seplog <> ::logic:x_'*'_x not
R5276:5295 VST.msl.seplog <> ::logic:x_'*'_x not
R5212:5214 VST.msl.seplog <> ::logic:'|>'_x not
R5275:5275 VST.msl.seplog <> ::logic:'|>'_x not
binder 5219:5221 <> rho:91
R5226:5228 VST.floyd.call_lemmas <> Pre:75 var
R5235:5235 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5245:5246 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5274:5274 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5236:5240 VST.veric.mpred <> ge_of def
R5242:5244 VST.floyd.call_lemmas <> rho:91 var
R5247:5259 VST.veric.expr <> eval_exprlist def
R5271:5273 VST.floyd.call_lemmas <> rho:91 var
R5268:5269 VST.floyd.call_lemmas <> bl:85 var
R5261:5266 VST.floyd.call_lemmas <> argsig:81 var
R5233:5233 VST.floyd.call_lemmas <> x:80 var
R5230:5231 VST.floyd.call_lemmas <> ts:79 var
R5296:5297 VST.veric.lift LiftNotation :::'`('_x_')' not
R5310:5324 VST.veric.lift LiftNotation :::'`('_x_')' not
R5298:5306 VST.floyd.client_lemmas <> func_ptr' def
R5308:5309 VST.floyd.call_lemmas <> fs:73 var
R5313:5321 VST.veric.expr <> eval_expr def
R5323:5323 VST.floyd.call_lemmas <> a:84 var
R5345:5346 VST.msl.seplog <> ::logic:'|>'_x not
R5347:5351 VST.floyd.canon <> PROPx def
R5356:5361 VST.floyd.canon <> LOCALx def
R5366:5369 VST.floyd.canon <> SEPx def
R5371:5371 VST.floyd.call_lemmas <> R:88 var
R5363:5363 VST.floyd.call_lemmas <> Q:87 var
R5353:5353 VST.floyd.call_lemmas <> P:86 var
R5126:5130 VST.floyd.call_lemmas <> Delta:72 var
R5120:5124 VST.floyd.call_lemmas <> Espec:70 var
R5117:5118 VST.floyd.call_lemmas <> cs:71 var
R5048:5050 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5021:5036 compcert.cfrontend.Cop <> classify_fun def
R5039:5044 compcert.cfrontend.Clight <> typeof def
R5046:5046 VST.floyd.call_lemmas <> a:84 var
R5051:5064 compcert.cfrontend.Cop <> fun_case_f constr
R5103:5104 VST.floyd.call_lemmas <> cc:83 var
R5097:5101 VST.floyd.call_lemmas <> retty:82 var
R5067:5087 VST.veric.mpred <> typelist_of_type_list def
R5089:5094 VST.floyd.call_lemmas <> argsig:81 var
R5741:5755 VST.floyd.canon <> semax_pre_post' thm
R5774:5791 VST.floyd.subsume_funspec <> semax_call_subsume thm
R5897:5900 Coq.Init.Datatypes <> None constr
R5868:5872 VST.floyd.canon <> PROPx def
R5877:5882 VST.floyd.canon <> LOCALx def
R5887:5890 VST.floyd.canon <> SEPx def
R5741:5755 VST.floyd.canon <> semax_pre_post' thm
R5774:5791 VST.floyd.subsume_funspec <> semax_call_subsume thm
R5897:5900 Coq.Init.Datatypes <> None constr
R5868:5872 VST.floyd.canon <> PROPx def
R5877:5882 VST.floyd.canon <> LOCALx def
R5887:5890 VST.floyd.canon <> SEPx def
R5955:5970 Coq.Init.Logic <> I constr
R5955:5970 Coq.Init.Logic <> I constr
R6051:6059 VST.floyd.client_lemmas <> func_ptr' def
R6073:6084 VST.msl.seplog <> sepcon_assoc meth
R6073:6084 VST.msl.seplog <> sepcon_assoc meth
R6073:6084 VST.msl.seplog <> sepcon_assoc meth
R6073:6084 VST.msl.seplog <> sepcon_assoc meth
R6095:6106 VST.msl.log_normalize <> andp_derives thm
R6095:6106 VST.msl.log_normalize <> andp_derives thm
R6156:6171 VST.veric.SeparationLogic <> corable_func_ptr thm
R6126:6145 VST.msl.seplog <> corable_andp_sepcon1 meth
R6126:6145 VST.msl.seplog <> corable_andp_sepcon1 meth
R6156:6171 VST.veric.SeparationLogic <> corable_func_ptr thm
R6126:6145 VST.msl.seplog <> corable_andp_sepcon1 meth
R6126:6145 VST.msl.seplog <> corable_andp_sepcon1 meth
R6184:6193 VST.msl.log_normalize <> emp_sepcon thm
R6196:6206 VST.msl.seplog <> sepcon_comm meth
R6184:6193 VST.msl.log_normalize <> emp_sepcon thm
R6184:6193 VST.msl.log_normalize <> emp_sepcon thm
R6196:6206 VST.msl.seplog <> sepcon_comm meth
R6196:6206 VST.msl.seplog <> sepcon_comm meth
R6250:6265 VST.veric.SeparationLogic <> corable_func_ptr thm
R6220:6239 VST.msl.seplog <> corable_andp_sepcon1 meth
R6220:6239 VST.msl.seplog <> corable_andp_sepcon1 meth
R6250:6265 VST.veric.SeparationLogic <> corable_func_ptr thm
R6220:6239 VST.msl.seplog <> corable_andp_sepcon1 meth
R6220:6239 VST.msl.seplog <> corable_andp_sepcon1 meth
R6276:6287 VST.msl.log_normalize <> andp_derives thm
R6276:6287 VST.msl.log_normalize <> andp_derives thm
R6306:6317 VST.msl.seplog <> later_sepcon meth
R6326:6337 VST.msl.seplog <> derives_refl meth
R6306:6317 VST.msl.seplog <> later_sepcon meth
R6306:6317 VST.msl.seplog <> later_sepcon meth
R6326:6337 VST.msl.seplog <> derives_refl meth
R6358:6367 VST.msl.seplog <> andp_left2 meth
R6358:6367 VST.msl.seplog <> andp_left2 meth
R6392:6419 VST.veric.SeparationLogic <> maybe_retval def
R6474:6484 VST.msl.seplog <> sepcon_comm meth
R6474:6484 VST.msl.seplog <> sepcon_comm meth
R6474:6484 VST.msl.seplog <> sepcon_comm meth
R6493:6506 VST.msl.seplog <> sepcon_derives meth
R6493:6506 VST.msl.seplog <> sepcon_derives meth
R6527:6531 VST.veric.lift <> liftx def
R6534:6537 VST.veric.lift <> lift def
R6600:6610 VST.msl.log_normalize <> exp_derives thm
R6629:6638 VST.msl.seplog <> andp_left2 meth
R6600:6610 VST.msl.log_normalize <> exp_derives thm
R6600:6610 VST.msl.log_normalize <> exp_derives thm
R6600:6610 VST.msl.log_normalize <> exp_derives thm
R6600:6610 VST.msl.log_normalize <> exp_derives thm
R6600:6610 VST.msl.log_normalize <> exp_derives thm
R6600:6610 VST.msl.log_normalize <> exp_derives thm
R6600:6610 VST.msl.log_normalize <> exp_derives thm
R6600:6610 VST.msl.log_normalize <> exp_derives thm
R6629:6638 VST.msl.seplog <> andp_left2 meth
R6629:6638 VST.msl.seplog <> andp_left2 meth
R6629:6638 VST.msl.seplog <> andp_left2 meth
R6629:6638 VST.msl.seplog <> andp_left2 meth
R6629:6638 VST.msl.seplog <> andp_left2 meth
R6629:6638 VST.msl.seplog <> andp_left2 meth
R6629:6638 VST.msl.seplog <> andp_left2 meth
R6629:6638 VST.msl.seplog <> andp_left2 meth
prf 6663:6675 <> semax_fun_id'
binder 6691:6692 <> id:92
binder 6694:6694 <> f:93
binder 6696:6697 <> TC:94
binder 6713:6717 <> Espec:95
R6724:6732 VST.veric.mpred <> compspecs class
binder 6720:6721 <> cs:96
binder 6735:6739 <> Delta:97
R6754:6755 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6756:6760 VST.veric.mpred <> mpred def
R6747:6753 VST.veric.mpred <> environ ind
binder 6742:6744 <> PQR:98
binder 6763:6770 <> PostCond:99
binder 6772:6772 <> c:100
R6815:6817 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6793:6793 compcert.lib.Maps <> :::x_'!'_x not
R6809:6812 compcert.lib.Maps <> :::x_'!'_x not
R6813:6814 VST.floyd.call_lemmas <> id:92 var
R6794:6802 VST.veric.seplog <> var_types def
R6804:6808 VST.floyd.call_lemmas <> Delta:97 var
R6818:6821 Coq.Init.Datatypes <> None constr
binder 6787:6790 <> GLBL:101
R6864:6874 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6925:6935 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7151:7222 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7224:7228 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7262:7269 VST.floyd.call_lemmas <> PostCond:99 var
R7260:7260 VST.floyd.call_lemmas <> c:100 var
R7248:7251 VST.msl.seplog <> ::logic:x_'&&'_x not
R7246:7247 VST.floyd.call_lemmas <> TC:94 var
R7252:7254 VST.msl.seplog <> ::logic:'|>'_x not
R7255:7257 VST.floyd.call_lemmas <> PQR:98 var
R7239:7243 VST.floyd.call_lemmas <> Delta:97 var
R7233:7237 VST.floyd.call_lemmas <> Espec:95 var
R7230:7231 VST.floyd.call_lemmas <> cs:96 var
R6937:6941 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R7143:7150 VST.floyd.call_lemmas <> PostCond:99 var
R7141:7141 VST.floyd.call_lemmas <> c:100 var
R6975:6979 VST.msl.seplog <> ::logic:x_'&&'_x not
R7108:7108 VST.msl.seplog <> ::logic:x_'&&'_x not
R6973:6974 VST.floyd.call_lemmas <> TC:94 var
R7004:7029 VST.msl.seplog <> ::logic:x_'&&'_x not
R7107:7107 VST.msl.seplog <> ::logic:x_'&&'_x not
R6980:6984 VST.veric.SeparationLogic <> local def
R6987:6996 VST.veric.SeparationLogic <> tc_environ def
R6998:7002 VST.floyd.call_lemmas <> Delta:97 var
R7078:7101 VST.msl.seplog <> ::logic:x_'*'_x not
R7030:7031 VST.veric.lift LiftNotation :::'`('_x_')' not
R7043:7077 VST.veric.lift LiftNotation :::'`('_x_')' not
R7032:7040 VST.floyd.client_lemmas <> func_ptr' def
R7042:7042 VST.floyd.call_lemmas <> f:93 var
R7046:7053 VST.veric.expr <> eval_var def
R7059:7073 VST.veric.mpred <> type_of_funspec def
R7075:7075 VST.floyd.call_lemmas <> f:93 var
R7055:7056 VST.floyd.call_lemmas <> id:92 var
R7102:7103 VST.msl.seplog <> ::logic:'|>'_x not
R7104:7106 VST.floyd.call_lemmas <> PQR:98 var
R6952:6956 VST.floyd.call_lemmas <> Delta:97 var
R6946:6950 VST.floyd.call_lemmas <> Espec:95 var
R6943:6944 VST.floyd.call_lemmas <> cs:96 var
R6898:6900 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6875:6875 compcert.lib.Maps <> :::x_'!'_x not
R6892:6895 compcert.lib.Maps <> :::x_'!'_x not
R6896:6897 VST.floyd.call_lemmas <> id:92 var
R6876:6885 VST.veric.seplog <> glob_types def
R6887:6891 VST.floyd.call_lemmas <> Delta:97 var
R6901:6904 Coq.Init.Datatypes <> Some constr
R6907:6921 VST.veric.mpred <> type_of_funspec def
R6923:6923 VST.floyd.call_lemmas <> f:93 var
R6855:6857 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6832:6832 compcert.lib.Maps <> :::x_'!'_x not
R6849:6852 compcert.lib.Maps <> :::x_'!'_x not
R6853:6854 VST.floyd.call_lemmas <> id:92 var
R6833:6842 VST.veric.seplog <> glob_specs def
R6844:6848 VST.floyd.call_lemmas <> Delta:97 var
R6858:6861 Coq.Init.Datatypes <> Some constr
R6863:6863 VST.floyd.call_lemmas <> f:93 var
R7294:7305 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_fun_id prfax
R7294:7305 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_fun_id prfax
R7333:7346 VST.floyd.canon <> semax_pre_post thm
R7375:7384 VST.msl.seplog <> andp_left2 meth
R7393:7404 VST.msl.seplog <> derives_refl meth
R7333:7346 VST.floyd.canon <> semax_pre_post thm
R7375:7384 VST.msl.seplog <> andp_left2 meth
R7393:7404 VST.msl.seplog <> derives_refl meth
R7375:7384 VST.msl.seplog <> andp_left2 meth
R7393:7404 VST.msl.seplog <> derives_refl meth
R7375:7384 VST.msl.seplog <> andp_left2 meth
R7393:7404 VST.msl.seplog <> derives_refl meth
R7375:7384 VST.msl.seplog <> andp_left2 meth
R7393:7404 VST.msl.seplog <> derives_refl meth
R7375:7384 VST.msl.seplog <> andp_left2 meth
R7416:7425 VST.msl.seplog <> andp_right meth
R7416:7425 VST.msl.seplog <> andp_right meth
R7434:7443 VST.msl.seplog <> andp_left2 meth
R7434:7443 VST.msl.seplog <> andp_left2 meth
R7457:7466 VST.msl.seplog <> andp_left1 meth
R7457:7466 VST.msl.seplog <> andp_left1 meth
R7457:7466 VST.msl.seplog <> andp_left1 meth
R7518:7527 VST.msl.log_normalize <> andp_assoc thm
R7518:7527 VST.msl.log_normalize <> andp_assoc thm
R7518:7527 VST.msl.log_normalize <> andp_assoc thm
R7518:7527 VST.msl.log_normalize <> andp_assoc thm
R7518:7527 VST.msl.log_normalize <> andp_assoc thm
R7538:7547 VST.msl.seplog <> andp_right meth
R7538:7547 VST.msl.seplog <> andp_right meth
R7567:7576 VST.msl.log_normalize <> andp_assoc thm
R7585:7594 VST.msl.seplog <> andp_left1 meth
R7567:7576 VST.msl.log_normalize <> andp_assoc thm
R7567:7576 VST.msl.log_normalize <> andp_assoc thm
R7567:7576 VST.msl.log_normalize <> andp_assoc thm
R7567:7576 VST.msl.log_normalize <> andp_assoc thm
R7585:7594 VST.msl.seplog <> andp_left1 meth
R7695:7703 VST.floyd.client_lemmas <> func_ptr' def
R7777:7792 VST.veric.SeparationLogic <> corable_func_ptr thm
R7747:7766 VST.msl.seplog <> corable_andp_sepcon1 meth
R7747:7766 VST.msl.seplog <> corable_andp_sepcon1 meth
R7777:7792 VST.veric.SeparationLogic <> corable_func_ptr thm
R7747:7766 VST.msl.seplog <> corable_andp_sepcon1 meth
R7805:7813 VST.msl.log_normalize <> andp_comm thm
R7805:7813 VST.msl.log_normalize <> andp_comm thm
R7805:7813 VST.msl.log_normalize <> andp_comm thm
R7824:7835 VST.msl.log_normalize <> andp_derives thm
R7824:7835 VST.msl.log_normalize <> andp_derives thm
R7854:7863 VST.msl.log_normalize <> emp_sepcon thm
R7854:7863 VST.msl.log_normalize <> emp_sepcon thm
R7854:7863 VST.msl.log_normalize <> emp_sepcon thm
R7880:7889 VST.msl.seplog <> andp_left2 meth
R7880:7889 VST.msl.seplog <> andp_left2 meth
R7916:7925 VST.msl.seplog <> andp_left2 meth
R7916:7925 VST.msl.seplog <> andp_left2 meth
prf 7946:7962 <> eqb_typelist_refl
binder 7972:7973 <> tl:102
R7994:7996 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7976:7987 VST.veric.Cop2 <> eqb_typelist def
R7992:7993 VST.floyd.call_lemmas <> tl:102 var
R7989:7990 VST.floyd.call_lemmas <> tl:102 var
R7997:8000 Coq.Init.Datatypes <> true constr
R8043:8055 Coq.Bool.Bool <> andb_true_iff thm
R8043:8055 Coq.Bool.Bool <> andb_true_iff thm
R8077:8089 VST.veric.Cop2 <> eqb_type_refl thm
R8077:8089 VST.veric.Cop2 <> eqb_type_refl thm
prf 8104:8130 <> eqb_calling_convention_refl
binder 8142:8143 <> cc:103
R8174:8176 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8146:8167 VST.veric.Cop2 <> eqb_calling_convention def
R8172:8173 VST.floyd.call_lemmas <> cc:103 var
R8169:8170 VST.floyd.call_lemmas <> cc:103 var
R8177:8180 Coq.Init.Datatypes <> true constr
R8205:8226 VST.veric.Cop2 <> eqb_calling_convention def
prf 8388:8401 <> semax_call_id0
binder 8412:8416 <> Espec:104
R8423:8431 VST.veric.mpred <> compspecs class
binder 8419:8420 <> cs:105
binder 8434:8438 <> Delta:106
binder 8440:8440 <> P:107
binder 8442:8442 <> Q:108
binder 8444:8444 <> R:109
binder 8446:8447 <> id:110
binder 8449:8450 <> bl:111
binder 8452:8453 <> fs:112
binder 8455:8460 <> argsig:113
binder 8462:8466 <> retty:114
binder 8468:8469 <> cc:115
binder 8471:8471 <> A:116
binder 8473:8474 <> ts:117
binder 8476:8476 <> x:118
binder 8478:8480 <> Pre:119
binder 8482:8485 <> Post:120
binder 8487:8491 <> NEPre:121
binder 8493:8498 <> NEPost:122
R8510:8520 VST.veric.SeparationLogic <> funspec_sub def
R8526:8535 VST.veric.mpred <> mk_funspec constr
R8572:8577 VST.floyd.call_lemmas <> NEPost:122 var
R8566:8570 VST.floyd.call_lemmas <> NEPre:121 var
R8561:8564 VST.floyd.call_lemmas <> Post:120 var
R8557:8559 VST.floyd.call_lemmas <> Pre:119 var
R8555:8555 VST.floyd.call_lemmas <> A:116 var
R8552:8553 VST.floyd.call_lemmas <> cc:115 var
R8537:8537 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8544:8544 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8550:8550 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8538:8543 VST.floyd.call_lemmas <> argsig:113 var
R8545:8549 VST.floyd.call_lemmas <> retty:114 var
R8522:8523 VST.floyd.call_lemmas <> fs:112 var
binder 8504:8507 <> Hsub:123
R8613:8615 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8591:8591 compcert.lib.Maps <> :::x_'!'_x not
R8607:8610 compcert.lib.Maps <> :::x_'!'_x not
R8611:8612 VST.floyd.call_lemmas <> id:110 var
R8592:8600 VST.veric.seplog <> var_types def
R8602:8606 VST.floyd.call_lemmas <> Delta:106 var
R8616:8619 Coq.Init.Datatypes <> None constr
binder 8585:8588 <> GLBL:124
R8663:8673 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8725:8730 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8732:8736 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R9023:9039 VST.veric.SeparationLogic <> normal_ret_assert def
R9049:9049 VST.msl.seplog <> ::logic:x_'*'_x not
R9246:9258 VST.msl.seplog <> ::logic:x_'*'_x not
R9050:9055 VST.floyd.call_lemmas <> ifvoid def
R9168:9170 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R9176:9177 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R9173:9175 compcert.common.Values <> val ind
binder 9171:9171 <> v:125
R9178:9179 VST.veric.lift LiftNotation :::'`('_x_')' not
R9207:9244 VST.veric.lift LiftNotation :::'`('_x_')' not
R9198:9201 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9202:9206 VST.veric.mpred <> mpred def
R9191:9197 VST.veric.mpred <> environ ind
R9180:9183 VST.floyd.call_lemmas <> Post:120 var
R9188:9188 VST.floyd.call_lemmas <> x:118 var
R9185:9186 VST.floyd.call_lemmas <> ts:117 var
R9210:9218 VST.veric.SeparationLogic <> make_args def
R9238:9239 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R9237:9237 VST.floyd.call_lemmas <> v:125 var
R9240:9242 Coq.Init.Datatypes <> nil constr
R9229:9230 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R9221:9228 VST.veric.SeparationLogic <> ret_temp def
R9231:9233 Coq.Init.Datatypes <> nil constr
R9064:9065 VST.veric.lift LiftNotation :::'`('_x_')' not
R9093:9113 VST.veric.lift LiftNotation :::'`('_x_')' not
R9084:9087 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9088:9092 VST.veric.mpred <> mpred def
R9077:9083 VST.veric.mpred <> environ ind
R9066:9069 VST.floyd.call_lemmas <> Post:120 var
R9074:9074 VST.floyd.call_lemmas <> x:118 var
R9071:9072 VST.floyd.call_lemmas <> ts:117 var
R9096:9104 VST.veric.SeparationLogic <> make_args def
R9110:9112 Coq.Init.Datatypes <> nil constr
R9106:9108 Coq.Init.Datatypes <> nil constr
R9057:9061 VST.floyd.call_lemmas <> retty:114 var
R9259:9263 VST.floyd.canon <> PROPx def
R9268:9273 VST.floyd.canon <> LOCALx def
R9278:9281 VST.floyd.canon <> SEPx def
R9283:9283 VST.floyd.call_lemmas <> R:109 var
R9275:9275 VST.floyd.call_lemmas <> Q:108 var
R9265:9265 VST.floyd.call_lemmas <> P:107 var
R8941:8945 compcert.cfrontend.Clight <> Scall constr
R9014:9015 VST.floyd.call_lemmas <> bl:111 var
R8953:8956 compcert.cfrontend.Clight <> Evar constr
R8962:8970 compcert.cfrontend.Ctypes <> Tfunction constr
R9009:9010 VST.floyd.call_lemmas <> cc:115 var
R9003:9007 VST.floyd.call_lemmas <> retty:114 var
R8973:8993 VST.veric.mpred <> typelist_of_type_list def
R8995:9000 VST.floyd.call_lemmas <> argsig:113 var
R8958:8959 VST.floyd.call_lemmas <> id:110 var
R8947:8950 Coq.Init.Datatypes <> None constr
R8789:8810 VST.msl.seplog <> ::logic:x_'&&'_x not
R8762:8772 VST.veric.SeparationLogic <> tc_exprlist def
R8787:8788 VST.floyd.call_lemmas <> bl:111 var
R8780:8785 VST.floyd.call_lemmas <> argsig:113 var
R8774:8778 VST.floyd.call_lemmas <> Delta:106 var
R8811:8814 VST.msl.seplog <> ::logic:'|>'_x not
R8932:8932 VST.msl.seplog <> ::logic:'|>'_x not
R8815:8815 VST.msl.seplog <> ::logic:x_'*'_x not
R8876:8904 VST.msl.seplog <> ::logic:x_'*'_x not
binder 8820:8822 <> rho:126
R8827:8829 VST.floyd.call_lemmas <> Pre:119 var
R8836:8836 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8846:8847 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8875:8875 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8837:8841 VST.veric.mpred <> ge_of def
R8843:8845 VST.floyd.call_lemmas <> rho:126 var
R8848:8860 VST.veric.expr <> eval_exprlist def
R8872:8874 VST.floyd.call_lemmas <> rho:126 var
R8869:8870 VST.floyd.call_lemmas <> bl:111 var
R8862:8867 VST.floyd.call_lemmas <> argsig:113 var
R8834:8834 VST.floyd.call_lemmas <> x:118 var
R8831:8832 VST.floyd.call_lemmas <> ts:117 var
R8905:8909 VST.floyd.canon <> PROPx def
R8914:8919 VST.floyd.canon <> LOCALx def
R8924:8927 VST.floyd.canon <> SEPx def
R8929:8929 VST.floyd.call_lemmas <> R:109 var
R8921:8921 VST.floyd.call_lemmas <> Q:108 var
R8911:8911 VST.floyd.call_lemmas <> P:107 var
R8747:8751 VST.floyd.call_lemmas <> Delta:106 var
R8741:8745 VST.floyd.call_lemmas <> Espec:104 var
R8738:8739 VST.floyd.call_lemmas <> cs:105 var
R8697:8699 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8674:8674 compcert.lib.Maps <> :::x_'!'_x not
R8691:8694 compcert.lib.Maps <> :::x_'!'_x not
R8695:8696 VST.floyd.call_lemmas <> id:110 var
R8675:8684 VST.veric.seplog <> glob_types def
R8686:8690 VST.floyd.call_lemmas <> Delta:106 var
R8700:8703 Coq.Init.Datatypes <> Some constr
R8706:8720 VST.veric.mpred <> type_of_funspec def
R8722:8723 VST.floyd.call_lemmas <> fs:112 var
R8653:8655 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8630:8630 compcert.lib.Maps <> :::x_'!'_x not
R8647:8650 compcert.lib.Maps <> :::x_'!'_x not
R8651:8652 VST.floyd.call_lemmas <> id:110 var
R8631:8640 VST.veric.seplog <> glob_specs def
R8642:8646 VST.floyd.call_lemmas <> Delta:106 var
R8656:8659 Coq.Init.Datatypes <> Some constr
R8661:8662 VST.floyd.call_lemmas <> fs:112 var
R9400:9416 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9313:9328 compcert.cfrontend.Cop <> classify_fun def
R9331:9336 compcert.cfrontend.Clight <> typeof def
R9339:9342 compcert.cfrontend.Clight <> Evar constr
R9348:9356 compcert.cfrontend.Ctypes <> Tfunction constr
R9359:9379 VST.veric.mpred <> typelist_of_type_list def
R9417:9430 compcert.cfrontend.Cop <> fun_case_f constr
R9433:9453 VST.veric.mpred <> typelist_of_type_list def
R9400:9416 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9313:9328 compcert.cfrontend.Cop <> classify_fun def
R9331:9336 compcert.cfrontend.Clight <> typeof def
R9339:9342 compcert.cfrontend.Clight <> Evar constr
R9348:9356 compcert.cfrontend.Ctypes <> Tfunction constr
R9359:9379 VST.veric.mpred <> typelist_of_type_list def
R9417:9430 compcert.cfrontend.Cop <> fun_case_f constr
R9433:9453 VST.veric.mpred <> typelist_of_type_list def
R9509:9521 VST.floyd.call_lemmas <> semax_fun_id' thm
R9530:9540 VST.veric.SeparationLogic <> tc_exprlist def
R9509:9521 VST.floyd.call_lemmas <> semax_fun_id' thm
R9530:9540 VST.veric.SeparationLogic <> tc_exprlist def
R9594:9609 VST.floyd.canon <> semax_pre_simple thm
R9624:9634 VST.floyd.call_lemmas <> semax_call0 thm
R9594:9609 VST.floyd.canon <> semax_pre_simple thm
R9624:9634 VST.floyd.call_lemmas <> semax_call0 thm
R9726:9735 VST.msl.seplog <> andp_right meth
R9726:9735 VST.msl.seplog <> andp_right meth
R9751:9760 VST.msl.log_normalize <> andp_assoc thm
R9751:9760 VST.msl.log_normalize <> andp_assoc thm
R9751:9760 VST.msl.log_normalize <> andp_assoc thm
R9769:9778 VST.msl.seplog <> andp_left1 meth
R9769:9778 VST.msl.seplog <> andp_left1 meth
R9789:9798 VST.msl.seplog <> andp_right meth
R9789:9798 VST.msl.seplog <> andp_right meth
R9812:9821 VST.msl.seplog <> andp_left1 meth
R9812:9821 VST.msl.seplog <> andp_left1 meth
R9842:9848 VST.veric.SeparationLogic <> tc_expr def
R9893:9901 VST.msl.seplog <> prop_left meth
R9893:9901 VST.msl.seplog <> prop_left meth
R9922:9933 VST.veric.expr <> get_var_type def
R9974:9994 VST.floyd.typecheck_lemmas <> denote_tc_assert_bool thm
R9974:9994 VST.floyd.typecheck_lemmas <> denote_tc_assert_bool thm
R9974:9994 VST.floyd.typecheck_lemmas <> denote_tc_assert_bool thm
R10010:10019 VST.msl.seplog <> prop_right meth
R10010:10019 VST.msl.seplog <> prop_right meth
R10046:10064 VST.veric.SeparationLogic <> type_of_funspec_sub thm
R10046:10064 VST.veric.SeparationLogic <> type_of_funspec_sub thm
R10046:10064 VST.veric.SeparationLogic <> type_of_funspec_sub thm
R10106:10122 VST.floyd.call_lemmas <> eqb_typelist_refl thm
R10106:10122 VST.floyd.call_lemmas <> eqb_typelist_refl thm
R10106:10122 VST.floyd.call_lemmas <> eqb_typelist_refl thm
R10177:10189 VST.veric.Cop2 <> eqb_type_refl thm
R10177:10189 VST.veric.Cop2 <> eqb_type_refl thm
R10177:10189 VST.veric.Cop2 <> eqb_type_refl thm
R10209:10235 VST.floyd.call_lemmas <> eqb_calling_convention_refl thm
R10209:10235 VST.floyd.call_lemmas <> eqb_calling_convention_refl thm
R10248:10257 VST.msl.seplog <> andp_left2 meth
R10248:10257 VST.msl.seplog <> andp_left2 meth
R10274:10283 VST.msl.seplog <> andp_left2 meth
R10286:10295 VST.msl.seplog <> andp_left2 meth
R10298:10307 VST.msl.seplog <> andp_left2 meth
R10274:10283 VST.msl.seplog <> andp_left2 meth
R10286:10295 VST.msl.seplog <> andp_left2 meth
R10298:10307 VST.msl.seplog <> andp_left2 meth
R10332:10343 VST.msl.seplog <> later_sepcon meth
R10349:10360 VST.msl.seplog <> sepcon_assoc meth
R10332:10343 VST.msl.seplog <> later_sepcon meth
R10332:10343 VST.msl.seplog <> later_sepcon meth
R10349:10360 VST.msl.seplog <> sepcon_assoc meth
R10349:10360 VST.msl.seplog <> sepcon_assoc meth
R10369:10382 VST.msl.seplog <> sepcon_derives meth
R10369:10382 VST.msl.seplog <> sepcon_derives meth
R10400:10418 VST.veric.SeparationLogic <> type_of_funspec_sub thm
R10400:10418 VST.veric.SeparationLogic <> type_of_funspec_sub thm
R10400:10418 VST.veric.SeparationLogic <> type_of_funspec_sub thm
R10439:10449 VST.msl.seplog <> sepcon_comm meth
R10458:10469 VST.msl.seplog <> derives_refl meth
R10439:10449 VST.msl.seplog <> sepcon_comm meth
R10439:10449 VST.msl.seplog <> sepcon_comm meth
R10458:10469 VST.msl.seplog <> derives_refl meth
prf 10484:10497 <> semax_call_id1
binder 10508:10512 <> Espec:127
R10519:10527 VST.veric.mpred <> compspecs class
binder 10515:10516 <> cs:128
binder 10530:10534 <> Delta:129
binder 10536:10536 <> P:130
binder 10538:10538 <> Q:131
binder 10540:10540 <> R:132
binder 10542:10544 <> ret:133
binder 10546:10547 <> id:134
binder 10549:10550 <> fs:135
binder 10552:10556 <> retty:136
binder 10558:10559 <> cc:137
binder 10561:10562 <> bl:138
binder 10564:10569 <> argsig:139
binder 10571:10571 <> A:140
binder 10573:10574 <> ts:141
binder 10576:10576 <> x:142
binder 10578:10580 <> Pre:143
binder 10582:10585 <> Post:144
binder 10587:10591 <> NEPre:145
binder 10593:10598 <> NEPost:146
R10610:10620 VST.veric.SeparationLogic <> funspec_sub def
R10626:10635 VST.veric.mpred <> mk_funspec constr
R10672:10677 VST.floyd.call_lemmas <> NEPost:146 var
R10666:10670 VST.floyd.call_lemmas <> NEPre:145 var
R10661:10664 VST.floyd.call_lemmas <> Post:144 var
R10657:10659 VST.floyd.call_lemmas <> Pre:143 var
R10655:10655 VST.floyd.call_lemmas <> A:140 var
R10652:10653 VST.floyd.call_lemmas <> cc:137 var
R10637:10637 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10644:10644 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10650:10650 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10638:10643 VST.floyd.call_lemmas <> argsig:139 var
R10645:10649 VST.floyd.call_lemmas <> retty:136 var
R10622:10623 VST.floyd.call_lemmas <> fs:135 var
binder 10604:10607 <> Hsub:147
R10713:10715 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10691:10691 compcert.lib.Maps <> :::x_'!'_x not
R10707:10710 compcert.lib.Maps <> :::x_'!'_x not
R10711:10712 VST.floyd.call_lemmas <> id:134 var
R10692:10700 VST.veric.seplog <> var_types def
R10702:10706 VST.floyd.call_lemmas <> Delta:129 var
R10716:10719 Coq.Init.Datatypes <> None constr
binder 10685:10688 <> GLBL:148
R10763:10773 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10825:10831 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10890:10896 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10932:10937 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10939:10943 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R11251:11267 VST.veric.SeparationLogic <> normal_ret_assert def
R11326:11339 VST.msl.seplog <> ::logic:x_'*'_x not
R11278:11279 VST.veric.lift LiftNotation :::'`('_x_')' not
R11307:11325 VST.veric.lift LiftNotation :::'`('_x_')' not
R11298:11301 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11302:11306 VST.veric.mpred <> mpred def
R11291:11297 VST.veric.mpred <> environ ind
R11280:11283 VST.floyd.call_lemmas <> Post:144 var
R11288:11288 VST.floyd.call_lemmas <> x:142 var
R11285:11286 VST.floyd.call_lemmas <> ts:141 var
R11310:11320 VST.veric.SeparationLogic <> get_result1 def
R11322:11324 VST.floyd.call_lemmas <> ret:133 var
R11340:11344 VST.floyd.canon <> PROPx def
R11349:11354 VST.floyd.canon <> LOCALx def
R11386:11389 VST.floyd.canon <> SEPx def
R11391:11391 VST.floyd.call_lemmas <> R:132 var
R11357:11376 VST.floyd.client_lemmas <> remove_localdef_temp def
R11382:11382 VST.floyd.call_lemmas <> Q:131 var
R11378:11380 VST.floyd.call_lemmas <> ret:133 var
R11346:11346 VST.floyd.call_lemmas <> P:130 var
R11137:11141 compcert.cfrontend.Clight <> Scall constr
R11242:11243 VST.floyd.call_lemmas <> bl:138 var
R11168:11171 compcert.cfrontend.Clight <> Evar constr
R11177:11185 compcert.cfrontend.Ctypes <> Tfunction constr
R11224:11225 VST.floyd.call_lemmas <> cc:137 var
R11218:11222 VST.floyd.call_lemmas <> retty:136 var
R11188:11208 VST.veric.mpred <> typelist_of_type_list def
R11210:11215 VST.floyd.call_lemmas <> argsig:139 var
R11173:11174 VST.floyd.call_lemmas <> id:134 var
R11144:11147 Coq.Init.Datatypes <> Some constr
R11149:11151 VST.floyd.call_lemmas <> ret:133 var
R10995:11014 VST.msl.seplog <> ::logic:x_'&&'_x not
R10968:10978 VST.veric.SeparationLogic <> tc_exprlist def
R10993:10994 VST.floyd.call_lemmas <> bl:138 var
R10986:10991 VST.floyd.call_lemmas <> argsig:139 var
R10980:10984 VST.floyd.call_lemmas <> Delta:129 var
R11015:11017 VST.msl.seplog <> ::logic:'|>'_x not
R11128:11128 VST.msl.seplog <> ::logic:'|>'_x not
R11018:11018 VST.msl.seplog <> ::logic:x_'*'_x not
R11079:11100 VST.msl.seplog <> ::logic:x_'*'_x not
binder 11023:11025 <> rho:149
R11030:11032 VST.floyd.call_lemmas <> Pre:143 var
R11039:11039 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11049:11050 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11078:11078 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11040:11044 VST.veric.mpred <> ge_of def
R11046:11048 VST.floyd.call_lemmas <> rho:149 var
R11051:11063 VST.veric.expr <> eval_exprlist def
R11075:11077 VST.floyd.call_lemmas <> rho:149 var
R11072:11073 VST.floyd.call_lemmas <> bl:138 var
R11065:11070 VST.floyd.call_lemmas <> argsig:139 var
R11037:11037 VST.floyd.call_lemmas <> x:142 var
R11034:11035 VST.floyd.call_lemmas <> ts:141 var
R11101:11105 VST.floyd.canon <> PROPx def
R11110:11115 VST.floyd.canon <> LOCALx def
R11120:11123 VST.floyd.canon <> SEPx def
R11125:11125 VST.floyd.call_lemmas <> R:132 var
R11117:11117 VST.floyd.call_lemmas <> Q:131 var
R11107:11107 VST.floyd.call_lemmas <> P:130 var
R10954:10958 VST.floyd.call_lemmas <> Delta:129 var
R10948:10952 VST.floyd.call_lemmas <> Espec:127 var
R10945:10946 VST.floyd.call_lemmas <> cs:128 var
R10897:10908 VST.veric.SeparationLogic <> tc_fn_return def
R10927:10931 VST.floyd.call_lemmas <> retty:136 var
R10917:10920 Coq.Init.Datatypes <> Some constr
R10922:10924 VST.floyd.call_lemmas <> ret:133 var
R10910:10914 VST.floyd.call_lemmas <> Delta:129 var
R10838:10842 VST.floyd.call_lemmas <> retty:136 var
R10854:10858 compcert.cfrontend.Ctypes <> Tvoid constr
R10863:10867 Coq.Init.Logic <> False ind
R10879:10882 Coq.Init.Logic <> True ind
R10797:10799 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10774:10774 compcert.lib.Maps <> :::x_'!'_x not
R10791:10794 compcert.lib.Maps <> :::x_'!'_x not
R10795:10796 VST.floyd.call_lemmas <> id:134 var
R10775:10784 VST.veric.seplog <> glob_types def
R10786:10790 VST.floyd.call_lemmas <> Delta:129 var
R10800:10803 Coq.Init.Datatypes <> Some constr
R10806:10820 VST.veric.mpred <> type_of_funspec def
R10822:10823 VST.floyd.call_lemmas <> fs:135 var
R10753:10755 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10730:10730 compcert.lib.Maps <> :::x_'!'_x not
R10747:10750 compcert.lib.Maps <> :::x_'!'_x not
R10751:10752 VST.floyd.call_lemmas <> id:134 var
R10731:10740 VST.veric.seplog <> glob_specs def
R10742:10746 VST.floyd.call_lemmas <> Delta:129 var
R10756:10759 Coq.Init.Datatypes <> Some constr
R10761:10762 VST.floyd.call_lemmas <> fs:135 var
R11569:11585 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11482:11497 compcert.cfrontend.Cop <> classify_fun def
R11500:11505 compcert.cfrontend.Clight <> typeof def
R11508:11511 compcert.cfrontend.Clight <> Evar constr
R11517:11525 compcert.cfrontend.Ctypes <> Tfunction constr
R11528:11548 VST.veric.mpred <> typelist_of_type_list def
R11586:11599 compcert.cfrontend.Cop <> fun_case_f constr
R11602:11622 VST.veric.mpred <> typelist_of_type_list def
R11569:11585 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11482:11497 compcert.cfrontend.Cop <> classify_fun def
R11500:11505 compcert.cfrontend.Clight <> typeof def
R11508:11511 compcert.cfrontend.Clight <> Evar constr
R11517:11525 compcert.cfrontend.Ctypes <> Tfunction constr
R11528:11548 VST.veric.mpred <> typelist_of_type_list def
R11586:11599 compcert.cfrontend.Cop <> fun_case_f constr
R11602:11622 VST.veric.mpred <> typelist_of_type_list def
R11670:11682 VST.floyd.call_lemmas <> semax_fun_id' thm
R11670:11682 VST.floyd.call_lemmas <> semax_fun_id' thm
R11712:11727 VST.floyd.canon <> semax_pre_simple thm
R11741:11751 VST.floyd.call_lemmas <> semax_call1 thm
R11712:11727 VST.floyd.canon <> semax_pre_simple thm
R11741:11751 VST.floyd.call_lemmas <> semax_call1 thm
R11854:11863 VST.msl.seplog <> andp_right meth
R11854:11863 VST.msl.seplog <> andp_right meth
R11879:11888 VST.msl.log_normalize <> andp_assoc thm
R11879:11888 VST.msl.log_normalize <> andp_assoc thm
R11879:11888 VST.msl.log_normalize <> andp_assoc thm
R11897:11906 VST.msl.seplog <> andp_left1 meth
R11897:11906 VST.msl.seplog <> andp_left1 meth
R11915:11924 VST.msl.seplog <> andp_right meth
R11915:11924 VST.msl.seplog <> andp_right meth
R11949:11955 VST.veric.SeparationLogic <> tc_expr def
R11958:11962 VST.veric.SeparationLogic <> local def
R11964:11968 VST.veric.mpred <> lift1 def
R12018:12029 VST.veric.expr <> get_var_type def
R12071:12089 VST.veric.SeparationLogic <> type_of_funspec_sub thm
R12071:12089 VST.veric.SeparationLogic <> type_of_funspec_sub thm
R12071:12089 VST.veric.SeparationLogic <> type_of_funspec_sub thm
R12114:12134 VST.floyd.typecheck_lemmas <> denote_tc_assert_bool thm
R12114:12134 VST.floyd.typecheck_lemmas <> denote_tc_assert_bool thm
R12114:12134 VST.floyd.typecheck_lemmas <> denote_tc_assert_bool thm
R12160:12176 VST.floyd.call_lemmas <> eqb_typelist_refl thm
R12160:12176 VST.floyd.call_lemmas <> eqb_typelist_refl thm
R12160:12176 VST.floyd.call_lemmas <> eqb_typelist_refl thm
R12191:12203 VST.veric.Cop2 <> eqb_type_refl thm
R12191:12203 VST.veric.Cop2 <> eqb_type_refl thm
R12191:12203 VST.veric.Cop2 <> eqb_type_refl thm
R12223:12232 VST.msl.seplog <> prop_right meth
R12241:12267 VST.floyd.call_lemmas <> eqb_calling_convention_refl thm
R12223:12232 VST.msl.seplog <> prop_right meth
R12241:12267 VST.floyd.call_lemmas <> eqb_calling_convention_refl thm
R12280:12289 VST.msl.seplog <> andp_left2 meth
R12280:12289 VST.msl.seplog <> andp_left2 meth
R12309:12318 VST.msl.seplog <> andp_left2 meth
R12309:12318 VST.msl.seplog <> andp_left2 meth
R12327:12336 VST.msl.seplog <> andp_left2 meth
R12327:12336 VST.msl.seplog <> andp_left2 meth
R12345:12354 VST.msl.seplog <> andp_left2 meth
R12345:12354 VST.msl.seplog <> andp_left2 meth
R12365:12376 VST.msl.seplog <> later_sepcon meth
R12382:12393 VST.msl.seplog <> sepcon_assoc meth
R12365:12376 VST.msl.seplog <> later_sepcon meth
R12365:12376 VST.msl.seplog <> later_sepcon meth
R12382:12393 VST.msl.seplog <> sepcon_assoc meth
R12382:12393 VST.msl.seplog <> sepcon_assoc meth
R12402:12415 VST.msl.seplog <> sepcon_derives meth
R12402:12415 VST.msl.seplog <> sepcon_derives meth
R12433:12451 VST.veric.SeparationLogic <> type_of_funspec_sub thm
R12433:12451 VST.veric.SeparationLogic <> type_of_funspec_sub thm
R12433:12451 VST.veric.SeparationLogic <> type_of_funspec_sub thm
R12472:12482 VST.msl.seplog <> sepcon_comm meth
R12472:12482 VST.msl.seplog <> sepcon_comm meth
R12472:12482 VST.msl.seplog <> sepcon_comm meth
R12491:12502 VST.msl.seplog <> derives_refl meth
R12491:12502 VST.msl.seplog <> derives_refl meth
ind 12521:12541 <> extract_trivial_liftx
constr 12589:12595 <> ETL_nil
constr 12630:12637 <> ETL_cons
binder 12544:12544 <> A:151
R12565:12568 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12575:12578 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12569:12572 Coq.Init.Datatypes <> list ind
R12548:12551 Coq.Init.Datatypes <> list ind
R12561:12562 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12554:12560 VST.veric.mpred <> environ ind
R12598:12618 VST.floyd.call_lemmas <> extract_trivial_liftx:152 ind
R12624:12626 Coq.Init.Datatypes <> nil constr
R12620:12622 Coq.Init.Datatypes <> nil constr
binder 12647:12647 <> a:154
binder 12649:12650 <> al:155
binder 12652:12653 <> bl:156
R12696:12712 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12713:12733 VST.floyd.call_lemmas <> extract_trivial_liftx:152 ind
R12748:12749 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R12747:12747 VST.floyd.call_lemmas <> a:154 var
R12750:12751 VST.floyd.call_lemmas <> bl:156 var
R12738:12741 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R12736:12736 VST.veric.lift LiftNotation :::'`'_x not
R12737:12737 VST.floyd.call_lemmas <> a:154 var
R12742:12743 VST.floyd.call_lemmas <> al:155 var
R12669:12689 VST.floyd.call_lemmas <> extract_trivial_liftx:152 ind
R12694:12695 VST.floyd.call_lemmas <> bl:156 var
R12691:12692 VST.floyd.call_lemmas <> al:155 var
prf 12762:12783 <> fold_right_and_app_low
R12804:12807 Coq.Init.Datatypes <> list ind
binder 12796:12797 <> Q1:157
binder 12799:12800 <> Q2:158
R12848:12854 Coq.Init.Logic <> ::type_scope:x_'='_x not
R12904:12904 Coq.Init.Logic <> ::type_scope:x_'='_x not
R12818:12827 Coq.Lists.List <> fold_right def
R12841:12844 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R12839:12840 VST.floyd.call_lemmas <> Q1:157 var
R12845:12846 VST.floyd.call_lemmas <> Q2:158 var
R12833:12836 Coq.Init.Logic <> True ind
R12829:12831 Coq.Init.Logic <> and ind
R12877:12881 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R12855:12864 Coq.Lists.List <> fold_right def
R12875:12876 VST.floyd.call_lemmas <> Q1:157 var
R12870:12873 Coq.Init.Logic <> True ind
R12866:12868 Coq.Init.Logic <> and ind
R12882:12891 Coq.Lists.List <> fold_right def
R12902:12903 VST.floyd.call_lemmas <> Q2:158 var
R12897:12900 Coq.Init.Logic <> True ind
R12893:12895 Coq.Init.Logic <> and ind
R12955:12962 VST.msl.Axioms <> prop_ext prfax
R12955:12962 VST.msl.Axioms <> prop_ext prfax
R12992:12999 VST.msl.Axioms <> prop_ext prfax
R12992:12999 VST.msl.Axioms <> prop_ext prfax
prf 13021:13045 <> fold_right_and_app_lifted
R13065:13068 Coq.Init.Datatypes <> list ind
R13078:13081 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13071:13077 VST.veric.mpred <> environ ind
binder 13058:13059 <> Q1:159
binder 13061:13062 <> Q2:160
R13128:13133 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13092:13101 Coq.Lists.List <> fold_right def
R13121:13124 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R13119:13120 VST.floyd.call_lemmas <> Q1:159 var
R13125:13126 VST.floyd.call_lemmas <> Q2:160 var
R13110:13111 VST.veric.lift LiftNotation :::'`('_x_')' not
R13116:13116 VST.veric.lift LiftNotation :::'`('_x_')' not
R13112:13115 Coq.Init.Logic <> True ind
R13103:13104 VST.veric.lift LiftNotation :::'`('_x_')' not
R13108:13108 VST.veric.lift LiftNotation :::'`('_x_')' not
R13105:13107 Coq.Init.Logic <> and ind
R13134:13135 VST.veric.lift LiftNotation :::'`('_x_')' not
R13139:13201 VST.veric.lift LiftNotation :::'`('_x_')' not
R13136:13138 Coq.Init.Logic <> and ind
R13173:13182 Coq.Lists.List <> fold_right def
R13199:13200 VST.floyd.call_lemmas <> Q2:160 var
R13191:13192 VST.veric.lift LiftNotation :::'`('_x_')' not
R13197:13197 VST.veric.lift LiftNotation :::'`('_x_')' not
R13193:13196 Coq.Init.Logic <> True ind
R13184:13185 VST.veric.lift LiftNotation :::'`('_x_')' not
R13189:13189 VST.veric.lift LiftNotation :::'`('_x_')' not
R13186:13188 Coq.Init.Logic <> and ind
R13142:13151 Coq.Lists.List <> fold_right def
R13168:13169 VST.floyd.call_lemmas <> Q1:159 var
R13160:13161 VST.veric.lift LiftNotation :::'`('_x_')' not
R13166:13166 VST.veric.lift LiftNotation :::'`('_x_')' not
R13162:13165 Coq.Init.Logic <> True ind
R13153:13154 VST.veric.lift LiftNotation :::'`('_x_')' not
R13158:13158 VST.veric.lift LiftNotation :::'`('_x_')' not
R13155:13157 Coq.Init.Logic <> and ind
R13272:13279 VST.msl.Axioms <> prop_ext prfax
R13272:13279 VST.msl.Axioms <> prop_ext prfax
R13363:13370 VST.msl.Axioms <> prop_ext prfax
R13363:13370 VST.msl.Axioms <> prop_ext prfax
def 13646:13661 <> check_gvars_spec
R13668:13673 Coq.Init.Datatypes <> option ind
R13675:13681 VST.veric.SeparationLogic <> globals def
binder 13664:13665 <> GV:161
R13690:13695 Coq.Init.Datatypes <> option ind
R13697:13703 VST.veric.SeparationLogic <> globals def
binder 13685:13687 <> GV':162
R13724:13726 VST.floyd.call_lemmas <> GV':162 var
R13733:13736 Coq.Init.Datatypes <> Some constr
R13745:13747 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13743:13744 VST.floyd.call_lemmas <> GV:161 var
R13748:13750 VST.floyd.call_lemmas <> GV':162 var
R13759:13762 Coq.Init.Logic <> True ind
def 13781:13791 <> strong_cast
R13801:13804 compcert.cfrontend.Ctypes <> type ind
binder 13794:13795 <> t1:164
binder 13797:13798 <> t2:165
R13811:13813 compcert.common.Values <> val ind
binder 13808:13808 <> v:166
R13818:13820 compcert.common.Values <> val ind
R13826:13834 VST.veric.val_lemmas <> force_val def
R13837:13844 VST.veric.Clight_Cop2 <> sem_cast def
R13852:13852 VST.floyd.call_lemmas <> v:166 var
R13849:13850 VST.floyd.call_lemmas <> t2:165 var
R13846:13847 VST.floyd.call_lemmas <> t1:164 var
prf 13863:13885 <> extract_trivial_liftx_e
R13901:13904 Coq.Init.Datatypes <> list ind
R13914:13915 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13916:13920 VST.veric.mpred <> mpred def
R13907:13913 VST.veric.mpred <> environ ind
binder 13898:13898 <> R:167
R13929:13932 Coq.Init.Datatypes <> list ind
R13934:13938 VST.veric.mpred <> mpred def
binder 13925:13926 <> R':168
R13973:13976 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13978:13980 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13977:13977 VST.floyd.call_lemmas <> R:167 var
R13981:13983 Coq.Lists.List <> map def
R13991:13992 VST.floyd.call_lemmas <> R':168 var
R13985:13989 VST.veric.lift <> liftx def
R13947:13967 VST.floyd.call_lemmas <> extract_trivial_liftx ind
R13971:13972 VST.floyd.call_lemmas <> R':168 var
R13969:13969 VST.floyd.call_lemmas <> R:167 var
prf 14063:14080 <> isolate_LOCAL_lem1
binder 14092:14092 <> Q:169
R14132:14134 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14095:14099 VST.floyd.canon <> PROPx def
R14106:14111 VST.floyd.canon <> LOCALx def
R14116:14119 VST.floyd.canon <> SEPx def
R14124:14125 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R14122:14123 VST.msl.seplog <> TT meth
R14126:14128 Coq.Init.Datatypes <> nil constr
R14113:14113 VST.floyd.call_lemmas <> Q:169 var
R14101:14103 Coq.Init.Datatypes <> nil constr
R14135:14139 VST.veric.SeparationLogic <> local def
R14142:14151 Coq.Lists.List <> fold_right def
R14169:14171 Coq.Lists.List <> map def
R14187:14187 VST.floyd.call_lemmas <> Q:169 var
R14173:14185 VST.floyd.canon <> locald_denote def
R14160:14161 VST.veric.lift LiftNotation :::'`('_x_')' not
R14166:14166 VST.veric.lift LiftNotation :::'`('_x_')' not
R14162:14165 Coq.Init.Logic <> True ind
R14153:14154 VST.veric.lift LiftNotation :::'`('_x_')' not
R14158:14158 VST.veric.lift LiftNotation :::'`('_x_')' not
R14155:14157 Coq.Init.Logic <> and ind
R14237:14241 VST.floyd.canon <> PROPx def
R14244:14249 VST.floyd.canon <> LOCALx def
R14252:14255 VST.floyd.canon <> SEPx def
prf 14308:14330 <> Forall_ptree_elements_e
binder 14342:14342 <> A:170
R14357:14360 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14353:14355 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R14348:14352 compcert.common.AST <> ident def
R14356:14356 VST.floyd.call_lemmas <> A:170 var
binder 14345:14345 <> F:171
binder 14367:14367 <> m:172
binder 14369:14369 <> i:173
binder 14371:14371 <> v:174
R14404:14410 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14425:14431 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14432:14432 VST.floyd.call_lemmas <> F:171 var
R14434:14434 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14436:14436 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14438:14438 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14435:14435 VST.floyd.call_lemmas <> i:173 var
R14437:14437 VST.floyd.call_lemmas <> v:174 var
R14416:14418 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14412:14414 compcert.lib.Maps <> :::x_'!'_x not
R14415:14415 VST.floyd.call_lemmas <> i:173 var
R14411:14411 VST.floyd.call_lemmas <> m:172 var
R14419:14422 Coq.Init.Datatypes <> Some constr
R14424:14424 VST.floyd.call_lemmas <> v:174 var
R14377:14382 Coq.Lists.List <> Forall ind
R14387:14400 compcert.lib.Maps PTree elements def
R14402:14402 VST.floyd.call_lemmas <> m:172 var
R14384:14384 VST.floyd.call_lemmas <> F:171 var
R14464:14485 compcert.lib.Maps PTree elements_correct thm
R14464:14485 compcert.lib.Maps PTree elements_correct thm
R14506:14519 compcert.lib.Maps PTree elements def
R14506:14519 compcert.lib.Maps PTree elements def
prf 14568:14589 <> pTree_from_elements_e1
binder 14601:14603 <> rho:175
binder 14605:14606 <> fl:176
binder 14608:14609 <> vl:177
binder 14611:14611 <> i:178
binder 14613:14613 <> v:179
R14652:14659 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14710:14717 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14753:14756 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R14719:14721 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14718:14718 VST.floyd.call_lemmas <> v:179 var
R14722:14728 VST.veric.mpred <> eval_id def
R14733:14741 VST.veric.SeparationLogic <> make_args def
R14749:14751 VST.floyd.call_lemmas <> rho:175 var
R14746:14747 VST.floyd.call_lemmas <> vl:177 var
R14743:14744 VST.floyd.call_lemmas <> fl:176 var
R14730:14730 VST.floyd.call_lemmas <> i:178 var
R14758:14761 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R14757:14757 VST.floyd.call_lemmas <> v:179 var
R14762:14767 compcert.common.Values <> Vundef constr
R14701:14703 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14660:14660 compcert.lib.Maps <> :::x_'!'_x not
R14696:14699 compcert.lib.Maps <> :::x_'!'_x not
R14700:14700 VST.floyd.call_lemmas <> i:178 var
R14661:14679 VST.floyd.local2ptree_denote <> pTree_from_elements def
R14682:14688 Coq.Lists.List <> combine def
R14693:14694 VST.floyd.call_lemmas <> vl:177 var
R14690:14691 VST.floyd.call_lemmas <> fl:176 var
R14704:14707 Coq.Init.Datatypes <> Some constr
R14709:14709 VST.floyd.call_lemmas <> v:179 var
R14620:14625 Coq.Lists.List <> Forall ind
R14650:14651 VST.floyd.call_lemmas <> vl:177 var
binder 14632:14632 <> v:180
R14638:14641 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R14637:14637 VST.floyd.call_lemmas <> v:180 var
R14642:14647 compcert.common.Values <> Vundef constr
R14851:14869 VST.floyd.local2ptree_denote <> pTree_from_elements def
R14902:14913 compcert.lib.Maps PTree gempty thm
R14902:14913 compcert.lib.Maps PTree gempty thm
R14902:14913 compcert.lib.Maps PTree gempty thm
R14975:14993 VST.floyd.local2ptree_denote <> pTree_from_elements def
R15028:15039 compcert.lib.Maps PTree gempty thm
R15028:15039 compcert.lib.Maps PTree gempty thm
R15028:15039 compcert.lib.Maps PTree gempty thm
R15086:15104 VST.floyd.local2ptree_denote <> pTree_from_elements def
R15146:15153 compcert.common.AST <> ident_eq def
R15146:15153 compcert.common.AST <> ident_eq def
R15185:15193 compcert.lib.Maps PTree gss thm
R15185:15193 compcert.lib.Maps PTree gss thm
R15185:15193 compcert.lib.Maps PTree gss thm
R15225:15245 VST.floyd.assert_lemmas <> unfold_make_args_cons thm
R15225:15245 VST.floyd.assert_lemmas <> unfold_make_args_cons thm
R15225:15245 VST.floyd.assert_lemmas <> unfold_make_args_cons thm
R15262:15268 VST.veric.mpred <> eval_id def
R15287:15293 VST.veric.mpred Map gss thm
R15287:15293 VST.veric.mpred Map gss thm
R15287:15293 VST.veric.mpred Map gss thm
R15354:15362 compcert.lib.Maps PTree gso thm
R15354:15362 compcert.lib.Maps PTree gso thm
R15354:15362 compcert.lib.Maps PTree gso thm
R15419:15439 VST.floyd.assert_lemmas <> unfold_make_args_cons thm
R15419:15439 VST.floyd.assert_lemmas <> unfold_make_args_cons thm
R15419:15439 VST.floyd.assert_lemmas <> unfold_make_args_cons thm
R15456:15462 VST.veric.mpred <> eval_id def
R15481:15487 VST.veric.mpred Map gso thm
R15481:15487 VST.veric.mpred Map gso thm
R15481:15487 VST.veric.mpred Map gso thm
prf 15541:15555 <> ve_of_make_args
binder 15565:15565 <> i:181
binder 15567:15568 <> fl:182
binder 15570:15571 <> vl:183
binder 15573:15575 <> rho:184
R15605:15613 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15653:15655 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15614:15620 VST.veric.mpred Map get def
R15652:15652 VST.floyd.call_lemmas <> i:181 var
R15623:15627 VST.veric.mpred <> ve_of def
R15630:15638 VST.veric.SeparationLogic <> make_args def
R15646:15648 VST.floyd.call_lemmas <> rho:184 var
R15643:15644 VST.floyd.call_lemmas <> vl:183 var
R15640:15641 VST.floyd.call_lemmas <> fl:182 var
R15656:15659 Coq.Init.Datatypes <> None constr
R15593:15595 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15584:15589 Coq.Lists.List <> length syndef
R15591:15592 VST.floyd.call_lemmas <> fl:182 var
R15596:15601 Coq.Lists.List <> length syndef
R15603:15604 VST.floyd.call_lemmas <> vl:183 var
R15677:15683 VST.veric.mpred Map get def
R15686:15690 VST.veric.mpred <> ve_of def
prf 15815:15829 <> ge_of_make_args
binder 15839:15839 <> i:185
binder 15841:15842 <> fl:186
binder 15844:15845 <> vl:187
binder 15847:15849 <> rho:188
R15895:15897 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15856:15862 VST.veric.mpred Map get def
R15894:15894 VST.floyd.call_lemmas <> i:185 var
R15865:15869 VST.veric.mpred <> ge_of def
R15872:15880 VST.veric.SeparationLogic <> make_args def
R15888:15890 VST.floyd.call_lemmas <> rho:188 var
R15885:15886 VST.floyd.call_lemmas <> vl:187 var
R15882:15883 VST.floyd.call_lemmas <> fl:186 var
R15898:15904 VST.veric.mpred Map get def
R15918:15918 VST.floyd.call_lemmas <> i:185 var
R15907:15911 VST.veric.mpred <> ge_of def
R15913:15915 VST.floyd.call_lemmas <> rho:188 var
prf 15981:15992 <> PROP_combine
binder 16003:16003 <> P:189
binder 16005:16006 <> P':190
binder 16008:16008 <> Q:191
binder 16010:16011 <> Q':192
binder 16013:16013 <> R:193
binder 16015:16016 <> R':194
R16081:16085 Coq.Init.Logic <> ::type_scope:x_'='_x not
R16048:16050 VST.msl.seplog <> ::logic:x_'*'_x not
R16021:16025 VST.floyd.canon <> PROPx def
R16030:16035 VST.floyd.canon <> LOCALx def
R16040:16043 VST.floyd.canon <> SEPx def
R16045:16045 VST.floyd.call_lemmas <> R:193 var
R16037:16037 VST.floyd.call_lemmas <> Q:191 var
R16027:16027 VST.floyd.call_lemmas <> P:189 var
R16051:16055 VST.floyd.canon <> PROPx def
R16061:16066 VST.floyd.canon <> LOCALx def
R16072:16075 VST.floyd.canon <> SEPx def
R16077:16078 VST.floyd.call_lemmas <> R':194 var
R16068:16069 VST.floyd.call_lemmas <> Q':192 var
R16057:16058 VST.floyd.call_lemmas <> P':190 var
R16086:16090 VST.floyd.canon <> PROPx def
R16101:16106 VST.floyd.canon <> LOCALx def
R16117:16120 VST.floyd.canon <> SEPx def
R16124:16125 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R16123:16123 VST.floyd.call_lemmas <> R:193 var
R16126:16127 VST.floyd.call_lemmas <> R':194 var
R16110:16111 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R16109:16109 VST.floyd.call_lemmas <> Q:191 var
R16112:16113 VST.floyd.call_lemmas <> Q':192 var
R16094:16095 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R16093:16093 VST.floyd.call_lemmas <> P:189 var
R16096:16097 VST.floyd.call_lemmas <> P':190 var
R16155:16159 VST.floyd.canon <> PROPx def
R16162:16167 VST.floyd.canon <> LOCALx def
R16170:16173 VST.floyd.canon <> SEPx def
R16176:16180 VST.veric.SeparationLogic <> local def
R16183:16187 VST.veric.mpred <> lift1 def
R16245:16251 Coq.Lists.List <> map_app thm
R16245:16251 Coq.Lists.List <> map_app thm
R16245:16251 Coq.Lists.List <> map_app thm
R16262:16279 VST.floyd.canon <> fold_right_and_app thm
R16262:16279 VST.floyd.canon <> fold_right_and_app thm
R16262:16279 VST.floyd.canon <> fold_right_and_app thm
R16290:16311 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R16290:16311 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R16290:16311 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R16329:16336 VST.msl.Axioms <> prop_ext prfax
R16329:16336 VST.msl.Axioms <> prop_ext prfax
R16354:16374 VST.floyd.canon <> fold_right_sepcon_app thm
R16354:16374 VST.floyd.canon <> fold_right_sepcon_app thm
R16354:16374 VST.floyd.canon <> fold_right_sepcon_app thm
ind 16399:16454 <> Parameter_types_in_funspec_different_from_call_statement
ind 16478:16529 <> Result_type_in_funspec_different_from_call_statement
def 16555:16565 <> check_retty
binder 16567:16567 <> t:199
R16582:16582 VST.floyd.call_lemmas <> t:199 var
R16589:16593 compcert.cfrontend.Ctypes <> Tvoid constr
R16598:16649 VST.floyd.call_lemmas <> Result_type_in_funspec_different_from_call_statement ind
R16676:16681 compcert.cfrontend.Ctypes <> Tarray constr
R16692:16743 VST.floyd.call_lemmas <> Result_type_in_funspec_different_from_call_statement ind
R16775:16778 Coq.Init.Logic <> True ind
prf 16796:16811 <> PROP_LOCAL_SEP_f
binder 16823:16823 <> P:201
binder 16825:16825 <> Q:202
binder 16827:16827 <> R:203
binder 16829:16829 <> f:204
R16864:16871 Coq.Init.Logic <> ::type_scope:x_'='_x not
R16832:16833 VST.veric.lift LiftNotation :::'`('_x_')' not
R16861:16863 VST.veric.lift LiftNotation :::'`('_x_')' not
R16834:16838 VST.floyd.canon <> PROPx def
R16843:16848 VST.floyd.canon <> LOCALx def
R16853:16856 VST.floyd.canon <> SEPx def
R16858:16858 VST.floyd.call_lemmas <> R:203 var
R16850:16850 VST.floyd.call_lemmas <> Q:202 var
R16840:16840 VST.floyd.call_lemmas <> P:201 var
R16863:16863 VST.floyd.call_lemmas <> f:204 var
R16967:16975 VST.msl.seplog <> ::logic:x_'&&'_x not
R16872:16876 VST.veric.SeparationLogic <> local def
R16879:16888 Coq.Lists.List <> fold_right def
R16906:16908 Coq.Lists.List <> map def
R16945:16947 Coq.Lists.List <> map def
R16963:16963 VST.floyd.call_lemmas <> Q:202 var
R16949:16961 VST.floyd.canon <> locald_denote def
R16926:16929 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16919:16925 VST.veric.mpred <> environ ind
binder 16915:16915 <> q:205
R16938:16938 VST.veric.lift LiftNotation :::'`'_x not
R16940:16941 VST.veric.lift LiftNotation :::'`'_x not
R16939:16939 VST.floyd.call_lemmas <> q:205 var
R16941:16941 VST.floyd.call_lemmas <> f:204 var
R16897:16898 VST.veric.lift LiftNotation :::'`('_x_')' not
R16903:16903 VST.veric.lift LiftNotation :::'`('_x_')' not
R16899:16902 Coq.Init.Logic <> True ind
R16890:16891 VST.veric.lift LiftNotation :::'`('_x_')' not
R16895:16895 VST.veric.lift LiftNotation :::'`('_x_')' not
R16892:16894 Coq.Init.Logic <> and ind
R16976:16980 VST.floyd.canon <> PROPx def
R16985:16990 VST.floyd.canon <> LOCALx def
R16997:17000 VST.floyd.canon <> SEPx def
R17002:17002 VST.floyd.call_lemmas <> R:203 var
R16992:16994 Coq.Init.Datatypes <> nil constr
R16982:16982 VST.floyd.call_lemmas <> P:201 var
R17053:17057 VST.floyd.canon <> PROPx def
R17059:17064 VST.floyd.canon <> LOCALx def
R17066:17069 VST.floyd.canon <> SEPx def
R17071:17075 VST.veric.SeparationLogic <> local def
R17077:17080 VST.veric.lift <> lift def
R17082:17086 VST.veric.mpred <> lift1 def
R17088:17092 VST.veric.lift <> liftx def
R17141:17150 Coq.Lists.List <> fold_right def
R17245:17247 Coq.Lists.List <> map def
R17249:17261 VST.floyd.canon <> locald_denote def
R17227:17233 VST.veric.mpred <> environ ind
R17238:17241 Coq.Init.Logic <> True ind
R17172:17175 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17165:17171 VST.veric.mpred <> environ ind
binder 17158:17158 <> x:206
binder 17160:17161 <> x0:207
R17188:17194 VST.veric.mpred <> environ ind
binder 17183:17184 <> x1:208
R17204:17207 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R17200:17200 VST.floyd.call_lemmas <> x:206 var
R17202:17203 VST.floyd.call_lemmas <> x1:208 var
R17208:17209 VST.floyd.call_lemmas <> x0:207 var
R17211:17212 VST.floyd.call_lemmas <> x1:208 var
R17283:17292 Coq.Lists.List <> fold_right def
R17390:17392 Coq.Lists.List <> map def
R17454:17456 Coq.Lists.List <> map def
R17458:17470 VST.floyd.canon <> locald_denote def
R17411:17414 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17404:17410 VST.veric.mpred <> environ ind
binder 17400:17400 <> q:209
R17426:17432 VST.veric.mpred <> environ ind
binder 17422:17422 <> x:210
R17438:17438 VST.floyd.call_lemmas <> q:209 var
R17443:17443 VST.floyd.call_lemmas <> x:210 var
R17369:17375 VST.veric.mpred <> environ ind
R17380:17383 Coq.Init.Logic <> True ind
R17314:17317 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17307:17313 VST.veric.mpred <> environ ind
binder 17300:17300 <> x:211
binder 17302:17303 <> x0:212
R17330:17336 VST.veric.mpred <> environ ind
binder 17325:17326 <> x1:213
R17346:17349 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R17342:17342 VST.floyd.call_lemmas <> x:211 var
R17344:17345 VST.floyd.call_lemmas <> x1:213 var
R17350:17351 VST.floyd.call_lemmas <> x0:212 var
R17353:17354 VST.floyd.call_lemmas <> x1:213 var
R17490:17497 VST.msl.Axioms <> prop_ext prfax
R17141:17150 Coq.Lists.List <> fold_right def
R17245:17247 Coq.Lists.List <> map def
R17249:17261 VST.floyd.canon <> locald_denote def
R17227:17233 VST.veric.mpred <> environ ind
R17238:17241 Coq.Init.Logic <> True ind
R17172:17175 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17165:17171 VST.veric.mpred <> environ ind
binder 17158:17158 <> x:214
binder 17160:17161 <> x0:215
R17188:17194 VST.veric.mpred <> environ ind
binder 17183:17184 <> x1:216
R17204:17207 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R17200:17200 VST.floyd.call_lemmas <> x:214 var
R17202:17203 VST.floyd.call_lemmas <> x1:216 var
R17208:17209 VST.floyd.call_lemmas <> x0:215 var
R17211:17212 VST.floyd.call_lemmas <> x1:216 var
R17283:17292 Coq.Lists.List <> fold_right def
R17390:17392 Coq.Lists.List <> map def
R17454:17456 Coq.Lists.List <> map def
R17458:17470 VST.floyd.canon <> locald_denote def
R17411:17414 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17404:17410 VST.veric.mpred <> environ ind
binder 17400:17400 <> q:217
R17426:17432 VST.veric.mpred <> environ ind
binder 17422:17422 <> x:218
R17438:17438 VST.floyd.call_lemmas <> q:217 var
R17443:17443 VST.floyd.call_lemmas <> x:218 var
R17369:17375 VST.veric.mpred <> environ ind
R17380:17383 Coq.Init.Logic <> True ind
R17314:17317 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17307:17313 VST.veric.mpred <> environ ind
binder 17300:17300 <> x:219
binder 17302:17303 <> x0:220
R17330:17336 VST.veric.mpred <> environ ind
binder 17325:17326 <> x1:221
R17346:17349 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R17342:17342 VST.floyd.call_lemmas <> x:219 var
R17344:17345 VST.floyd.call_lemmas <> x1:221 var
R17350:17351 VST.floyd.call_lemmas <> x0:220 var
R17353:17354 VST.floyd.call_lemmas <> x1:221 var
R17490:17497 VST.msl.Axioms <> prop_ext prfax
R17570:17585 VST.floyd.call_lemmas <> PROP_LOCAL_SEP_f thm
def 17607:17620 <> global_funspec
binder 17622:17626 <> Delta:222
binder 17628:17629 <> id:223
binder 17631:17636 <> argsig:224
binder 17638:17642 <> retty:225
binder 17644:17645 <> cc:226
binder 17647:17647 <> A:227
binder 17649:17651 <> Pre:228
binder 17653:17656 <> Post:229
binder 17658:17662 <> NEPre:230
binder 17664:17669 <> NEPost:231
R17706:17712 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R17699:17701 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17677:17677 compcert.lib.Maps <> :::x_'!'_x not
R17693:17696 compcert.lib.Maps <> :::x_'!'_x not
R17697:17698 VST.floyd.call_lemmas <> id:223 var
R17678:17686 VST.veric.seplog <> var_types def
R17688:17692 VST.floyd.call_lemmas <> Delta:222 var
R17702:17705 Coq.Init.Datatypes <> None constr
R17798:17804 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R17736:17738 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17713:17713 compcert.lib.Maps <> :::x_'!'_x not
R17730:17733 compcert.lib.Maps <> :::x_'!'_x not
R17734:17735 VST.floyd.call_lemmas <> id:223 var
R17714:17723 VST.veric.seplog <> glob_specs def
R17725:17729 VST.floyd.call_lemmas <> Delta:222 var
R17739:17742 Coq.Init.Datatypes <> Some constr
R17745:17754 VST.veric.mpred <> mk_funspec constr
R17791:17796 VST.floyd.call_lemmas <> NEPost:231 var
R17785:17789 VST.floyd.call_lemmas <> NEPre:230 var
R17780:17783 VST.floyd.call_lemmas <> Post:229 var
R17776:17778 VST.floyd.call_lemmas <> Pre:228 var
R17774:17774 VST.floyd.call_lemmas <> A:227 var
R17771:17772 VST.floyd.call_lemmas <> cc:226 var
R17756:17756 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17763:17763 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17769:17769 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17757:17762 VST.floyd.call_lemmas <> argsig:224 var
R17764:17768 VST.floyd.call_lemmas <> retty:225 var
R17828:17830 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17805:17805 compcert.lib.Maps <> :::x_'!'_x not
R17822:17825 compcert.lib.Maps <> :::x_'!'_x not
R17826:17827 VST.floyd.call_lemmas <> id:223 var
R17806:17815 VST.veric.seplog <> glob_types def
R17817:17821 VST.floyd.call_lemmas <> Delta:222 var
R17831:17834 Coq.Init.Datatypes <> Some constr
R17837:17851 VST.veric.mpred <> type_of_funspec def
R17854:17863 VST.veric.mpred <> mk_funspec constr
R17900:17905 VST.floyd.call_lemmas <> NEPost:231 var
R17894:17898 VST.floyd.call_lemmas <> NEPre:230 var
R17889:17892 VST.floyd.call_lemmas <> Post:229 var
R17885:17887 VST.floyd.call_lemmas <> Pre:228 var
R17883:17883 VST.floyd.call_lemmas <> A:227 var
R17880:17881 VST.floyd.call_lemmas <> cc:226 var
R17865:17865 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17872:17872 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17878:17878 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17866:17871 VST.floyd.call_lemmas <> argsig:224 var
R17873:17877 VST.floyd.call_lemmas <> retty:225 var
prf 17917:17930 <> lookup_funspec
binder 17942:17946 <> Delta:232
binder 17948:17949 <> id:233
binder 17951:17956 <> argsig:234
binder 17958:17962 <> retty:235
binder 17964:17965 <> cc:236
binder 17967:17967 <> A:237
binder 17969:17971 <> Pre:238
binder 17973:17976 <> Post:239
binder 17978:17982 <> NEPre:240
binder 17984:17989 <> NEPost:241
R18024:18030 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18116:18122 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18226:18232 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18233:18246 VST.floyd.call_lemmas <> global_funspec def
R18290:18295 VST.floyd.call_lemmas <> NEPost:241 var
R18284:18288 VST.floyd.call_lemmas <> NEPre:240 var
R18279:18282 VST.floyd.call_lemmas <> Post:239 var
R18275:18277 VST.floyd.call_lemmas <> Pre:238 var
R18273:18273 VST.floyd.call_lemmas <> A:237 var
R18270:18271 VST.floyd.call_lemmas <> cc:236 var
R18264:18268 VST.floyd.call_lemmas <> retty:235 var
R18257:18262 VST.floyd.call_lemmas <> argsig:234 var
R18254:18255 VST.floyd.call_lemmas <> id:233 var
R18248:18252 VST.floyd.call_lemmas <> Delta:232 var
R18146:18148 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18123:18123 compcert.lib.Maps <> :::x_'!'_x not
R18140:18143 compcert.lib.Maps <> :::x_'!'_x not
R18144:18145 VST.floyd.call_lemmas <> id:233 var
R18124:18133 VST.veric.seplog <> glob_types def
R18135:18139 VST.floyd.call_lemmas <> Delta:232 var
R18149:18152 Coq.Init.Datatypes <> Some constr
R18155:18169 VST.veric.mpred <> type_of_funspec def
R18172:18181 VST.veric.mpred <> mk_funspec constr
R18218:18223 VST.floyd.call_lemmas <> NEPost:241 var
R18212:18216 VST.floyd.call_lemmas <> NEPre:240 var
R18207:18210 VST.floyd.call_lemmas <> Post:239 var
R18203:18205 VST.floyd.call_lemmas <> Pre:238 var
R18201:18201 VST.floyd.call_lemmas <> A:237 var
R18198:18199 VST.floyd.call_lemmas <> cc:236 var
R18183:18183 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18190:18190 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18196:18196 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18184:18189 VST.floyd.call_lemmas <> argsig:234 var
R18191:18195 VST.floyd.call_lemmas <> retty:235 var
R18054:18056 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18031:18031 compcert.lib.Maps <> :::x_'!'_x not
R18048:18051 compcert.lib.Maps <> :::x_'!'_x not
R18052:18053 VST.floyd.call_lemmas <> id:233 var
R18032:18041 VST.veric.seplog <> glob_specs def
R18043:18047 VST.floyd.call_lemmas <> Delta:232 var
R18057:18060 Coq.Init.Datatypes <> Some constr
R18063:18072 VST.veric.mpred <> mk_funspec constr
R18109:18114 VST.floyd.call_lemmas <> NEPost:241 var
R18103:18107 VST.floyd.call_lemmas <> NEPre:240 var
R18098:18101 VST.floyd.call_lemmas <> Post:239 var
R18094:18096 VST.floyd.call_lemmas <> Pre:238 var
R18092:18092 VST.floyd.call_lemmas <> A:237 var
R18089:18090 VST.floyd.call_lemmas <> cc:236 var
R18074:18074 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18081:18081 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18087:18087 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18075:18080 VST.floyd.call_lemmas <> argsig:234 var
R18082:18086 VST.floyd.call_lemmas <> retty:235 var
R18017:18019 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17995:17995 compcert.lib.Maps <> :::x_'!'_x not
R18011:18014 compcert.lib.Maps <> :::x_'!'_x not
R18015:18016 VST.floyd.call_lemmas <> id:233 var
R17996:18004 VST.veric.seplog <> var_types def
R18006:18010 VST.floyd.call_lemmas <> Delta:232 var
R18020:18023 Coq.Init.Datatypes <> None constr
prf 18340:18364 <> func_ptr'_func_ptr_lifted
R18379:18385 VST.veric.mpred <> funspec ind
binder 18375:18376 <> fs:242
R18399:18400 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18401:18403 compcert.common.Values <> val ind
R18392:18398 VST.veric.mpred <> environ ind
binder 18389:18389 <> e:243
R18417:18418 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18419:18423 VST.veric.mpred <> mpred def
R18410:18416 VST.veric.mpred <> environ ind
binder 18407:18407 <> B:244
R18449:18451 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18445:18447 VST.msl.seplog <> ::logic:x_'*'_x not
R18428:18429 VST.veric.lift LiftNotation :::'`('_x_')' not
R18442:18444 VST.veric.lift LiftNotation :::'`('_x_')' not
R18430:18438 VST.floyd.client_lemmas <> func_ptr' def
R18440:18441 VST.floyd.call_lemmas <> fs:242 var
R18444:18444 VST.floyd.call_lemmas <> e:243 var
R18448:18448 VST.floyd.call_lemmas <> B:244 var
R18468:18471 VST.msl.seplog <> ::logic:x_'&&'_x not
R18452:18453 VST.veric.lift LiftNotation :::'`('_x_')' not
R18465:18467 VST.veric.lift LiftNotation :::'`('_x_')' not
R18454:18461 VST.veric.SeparationLogic <> func_ptr def
R18463:18464 VST.floyd.call_lemmas <> fs:242 var
R18467:18467 VST.floyd.call_lemmas <> e:243 var
R18472:18472 VST.floyd.call_lemmas <> B:244 var
R18530:18538 VST.floyd.client_lemmas <> func_ptr' def
R18586:18601 VST.veric.SeparationLogic <> corable_func_ptr thm
R18556:18575 VST.msl.seplog <> corable_andp_sepcon1 meth
R18556:18575 VST.msl.seplog <> corable_andp_sepcon1 meth
R18586:18601 VST.veric.SeparationLogic <> corable_func_ptr thm
R18556:18575 VST.msl.seplog <> corable_andp_sepcon1 meth
R18612:18621 VST.msl.log_normalize <> emp_sepcon thm
R18612:18621 VST.msl.log_normalize <> emp_sepcon thm
R18612:18621 VST.msl.log_normalize <> emp_sepcon thm
def 18647:18664 <> can_assume_funcptr
binder 18666:18667 <> cs:245
binder 18669:18673 <> Delta:246
binder 18675:18675 <> P:247
binder 18677:18677 <> Q:248
binder 18679:18679 <> R:249
binder 18681:18681 <> a:250
binder 18683:18684 <> fs:251
binder 18697:18701 <> Espec:252
binder 18703:18703 <> c:253
binder 18705:18708 <> Post:254
R18862:18867 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18869:18873 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R18922:18925 VST.floyd.call_lemmas <> Post:254 var
R18920:18920 VST.floyd.call_lemmas <> c:253 var
R18891:18895 VST.floyd.canon <> PROPx def
R18900:18905 VST.floyd.canon <> LOCALx def
R18910:18913 VST.floyd.canon <> SEPx def
R18915:18915 VST.floyd.call_lemmas <> R:249 var
R18907:18907 VST.floyd.call_lemmas <> Q:248 var
R18897:18897 VST.floyd.call_lemmas <> P:247 var
R18884:18888 VST.floyd.call_lemmas <> Delta:246 var
R18878:18882 VST.floyd.call_lemmas <> Espec:252 var
R18875:18876 VST.floyd.call_lemmas <> cs:245 var
R18713:18717 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R18858:18861 VST.floyd.call_lemmas <> Post:254 var
R18856:18856 VST.floyd.call_lemmas <> c:253 var
R18735:18735 VST.msl.seplog <> ::logic:x_'&&'_x not
R18803:18826 VST.msl.seplog <> ::logic:x_'&&'_x not
R18736:18738 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R18745:18747 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R18802:18802 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R18742:18744 compcert.common.Values <> val ind
binder 18739:18739 <> v:255
R18769:18772 VST.msl.seplog <> ::logic:x_'&&'_x not
R18748:18752 VST.veric.mpred <> lift0 def
R18755:18762 VST.veric.SeparationLogic <> func_ptr def
R18767:18767 VST.floyd.call_lemmas <> v:255 var
R18764:18765 VST.floyd.call_lemmas <> fs:251 var
R18773:18777 VST.veric.SeparationLogic <> local def
R18780:18781 VST.veric.lift LiftNotation :::'`('_x_')' not
R18786:18800 VST.veric.lift LiftNotation :::'`('_x_')' not
R18782:18783 Coq.Init.Logic <> eq ind
R18785:18785 VST.floyd.call_lemmas <> v:255 var
R18789:18797 VST.veric.expr <> eval_expr def
R18799:18799 VST.floyd.call_lemmas <> a:250 var
R18827:18831 VST.floyd.canon <> PROPx def
R18836:18841 VST.floyd.canon <> LOCALx def
R18846:18849 VST.floyd.canon <> SEPx def
R18851:18851 VST.floyd.call_lemmas <> R:249 var
R18843:18843 VST.floyd.call_lemmas <> Q:248 var
R18833:18833 VST.floyd.call_lemmas <> P:247 var
R18728:18732 VST.floyd.call_lemmas <> Delta:246 var
R18722:18726 VST.floyd.call_lemmas <> Espec:252 var
R18719:18720 VST.floyd.call_lemmas <> cs:245 var
def 18940:18953 <> OLDcall_setup1
R18963:18971 VST.veric.mpred <> compspecs class
binder 18959:18960 <> cs:256
binder 18974:18978 <> Qtemp:257
binder 18980:18983 <> Qvar:258
binder 18985:18986 <> GV:259
binder 18988:18988 <> a:260
binder 18990:18994 <> Delta:261
binder 18996:18996 <> P:262
binder 18998:18998 <> Q:263
binder 19000:19000 <> R:264
binder 19002:19003 <> R':265
binder 19008:19009 <> fs:266
binder 19011:19016 <> argsig:267
binder 19018:19022 <> retty:268
binder 19024:19025 <> cc:269
R19031:19044 VST.veric.rmaps <> TypeTree ind
binder 19028:19028 <> A:270
binder 19048:19050 <> Pre:271
binder 19052:19055 <> Post:272
binder 19057:19061 <> NEPre:273
binder 19063:19068 <> NEPost:274
R19077:19080 Coq.Init.Datatypes <> list ind
R19082:19085 compcert.cfrontend.Clight <> expr ind
binder 19073:19074 <> bl:275
R19094:19097 Coq.Init.Datatypes <> list ind
R19099:19101 compcert.common.Values <> val ind
binder 19089:19090 <> vl:276
R19177:19182 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19152:19154 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19139:19149 VST.floyd.local2ptree_denote <> local2ptree def
R19151:19151 VST.floyd.call_lemmas <> Q:263 var
R19155:19155 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19161:19162 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19167:19168 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19172:19173 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19176:19176 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19156:19160 VST.floyd.call_lemmas <> Qtemp:257 var
R19163:19166 VST.floyd.call_lemmas <> Qvar:258 var
R19169:19171 Coq.Init.Datatypes <> nil constr
R19174:19175 VST.floyd.call_lemmas <> GV:259 var
R19252:19258 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19183:19193 VST.veric.SeparationLogic <> funspec_sub def
R19199:19208 VST.veric.mpred <> mk_funspec constr
R19245:19250 VST.floyd.call_lemmas <> NEPost:274 var
R19239:19243 VST.floyd.call_lemmas <> NEPre:273 var
R19234:19237 VST.floyd.call_lemmas <> Post:272 var
R19230:19232 VST.floyd.call_lemmas <> Pre:271 var
R19228:19228 VST.floyd.call_lemmas <> A:270 var
R19225:19226 VST.floyd.call_lemmas <> cc:269 var
R19210:19210 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19217:19217 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19223:19223 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19211:19216 VST.floyd.call_lemmas <> argsig:267 var
R19218:19222 VST.floyd.call_lemmas <> retty:268 var
R19195:19196 VST.floyd.call_lemmas <> fs:266 var
R19299:19304 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19259:19276 VST.floyd.call_lemmas <> can_assume_funcptr def
R19297:19298 VST.floyd.call_lemmas <> fs:266 var
R19295:19295 VST.floyd.call_lemmas <> a:260 var
R19292:19293 VST.floyd.call_lemmas <> R':265 var
R19290:19290 VST.floyd.call_lemmas <> Q:263 var
R19288:19288 VST.floyd.call_lemmas <> P:262 var
R19282:19286 VST.floyd.call_lemmas <> Delta:261 var
R19279:19280 VST.floyd.call_lemmas <> cs:256 var
R19368:19376 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19333:19337 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R19305:19309 VST.floyd.canon <> PROPx def
R19314:19319 VST.floyd.canon <> LOCALx def
R19324:19327 VST.floyd.canon <> SEPx def
R19329:19330 VST.floyd.call_lemmas <> R':265 var
R19321:19321 VST.floyd.call_lemmas <> Q:263 var
R19311:19311 VST.floyd.call_lemmas <> P:262 var
R19338:19340 VST.msl.seplog <> ::logic:'|>'_x not
R19341:19345 VST.floyd.canon <> PROPx def
R19350:19355 VST.floyd.canon <> LOCALx def
R19360:19363 VST.floyd.canon <> SEPx def
R19365:19365 VST.floyd.call_lemmas <> R:264 var
R19357:19357 VST.floyd.call_lemmas <> Q:263 var
R19347:19347 VST.floyd.call_lemmas <> P:262 var
R19461:19466 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19404:19406 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19377:19392 compcert.cfrontend.Cop <> classify_fun def
R19395:19400 compcert.cfrontend.Clight <> typeof def
R19402:19402 VST.floyd.call_lemmas <> a:260 var
R19407:19420 compcert.cfrontend.Cop <> fun_case_f constr
R19459:19460 VST.floyd.call_lemmas <> cc:269 var
R19453:19457 VST.floyd.call_lemmas <> retty:268 var
R19423:19443 VST.veric.mpred <> typelist_of_type_list def
R19445:19450 VST.floyd.call_lemmas <> argsig:267 var
R19540:19546 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19467:19473 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R19479:19480 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R19508:19523 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R19539:19539 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R19474:19478 VST.floyd.call_lemmas <> Delta:261 var
R19481:19485 VST.floyd.canon <> PROPx def
R19490:19495 VST.floyd.canon <> LOCALx def
R19500:19503 VST.floyd.canon <> SEPx def
R19505:19505 VST.floyd.call_lemmas <> R:264 var
R19497:19497 VST.floyd.call_lemmas <> Q:263 var
R19487:19487 VST.floyd.call_lemmas <> P:262 var
R19524:19530 VST.veric.SeparationLogic <> tc_expr def
R19538:19538 VST.floyd.call_lemmas <> a:260 var
R19532:19536 VST.floyd.call_lemmas <> Delta:261 var
R19633:19638 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R19547:19553 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R19559:19560 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R19588:19604 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R19632:19632 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R19554:19558 VST.floyd.call_lemmas <> Delta:261 var
R19561:19565 VST.floyd.canon <> PROPx def
R19570:19575 VST.floyd.canon <> LOCALx def
R19580:19583 VST.floyd.canon <> SEPx def
R19585:19585 VST.floyd.call_lemmas <> R:264 var
R19577:19577 VST.floyd.call_lemmas <> Q:263 var
R19567:19567 VST.floyd.call_lemmas <> P:262 var
R19605:19615 VST.veric.SeparationLogic <> tc_exprlist def
R19630:19631 VST.floyd.call_lemmas <> bl:275 var
R19623:19628 VST.floyd.call_lemmas <> argsig:267 var
R19617:19621 VST.floyd.call_lemmas <> Delta:261 var
R19749:19767 Coq.Init.Logic <> ::type_scope:x_'='_x not
R19639:19648 VST.floyd.local2ptree_denote <> force_list def
R19651:19653 Coq.Lists.List <> map def
R19715:19736 VST.floyd.local2ptree_denote <> explicit_cast_exprlist def
R19745:19746 VST.floyd.call_lemmas <> bl:275 var
R19738:19743 VST.floyd.call_lemmas <> argsig:267 var
R19656:19671 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R19690:19691 VST.floyd.call_lemmas <> GV:259 var
R19685:19688 VST.floyd.call_lemmas <> Qvar:258 var
R19679:19683 VST.floyd.call_lemmas <> Qtemp:257 var
R19673:19677 VST.floyd.call_lemmas <> Delta:261 var
R19768:19771 Coq.Init.Datatypes <> Some constr
R19773:19774 VST.floyd.call_lemmas <> vl:276 var
def 19866:19876 <> call_setup1
R19886:19894 VST.veric.mpred <> compspecs class
binder 19882:19883 <> cs:277
binder 19897:19901 <> Qtemp:278
binder 19903:19906 <> Qvar:279
binder 19908:19909 <> GV:280
binder 19911:19911 <> a:281
binder 19913:19917 <> Delta:282
binder 19919:19919 <> P:283
binder 19921:19921 <> Q:284
binder 19923:19923 <> R:285
binder 19935:19936 <> fs:286
binder 19938:19943 <> argsig:287
binder 19945:19949 <> retty:288
binder 19951:19952 <> cc:289
R19958:19971 VST.veric.rmaps <> TypeTree ind
binder 19955:19955 <> A:290
binder 19975:19977 <> Pre:291
binder 19979:19982 <> Post:292
binder 19984:19988 <> NEPre:293
binder 19990:19995 <> NEPost:294
R20004:20007 Coq.Init.Datatypes <> list ind
R20009:20012 compcert.cfrontend.Clight <> expr ind
binder 20000:20001 <> bl:295
R20021:20024 Coq.Init.Datatypes <> list ind
R20026:20028 compcert.common.Values <> val ind
binder 20016:20017 <> vl:296
R20104:20109 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R20079:20081 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20066:20076 VST.floyd.local2ptree_denote <> local2ptree def
R20078:20078 VST.floyd.call_lemmas <> Q:284 var
R20082:20082 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20088:20089 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20094:20095 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20099:20100 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20103:20103 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20083:20087 VST.floyd.call_lemmas <> Qtemp:278 var
R20090:20093 VST.floyd.call_lemmas <> Qvar:279 var
R20096:20098 Coq.Init.Datatypes <> nil constr
R20101:20102 VST.floyd.call_lemmas <> GV:280 var
R20179:20304 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R20110:20120 VST.veric.SeparationLogic <> funspec_sub def
R20126:20135 VST.veric.mpred <> mk_funspec constr
R20172:20177 VST.floyd.call_lemmas <> NEPost:294 var
R20166:20170 VST.floyd.call_lemmas <> NEPre:293 var
R20161:20164 VST.floyd.call_lemmas <> Post:292 var
R20157:20159 VST.floyd.call_lemmas <> Pre:291 var
R20155:20155 VST.floyd.call_lemmas <> A:290 var
R20152:20153 VST.floyd.call_lemmas <> cc:289 var
R20137:20137 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20144:20144 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20150:20150 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R20138:20143 VST.floyd.call_lemmas <> argsig:287 var
R20145:20149 VST.floyd.call_lemmas <> retty:288 var
R20122:20123 VST.floyd.call_lemmas <> fs:286 var
R20344:20352 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R20305:20322 VST.floyd.call_lemmas <> can_assume_funcptr def
R20342:20343 VST.floyd.call_lemmas <> fs:286 var
R20340:20340 VST.floyd.call_lemmas <> a:281 var
R20338:20338 VST.floyd.call_lemmas <> R:285 var
R20336:20336 VST.floyd.call_lemmas <> Q:284 var
R20334:20334 VST.floyd.call_lemmas <> P:283 var
R20328:20332 VST.floyd.call_lemmas <> Delta:282 var
R20325:20326 VST.floyd.call_lemmas <> cs:277 var
R20437:20442 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R20380:20382 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20353:20368 compcert.cfrontend.Cop <> classify_fun def
R20371:20376 compcert.cfrontend.Clight <> typeof def
R20378:20378 VST.floyd.call_lemmas <> a:281 var
R20383:20396 compcert.cfrontend.Cop <> fun_case_f constr
R20435:20436 VST.floyd.call_lemmas <> cc:289 var
R20429:20433 VST.floyd.call_lemmas <> retty:288 var
R20399:20419 VST.veric.mpred <> typelist_of_type_list def
R20421:20426 VST.floyd.call_lemmas <> argsig:287 var
R20516:20522 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R20443:20449 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R20455:20456 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R20484:20499 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R20515:20515 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R20450:20454 VST.floyd.call_lemmas <> Delta:282 var
R20457:20461 VST.floyd.canon <> PROPx def
R20466:20471 VST.floyd.canon <> LOCALx def
R20476:20479 VST.floyd.canon <> SEPx def
R20481:20481 VST.floyd.call_lemmas <> R:285 var
R20473:20473 VST.floyd.call_lemmas <> Q:284 var
R20463:20463 VST.floyd.call_lemmas <> P:283 var
R20500:20506 VST.veric.SeparationLogic <> tc_expr def
R20514:20514 VST.floyd.call_lemmas <> a:281 var
R20508:20512 VST.floyd.call_lemmas <> Delta:282 var
R20609:20614 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R20523:20529 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R20535:20536 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R20564:20580 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R20608:20608 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R20530:20534 VST.floyd.call_lemmas <> Delta:282 var
R20537:20541 VST.floyd.canon <> PROPx def
R20546:20551 VST.floyd.canon <> LOCALx def
R20556:20559 VST.floyd.canon <> SEPx def
R20561:20561 VST.floyd.call_lemmas <> R:285 var
R20553:20553 VST.floyd.call_lemmas <> Q:284 var
R20543:20543 VST.floyd.call_lemmas <> P:283 var
R20581:20591 VST.veric.SeparationLogic <> tc_exprlist def
R20606:20607 VST.floyd.call_lemmas <> bl:295 var
R20599:20604 VST.floyd.call_lemmas <> argsig:287 var
R20593:20597 VST.floyd.call_lemmas <> Delta:282 var
R20725:20743 Coq.Init.Logic <> ::type_scope:x_'='_x not
R20615:20624 VST.floyd.local2ptree_denote <> force_list def
R20627:20629 Coq.Lists.List <> map def
R20691:20712 VST.floyd.local2ptree_denote <> explicit_cast_exprlist def
R20721:20722 VST.floyd.call_lemmas <> bl:295 var
R20714:20719 VST.floyd.call_lemmas <> argsig:287 var
R20632:20647 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R20666:20667 VST.floyd.call_lemmas <> GV:280 var
R20661:20664 VST.floyd.call_lemmas <> Qvar:279 var
R20655:20659 VST.floyd.call_lemmas <> Qtemp:278 var
R20649:20653 VST.floyd.call_lemmas <> Delta:282 var
R20744:20747 Coq.Init.Datatypes <> Some constr
R20749:20750 VST.floyd.call_lemmas <> vl:296 var
prf 20837:20852 <> OLDcall_setup1_i
R20868:20876 VST.veric.mpred <> compspecs class
binder 20864:20865 <> cs:297
binder 20879:20883 <> Delta:298
binder 20885:20885 <> P:299
binder 20887:20887 <> Q:300
binder 20889:20889 <> R:301
binder 20891:20892 <> R':302
R20898:20901 compcert.cfrontend.Clight <> expr ind
binder 20895:20895 <> a:303
R20909:20912 Coq.Init.Datatypes <> list ind
R20914:20917 compcert.cfrontend.Clight <> expr ind
binder 20905:20906 <> bl:304
binder 20923:20927 <> Qtemp:305
binder 20929:20932 <> Qvar:306
binder 20934:20935 <> GV:307
R20941:20943 compcert.common.Values <> val ind
binder 20938:20938 <> v:308
binder 20949:20950 <> fs:309
binder 20952:20957 <> argsig:310
binder 20959:20963 <> retty:311
binder 20965:20966 <> cc:312
R20972:20985 VST.veric.rmaps <> TypeTree ind
binder 20969:20969 <> A:313
binder 20989:20991 <> Pre:314
binder 20993:20996 <> Post:315
binder 20998:21002 <> NEPre:316
binder 21004:21009 <> NEPost:317
R21019:21022 Coq.Init.Datatypes <> list ind
R21024:21026 compcert.common.Values <> val ind
binder 21014:21015 <> vl:318
R21099:21104 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21152:21158 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21198:21206 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21276:21282 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21330:21336 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21421:21426 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21500:21506 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21593:21598 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21735:21816 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21817:21830 VST.floyd.call_lemmas <> OLDcall_setup1 def
R21912:21913 VST.floyd.call_lemmas <> vl:318 var
R21909:21910 VST.floyd.call_lemmas <> bl:304 var
R21902:21907 VST.floyd.call_lemmas <> NEPost:317 var
R21896:21900 VST.floyd.call_lemmas <> NEPre:316 var
R21891:21894 VST.floyd.call_lemmas <> Post:315 var
R21887:21889 VST.floyd.call_lemmas <> Pre:314 var
R21885:21885 VST.floyd.call_lemmas <> A:313 var
R21882:21883 VST.floyd.call_lemmas <> cc:312 var
R21876:21880 VST.floyd.call_lemmas <> retty:311 var
R21869:21874 VST.floyd.call_lemmas <> argsig:310 var
R21866:21867 VST.floyd.call_lemmas <> fs:309 var
R21863:21864 VST.floyd.call_lemmas <> R':302 var
R21861:21861 VST.floyd.call_lemmas <> R:301 var
R21859:21859 VST.floyd.call_lemmas <> Q:300 var
R21857:21857 VST.floyd.call_lemmas <> P:299 var
R21851:21855 VST.floyd.call_lemmas <> Delta:298 var
R21849:21849 VST.floyd.call_lemmas <> a:303 var
R21846:21847 VST.floyd.call_lemmas <> GV:307 var
R21841:21844 VST.floyd.call_lemmas <> Qvar:306 var
R21835:21839 VST.floyd.call_lemmas <> Qtemp:305 var
R21832:21833 VST.floyd.call_lemmas <> cs:297 var
R21709:21727 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21599:21608 VST.floyd.local2ptree_denote <> force_list def
R21611:21613 Coq.Lists.List <> map def
R21675:21696 VST.floyd.local2ptree_denote <> explicit_cast_exprlist def
R21705:21706 VST.floyd.call_lemmas <> bl:304 var
R21698:21703 VST.floyd.call_lemmas <> argsig:310 var
R21616:21631 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R21650:21651 VST.floyd.call_lemmas <> GV:307 var
R21645:21648 VST.floyd.call_lemmas <> Qvar:306 var
R21639:21643 VST.floyd.call_lemmas <> Qtemp:305 var
R21633:21637 VST.floyd.call_lemmas <> Delta:298 var
R21728:21731 Coq.Init.Datatypes <> Some constr
R21733:21734 VST.floyd.call_lemmas <> vl:318 var
R21507:21513 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R21519:21520 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R21548:21564 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R21592:21592 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R21514:21518 VST.floyd.call_lemmas <> Delta:298 var
R21521:21525 VST.floyd.canon <> PROPx def
R21530:21535 VST.floyd.canon <> LOCALx def
R21540:21543 VST.floyd.canon <> SEPx def
R21545:21545 VST.floyd.call_lemmas <> R:301 var
R21537:21537 VST.floyd.call_lemmas <> Q:300 var
R21527:21527 VST.floyd.call_lemmas <> P:299 var
R21565:21575 VST.veric.SeparationLogic <> tc_exprlist def
R21590:21591 VST.floyd.call_lemmas <> bl:304 var
R21583:21588 VST.floyd.call_lemmas <> argsig:310 var
R21577:21581 VST.floyd.call_lemmas <> Delta:298 var
R21427:21433 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R21439:21440 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R21468:21483 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R21499:21499 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R21434:21438 VST.floyd.call_lemmas <> Delta:298 var
R21441:21445 VST.floyd.canon <> PROPx def
R21450:21455 VST.floyd.canon <> LOCALx def
R21460:21463 VST.floyd.canon <> SEPx def
R21465:21465 VST.floyd.call_lemmas <> R:301 var
R21457:21457 VST.floyd.call_lemmas <> Q:300 var
R21447:21447 VST.floyd.call_lemmas <> P:299 var
R21484:21490 VST.veric.SeparationLogic <> tc_expr def
R21498:21498 VST.floyd.call_lemmas <> a:303 var
R21492:21496 VST.floyd.call_lemmas <> Delta:298 var
R21364:21366 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21337:21352 compcert.cfrontend.Cop <> classify_fun def
R21355:21360 compcert.cfrontend.Clight <> typeof def
R21362:21362 VST.floyd.call_lemmas <> a:303 var
R21367:21380 compcert.cfrontend.Cop <> fun_case_f constr
R21419:21420 VST.floyd.call_lemmas <> cc:312 var
R21413:21417 VST.floyd.call_lemmas <> retty:311 var
R21383:21403 VST.veric.mpred <> typelist_of_type_list def
R21405:21410 VST.floyd.call_lemmas <> argsig:310 var
R21303:21307 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R21283:21299 VST.floyd.base <> fold_right_sepcon def
R21301:21302 VST.floyd.call_lemmas <> R':302 var
R21308:21310 VST.msl.seplog <> ::logic:'|>'_x not
R21311:21327 VST.floyd.base <> fold_right_sepcon def
R21329:21329 VST.floyd.call_lemmas <> R:301 var
R21207:21217 VST.veric.SeparationLogic <> funspec_sub def
R21223:21232 VST.veric.mpred <> mk_funspec constr
R21269:21274 VST.floyd.call_lemmas <> NEPost:317 var
R21263:21267 VST.floyd.call_lemmas <> NEPre:316 var
R21258:21261 VST.floyd.call_lemmas <> Post:315 var
R21254:21256 VST.floyd.call_lemmas <> Pre:314 var
R21252:21252 VST.floyd.call_lemmas <> A:313 var
R21249:21250 VST.floyd.call_lemmas <> cc:312 var
R21234:21234 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21241:21241 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21247:21247 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21235:21240 VST.floyd.call_lemmas <> argsig:310 var
R21242:21246 VST.floyd.call_lemmas <> retty:311 var
R21219:21220 VST.floyd.call_lemmas <> fs:309 var
R21179:21184 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R21159:21175 VST.floyd.base <> fold_right_sepcon def
R21177:21178 VST.floyd.call_lemmas <> R':302 var
R21185:21192 VST.veric.SeparationLogic <> func_ptr def
R21197:21197 VST.floyd.call_lemmas <> v:308 var
R21194:21195 VST.floyd.call_lemmas <> fs:309 var
R21143:21145 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21105:21120 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R21142:21142 VST.floyd.call_lemmas <> a:303 var
R21139:21140 VST.floyd.call_lemmas <> GV:307 var
R21134:21137 VST.floyd.call_lemmas <> Qvar:306 var
R21128:21132 VST.floyd.call_lemmas <> Qtemp:305 var
R21122:21126 VST.floyd.call_lemmas <> Delta:298 var
R21146:21149 Coq.Init.Datatypes <> Some constr
R21151:21151 VST.floyd.call_lemmas <> v:308 var
R21074:21076 Coq.Init.Logic <> ::type_scope:x_'='_x not
R21061:21071 VST.floyd.local2ptree_denote <> local2ptree def
R21073:21073 VST.floyd.call_lemmas <> Q:300 var
R21077:21077 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21083:21084 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21089:21090 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21094:21095 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21098:21098 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21078:21082 VST.floyd.call_lemmas <> Qtemp:305 var
R21085:21088 VST.floyd.call_lemmas <> Qvar:306 var
R21091:21093 Coq.Init.Datatypes <> nil constr
R21096:21097 VST.floyd.call_lemmas <> GV:307 var
R21960:21978 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R21960:21978 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R22032:22052 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R22072:22074 Coq.Init.Datatypes <> nil constr
R22032:22052 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R22072:22074 Coq.Init.Datatypes <> nil constr
R22123:22131 VST.floyd.canon <> semax_pre thm
R22123:22131 VST.floyd.canon <> semax_pre thm
R22193:22202 VST.msl.seplog <> andp_right meth
R22215:22224 VST.msl.seplog <> andp_left2 meth
R22193:22202 VST.msl.seplog <> andp_right meth
R22215:22224 VST.msl.seplog <> andp_left2 meth
R22240:22249 VST.msl.seplog <> andp_right meth
R22240:22249 VST.msl.seplog <> andp_right meth
R22265:22274 VST.msl.seplog <> andp_left2 meth
R22265:22274 VST.msl.seplog <> andp_left2 meth
R22265:22274 VST.msl.seplog <> andp_left2 meth
R22265:22274 VST.msl.seplog <> andp_left2 meth
R22265:22274 VST.msl.seplog <> andp_left2 meth
R22295:22298 VST.floyd.canon <> SEPx def
R22301:22305 VST.veric.mpred <> lift0 def
R22360:22364 VST.floyd.canon <> PROPx def
R22367:22372 VST.floyd.canon <> LOCALx def
R22387:22396 VST.msl.log_normalize <> andp_assoc thm
R22399:22408 VST.msl.log_normalize <> later_andp thm
R22417:22428 VST.msl.log_normalize <> andp_derives thm
R22438:22446 VST.msl.seplog <> now_later meth
R22387:22396 VST.msl.log_normalize <> andp_assoc thm
R22387:22396 VST.msl.log_normalize <> andp_assoc thm
R22387:22396 VST.msl.log_normalize <> andp_assoc thm
R22387:22396 VST.msl.log_normalize <> andp_assoc thm
R22399:22408 VST.msl.log_normalize <> later_andp thm
R22399:22408 VST.msl.log_normalize <> later_andp thm
R22417:22428 VST.msl.log_normalize <> andp_derives thm
R22438:22446 VST.msl.seplog <> now_later meth
R22458:22461 VST.floyd.canon <> SEPx def
prf 22489:22501 <> call_setup1_i
R22517:22525 VST.veric.mpred <> compspecs class
binder 22513:22514 <> cs:319
binder 22528:22532 <> Delta:320
binder 22534:22534 <> P:321
binder 22536:22536 <> Q:322
binder 22538:22538 <> R:323
R22551:22554 compcert.cfrontend.Clight <> expr ind
binder 22548:22548 <> a:324
R22562:22565 Coq.Init.Datatypes <> list ind
R22567:22570 compcert.cfrontend.Clight <> expr ind
binder 22558:22559 <> bl:325
binder 22576:22580 <> Qtemp:326
binder 22582:22585 <> Qvar:327
binder 22587:22588 <> GV:328
R22594:22596 compcert.common.Values <> val ind
binder 22591:22591 <> v:329
binder 22602:22603 <> fs:330
binder 22605:22610 <> argsig:331
binder 22612:22616 <> retty:332
binder 22618:22619 <> cc:333
R22625:22638 VST.veric.rmaps <> TypeTree ind
binder 22622:22622 <> A:334
binder 22642:22644 <> Pre:335
binder 22646:22649 <> Post:336
binder 22651:22655 <> NEPre:337
binder 22657:22662 <> NEPost:338
R22672:22675 Coq.Init.Datatypes <> list ind
R22677:22679 compcert.common.Values <> val ind
binder 22667:22668 <> vl:339
R22752:22757 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22805:22860 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22899:22907 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22977:23105 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23190:23195 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23269:23275 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23362:23367 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23504:23585 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23586:23596 VST.floyd.call_lemmas <> call_setup1 def
R23682:23683 VST.floyd.call_lemmas <> vl:339 var
R23679:23680 VST.floyd.call_lemmas <> bl:325 var
R23672:23677 VST.floyd.call_lemmas <> NEPost:338 var
R23666:23670 VST.floyd.call_lemmas <> NEPre:337 var
R23661:23664 VST.floyd.call_lemmas <> Post:336 var
R23657:23659 VST.floyd.call_lemmas <> Pre:335 var
R23655:23655 VST.floyd.call_lemmas <> A:334 var
R23652:23653 VST.floyd.call_lemmas <> cc:333 var
R23646:23650 VST.floyd.call_lemmas <> retty:332 var
R23639:23644 VST.floyd.call_lemmas <> argsig:331 var
R23636:23637 VST.floyd.call_lemmas <> fs:330 var
R23627:23627 VST.floyd.call_lemmas <> R:323 var
R23625:23625 VST.floyd.call_lemmas <> Q:322 var
R23623:23623 VST.floyd.call_lemmas <> P:321 var
R23617:23621 VST.floyd.call_lemmas <> Delta:320 var
R23615:23615 VST.floyd.call_lemmas <> a:324 var
R23612:23613 VST.floyd.call_lemmas <> GV:328 var
R23607:23610 VST.floyd.call_lemmas <> Qvar:327 var
R23601:23605 VST.floyd.call_lemmas <> Qtemp:326 var
R23598:23599 VST.floyd.call_lemmas <> cs:319 var
R23478:23496 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23368:23377 VST.floyd.local2ptree_denote <> force_list def
R23380:23382 Coq.Lists.List <> map def
R23444:23465 VST.floyd.local2ptree_denote <> explicit_cast_exprlist def
R23474:23475 VST.floyd.call_lemmas <> bl:325 var
R23467:23472 VST.floyd.call_lemmas <> argsig:331 var
R23385:23400 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R23419:23420 VST.floyd.call_lemmas <> GV:328 var
R23414:23417 VST.floyd.call_lemmas <> Qvar:327 var
R23408:23412 VST.floyd.call_lemmas <> Qtemp:326 var
R23402:23406 VST.floyd.call_lemmas <> Delta:320 var
R23497:23500 Coq.Init.Datatypes <> Some constr
R23502:23503 VST.floyd.call_lemmas <> vl:339 var
R23276:23282 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R23288:23289 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R23317:23333 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R23361:23361 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R23283:23287 VST.floyd.call_lemmas <> Delta:320 var
R23290:23294 VST.floyd.canon <> PROPx def
R23299:23304 VST.floyd.canon <> LOCALx def
R23309:23312 VST.floyd.canon <> SEPx def
R23314:23314 VST.floyd.call_lemmas <> R:323 var
R23306:23306 VST.floyd.call_lemmas <> Q:322 var
R23296:23296 VST.floyd.call_lemmas <> P:321 var
R23334:23344 VST.veric.SeparationLogic <> tc_exprlist def
R23359:23360 VST.floyd.call_lemmas <> bl:325 var
R23352:23357 VST.floyd.call_lemmas <> argsig:331 var
R23346:23350 VST.floyd.call_lemmas <> Delta:320 var
R23196:23202 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R23208:23209 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R23237:23252 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R23268:23268 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R23203:23207 VST.floyd.call_lemmas <> Delta:320 var
R23210:23214 VST.floyd.canon <> PROPx def
R23219:23224 VST.floyd.canon <> LOCALx def
R23229:23232 VST.floyd.canon <> SEPx def
R23234:23234 VST.floyd.call_lemmas <> R:323 var
R23226:23226 VST.floyd.call_lemmas <> Q:322 var
R23216:23216 VST.floyd.call_lemmas <> P:321 var
R23253:23259 VST.veric.SeparationLogic <> tc_expr def
R23267:23267 VST.floyd.call_lemmas <> a:324 var
R23261:23265 VST.floyd.call_lemmas <> Delta:320 var
R23133:23135 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23106:23121 compcert.cfrontend.Cop <> classify_fun def
R23124:23129 compcert.cfrontend.Clight <> typeof def
R23131:23131 VST.floyd.call_lemmas <> a:324 var
R23136:23149 compcert.cfrontend.Cop <> fun_case_f constr
R23188:23189 VST.floyd.call_lemmas <> cc:333 var
R23182:23186 VST.floyd.call_lemmas <> retty:332 var
R23152:23172 VST.veric.mpred <> typelist_of_type_list def
R23174:23179 VST.floyd.call_lemmas <> argsig:331 var
R22908:22918 VST.veric.SeparationLogic <> funspec_sub def
R22924:22933 VST.veric.mpred <> mk_funspec constr
R22970:22975 VST.floyd.call_lemmas <> NEPost:338 var
R22964:22968 VST.floyd.call_lemmas <> NEPre:337 var
R22959:22962 VST.floyd.call_lemmas <> Post:336 var
R22955:22957 VST.floyd.call_lemmas <> Pre:335 var
R22953:22953 VST.floyd.call_lemmas <> A:334 var
R22950:22951 VST.floyd.call_lemmas <> cc:333 var
R22935:22935 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22942:22942 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22948:22948 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22936:22941 VST.floyd.call_lemmas <> argsig:331 var
R22943:22947 VST.floyd.call_lemmas <> retty:332 var
R22920:22921 VST.floyd.call_lemmas <> fs:330 var
R22880:22885 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R22861:22877 VST.floyd.base <> fold_right_sepcon def
R22879:22879 VST.floyd.call_lemmas <> R:323 var
R22886:22893 VST.veric.SeparationLogic <> func_ptr def
R22898:22898 VST.floyd.call_lemmas <> v:329 var
R22895:22896 VST.floyd.call_lemmas <> fs:330 var
R22796:22798 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22758:22773 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R22795:22795 VST.floyd.call_lemmas <> a:324 var
R22792:22793 VST.floyd.call_lemmas <> GV:328 var
R22787:22790 VST.floyd.call_lemmas <> Qvar:327 var
R22781:22785 VST.floyd.call_lemmas <> Qtemp:326 var
R22775:22779 VST.floyd.call_lemmas <> Delta:320 var
R22799:22802 Coq.Init.Datatypes <> Some constr
R22804:22804 VST.floyd.call_lemmas <> v:329 var
R22727:22729 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22714:22724 VST.floyd.local2ptree_denote <> local2ptree def
R22726:22726 VST.floyd.call_lemmas <> Q:322 var
R22730:22730 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22736:22737 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22742:22743 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22747:22748 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22751:22751 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R22731:22735 VST.floyd.call_lemmas <> Qtemp:326 var
R22738:22741 VST.floyd.call_lemmas <> Qvar:327 var
R22744:22746 Coq.Init.Datatypes <> nil constr
R22749:22750 VST.floyd.call_lemmas <> GV:328 var
R23730:23748 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R23730:23748 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R23807:23827 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R23852:23854 Coq.Init.Datatypes <> nil constr
R23807:23827 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R23852:23854 Coq.Init.Datatypes <> nil constr
R23903:23911 VST.floyd.canon <> semax_pre thm
R23903:23911 VST.floyd.canon <> semax_pre thm
R23973:23982 VST.msl.seplog <> andp_right meth
R23995:24004 VST.msl.seplog <> andp_left2 meth
R23973:23982 VST.msl.seplog <> andp_right meth
R23995:24004 VST.msl.seplog <> andp_left2 meth
R24020:24029 VST.msl.seplog <> andp_right meth
R24020:24029 VST.msl.seplog <> andp_right meth
R24045:24054 VST.msl.seplog <> andp_left2 meth
R24045:24054 VST.msl.seplog <> andp_left2 meth
R24045:24054 VST.msl.seplog <> andp_left2 meth
R24045:24054 VST.msl.seplog <> andp_left2 meth
R24045:24054 VST.msl.seplog <> andp_left2 meth
R24075:24078 VST.floyd.canon <> SEPx def
R24081:24085 VST.veric.mpred <> lift0 def
prf 24273:24289 <> OLDcall_setup1_i2
R24305:24313 VST.veric.mpred <> compspecs class
binder 24301:24302 <> cs:340
binder 24316:24320 <> Delta:341
binder 24322:24322 <> P:342
binder 24324:24324 <> Q:343
binder 24326:24326 <> R:344
binder 24328:24329 <> R':345
R24336:24340 compcert.common.AST <> ident def
binder 24332:24333 <> id:346
R24348:24351 compcert.cfrontend.Ctypes <> type ind
binder 24344:24345 <> ty:347
R24359:24362 Coq.Init.Datatypes <> list ind
R24364:24367 compcert.cfrontend.Clight <> expr ind
binder 24355:24356 <> bl:348
binder 24373:24377 <> Qtemp:349
binder 24379:24382 <> Qvar:350
binder 24384:24385 <> GV:351
binder 24390:24391 <> fs:352
binder 24393:24398 <> argsig:353
binder 24400:24404 <> retty:354
binder 24406:24407 <> cc:355
R24413:24426 VST.veric.rmaps <> TypeTree ind
binder 24410:24410 <> A:356
binder 24430:24432 <> Pre:357
binder 24434:24437 <> Post:358
binder 24439:24443 <> NEPre:359
binder 24445:24450 <> NEPost:360
R24460:24463 Coq.Init.Datatypes <> list ind
R24465:24467 compcert.common.Values <> val ind
binder 24455:24456 <> vl:361
R24540:24546 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24598:24606 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24676:24682 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24746:24754 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24831:24836 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24921:24927 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25014:25019 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25156:25237 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25238:25251 VST.floyd.call_lemmas <> OLDcall_setup1 def
R25344:25345 VST.floyd.call_lemmas <> vl:361 var
R25341:25342 VST.floyd.call_lemmas <> bl:348 var
R25334:25339 VST.floyd.call_lemmas <> NEPost:360 var
R25328:25332 VST.floyd.call_lemmas <> NEPre:359 var
R25323:25326 VST.floyd.call_lemmas <> Post:358 var
R25319:25321 VST.floyd.call_lemmas <> Pre:357 var
R25317:25317 VST.floyd.call_lemmas <> A:356 var
R25314:25315 VST.floyd.call_lemmas <> cc:355 var
R25308:25312 VST.floyd.call_lemmas <> retty:354 var
R25301:25306 VST.floyd.call_lemmas <> argsig:353 var
R25298:25299 VST.floyd.call_lemmas <> fs:352 var
R25295:25296 VST.floyd.call_lemmas <> R':345 var
R25293:25293 VST.floyd.call_lemmas <> R:344 var
R25291:25291 VST.floyd.call_lemmas <> Q:343 var
R25289:25289 VST.floyd.call_lemmas <> P:342 var
R25283:25287 VST.floyd.call_lemmas <> Delta:341 var
R25271:25274 compcert.cfrontend.Clight <> Evar constr
R25279:25280 VST.floyd.call_lemmas <> ty:347 var
R25276:25277 VST.floyd.call_lemmas <> id:346 var
R25267:25268 VST.floyd.call_lemmas <> GV:351 var
R25262:25265 VST.floyd.call_lemmas <> Qvar:350 var
R25256:25260 VST.floyd.call_lemmas <> Qtemp:349 var
R25253:25254 VST.floyd.call_lemmas <> cs:340 var
R25130:25148 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25020:25029 VST.floyd.local2ptree_denote <> force_list def
R25032:25034 Coq.Lists.List <> map def
R25096:25117 VST.floyd.local2ptree_denote <> explicit_cast_exprlist def
R25126:25127 VST.floyd.call_lemmas <> bl:348 var
R25119:25124 VST.floyd.call_lemmas <> argsig:353 var
R25037:25052 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R25071:25072 VST.floyd.call_lemmas <> GV:351 var
R25066:25069 VST.floyd.call_lemmas <> Qvar:350 var
R25060:25064 VST.floyd.call_lemmas <> Qtemp:349 var
R25054:25058 VST.floyd.call_lemmas <> Delta:341 var
R25149:25152 Coq.Init.Datatypes <> Some constr
R25154:25155 VST.floyd.call_lemmas <> vl:361 var
R24928:24934 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R24940:24941 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R24969:24985 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R25013:25013 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R24935:24939 VST.floyd.call_lemmas <> Delta:341 var
R24942:24946 VST.floyd.canon <> PROPx def
R24951:24956 VST.floyd.canon <> LOCALx def
R24961:24964 VST.floyd.canon <> SEPx def
R24966:24966 VST.floyd.call_lemmas <> R:344 var
R24958:24958 VST.floyd.call_lemmas <> Q:343 var
R24948:24948 VST.floyd.call_lemmas <> P:342 var
R24986:24996 VST.veric.SeparationLogic <> tc_exprlist def
R25011:25012 VST.floyd.call_lemmas <> bl:348 var
R25004:25009 VST.floyd.call_lemmas <> argsig:353 var
R24998:25002 VST.floyd.call_lemmas <> Delta:341 var
R24837:24843 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R24849:24850 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R24878:24893 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R24920:24920 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R24844:24848 VST.floyd.call_lemmas <> Delta:341 var
R24851:24855 VST.floyd.canon <> PROPx def
R24860:24865 VST.floyd.canon <> LOCALx def
R24870:24873 VST.floyd.canon <> SEPx def
R24875:24875 VST.floyd.call_lemmas <> R:344 var
R24867:24867 VST.floyd.call_lemmas <> Q:343 var
R24857:24857 VST.floyd.call_lemmas <> P:342 var
R24894:24900 VST.veric.SeparationLogic <> tc_expr def
R24909:24912 compcert.cfrontend.Clight <> Evar constr
R24917:24918 VST.floyd.call_lemmas <> ty:347 var
R24914:24915 VST.floyd.call_lemmas <> id:346 var
R24902:24906 VST.floyd.call_lemmas <> Delta:341 var
R24774:24776 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24755:24770 compcert.cfrontend.Cop <> classify_fun def
R24772:24773 VST.floyd.call_lemmas <> ty:347 var
R24777:24790 compcert.cfrontend.Cop <> fun_case_f constr
R24829:24830 VST.floyd.call_lemmas <> cc:355 var
R24823:24827 VST.floyd.call_lemmas <> retty:354 var
R24793:24813 VST.veric.mpred <> typelist_of_type_list def
R24815:24820 VST.floyd.call_lemmas <> argsig:353 var
R24711:24715 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R24683:24687 VST.floyd.canon <> PROPx def
R24692:24697 VST.floyd.canon <> LOCALx def
R24702:24705 VST.floyd.canon <> SEPx def
R24707:24708 VST.floyd.call_lemmas <> R':345 var
R24699:24699 VST.floyd.call_lemmas <> Q:343 var
R24689:24689 VST.floyd.call_lemmas <> P:342 var
R24716:24718 VST.msl.seplog <> ::logic:'|>'_x not
R24719:24723 VST.floyd.canon <> PROPx def
R24728:24733 VST.floyd.canon <> LOCALx def
R24738:24741 VST.floyd.canon <> SEPx def
R24743:24743 VST.floyd.call_lemmas <> R:344 var
R24735:24735 VST.floyd.call_lemmas <> Q:343 var
R24725:24725 VST.floyd.call_lemmas <> P:342 var
R24607:24617 VST.veric.SeparationLogic <> funspec_sub def
R24623:24632 VST.veric.mpred <> mk_funspec constr
R24669:24674 VST.floyd.call_lemmas <> NEPost:360 var
R24663:24667 VST.floyd.call_lemmas <> NEPre:359 var
R24658:24661 VST.floyd.call_lemmas <> Post:358 var
R24654:24656 VST.floyd.call_lemmas <> Pre:357 var
R24652:24652 VST.floyd.call_lemmas <> A:356 var
R24649:24650 VST.floyd.call_lemmas <> cc:355 var
R24634:24634 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24641:24641 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24647:24647 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24635:24640 VST.floyd.call_lemmas <> argsig:353 var
R24642:24646 VST.floyd.call_lemmas <> retty:354 var
R24619:24620 VST.floyd.call_lemmas <> fs:352 var
R24547:24564 VST.floyd.call_lemmas <> can_assume_funcptr def
R24596:24597 VST.floyd.call_lemmas <> fs:352 var
R24584:24587 compcert.cfrontend.Clight <> Evar constr
R24592:24593 VST.floyd.call_lemmas <> ty:347 var
R24589:24590 VST.floyd.call_lemmas <> id:346 var
R24580:24581 VST.floyd.call_lemmas <> R':345 var
R24578:24578 VST.floyd.call_lemmas <> Q:343 var
R24576:24576 VST.floyd.call_lemmas <> P:342 var
R24570:24574 VST.floyd.call_lemmas <> Delta:341 var
R24567:24568 VST.floyd.call_lemmas <> cs:340 var
R24515:24517 Coq.Init.Logic <> ::type_scope:x_'='_x not
R24502:24512 VST.floyd.local2ptree_denote <> local2ptree def
R24514:24514 VST.floyd.call_lemmas <> Q:343 var
R24518:24518 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24524:24525 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24530:24531 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24535:24536 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24539:24539 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24519:24523 VST.floyd.call_lemmas <> Qtemp:349 var
R24526:24529 VST.floyd.call_lemmas <> Qvar:350 var
R24532:24534 Coq.Init.Datatypes <> nil constr
R24537:24538 VST.floyd.call_lemmas <> GV:351 var
prf 25409:25422 <> call_setup1_i2
R25438:25446 VST.veric.mpred <> compspecs class
binder 25434:25435 <> cs:362
binder 25449:25453 <> Delta:363
binder 25455:25455 <> P:364
binder 25457:25457 <> Q:365
binder 25459:25459 <> R:366
R25473:25477 compcert.common.AST <> ident def
binder 25469:25470 <> id:367
R25485:25488 compcert.cfrontend.Ctypes <> type ind
binder 25481:25482 <> ty:368
R25496:25499 Coq.Init.Datatypes <> list ind
R25501:25504 compcert.cfrontend.Clight <> expr ind
binder 25492:25493 <> bl:369
binder 25510:25514 <> Qtemp:370
binder 25516:25519 <> Qvar:371
binder 25521:25522 <> GV:372
binder 25527:25528 <> fs:373
binder 25530:25535 <> argsig:374
binder 25537:25541 <> retty:375
binder 25543:25544 <> cc:376
R25550:25563 VST.veric.rmaps <> TypeTree ind
binder 25547:25547 <> A:377
binder 25567:25569 <> Pre:378
binder 25571:25574 <> Post:379
binder 25576:25580 <> NEPre:380
binder 25582:25587 <> NEPost:381
R25597:25600 Coq.Init.Datatypes <> list ind
R25602:25604 compcert.common.Values <> val ind
binder 25592:25593 <> vl:382
R25677:25744 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25795:25803 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25873:25955 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26032:26037 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26122:26128 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26215:26220 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26357:26438 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26439:26449 VST.floyd.call_lemmas <> call_setup1 def
R26546:26547 VST.floyd.call_lemmas <> vl:382 var
R26543:26544 VST.floyd.call_lemmas <> bl:369 var
R26536:26541 VST.floyd.call_lemmas <> NEPost:381 var
R26530:26534 VST.floyd.call_lemmas <> NEPre:380 var
R26525:26528 VST.floyd.call_lemmas <> Post:379 var
R26521:26523 VST.floyd.call_lemmas <> Pre:378 var
R26519:26519 VST.floyd.call_lemmas <> A:377 var
R26516:26517 VST.floyd.call_lemmas <> cc:376 var
R26510:26514 VST.floyd.call_lemmas <> retty:375 var
R26503:26508 VST.floyd.call_lemmas <> argsig:374 var
R26500:26501 VST.floyd.call_lemmas <> fs:373 var
R26491:26491 VST.floyd.call_lemmas <> R:366 var
R26489:26489 VST.floyd.call_lemmas <> Q:365 var
R26487:26487 VST.floyd.call_lemmas <> P:364 var
R26481:26485 VST.floyd.call_lemmas <> Delta:363 var
R26469:26472 compcert.cfrontend.Clight <> Evar constr
R26477:26478 VST.floyd.call_lemmas <> ty:368 var
R26474:26475 VST.floyd.call_lemmas <> id:367 var
R26465:26466 VST.floyd.call_lemmas <> GV:372 var
R26460:26463 VST.floyd.call_lemmas <> Qvar:371 var
R26454:26458 VST.floyd.call_lemmas <> Qtemp:370 var
R26451:26452 VST.floyd.call_lemmas <> cs:362 var
R26331:26349 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26221:26230 VST.floyd.local2ptree_denote <> force_list def
R26233:26235 Coq.Lists.List <> map def
R26297:26318 VST.floyd.local2ptree_denote <> explicit_cast_exprlist def
R26327:26328 VST.floyd.call_lemmas <> bl:369 var
R26320:26325 VST.floyd.call_lemmas <> argsig:374 var
R26238:26253 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R26272:26273 VST.floyd.call_lemmas <> GV:372 var
R26267:26270 VST.floyd.call_lemmas <> Qvar:371 var
R26261:26265 VST.floyd.call_lemmas <> Qtemp:370 var
R26255:26259 VST.floyd.call_lemmas <> Delta:363 var
R26350:26353 Coq.Init.Datatypes <> Some constr
R26355:26356 VST.floyd.call_lemmas <> vl:382 var
R26129:26135 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R26141:26142 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R26170:26186 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R26214:26214 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R26136:26140 VST.floyd.call_lemmas <> Delta:363 var
R26143:26147 VST.floyd.canon <> PROPx def
R26152:26157 VST.floyd.canon <> LOCALx def
R26162:26165 VST.floyd.canon <> SEPx def
R26167:26167 VST.floyd.call_lemmas <> R:366 var
R26159:26159 VST.floyd.call_lemmas <> Q:365 var
R26149:26149 VST.floyd.call_lemmas <> P:364 var
R26187:26197 VST.veric.SeparationLogic <> tc_exprlist def
R26212:26213 VST.floyd.call_lemmas <> bl:369 var
R26205:26210 VST.floyd.call_lemmas <> argsig:374 var
R26199:26203 VST.floyd.call_lemmas <> Delta:363 var
R26038:26044 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R26050:26051 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R26079:26094 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R26121:26121 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R26045:26049 VST.floyd.call_lemmas <> Delta:363 var
R26052:26056 VST.floyd.canon <> PROPx def
R26061:26066 VST.floyd.canon <> LOCALx def
R26071:26074 VST.floyd.canon <> SEPx def
R26076:26076 VST.floyd.call_lemmas <> R:366 var
R26068:26068 VST.floyd.call_lemmas <> Q:365 var
R26058:26058 VST.floyd.call_lemmas <> P:364 var
R26095:26101 VST.veric.SeparationLogic <> tc_expr def
R26110:26113 compcert.cfrontend.Clight <> Evar constr
R26118:26119 VST.floyd.call_lemmas <> ty:368 var
R26115:26116 VST.floyd.call_lemmas <> id:367 var
R26103:26107 VST.floyd.call_lemmas <> Delta:363 var
R25975:25977 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25956:25971 compcert.cfrontend.Cop <> classify_fun def
R25973:25974 VST.floyd.call_lemmas <> ty:368 var
R25978:25991 compcert.cfrontend.Cop <> fun_case_f constr
R26030:26031 VST.floyd.call_lemmas <> cc:376 var
R26024:26028 VST.floyd.call_lemmas <> retty:375 var
R25994:26014 VST.veric.mpred <> typelist_of_type_list def
R26016:26021 VST.floyd.call_lemmas <> argsig:374 var
R25804:25814 VST.veric.SeparationLogic <> funspec_sub def
R25820:25829 VST.veric.mpred <> mk_funspec constr
R25866:25871 VST.floyd.call_lemmas <> NEPost:381 var
R25860:25864 VST.floyd.call_lemmas <> NEPre:380 var
R25855:25858 VST.floyd.call_lemmas <> Post:379 var
R25851:25853 VST.floyd.call_lemmas <> Pre:378 var
R25849:25849 VST.floyd.call_lemmas <> A:377 var
R25846:25847 VST.floyd.call_lemmas <> cc:376 var
R25831:25831 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25838:25838 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25844:25844 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25832:25837 VST.floyd.call_lemmas <> argsig:374 var
R25839:25843 VST.floyd.call_lemmas <> retty:375 var
R25816:25817 VST.floyd.call_lemmas <> fs:373 var
R25745:25762 VST.floyd.call_lemmas <> can_assume_funcptr def
R25793:25794 VST.floyd.call_lemmas <> fs:373 var
R25781:25784 compcert.cfrontend.Clight <> Evar constr
R25789:25790 VST.floyd.call_lemmas <> ty:368 var
R25786:25787 VST.floyd.call_lemmas <> id:367 var
R25778:25778 VST.floyd.call_lemmas <> R:366 var
R25776:25776 VST.floyd.call_lemmas <> Q:365 var
R25774:25774 VST.floyd.call_lemmas <> P:364 var
R25768:25772 VST.floyd.call_lemmas <> Delta:363 var
R25765:25766 VST.floyd.call_lemmas <> cs:362 var
R25652:25654 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25639:25649 VST.floyd.local2ptree_denote <> local2ptree def
R25651:25651 VST.floyd.call_lemmas <> Q:365 var
R25655:25655 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25661:25662 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25667:25668 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25672:25673 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25676:25676 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25656:25660 VST.floyd.call_lemmas <> Qtemp:370 var
R25663:25666 VST.floyd.call_lemmas <> Qvar:371 var
R25669:25671 Coq.Init.Datatypes <> nil constr
R25674:25675 VST.floyd.call_lemmas <> GV:372 var
prf 26611:26629 <> can_assume_funcptr1
binder 26642:26643 <> cs:383
binder 26645:26649 <> Delta:384
binder 26651:26651 <> P:385
binder 26653:26653 <> Q:386
binder 26655:26655 <> R:387
binder 26657:26657 <> a:388
binder 26659:26660 <> fs:389
binder 26662:26662 <> v:390
binder 26664:26668 <> Qtemp:391
binder 26670:26673 <> Qvar:392
binder 26675:26676 <> GV:393
R26719:26724 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26772:26778 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26845:26851 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26852:26869 VST.floyd.call_lemmas <> can_assume_funcptr def
R26888:26889 VST.floyd.call_lemmas <> fs:389 var
R26886:26886 VST.floyd.call_lemmas <> a:388 var
R26884:26884 VST.floyd.call_lemmas <> R:387 var
R26882:26882 VST.floyd.call_lemmas <> Q:386 var
R26880:26880 VST.floyd.call_lemmas <> P:385 var
R26874:26878 VST.floyd.call_lemmas <> Delta:384 var
R26871:26872 VST.floyd.call_lemmas <> cs:383 var
R26779:26785 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R26791:26792 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R26820:26824 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R26786:26790 VST.floyd.call_lemmas <> Delta:384 var
R26793:26797 VST.floyd.canon <> PROPx def
R26802:26807 VST.floyd.canon <> LOCALx def
R26812:26815 VST.floyd.canon <> SEPx def
R26817:26817 VST.floyd.call_lemmas <> R:387 var
R26809:26809 VST.floyd.call_lemmas <> Q:386 var
R26799:26799 VST.floyd.call_lemmas <> P:385 var
R26825:26829 VST.veric.mpred <> lift0 def
R26831:26838 VST.veric.SeparationLogic <> func_ptr def
R26843:26843 VST.floyd.call_lemmas <> v:390 var
R26840:26841 VST.floyd.call_lemmas <> fs:389 var
R26763:26765 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26725:26740 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R26762:26762 VST.floyd.call_lemmas <> a:388 var
R26759:26760 VST.floyd.call_lemmas <> GV:393 var
R26754:26757 VST.floyd.call_lemmas <> Qvar:392 var
R26748:26752 VST.floyd.call_lemmas <> Qtemp:391 var
R26742:26746 VST.floyd.call_lemmas <> Delta:384 var
R26766:26769 Coq.Init.Datatypes <> Some constr
R26771:26771 VST.floyd.call_lemmas <> v:390 var
R26694:26696 Coq.Init.Logic <> ::type_scope:x_'='_x not
R26681:26691 VST.floyd.local2ptree_denote <> local2ptree def
R26693:26693 VST.floyd.call_lemmas <> Q:386 var
R26697:26697 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26703:26704 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26709:26710 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26714:26715 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26718:26718 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26698:26702 VST.floyd.call_lemmas <> Qtemp:391 var
R26705:26708 VST.floyd.call_lemmas <> Qvar:392 var
R26711:26713 Coq.Init.Datatypes <> nil constr
R26716:26717 VST.floyd.call_lemmas <> GV:393 var
R26914:26931 VST.floyd.call_lemmas <> can_assume_funcptr def
R26949:26957 VST.floyd.canon <> semax_pre thm
R26949:26957 VST.floyd.canon <> semax_pre thm
R26984:26993 VST.msl.seplog <> andp_right meth
R27006:27015 VST.msl.seplog <> andp_left2 meth
R26984:26993 VST.msl.seplog <> andp_right meth
R27006:27015 VST.msl.seplog <> andp_left2 meth
R27041:27050 VST.msl.seplog <> andp_right meth
R27041:27050 VST.msl.seplog <> andp_right meth
R27074:27092 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R27074:27092 VST.floyd.local2ptree_eval <> msubst_eval_expr_eq thm
R27137:27158 VST.floyd.local2ptree_denote <> local2ptree_soundness' thm
R27137:27158 VST.floyd.local2ptree_denote <> local2ptree_soundness' thm
R27205:27217 VST.msl.seplog <> derives_trans meth
R27205:27217 VST.msl.seplog <> derives_trans meth
R27231:27236 VST.floyd.local2ptree_denote <> LocalD def
R27248:27262 compcert.lib.Maps PTree fold_spec thm
R27248:27262 compcert.lib.Maps PTree fold_spec thm
R27248:27262 compcert.lib.Maps PTree fold_spec thm
R27248:27262 compcert.lib.Maps PTree fold_spec thm
R27248:27262 compcert.lib.Maps PTree fold_spec thm
R27290:27298 Coq.Lists.List <> app_nil_r thm
R27290:27298 Coq.Lists.List <> app_nil_r thm
R27290:27298 Coq.Lists.List <> app_nil_r thm
prf 27319:27337 <> can_assume_funcptr2
binder 27349:27350 <> id:394
binder 27352:27353 <> ty:395
binder 27355:27356 <> cs:396
binder 27358:27362 <> Delta:397
binder 27364:27364 <> P:398
binder 27366:27366 <> Q:399
binder 27368:27368 <> R:400
binder 27370:27371 <> fs:401
R27407:27413 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27447:27453 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27505:27511 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27537:27543 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27544:27561 VST.floyd.call_lemmas <> can_assume_funcptr def
R27591:27592 VST.floyd.call_lemmas <> fs:401 var
R27579:27582 compcert.cfrontend.Clight <> Evar constr
R27587:27588 VST.floyd.call_lemmas <> ty:395 var
R27584:27585 VST.floyd.call_lemmas <> id:394 var
R27576:27576 VST.floyd.call_lemmas <> R:400 var
R27574:27574 VST.floyd.call_lemmas <> Q:399 var
R27572:27572 VST.floyd.call_lemmas <> P:398 var
R27566:27570 VST.floyd.call_lemmas <> Delta:397 var
R27563:27564 VST.floyd.call_lemmas <> cs:396 var
R27514:27517 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27536:27536 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27512:27513 VST.floyd.call_lemmas <> ty:395 var
R27518:27532 VST.veric.mpred <> type_of_funspec def
R27534:27535 VST.floyd.call_lemmas <> fs:401 var
R27477:27479 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27454:27454 compcert.lib.Maps <> :::x_'!'_x not
R27471:27474 compcert.lib.Maps <> :::x_'!'_x not
R27475:27476 VST.floyd.call_lemmas <> id:394 var
R27455:27464 VST.veric.seplog <> glob_types def
R27466:27470 VST.floyd.call_lemmas <> Delta:397 var
R27480:27483 Coq.Init.Datatypes <> Some constr
R27486:27500 VST.veric.mpred <> type_of_funspec def
R27502:27503 VST.floyd.call_lemmas <> fs:401 var
R27437:27439 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27414:27414 compcert.lib.Maps <> :::x_'!'_x not
R27431:27434 compcert.lib.Maps <> :::x_'!'_x not
R27435:27436 VST.floyd.call_lemmas <> id:394 var
R27415:27424 VST.veric.seplog <> glob_specs def
R27426:27430 VST.floyd.call_lemmas <> Delta:397 var
R27440:27443 Coq.Init.Datatypes <> Some constr
R27445:27446 VST.floyd.call_lemmas <> fs:401 var
R27400:27402 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27378:27378 compcert.lib.Maps <> :::x_'!'_x not
R27394:27397 compcert.lib.Maps <> :::x_'!'_x not
R27398:27399 VST.floyd.call_lemmas <> id:394 var
R27379:27387 VST.veric.seplog <> var_types def
R27389:27393 VST.floyd.call_lemmas <> Delta:397 var
R27403:27406 Coq.Init.Datatypes <> None constr
R27609:27626 VST.floyd.call_lemmas <> can_assume_funcptr def
R27645:27656 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_fun_id prfax
R27645:27656 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_fun_id prfax
R27687:27695 VST.floyd.canon <> semax_pre thm
R27687:27695 VST.floyd.canon <> semax_pre thm
R27728:27737 VST.msl.seplog <> andp_right meth
R27750:27759 VST.msl.seplog <> andp_left2 meth
R27768:27777 VST.msl.seplog <> andp_left1 meth
R27728:27737 VST.msl.seplog <> andp_right meth
R27750:27759 VST.msl.seplog <> andp_left2 meth
R27768:27777 VST.msl.seplog <> andp_left1 meth
R27793:27802 VST.msl.seplog <> andp_left2 meth
R27793:27802 VST.msl.seplog <> andp_left2 meth
R27811:27820 VST.msl.seplog <> andp_left2 meth
R27811:27820 VST.msl.seplog <> andp_left2 meth
R27854:27858 VST.veric.SeparationLogic <> local def
R27861:27865 VST.veric.mpred <> lift0 def
R27868:27872 VST.veric.mpred <> lift1 def
R27890:27897 VST.veric.expr <> eval_var def
R27903:27917 VST.veric.mpred <> type_of_funspec def
R27890:27897 VST.veric.expr <> eval_var def
R27903:27917 VST.veric.mpred <> type_of_funspec def
R27935:27944 VST.msl.seplog <> andp_right meth
R27935:27944 VST.msl.seplog <> andp_right meth
R27959:27968 VST.msl.seplog <> prop_right meth
R27959:27968 VST.msl.seplog <> prop_right meth
prf 27999:28023 <> local2ptree_aux_gvarsSome
binder 28033:28034 <> gs:402
binder 28036:28037 <> T1:403
binder 28039:28040 <> T2:404
binder 28042:28042 <> P:405
binder 28044:28044 <> a:406
R28098:28103 Coq.Init.Logic <> ::type_scope:x_'='_x not
R28051:28065 VST.floyd.local2ptree_denote <> local2ptree_aux def
R28091:28094 Coq.Init.Datatypes <> Some constr
R28096:28096 VST.floyd.call_lemmas <> a:406 var
R28088:28088 VST.floyd.call_lemmas <> P:405 var
R28085:28086 VST.floyd.call_lemmas <> T2:404 var
R28082:28083 VST.floyd.call_lemmas <> T1:403 var
R28068:28070 Coq.Lists.List <> map def
R28078:28079 VST.floyd.call_lemmas <> gs:402 var
R28072:28076 VST.floyd.canon <> gvars constr
R28104:28104 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28107:28108 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28111:28112 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28138:28139 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28146:28146 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28105:28106 VST.floyd.call_lemmas <> T1:403 var
R28109:28110 VST.floyd.call_lemmas <> T2:404 var
R28113:28113 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R28132:28136 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R28114:28116 Coq.Lists.List <> rev def
R28118:28120 Coq.Lists.List <> map def
R28129:28130 VST.floyd.call_lemmas <> gs:402 var
R28123:28124 Coq.Init.Logic <> eq ind
R28126:28126 VST.floyd.call_lemmas <> a:406 var
R28137:28137 VST.floyd.call_lemmas <> P:405 var
R28140:28143 Coq.Init.Datatypes <> Some constr
R28145:28145 VST.floyd.call_lemmas <> a:406 var
R28220:28228 Coq.Lists.List <> app_assoc thm
R28220:28228 Coq.Lists.List <> app_assoc thm
R28220:28228 Coq.Lists.List <> app_assoc thm
prf 28253:28277 <> local2ptree_aux_gvarsNone
binder 28280:28281 <> gs:407
binder 28283:28284 <> T1:408
binder 28286:28287 <> T2:409
binder 28289:28289 <> P:410
R28339:28344 Coq.Init.Logic <> ::type_scope:x_'='_x not
R28296:28310 VST.floyd.local2ptree_denote <> local2ptree_aux def
R28335:28338 Coq.Init.Datatypes <> None constr
R28333:28333 VST.floyd.call_lemmas <> P:410 var
R28330:28331 VST.floyd.call_lemmas <> T2:409 var
R28327:28328 VST.floyd.call_lemmas <> T1:408 var
R28313:28315 Coq.Lists.List <> map def
R28323:28324 VST.floyd.call_lemmas <> gs:407 var
R28317:28321 VST.floyd.canon <> gvars constr
R28351:28352 VST.floyd.call_lemmas <> gs:407 var
R28359:28361 Coq.Init.Datatypes <> nil constr
R28366:28366 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28369:28370 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28373:28374 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28376:28377 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28382:28382 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28367:28368 VST.floyd.call_lemmas <> T1:408 var
R28371:28372 VST.floyd.call_lemmas <> T2:409 var
R28375:28375 VST.floyd.call_lemmas <> P:410 var
R28378:28381 Coq.Init.Datatypes <> None constr
R28392:28395 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R28403:28403 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28406:28407 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28410:28411 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28438:28439 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28446:28446 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28404:28405 VST.floyd.call_lemmas <> T1:408 var
R28408:28409 VST.floyd.call_lemmas <> T2:409 var
R28412:28412 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R28432:28436 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R28413:28415 Coq.Lists.List <> rev def
R28417:28419 Coq.Lists.List <> map def
R28422:28423 Coq.Init.Logic <> eq ind
R28437:28437 VST.floyd.call_lemmas <> P:410 var
R28440:28443 Coq.Init.Datatypes <> Some constr
R28493:28517 VST.floyd.call_lemmas <> local2ptree_aux_gvarsSome thm
R28493:28517 VST.floyd.call_lemmas <> local2ptree_aux_gvarsSome thm
prf 28532:28548 <> local2ptree_gvars
binder 28551:28552 <> gs:412
R28585:28590 Coq.Init.Logic <> ::type_scope:x_'='_x not
R28559:28569 VST.floyd.local2ptree_denote <> local2ptree def
R28572:28574 Coq.Lists.List <> map def
R28582:28583 VST.floyd.call_lemmas <> gs:412 var
R28576:28580 VST.floyd.canon <> gvars constr
R28597:28598 VST.floyd.call_lemmas <> gs:412 var
R28605:28607 Coq.Init.Datatypes <> nil constr
R28612:28612 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28623:28624 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28635:28636 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28640:28641 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28646:28646 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28613:28622 compcert.lib.Maps PTree Leaf constr
R28625:28634 compcert.lib.Maps PTree Leaf constr
R28637:28639 Coq.Init.Datatypes <> nil constr
R28642:28645 Coq.Init.Datatypes <> None constr
R28656:28659 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R28667:28667 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28678:28679 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28690:28691 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28711:28712 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28719:28719 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28668:28677 compcert.lib.Maps PTree Leaf constr
R28680:28689 compcert.lib.Maps PTree Leaf constr
R28692:28694 Coq.Lists.List <> rev def
R28696:28698 Coq.Lists.List <> map def
R28701:28702 Coq.Init.Logic <> eq ind
R28713:28716 Coq.Init.Datatypes <> Some constr
R28748:28758 VST.floyd.local2ptree_denote <> local2ptree def
R28769:28793 VST.floyd.call_lemmas <> local2ptree_aux_gvarsNone thm
R28769:28793 VST.floyd.call_lemmas <> local2ptree_aux_gvarsNone thm
R28769:28793 VST.floyd.call_lemmas <> local2ptree_aux_gvarsNone thm
R28823:28831 Coq.Lists.List <> app_nil_r thm
R28823:28831 Coq.Lists.List <> app_nil_r thm
R28823:28831 Coq.Lists.List <> app_nil_r thm
R28823:28831 Coq.Lists.List <> app_nil_r thm
def 28860:28870 <> call_setup2
R28879:28887 VST.veric.mpred <> compspecs class
binder 28875:28876 <> cs:414
binder 28890:28894 <> Qtemp:415
binder 28896:28899 <> Qvar:416
binder 28901:28902 <> GV:417
binder 28904:28904 <> a:418
binder 28906:28910 <> Delta:419
binder 28912:28912 <> P:420
binder 28914:28914 <> Q:421
binder 28916:28916 <> R:422
binder 28918:28919 <> R':423
binder 28924:28925 <> fs:424
binder 28927:28932 <> argsig:425
binder 28934:28938 <> retty:426
binder 28940:28941 <> cc:427
binder 28943:28944 <> ts:428
R28950:28963 VST.veric.rmaps <> TypeTree ind
binder 28947:28947 <> A:429
binder 28967:28969 <> Pre:430
binder 28971:28974 <> Post:431
binder 28976:28980 <> NEPre:432
binder 28982:28987 <> NEPost:433
R28996:28999 Coq.Init.Datatypes <> list ind
R29001:29004 compcert.cfrontend.Clight <> expr ind
binder 28992:28993 <> bl:434
R29013:29016 Coq.Init.Datatypes <> list ind
R29018:29020 compcert.common.Values <> val ind
binder 29008:29009 <> vl:435
R29064:29098 VST.msl.functors MixVariantFunctor _functor proj
R29140:29144 VST.veric.mpred <> mpred def
R29101:29132 VST.veric.rmaps <> dependent_type_functor_rec def
R29137:29137 VST.floyd.call_lemmas <> A:429 var
R29134:29135 VST.floyd.call_lemmas <> ts:428 var
binder 29055:29061 <> witness:436
R29157:29160 Coq.Init.Datatypes <> list ind
R29162:29166 VST.veric.mpred <> mpred def
binder 29150:29154 <> Frame:437
R29178:29181 Coq.Init.Datatypes <> list ind
binder 29172:29175 <> Ppre:438
R29223:29226 Coq.Init.Datatypes <> list ind
R29228:29232 VST.veric.mpred <> mpred def
binder 29217:29220 <> Rpre:439
binder 29265:29267 <> GV':440
binder 29269:29270 <> gv:441
binder 29272:29275 <> args:442
R29378:29395 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29281:29291 VST.floyd.call_lemmas <> call_setup1 def
R29376:29377 VST.floyd.call_lemmas <> vl:435 var
R29373:29374 VST.floyd.call_lemmas <> bl:434 var
R29366:29371 VST.floyd.call_lemmas <> NEPost:433 var
R29360:29364 VST.floyd.call_lemmas <> NEPre:432 var
R29355:29358 VST.floyd.call_lemmas <> Post:431 var
R29351:29353 VST.floyd.call_lemmas <> Pre:430 var
R29349:29349 VST.floyd.call_lemmas <> A:429 var
R29346:29347 VST.floyd.call_lemmas <> cc:427 var
R29340:29344 VST.floyd.call_lemmas <> retty:426 var
R29333:29338 VST.floyd.call_lemmas <> argsig:425 var
R29330:29331 VST.floyd.call_lemmas <> fs:424 var
R29327:29328 VST.floyd.call_lemmas <> R':423 var
R29320:29320 VST.floyd.call_lemmas <> Q:421 var
R29318:29318 VST.floyd.call_lemmas <> P:420 var
R29312:29316 VST.floyd.call_lemmas <> Delta:419 var
R29310:29310 VST.floyd.call_lemmas <> a:418 var
R29307:29308 VST.floyd.call_lemmas <> GV:417 var
R29302:29305 VST.floyd.call_lemmas <> Qvar:416 var
R29296:29300 VST.floyd.call_lemmas <> Qtemp:415 var
R29293:29294 VST.floyd.call_lemmas <> cs:414 var
R29459:29528 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29424:29428 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R29396:29400 VST.floyd.canon <> PROPx def
R29405:29410 VST.floyd.canon <> LOCALx def
R29415:29418 VST.floyd.canon <> SEPx def
R29420:29421 VST.floyd.call_lemmas <> R':423 var
R29412:29412 VST.floyd.call_lemmas <> Q:421 var
R29402:29402 VST.floyd.call_lemmas <> P:420 var
R29429:29431 VST.msl.seplog <> ::logic:'|>'_x not
R29432:29436 VST.floyd.canon <> PROPx def
R29441:29446 VST.floyd.canon <> LOCALx def
R29451:29454 VST.floyd.canon <> SEPx def
R29456:29456 VST.floyd.call_lemmas <> R:422 var
R29448:29448 VST.floyd.call_lemmas <> Q:421 var
R29438:29438 VST.floyd.call_lemmas <> P:420 var
R29586:29656 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29543:29545 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29529:29531 VST.floyd.call_lemmas <> Pre:430 var
R29536:29542 VST.floyd.call_lemmas <> witness:436 var
R29533:29534 VST.floyd.call_lemmas <> ts:428 var
R29546:29550 VST.floyd.canon <> PROPx def
R29558:29564 VST.floyd.client_lemmas <> LAMBDAx syndef
R29569:29572 VST.floyd.call_lemmas <> args:442 var
R29566:29567 VST.floyd.call_lemmas <> gv:441 var
R29575:29578 VST.floyd.canon <> SEPx def
R29580:29583 VST.floyd.call_lemmas <> Rpre:439 var
R29552:29555 VST.floyd.call_lemmas <> Ppre:438 var
R29723:29873 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29683:29685 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29657:29667 VST.floyd.local2ptree_denote <> local2ptree def
R29670:29672 Coq.Lists.List <> map def
R29680:29681 VST.floyd.call_lemmas <> gv:441 var
R29674:29678 VST.floyd.canon <> gvars constr
R29686:29686 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29697:29698 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29712:29713 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29717:29718 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29722:29722 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29687:29696 compcert.lib.Maps PTree Leaf constr
R29699:29709 compcert.lib.Maps PTree empty def
R29714:29716 Coq.Init.Datatypes <> nil constr
R29719:29721 VST.floyd.call_lemmas <> GV':440 var
R29956:29961 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29874:29880 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29886:29887 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29916:29920 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R29881:29885 VST.floyd.call_lemmas <> Delta:419 var
R29888:29892 VST.floyd.canon <> PROPx def
R29897:29902 VST.floyd.canon <> LOCALx def
R29907:29910 VST.floyd.canon <> SEPx def
R29912:29913 VST.floyd.call_lemmas <> R':423 var
R29904:29904 VST.floyd.call_lemmas <> Q:421 var
R29894:29894 VST.floyd.call_lemmas <> P:420 var
R29921:29924 VST.msl.seplog <> ::logic:'!!'_x not
R29955:29955 VST.msl.seplog <> ::logic:'!!'_x not
R29950:29950 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29925:29930 Coq.Lists.List <> firstn def
R29948:29949 VST.floyd.call_lemmas <> vl:435 var
R29933:29938 Coq.Lists.List <> length syndef
R29940:29945 VST.floyd.call_lemmas <> argsig:425 var
R29951:29954 VST.floyd.call_lemmas <> args:442 var
R29985:29990 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29962:29977 VST.floyd.call_lemmas <> check_gvars_spec def
R29982:29984 VST.floyd.call_lemmas <> GV':440 var
R29979:29980 VST.floyd.call_lemmas <> GV:417 var
R30010:30014 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R29991:30007 VST.floyd.base <> fold_right_sepcon def
R30009:30009 VST.floyd.call_lemmas <> R:422 var
R30037:30039 VST.msl.seplog <> ::logic:x_'*'_x not
R30015:30031 VST.floyd.base <> fold_right_sepcon def
R30033:30036 VST.floyd.call_lemmas <> Rpre:439 var
R30040:30056 VST.floyd.base <> fold_right_sepcon def
R30058:30062 VST.floyd.call_lemmas <> Frame:437 var
prf 30072:30084 <> call_setup2_i
R30101:30109 VST.veric.mpred <> compspecs class
binder 30097:30098 <> cs:443
binder 30112:30116 <> Qtemp:444
binder 30118:30121 <> Qvar:445
binder 30123:30124 <> GV:446
binder 30126:30126 <> a:447
binder 30128:30132 <> Delta:448
binder 30134:30134 <> P:449
binder 30136:30136 <> Q:450
binder 30138:30138 <> R:451
binder 30140:30141 <> R':452
binder 30146:30147 <> fs:453
binder 30149:30154 <> argsig:454
binder 30156:30160 <> retty:455
binder 30162:30163 <> cc:456
binder 30165:30166 <> ts:457
R30172:30185 VST.veric.rmaps <> TypeTree ind
binder 30169:30169 <> A:458
binder 30188:30190 <> Pre:459
binder 30192:30195 <> Post:460
binder 30197:30201 <> NEPre:461
binder 30203:30208 <> NEPost:462
R30217:30220 Coq.Init.Datatypes <> list ind
R30222:30225 compcert.cfrontend.Clight <> expr ind
binder 30213:30214 <> bl:463
R30234:30237 Coq.Init.Datatypes <> list ind
R30239:30241 compcert.common.Values <> val ind
binder 30229:30230 <> vl:464
R30285:30295 VST.floyd.call_lemmas <> call_setup1 def
R30380:30381 VST.floyd.call_lemmas <> vl:464 var
R30377:30378 VST.floyd.call_lemmas <> bl:463 var
R30370:30375 VST.floyd.call_lemmas <> NEPost:462 var
R30364:30368 VST.floyd.call_lemmas <> NEPre:461 var
R30359:30362 VST.floyd.call_lemmas <> Post:460 var
R30355:30357 VST.floyd.call_lemmas <> Pre:459 var
R30353:30353 VST.floyd.call_lemmas <> A:458 var
R30350:30351 VST.floyd.call_lemmas <> cc:456 var
R30344:30348 VST.floyd.call_lemmas <> retty:455 var
R30337:30342 VST.floyd.call_lemmas <> argsig:454 var
R30334:30335 VST.floyd.call_lemmas <> fs:453 var
R30331:30332 VST.floyd.call_lemmas <> R':452 var
R30324:30324 VST.floyd.call_lemmas <> Q:450 var
R30322:30322 VST.floyd.call_lemmas <> P:449 var
R30316:30320 VST.floyd.call_lemmas <> Delta:448 var
R30314:30314 VST.floyd.call_lemmas <> a:447 var
R30311:30312 VST.floyd.call_lemmas <> GV:446 var
R30306:30309 VST.floyd.call_lemmas <> Qvar:445 var
R30300:30304 VST.floyd.call_lemmas <> Qtemp:444 var
R30297:30298 VST.floyd.call_lemmas <> cs:443 var
binder 30277:30282 <> SETUP1:465
R30410:30444 VST.msl.functors MixVariantFunctor _functor proj
R30486:30490 VST.veric.mpred <> mpred def
R30447:30478 VST.veric.rmaps <> dependent_type_functor_rec def
R30483:30483 VST.floyd.call_lemmas <> A:458 var
R30480:30481 VST.floyd.call_lemmas <> ts:457 var
binder 30400:30407 <> witness':466
R30503:30506 Coq.Init.Datatypes <> list ind
R30508:30512 VST.veric.mpred <> mpred def
binder 30496:30500 <> Frame:467
R30524:30527 Coq.Init.Datatypes <> list ind
binder 30518:30521 <> Ppre:468
R30569:30572 Coq.Init.Datatypes <> list ind
R30574:30578 VST.veric.mpred <> mpred def
binder 30563:30566 <> Rpre:469
binder 30611:30613 <> GV':470
binder 30615:30616 <> gv:471
binder 30618:30621 <> args:472
R30809:30814 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30881:31032 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31115:31121 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31185:31190 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31214:31219 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31292:31297 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31298:31308 VST.floyd.call_lemmas <> call_setup2 def
R31470:31473 VST.floyd.call_lemmas <> args:472 var
R31467:31468 VST.floyd.call_lemmas <> gv:471 var
R31463:31465 VST.floyd.call_lemmas <> GV':470 var
R31444:31447 VST.floyd.call_lemmas <> Rpre:469 var
R31430:31433 VST.floyd.call_lemmas <> Ppre:468 var
R31424:31428 VST.floyd.call_lemmas <> Frame:467 var
R31415:31422 VST.floyd.call_lemmas <> witness':466 var
R31393:31394 VST.floyd.call_lemmas <> vl:464 var
R31390:31391 VST.floyd.call_lemmas <> bl:463 var
R31383:31388 VST.floyd.call_lemmas <> NEPost:462 var
R31377:31381 VST.floyd.call_lemmas <> NEPre:461 var
R31372:31375 VST.floyd.call_lemmas <> Post:460 var
R31368:31370 VST.floyd.call_lemmas <> Pre:459 var
R31366:31366 VST.floyd.call_lemmas <> A:458 var
R31363:31364 VST.floyd.call_lemmas <> ts:457 var
R31360:31361 VST.floyd.call_lemmas <> cc:456 var
R31354:31358 VST.floyd.call_lemmas <> retty:455 var
R31347:31352 VST.floyd.call_lemmas <> argsig:454 var
R31344:31345 VST.floyd.call_lemmas <> fs:453 var
R31341:31342 VST.floyd.call_lemmas <> R':452 var
R31339:31339 VST.floyd.call_lemmas <> R:451 var
R31337:31337 VST.floyd.call_lemmas <> Q:450 var
R31335:31335 VST.floyd.call_lemmas <> P:449 var
R31329:31333 VST.floyd.call_lemmas <> Delta:448 var
R31327:31327 VST.floyd.call_lemmas <> a:447 var
R31324:31325 VST.floyd.call_lemmas <> GV:446 var
R31319:31322 VST.floyd.call_lemmas <> Qvar:445 var
R31313:31317 VST.floyd.call_lemmas <> Qtemp:444 var
R31310:31311 VST.floyd.call_lemmas <> cs:443 var
R31239:31243 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R31220:31236 VST.floyd.base <> fold_right_sepcon def
R31238:31238 VST.floyd.call_lemmas <> R:451 var
R31266:31268 VST.msl.seplog <> ::logic:x_'*'_x not
R31244:31260 VST.floyd.base <> fold_right_sepcon def
R31262:31265 VST.floyd.call_lemmas <> Rpre:469 var
R31269:31285 VST.floyd.base <> fold_right_sepcon def
R31287:31291 VST.floyd.call_lemmas <> Frame:467 var
R31191:31206 VST.floyd.call_lemmas <> check_gvars_spec def
R31211:31213 VST.floyd.call_lemmas <> GV':470 var
R31208:31209 VST.floyd.call_lemmas <> GV:446 var
R31150:31154 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R31122:31126 VST.floyd.canon <> PROPx def
R31131:31136 VST.floyd.canon <> LOCALx def
R31141:31144 VST.floyd.canon <> SEPx def
R31146:31147 VST.floyd.call_lemmas <> R':452 var
R31138:31138 VST.floyd.call_lemmas <> Q:450 var
R31128:31128 VST.floyd.call_lemmas <> P:449 var
R31155:31157 VST.msl.seplog <> ::logic:'|>'_x not
R31158:31162 VST.floyd.canon <> PROPx def
R31167:31172 VST.floyd.canon <> LOCALx def
R31177:31180 VST.floyd.canon <> SEPx def
R31182:31182 VST.floyd.call_lemmas <> R:451 var
R31174:31174 VST.floyd.call_lemmas <> Q:450 var
R31164:31164 VST.floyd.call_lemmas <> P:449 var
R31033:31039 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R31045:31046 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R31075:31079 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R31040:31044 VST.floyd.call_lemmas <> Delta:448 var
R31047:31051 VST.floyd.canon <> PROPx def
R31056:31061 VST.floyd.canon <> LOCALx def
R31066:31069 VST.floyd.canon <> SEPx def
R31071:31072 VST.floyd.call_lemmas <> R':452 var
R31063:31063 VST.floyd.call_lemmas <> Q:450 var
R31053:31053 VST.floyd.call_lemmas <> P:449 var
R31080:31083 VST.msl.seplog <> ::logic:'!!'_x not
R31114:31114 VST.msl.seplog <> ::logic:'!!'_x not
R31109:31109 Coq.Init.Logic <> ::type_scope:x_'='_x not
R31084:31089 Coq.Lists.List <> firstn def
R31107:31108 VST.floyd.call_lemmas <> vl:464 var
R31092:31097 Coq.Lists.List <> length syndef
R31099:31104 VST.floyd.call_lemmas <> argsig:454 var
R31110:31113 VST.floyd.call_lemmas <> args:472 var
R30841:30843 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30815:30825 VST.floyd.local2ptree_denote <> local2ptree def
R30828:30830 Coq.Lists.List <> map def
R30838:30839 VST.floyd.call_lemmas <> gv:471 var
R30832:30836 VST.floyd.canon <> gvars constr
R30844:30844 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30855:30856 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30870:30871 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30875:30876 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30880:30880 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30845:30854 compcert.lib.Maps PTree Leaf constr
R30857:30867 compcert.lib.Maps PTree empty def
R30872:30874 Coq.Init.Datatypes <> nil constr
R30877:30879 VST.floyd.call_lemmas <> GV':470 var
R30766:30768 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30751:30753 VST.floyd.call_lemmas <> Pre:459 var
R30758:30765 VST.floyd.call_lemmas <> witness':466 var
R30755:30756 VST.floyd.call_lemmas <> ts:457 var
R30769:30773 VST.floyd.canon <> PROPx def
R30781:30787 VST.floyd.client_lemmas <> LAMBDAx syndef
R30792:30795 VST.floyd.call_lemmas <> args:472 var
R30789:30790 VST.floyd.call_lemmas <> gv:471 var
R30798:30801 VST.floyd.canon <> SEPx def
R30803:30806 VST.floyd.call_lemmas <> Rpre:469 var
R30775:30778 VST.floyd.call_lemmas <> Ppre:468 var
def 31542:31556 <> call_setup2_nil
R31566:31574 VST.veric.mpred <> compspecs class
binder 31562:31563 <> cs:473
binder 31577:31581 <> Qtemp:474
binder 31583:31586 <> Qvar:475
binder 31588:31589 <> GV:476
binder 31591:31591 <> a:477
binder 31593:31597 <> Delta:478
binder 31599:31599 <> P:479
binder 31601:31601 <> Q:480
binder 31603:31603 <> R:481
binder 31605:31606 <> R':482
binder 31611:31612 <> fs:483
binder 31614:31619 <> argsig:484
binder 31621:31625 <> retty:485
binder 31627:31628 <> cc:486
R31634:31647 VST.veric.rmaps <> TypeTree ind
binder 31631:31631 <> A:487
binder 31651:31653 <> Pre:488
binder 31655:31658 <> Post:489
binder 31660:31664 <> NEPre:490
binder 31666:31671 <> NEPost:491
R31680:31683 Coq.Init.Datatypes <> list ind
R31685:31688 compcert.cfrontend.Clight <> expr ind
binder 31676:31677 <> bl:492
R31697:31700 Coq.Init.Datatypes <> list ind
R31702:31704 compcert.common.Values <> val ind
binder 31692:31693 <> vl:493
R31748:31782 VST.msl.functors MixVariantFunctor _functor proj
R31825:31829 VST.veric.mpred <> mpred def
R31785:31816 VST.veric.rmaps <> dependent_type_functor_rec def
R31822:31822 VST.floyd.call_lemmas <> A:487 var
R31818:31820 Coq.Init.Datatypes <> nil constr
binder 31739:31745 <> witness:494
R31842:31845 Coq.Init.Datatypes <> list ind
R31847:31851 VST.veric.mpred <> mpred def
binder 31835:31839 <> Frame:495
R31863:31866 Coq.Init.Datatypes <> list ind
binder 31857:31860 <> Ppre:496
R31908:31911 Coq.Init.Datatypes <> list ind
R31913:31917 VST.veric.mpred <> mpred def
binder 31902:31905 <> Rpre:497
binder 31950:31952 <> GV':498
binder 31954:31955 <> gv:499
binder 31957:31960 <> args:500
R32062:32079 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R31965:31975 VST.floyd.call_lemmas <> call_setup1 def
R32060:32061 VST.floyd.call_lemmas <> vl:493 var
R32057:32058 VST.floyd.call_lemmas <> bl:492 var
R32050:32055 VST.floyd.call_lemmas <> NEPost:491 var
R32044:32048 VST.floyd.call_lemmas <> NEPre:490 var
R32039:32042 VST.floyd.call_lemmas <> Post:489 var
R32035:32037 VST.floyd.call_lemmas <> Pre:488 var
R32033:32033 VST.floyd.call_lemmas <> A:487 var
R32030:32031 VST.floyd.call_lemmas <> cc:486 var
R32024:32028 VST.floyd.call_lemmas <> retty:485 var
R32017:32022 VST.floyd.call_lemmas <> argsig:484 var
R32014:32015 VST.floyd.call_lemmas <> fs:483 var
R32011:32012 VST.floyd.call_lemmas <> R':482 var
R32004:32004 VST.floyd.call_lemmas <> Q:480 var
R32002:32002 VST.floyd.call_lemmas <> P:479 var
R31996:32000 VST.floyd.call_lemmas <> Delta:478 var
R31994:31994 VST.floyd.call_lemmas <> a:477 var
R31991:31992 VST.floyd.call_lemmas <> GV:476 var
R31986:31989 VST.floyd.call_lemmas <> Qvar:475 var
R31980:31984 VST.floyd.call_lemmas <> Qtemp:474 var
R31977:31978 VST.floyd.call_lemmas <> cs:473 var
R32143:32274 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R32108:32112 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R32080:32084 VST.floyd.canon <> PROPx def
R32089:32094 VST.floyd.canon <> LOCALx def
R32099:32102 VST.floyd.canon <> SEPx def
R32104:32105 VST.floyd.call_lemmas <> R':482 var
R32096:32096 VST.floyd.call_lemmas <> Q:480 var
R32086:32086 VST.floyd.call_lemmas <> P:479 var
R32113:32115 VST.msl.seplog <> ::logic:'|>'_x not
R32116:32120 VST.floyd.canon <> PROPx def
R32125:32130 VST.floyd.canon <> LOCALx def
R32135:32138 VST.floyd.canon <> SEPx def
R32140:32140 VST.floyd.call_lemmas <> R:481 var
R32132:32132 VST.floyd.call_lemmas <> Q:480 var
R32122:32122 VST.floyd.call_lemmas <> P:479 var
R32333:32338 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R32290:32292 Coq.Init.Logic <> ::type_scope:x_'='_x not
R32275:32277 VST.floyd.call_lemmas <> Pre:488 var
R32283:32289 VST.floyd.call_lemmas <> witness:494 var
R32279:32281 Coq.Init.Datatypes <> nil constr
R32293:32297 VST.floyd.canon <> PROPx def
R32305:32311 VST.floyd.client_lemmas <> LAMBDAx syndef
R32316:32319 VST.floyd.call_lemmas <> args:500 var
R32313:32314 VST.floyd.call_lemmas <> gv:499 var
R32322:32325 VST.floyd.canon <> SEPx def
R32327:32330 VST.floyd.call_lemmas <> Rpre:497 var
R32299:32302 VST.floyd.call_lemmas <> Ppre:496 var
R32405:32557 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R32365:32367 Coq.Init.Logic <> ::type_scope:x_'='_x not
R32339:32349 VST.floyd.local2ptree_denote <> local2ptree def
R32352:32354 Coq.Lists.List <> map def
R32362:32363 VST.floyd.call_lemmas <> gv:499 var
R32356:32360 VST.floyd.canon <> gvars constr
R32368:32368 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32379:32380 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32394:32395 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32399:32400 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32404:32404 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32369:32378 compcert.lib.Maps PTree Leaf constr
R32381:32391 compcert.lib.Maps PTree empty def
R32396:32398 Coq.Init.Datatypes <> nil constr
R32401:32403 VST.floyd.call_lemmas <> GV':498 var
R32640:32646 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R32558:32564 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R32570:32571 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R32600:32604 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R32565:32569 VST.floyd.call_lemmas <> Delta:478 var
R32572:32576 VST.floyd.canon <> PROPx def
R32581:32586 VST.floyd.canon <> LOCALx def
R32591:32594 VST.floyd.canon <> SEPx def
R32596:32597 VST.floyd.call_lemmas <> R':482 var
R32588:32588 VST.floyd.call_lemmas <> Q:480 var
R32578:32578 VST.floyd.call_lemmas <> P:479 var
R32605:32608 VST.msl.seplog <> ::logic:'!!'_x not
R32639:32639 VST.msl.seplog <> ::logic:'!!'_x not
R32634:32634 Coq.Init.Logic <> ::type_scope:x_'='_x not
R32609:32614 Coq.Lists.List <> firstn def
R32632:32633 VST.floyd.call_lemmas <> vl:493 var
R32617:32622 Coq.Lists.List <> length syndef
R32624:32629 VST.floyd.call_lemmas <> argsig:484 var
R32635:32638 VST.floyd.call_lemmas <> args:500 var
R32670:32675 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R32647:32662 VST.floyd.call_lemmas <> check_gvars_spec def
R32667:32669 VST.floyd.call_lemmas <> GV':498 var
R32664:32665 VST.floyd.call_lemmas <> GV:476 var
R32695:32699 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R32676:32692 VST.floyd.base <> fold_right_sepcon def
R32694:32694 VST.floyd.call_lemmas <> R:481 var
R32722:32724 VST.msl.seplog <> ::logic:x_'*'_x not
R32700:32716 VST.floyd.base <> fold_right_sepcon def
R32718:32721 VST.floyd.call_lemmas <> Rpre:497 var
R32725:32741 VST.floyd.base <> fold_right_sepcon def
R32743:32747 VST.floyd.call_lemmas <> Frame:495 var
prf 32757:32777 <> call_setup2_nil_equiv
R32794:32802 VST.veric.mpred <> compspecs class
binder 32790:32791 <> cs:501
binder 32805:32809 <> Qtemp:502
binder 32811:32814 <> Qvar:503
binder 32816:32817 <> GV:504
binder 32819:32819 <> a:505
binder 32821:32825 <> Delta:506
binder 32827:32827 <> P:507
binder 32829:32829 <> Q:508
binder 32831:32831 <> R:509
binder 32833:32834 <> R':510
binder 32839:32840 <> fs:511
binder 32842:32847 <> argsig:512
binder 32849:32853 <> retty:513
binder 32855:32856 <> cc:514
R32862:32875 VST.veric.rmaps <> TypeTree ind
binder 32859:32859 <> A:515
binder 32879:32881 <> Pre:516
binder 32883:32886 <> Post:517
binder 32888:32892 <> NEPre:518
binder 32894:32899 <> NEPost:519
R32908:32911 Coq.Init.Datatypes <> list ind
R32913:32916 compcert.cfrontend.Clight <> expr ind
binder 32904:32905 <> bl:520
R32925:32928 Coq.Init.Datatypes <> list ind
R32930:32932 compcert.common.Values <> val ind
binder 32920:32921 <> vl:521
R32976:33010 VST.msl.functors MixVariantFunctor _functor proj
R33053:33057 VST.veric.mpred <> mpred def
R33013:33044 VST.veric.rmaps <> dependent_type_functor_rec def
R33050:33050 VST.floyd.call_lemmas <> A:515 var
R33046:33048 Coq.Init.Datatypes <> nil constr
binder 32967:32973 <> witness:522
R33070:33073 Coq.Init.Datatypes <> list ind
R33075:33079 VST.veric.mpred <> mpred def
binder 33063:33067 <> Frame:523
R33091:33094 Coq.Init.Datatypes <> list ind
binder 33085:33088 <> Ppre:524
R33136:33139 Coq.Init.Datatypes <> list ind
R33141:33145 VST.veric.mpred <> mpred def
binder 33130:33133 <> Rpre:525
binder 33178:33180 <> GV':526
binder 33182:33183 <> gv:527
binder 33185:33188 <> args:528
R33405:33411 Coq.Init.Logic <> ::type_scope:x_'='_x not
R33195:33209 VST.floyd.call_lemmas <> call_setup2_nil def
R33401:33404 VST.floyd.call_lemmas <> args:528 var
R33398:33399 VST.floyd.call_lemmas <> gv:527 var
R33394:33396 VST.floyd.call_lemmas <> GV':526 var
R33375:33378 VST.floyd.call_lemmas <> Rpre:525 var
R33361:33364 VST.floyd.call_lemmas <> Ppre:524 var
R33355:33359 VST.floyd.call_lemmas <> Frame:523 var
R33347:33353 VST.floyd.call_lemmas <> witness:522 var
R33311:33312 VST.floyd.call_lemmas <> vl:521 var
R33308:33309 VST.floyd.call_lemmas <> bl:520 var
R33301:33306 VST.floyd.call_lemmas <> NEPost:519 var
R33295:33299 VST.floyd.call_lemmas <> NEPre:518 var
R33290:33293 VST.floyd.call_lemmas <> Post:517 var
R33286:33288 VST.floyd.call_lemmas <> Pre:516 var
R33284:33284 VST.floyd.call_lemmas <> A:515 var
R33281:33282 VST.floyd.call_lemmas <> cc:514 var
R33275:33279 VST.floyd.call_lemmas <> retty:513 var
R33268:33273 VST.floyd.call_lemmas <> argsig:512 var
R33265:33266 VST.floyd.call_lemmas <> fs:511 var
R33242:33243 VST.floyd.call_lemmas <> R':510 var
R33240:33240 VST.floyd.call_lemmas <> R:509 var
R33238:33238 VST.floyd.call_lemmas <> Q:508 var
R33236:33236 VST.floyd.call_lemmas <> P:507 var
R33230:33234 VST.floyd.call_lemmas <> Delta:506 var
R33228:33228 VST.floyd.call_lemmas <> a:505 var
R33225:33226 VST.floyd.call_lemmas <> GV:504 var
R33220:33223 VST.floyd.call_lemmas <> Qvar:503 var
R33214:33218 VST.floyd.call_lemmas <> Qtemp:502 var
R33211:33212 VST.floyd.call_lemmas <> cs:501 var
R33412:33422 VST.floyd.call_lemmas <> call_setup2 def
R33618:33621 VST.floyd.call_lemmas <> args:528 var
R33615:33616 VST.floyd.call_lemmas <> gv:527 var
R33611:33613 VST.floyd.call_lemmas <> GV':526 var
R33592:33595 VST.floyd.call_lemmas <> Rpre:525 var
R33578:33581 VST.floyd.call_lemmas <> Ppre:524 var
R33572:33576 VST.floyd.call_lemmas <> Frame:523 var
R33564:33570 VST.floyd.call_lemmas <> witness:522 var
R33528:33529 VST.floyd.call_lemmas <> vl:521 var
R33525:33526 VST.floyd.call_lemmas <> bl:520 var
R33518:33523 VST.floyd.call_lemmas <> NEPost:519 var
R33512:33516 VST.floyd.call_lemmas <> NEPre:518 var
R33507:33510 VST.floyd.call_lemmas <> Post:517 var
R33503:33505 VST.floyd.call_lemmas <> Pre:516 var
R33501:33501 VST.floyd.call_lemmas <> A:515 var
R33497:33499 Coq.Init.Datatypes <> nil constr
R33494:33495 VST.floyd.call_lemmas <> cc:514 var
R33488:33492 VST.floyd.call_lemmas <> retty:513 var
R33481:33486 VST.floyd.call_lemmas <> argsig:512 var
R33478:33479 VST.floyd.call_lemmas <> fs:511 var
R33455:33456 VST.floyd.call_lemmas <> R':510 var
R33453:33453 VST.floyd.call_lemmas <> R:509 var
R33451:33451 VST.floyd.call_lemmas <> Q:508 var
R33449:33449 VST.floyd.call_lemmas <> P:507 var
R33443:33447 VST.floyd.call_lemmas <> Delta:506 var
R33441:33441 VST.floyd.call_lemmas <> a:505 var
R33438:33439 VST.floyd.call_lemmas <> GV:504 var
R33433:33436 VST.floyd.call_lemmas <> Qvar:503 var
R33427:33431 VST.floyd.call_lemmas <> Qtemp:502 var
R33424:33425 VST.floyd.call_lemmas <> cs:501 var
prf 33649:33665 <> call_setup2_i_nil
R33682:33690 VST.veric.mpred <> compspecs class
binder 33678:33679 <> cs:529
binder 33693:33697 <> Qtemp:530
binder 33699:33702 <> Qvar:531
binder 33704:33705 <> GV:532
binder 33707:33707 <> a:533
binder 33709:33713 <> Delta:534
binder 33715:33715 <> P:535
binder 33717:33717 <> Q:536
binder 33719:33719 <> R:537
binder 33721:33722 <> R':538
binder 33727:33728 <> fs:539
binder 33730:33735 <> argsig:540
binder 33737:33741 <> retty:541
binder 33743:33744 <> cc:542
R33750:33763 VST.veric.rmaps <> TypeTree ind
binder 33747:33747 <> A:543
binder 33767:33769 <> Pre:544
binder 33771:33774 <> Post:545
binder 33776:33780 <> NEPre:546
binder 33782:33787 <> NEPost:547
R33796:33799 Coq.Init.Datatypes <> list ind
R33801:33804 compcert.cfrontend.Clight <> expr ind
binder 33792:33793 <> bl:548
R33813:33816 Coq.Init.Datatypes <> list ind
R33818:33820 compcert.common.Values <> val ind
binder 33808:33809 <> vl:549
R33863:33873 VST.floyd.call_lemmas <> call_setup1 def
R33958:33959 VST.floyd.call_lemmas <> vl:549 var
R33955:33956 VST.floyd.call_lemmas <> bl:548 var
R33948:33953 VST.floyd.call_lemmas <> NEPost:547 var
R33942:33946 VST.floyd.call_lemmas <> NEPre:546 var
R33937:33940 VST.floyd.call_lemmas <> Post:545 var
R33933:33935 VST.floyd.call_lemmas <> Pre:544 var
R33931:33931 VST.floyd.call_lemmas <> A:543 var
R33928:33929 VST.floyd.call_lemmas <> cc:542 var
R33922:33926 VST.floyd.call_lemmas <> retty:541 var
R33915:33920 VST.floyd.call_lemmas <> argsig:540 var
R33912:33913 VST.floyd.call_lemmas <> fs:539 var
R33909:33910 VST.floyd.call_lemmas <> R':538 var
R33902:33902 VST.floyd.call_lemmas <> Q:536 var
R33900:33900 VST.floyd.call_lemmas <> P:535 var
R33894:33898 VST.floyd.call_lemmas <> Delta:534 var
R33892:33892 VST.floyd.call_lemmas <> a:533 var
R33889:33890 VST.floyd.call_lemmas <> GV:532 var
R33884:33887 VST.floyd.call_lemmas <> Qvar:531 var
R33878:33882 VST.floyd.call_lemmas <> Qtemp:530 var
R33875:33876 VST.floyd.call_lemmas <> cs:529 var
binder 33855:33860 <> SETUP1:550
R33988:34022 VST.msl.functors MixVariantFunctor _functor proj
R34065:34069 VST.veric.mpred <> mpred def
R34025:34056 VST.veric.rmaps <> dependent_type_functor_rec def
R34062:34062 VST.floyd.call_lemmas <> A:543 var
R34058:34060 Coq.Init.Datatypes <> nil constr
binder 33978:33985 <> witness':551
R34082:34085 Coq.Init.Datatypes <> list ind
R34087:34091 VST.veric.mpred <> mpred def
binder 34075:34079 <> Frame:552
R34103:34106 Coq.Init.Datatypes <> list ind
binder 34097:34100 <> Ppre:553
R34122:34125 Coq.Init.Datatypes <> list ind
R34127:34134 VST.floyd.canon <> localdef ind
binder 34115:34118 <> Qpre:554
R34144:34147 Coq.Init.Datatypes <> list ind
R34149:34153 VST.veric.mpred <> mpred def
binder 34138:34141 <> Rpre:555
binder 34186:34188 <> GV':556
binder 34190:34191 <> gv:557
binder 34193:34196 <> args:558
R34386:34391 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34458:34610 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34693:34699 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34763:34768 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34792:34797 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34870:34875 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34876:34890 VST.floyd.call_lemmas <> call_setup2_nil def
R35049:35052 VST.floyd.call_lemmas <> args:558 var
R35046:35047 VST.floyd.call_lemmas <> gv:557 var
R35042:35044 VST.floyd.call_lemmas <> GV':556 var
R35023:35026 VST.floyd.call_lemmas <> Rpre:555 var
R35009:35012 VST.floyd.call_lemmas <> Ppre:553 var
R35003:35007 VST.floyd.call_lemmas <> Frame:552 var
R34994:35001 VST.floyd.call_lemmas <> witness':551 var
R34972:34973 VST.floyd.call_lemmas <> vl:549 var
R34969:34970 VST.floyd.call_lemmas <> bl:548 var
R34962:34967 VST.floyd.call_lemmas <> NEPost:547 var
R34956:34960 VST.floyd.call_lemmas <> NEPre:546 var
R34951:34954 VST.floyd.call_lemmas <> Post:545 var
R34947:34949 VST.floyd.call_lemmas <> Pre:544 var
R34945:34945 VST.floyd.call_lemmas <> A:543 var
R34942:34943 VST.floyd.call_lemmas <> cc:542 var
R34936:34940 VST.floyd.call_lemmas <> retty:541 var
R34929:34934 VST.floyd.call_lemmas <> argsig:540 var
R34926:34927 VST.floyd.call_lemmas <> fs:539 var
R34923:34924 VST.floyd.call_lemmas <> R':538 var
R34921:34921 VST.floyd.call_lemmas <> R:537 var
R34919:34919 VST.floyd.call_lemmas <> Q:536 var
R34917:34917 VST.floyd.call_lemmas <> P:535 var
R34911:34915 VST.floyd.call_lemmas <> Delta:534 var
R34909:34909 VST.floyd.call_lemmas <> a:533 var
R34906:34907 VST.floyd.call_lemmas <> GV:532 var
R34901:34904 VST.floyd.call_lemmas <> Qvar:531 var
R34895:34899 VST.floyd.call_lemmas <> Qtemp:530 var
R34892:34893 VST.floyd.call_lemmas <> cs:529 var
R34817:34821 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R34798:34814 VST.floyd.base <> fold_right_sepcon def
R34816:34816 VST.floyd.call_lemmas <> R:537 var
R34844:34846 VST.msl.seplog <> ::logic:x_'*'_x not
R34822:34838 VST.floyd.base <> fold_right_sepcon def
R34840:34843 VST.floyd.call_lemmas <> Rpre:555 var
R34847:34863 VST.floyd.base <> fold_right_sepcon def
R34865:34869 VST.floyd.call_lemmas <> Frame:552 var
R34769:34784 VST.floyd.call_lemmas <> check_gvars_spec def
R34789:34791 VST.floyd.call_lemmas <> GV':556 var
R34786:34787 VST.floyd.call_lemmas <> GV:532 var
R34728:34732 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R34700:34704 VST.floyd.canon <> PROPx def
R34709:34714 VST.floyd.canon <> LOCALx def
R34719:34722 VST.floyd.canon <> SEPx def
R34724:34725 VST.floyd.call_lemmas <> R':538 var
R34716:34716 VST.floyd.call_lemmas <> Q:536 var
R34706:34706 VST.floyd.call_lemmas <> P:535 var
R34733:34735 VST.msl.seplog <> ::logic:'|>'_x not
R34736:34740 VST.floyd.canon <> PROPx def
R34745:34750 VST.floyd.canon <> LOCALx def
R34755:34758 VST.floyd.canon <> SEPx def
R34760:34760 VST.floyd.call_lemmas <> R:537 var
R34752:34752 VST.floyd.call_lemmas <> Q:536 var
R34742:34742 VST.floyd.call_lemmas <> P:535 var
R34611:34617 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R34623:34624 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R34653:34657 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R34618:34622 VST.floyd.call_lemmas <> Delta:534 var
R34625:34629 VST.floyd.canon <> PROPx def
R34634:34639 VST.floyd.canon <> LOCALx def
R34644:34647 VST.floyd.canon <> SEPx def
R34649:34650 VST.floyd.call_lemmas <> R':538 var
R34641:34641 VST.floyd.call_lemmas <> Q:536 var
R34631:34631 VST.floyd.call_lemmas <> P:535 var
R34658:34661 VST.msl.seplog <> ::logic:'!!'_x not
R34692:34692 VST.msl.seplog <> ::logic:'!!'_x not
R34687:34687 Coq.Init.Logic <> ::type_scope:x_'='_x not
R34662:34667 Coq.Lists.List <> firstn def
R34685:34686 VST.floyd.call_lemmas <> vl:549 var
R34670:34675 Coq.Lists.List <> length syndef
R34677:34682 VST.floyd.call_lemmas <> argsig:540 var
R34688:34691 VST.floyd.call_lemmas <> args:558 var
R34418:34420 Coq.Init.Logic <> ::type_scope:x_'='_x not
R34392:34402 VST.floyd.local2ptree_denote <> local2ptree def
R34405:34407 Coq.Lists.List <> map def
R34415:34416 VST.floyd.call_lemmas <> gv:557 var
R34409:34413 VST.floyd.canon <> gvars constr
R34421:34421 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R34432:34433 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R34447:34448 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R34452:34453 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R34457:34457 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R34422:34431 compcert.lib.Maps PTree Leaf constr
R34434:34444 compcert.lib.Maps PTree empty def
R34449:34451 Coq.Init.Datatypes <> nil constr
R34454:34456 VST.floyd.call_lemmas <> GV':556 var
R34343:34345 Coq.Init.Logic <> ::type_scope:x_'='_x not
R34327:34329 VST.floyd.call_lemmas <> Pre:544 var
R34335:34342 VST.floyd.call_lemmas <> witness':551 var
R34331:34333 Coq.Init.Datatypes <> nil constr
R34346:34350 VST.floyd.canon <> PROPx def
R34358:34364 VST.floyd.client_lemmas <> LAMBDAx syndef
R34369:34372 VST.floyd.call_lemmas <> args:558 var
R34366:34367 VST.floyd.call_lemmas <> gv:557 var
R34375:34378 VST.floyd.canon <> SEPx def
R34380:34383 VST.floyd.call_lemmas <> Rpre:555 var
R34352:34355 VST.floyd.call_lemmas <> Ppre:553 var
prf 35116:35138 <> actual_value_not_Vundef
R35154:35162 VST.veric.mpred <> compspecs class
binder 35150:35151 <> cs:559
R35173:35179 compcert.lib.Maps PTree t def
R35181:35183 compcert.common.Values <> val ind
binder 35166:35170 <> Qtemp:560
R35193:35199 compcert.lib.Maps PTree t def
R35206:35208 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R35202:35205 compcert.cfrontend.Ctypes <> type ind
R35209:35211 compcert.common.Values <> val ind
binder 35187:35190 <> Qvar:561
binder 35220:35224 <> Delta:562
binder 35226:35226 <> P:563
binder 35228:35228 <> Q:564
binder 35230:35230 <> R:565
binder 35232:35233 <> tl:566
binder 35235:35236 <> bl:567
binder 35238:35239 <> vl:568
binder 35241:35242 <> GV:569
R35267:35269 Coq.Init.Logic <> ::type_scope:x_'='_x not
R35254:35264 VST.floyd.local2ptree_denote <> local2ptree def
R35266:35266 VST.floyd.call_lemmas <> Q:564 var
R35270:35270 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R35276:35277 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R35282:35283 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R35287:35288 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R35291:35291 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R35271:35275 VST.floyd.call_lemmas <> Qtemp:560 var
R35278:35281 VST.floyd.call_lemmas <> Qvar:561 var
R35284:35286 Coq.Init.Datatypes <> nil constr
R35289:35290 VST.floyd.call_lemmas <> GV:569 var
binder 35246:35250 <> PTREE:570
R35513:35515 Coq.Init.Logic <> ::type_scope:x_'='_x not
R35400:35409 VST.floyd.local2ptree_denote <> force_list def
R35412:35414 Coq.Lists.List <> map def
R35483:35504 VST.floyd.local2ptree_denote <> explicit_cast_exprlist def
R35509:35510 VST.floyd.call_lemmas <> bl:567 var
R35506:35507 VST.floyd.call_lemmas <> tl:566 var
R35417:35432 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R35451:35452 VST.floyd.call_lemmas <> GV:569 var
R35446:35449 VST.floyd.call_lemmas <> Qvar:561 var
R35440:35444 VST.floyd.call_lemmas <> Qtemp:560 var
R35434:35438 VST.floyd.call_lemmas <> Delta:562 var
R35516:35519 Coq.Init.Datatypes <> Some constr
R35521:35522 VST.floyd.call_lemmas <> vl:568 var
binder 35391:35396 <> MSUBST:571
R35616:35621 Coq.Init.Logic <> ::type_scope:x_'='_x not
R35582:35585 VST.msl.seplog <> ::logic:x_'&&'_x not
R35529:35529 VST.msl.seplog <> ::logic:x_'&&'_x not
R35553:35557 VST.msl.seplog <> ::logic:x_'&&'_x not
R35530:35540 VST.veric.SeparationLogic <> tc_exprlist def
R35551:35552 VST.floyd.call_lemmas <> bl:567 var
R35548:35549 VST.floyd.call_lemmas <> tl:566 var
R35542:35546 VST.floyd.call_lemmas <> Delta:562 var
R35558:35562 VST.veric.SeparationLogic <> local def
R35565:35574 VST.veric.SeparationLogic <> tc_environ def
R35576:35580 VST.floyd.call_lemmas <> Delta:562 var
R35586:35588 VST.msl.seplog <> ::logic:'|>'_x not
R35589:35593 VST.floyd.canon <> PROPx def
R35598:35603 VST.floyd.canon <> LOCALx def
R35608:35611 VST.floyd.canon <> SEPx def
R35613:35613 VST.floyd.call_lemmas <> R:565 var
R35605:35605 VST.floyd.call_lemmas <> Q:564 var
R35595:35595 VST.floyd.call_lemmas <> P:563 var
R35675:35678 VST.msl.seplog <> ::logic:x_'&&'_x not
R35622:35622 VST.msl.seplog <> ::logic:x_'&&'_x not
R35646:35650 VST.msl.seplog <> ::logic:x_'&&'_x not
R35623:35633 VST.veric.SeparationLogic <> tc_exprlist def
R35644:35645 VST.floyd.call_lemmas <> bl:567 var
R35641:35642 VST.floyd.call_lemmas <> tl:566 var
R35635:35639 VST.floyd.call_lemmas <> Delta:562 var
R35651:35655 VST.veric.SeparationLogic <> local def
R35658:35667 VST.veric.SeparationLogic <> tc_environ def
R35669:35673 VST.floyd.call_lemmas <> Delta:562 var
R35679:35682 VST.msl.seplog <> ::logic:'|>'_x not
R35755:35755 VST.msl.seplog <> ::logic:'|>'_x not
R35710:35713 VST.msl.seplog <> ::logic:x_'&&'_x not
R35683:35687 VST.floyd.canon <> PROPx def
R35692:35697 VST.floyd.canon <> LOCALx def
R35702:35705 VST.floyd.canon <> SEPx def
R35707:35707 VST.floyd.call_lemmas <> R:565 var
R35699:35699 VST.floyd.call_lemmas <> Q:564 var
R35689:35689 VST.floyd.call_lemmas <> P:563 var
R35714:35716 VST.msl.seplog <> ::logic:'!!'_x not
R35717:35722 Coq.Lists.List <> Forall ind
R35753:35754 VST.floyd.call_lemmas <> vl:568 var
R35733:35735 compcert.common.Values <> val ind
binder 35729:35729 <> v:572
R35741:35744 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R35740:35740 VST.floyd.call_lemmas <> v:572 var
R35745:35750 compcert.common.Values <> Vundef constr
R35785:35807 VST.floyd.local2ptree_eval <> msubst_eval_exprlist_eq thm
R35785:35807 VST.floyd.local2ptree_eval <> msubst_eval_exprlist_eq thm
R35854:35874 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R35854:35874 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R35989:35996 VST.msl.seplog <> pred_ext meth
R36008:36019 VST.msl.log_normalize <> andp_derives thm
R36034:36046 VST.msl.log_normalize <> later_derives thm
R35989:35996 VST.msl.seplog <> pred_ext meth
R36008:36019 VST.msl.log_normalize <> andp_derives thm
R36034:36046 VST.msl.log_normalize <> later_derives thm
R36071:36080 VST.msl.log_normalize <> later_andp thm
R36086:36095 VST.msl.log_normalize <> andp_assoc thm
R36071:36080 VST.msl.log_normalize <> later_andp thm
R36071:36080 VST.msl.log_normalize <> later_andp thm
R36086:36095 VST.msl.log_normalize <> andp_assoc thm
R36086:36095 VST.msl.log_normalize <> andp_assoc thm
R36106:36115 VST.msl.seplog <> andp_right meth
R36106:36115 VST.msl.seplog <> andp_right meth
R36132:36142 VST.msl.log_normalize <> later_left2 thm
R36132:36142 VST.msl.log_normalize <> later_left2 thm
R36255:36264 VST.msl.log_normalize <> andp_assoc thm
R36255:36264 VST.msl.log_normalize <> andp_assoc thm
R36255:36264 VST.msl.log_normalize <> andp_assoc thm
R36276:36283 VST.msl.log_normalize <> add_andp thm
R36276:36283 VST.msl.log_normalize <> add_andp thm
R36276:36283 VST.msl.log_normalize <> add_andp thm
R36316:36324 VST.msl.log_normalize <> andp_comm thm
R36316:36324 VST.msl.log_normalize <> andp_comm thm
R36316:36324 VST.msl.log_normalize <> andp_comm thm
R36339:36347 VST.msl.log_normalize <> andp_comm thm
R36352:36356 VST.floyd.canon <> PROPx def
R36366:36375 VST.msl.log_normalize <> andp_assoc thm
R36339:36347 VST.msl.log_normalize <> andp_comm thm
R36352:36356 VST.floyd.canon <> PROPx def
R36339:36347 VST.msl.log_normalize <> andp_comm thm
R36352:36356 VST.floyd.canon <> PROPx def
R36366:36375 VST.msl.log_normalize <> andp_assoc thm
R36366:36375 VST.msl.log_normalize <> andp_assoc thm
R36366:36375 VST.msl.log_normalize <> andp_assoc thm
R36366:36375 VST.msl.log_normalize <> andp_assoc thm
R36386:36395 VST.msl.seplog <> andp_left2 meth
R36386:36395 VST.msl.seplog <> andp_left2 meth
R36600:36606 VST.msl.log_normalize <> FF_left thm
R36600:36606 VST.msl.log_normalize <> FF_left thm
R36620:36629 VST.msl.seplog <> prop_right meth
R36620:36629 VST.msl.seplog <> prop_right meth
R36674:36687 VST.veric.expr <> typecheck_expr def
R36717:36723 VST.msl.log_normalize <> FF_left thm
R36717:36723 VST.msl.log_normalize <> FF_left thm
R36740:36750 VST.veric.SeparationLogic <> tc_exprlist def
R36768:36788 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R36768:36788 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R36768:36788 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R36824:36837 VST.veric.expr <> typecheck_expr def
R36851:36863 VST.msl.seplog <> derives_trans meth
R36873:36884 VST.msl.log_normalize <> andp_derives thm
R36894:36913 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R36851:36863 VST.msl.seplog <> derives_trans meth
R36873:36884 VST.msl.log_normalize <> andp_derives thm
R36894:36913 VST.veric.SeparationLogic <> typecheck_expr_sound thm
R37065:37074 VST.veric.val_lemmas <> force_val1 def
R37090:37103 Coq.Program.Basics <> compose def
R37154:37166 VST.veric.Cop2 <> tc_val_Vundef thm
R37154:37166 VST.veric.Cop2 <> tc_val_Vundef thm
R36674:36687 VST.veric.expr <> typecheck_expr def
R36824:36837 VST.veric.expr <> typecheck_expr def
prf 37193:37204 <> in_gvars_sub
binder 37216:37218 <> rho:573
binder 37220:37220 <> G:574
binder 37222:37223 <> G':575
R37263:37268 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R37332:37337 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R37338:37347 Coq.Lists.List <> fold_right def
R37399:37401 VST.floyd.call_lemmas <> rho:573 var
R37365:37367 Coq.Lists.List <> map def
R37384:37386 Coq.Lists.List <> map def
R37394:37395 VST.floyd.call_lemmas <> G':575 var
R37388:37392 VST.floyd.canon <> gvars constr
R37369:37381 VST.floyd.canon <> locald_denote def
R37356:37357 VST.veric.lift LiftNotation :::'`('_x_')' not
R37362:37362 VST.veric.lift LiftNotation :::'`('_x_')' not
R37358:37361 Coq.Init.Logic <> True ind
R37349:37350 VST.veric.lift LiftNotation :::'`('_x_')' not
R37354:37354 VST.veric.lift LiftNotation :::'`('_x_')' not
R37351:37353 Coq.Init.Logic <> and ind
R37269:37278 Coq.Lists.List <> fold_right def
R37329:37331 VST.floyd.call_lemmas <> rho:573 var
R37296:37298 Coq.Lists.List <> map def
R37315:37317 Coq.Lists.List <> map def
R37325:37325 VST.floyd.call_lemmas <> G:574 var
R37319:37323 VST.floyd.canon <> gvars constr
R37300:37312 VST.floyd.canon <> locald_denote def
R37287:37288 VST.veric.lift LiftNotation :::'`('_x_')' not
R37293:37293 VST.veric.lift LiftNotation :::'`('_x_')' not
R37289:37292 Coq.Init.Logic <> True ind
R37280:37281 VST.veric.lift LiftNotation :::'`('_x_')' not
R37285:37285 VST.veric.lift LiftNotation :::'`('_x_')' not
R37282:37284 Coq.Init.Logic <> and ind
R37226:37231 Coq.Lists.List <> Forall ind
R37261:37262 VST.floyd.call_lemmas <> G':575 var
R37242:37248 VST.veric.SeparationLogic <> globals def
binder 37238:37238 <> x:576
R37253:37254 Coq.Lists.List <> In def
R37258:37258 VST.floyd.call_lemmas <> G:574 var
R37256:37256 VST.floyd.call_lemmas <> x:576 var
R37431:37435 Coq.Init.Logic <> proj1 thm
R37438:37450 Coq.Lists.List <> Forall_forall thm
R37431:37435 Coq.Init.Logic <> proj1 thm
R37438:37450 Coq.Lists.List <> Forall_forall thm
R37532:37533 Coq.Lists.List <> In def
R37532:37533 Coq.Lists.List <> In def
prf 37696:37707 <> rev_nil_elim
binder 37710:37710 <> A:577
R37716:37719 Coq.Init.Datatypes <> list ind
R37721:37721 VST.floyd.call_lemmas <> A:577 var
binder 37714:37714 <> l:578
R37736:37739 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R37741:37741 Coq.Init.Logic <> ::type_scope:x_'='_x not
R37740:37740 VST.floyd.call_lemmas <> l:578 var
R37742:37744 Coq.Init.Datatypes <> nil constr
R37730:37732 Coq.Init.Logic <> ::type_scope:x_'='_x not
R37725:37727 Coq.Lists.List <> rev def
R37729:37729 VST.floyd.call_lemmas <> l:578 var
R37733:37735 Coq.Init.Datatypes <> nil constr
R37807:37822 Coq.Lists.List <> app_cons_not_nil thm
R37807:37822 Coq.Lists.List <> app_cons_not_nil thm
prf 37857:37876 <> local2ptree_aux_elim
binder 37886:37886 <> Q:579
binder 37888:37890 <> rho:580
R37896:37905 Coq.Lists.List <> fold_right def
R37946:37948 VST.floyd.call_lemmas <> rho:580 var
R37925:37927 Coq.Lists.List <> map def
R37943:37943 VST.floyd.call_lemmas <> Q:579 var
R37929:37941 VST.floyd.canon <> locald_denote def
R37916:37917 VST.veric.lift LiftNotation :::'`'_x not
R37918:37921 Coq.Init.Logic <> True ind
R37908:37909 VST.veric.lift LiftNotation :::'`'_x not
R37910:37912 Coq.Init.Logic <> and ind
binder 37893:37893 <> H:581
binder 37951:37952 <> T1:582
binder 37954:37955 <> T2:583
binder 37957:37957 <> P:584
binder 37959:37959 <> X:585
binder 37961:37965 <> Qtemp:586
binder 37967:37970 <> Qvar:587
binder 37972:37973 <> PP:588
binder 37975:37975 <> g:589
R38009:38011 Coq.Init.Logic <> ::type_scope:x_'='_x not
R37982:37996 VST.floyd.local2ptree_denote <> local2ptree_aux def
R38008:38008 VST.floyd.call_lemmas <> X:585 var
R38006:38006 VST.floyd.call_lemmas <> P:584 var
R38003:38004 VST.floyd.call_lemmas <> T2:583 var
R38000:38001 VST.floyd.call_lemmas <> T1:582 var
R37998:37998 VST.floyd.call_lemmas <> Q:579 var
R38012:38012 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38018:38019 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38024:38025 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38028:38029 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38036:38036 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R38013:38017 VST.floyd.call_lemmas <> Qtemp:586 var
R38020:38023 VST.floyd.call_lemmas <> Qvar:587 var
R38026:38027 VST.floyd.call_lemmas <> PP:588 var
R38030:38033 Coq.Init.Datatypes <> Some constr
R38035:38035 VST.floyd.call_lemmas <> g:589 var
binder 37979:37979 <> L:590
R38050:38050 VST.floyd.call_lemmas <> X:585 var
R38063:38066 Coq.Init.Datatypes <> Some constr
R38074:38076 VST.veric.lift LiftNotation :::'`'_x not
R38080:38192 VST.veric.lift LiftNotation :::'`'_x not
R38077:38079 Coq.Init.Logic <> and ind
R38128:38136 VST.veric.mpred <> mkEnviron constr
R38178:38186 VST.veric.mpred Map empty def
R38188:38190 compcert.common.Values <> val ind
R38151:38159 VST.veric.mpred Map empty def
R38167:38169 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R38162:38166 compcert.common.Values <> block def
R38170:38173 compcert.cfrontend.Ctypes <> type ind
R38139:38143 VST.veric.mpred <> ge_of def
R38145:38147 VST.floyd.call_lemmas <> rho:580 var
R38101:38102 VST.veric.lift LiftNotation :::'`'_x not
R38103:38106 Coq.Init.Logic <> True ind
R38083:38094 VST.floyd.canon <> gvars_denote def
R38200:38203 Coq.Init.Datatypes <> None constr
R38208:38211 Coq.Init.Logic <> True ind
binder 38040:38041 <> HX:592
R38225:38227 VST.veric.lift LiftNotation :::'`'_x not
R38231:38326 VST.veric.lift LiftNotation :::'`'_x not
R38228:38230 Coq.Init.Logic <> and ind
R38262:38270 VST.veric.mpred <> mkEnviron constr
R38312:38320 VST.veric.mpred Map empty def
R38322:38324 compcert.common.Values <> val ind
R38285:38293 VST.veric.mpred Map empty def
R38301:38303 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R38296:38300 compcert.common.Values <> block def
R38304:38307 compcert.cfrontend.Ctypes <> type ind
R38273:38277 VST.veric.mpred <> ge_of def
R38279:38281 VST.floyd.call_lemmas <> rho:580 var
R38251:38252 VST.veric.lift LiftNotation :::'`'_x not
R38253:38256 Coq.Init.Logic <> True ind
R38234:38245 VST.floyd.canon <> gvars_denote def
R38247:38247 VST.floyd.call_lemmas <> g:589 var
R38455:38457 compcert.lib.Maps <> :::x_'!'_x not
R38455:38457 compcert.lib.Maps <> :::x_'!'_x not
R38562:38564 compcert.lib.Maps <> :::x_'!'_x not
R38562:38564 compcert.lib.Maps <> :::x_'!'_x not
R38790:38802 VST.floyd.canon <> locald_denote def
prf 38847:38862 <> semax_call_aux55
R38878:38886 VST.veric.mpred <> compspecs class
binder 38874:38875 <> cs:593
R38897:38903 compcert.lib.Maps PTree t def
R38905:38907 compcert.common.Values <> val ind
binder 38890:38894 <> Qtemp:594
R38917:38923 compcert.lib.Maps PTree t def
R38930:38932 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R38926:38929 compcert.cfrontend.Ctypes <> type ind
R38933:38935 compcert.common.Values <> val ind
binder 38911:38914 <> Qvar:595
binder 38939:38940 <> GV:596
R38946:38949 compcert.cfrontend.Clight <> expr ind
binder 38943:38943 <> a:597
binder 38957:38961 <> Delta:598
binder 38963:38963 <> P:599
binder 38965:38965 <> Q:600
binder 38967:38967 <> R:601
binder 38969:38970 <> R':602
binder 38972:38973 <> fs:603
binder 38975:38980 <> argsig:604
binder 38982:38983 <> ts:605
R38990:39003 VST.veric.rmaps <> TypeTree ind
binder 38986:38986 <> A:606
R39030:39033 Coq.Init.Datatypes <> list ind
binder 39025:39026 <> ts:607
R39055:39089 VST.msl.functors MixVariantFunctor _functor proj
R39156:39160 VST.veric.mpred <> mpred def
R39108:39139 VST.veric.rmaps <> dependent_type_functor_rec def
R39145:39150 VST.veric.mpred <> ArgsTT def
R39152:39152 VST.floyd.call_lemmas <> A:606 var
R39141:39142 VST.floyd.call_lemmas <> ts:607 var
binder 39012:39014 <> Pre:608
R39189:39192 Coq.Init.Datatypes <> list ind
binder 39184:39185 <> ts:609
R39214:39248 VST.msl.functors MixVariantFunctor _functor proj
R39317:39321 VST.veric.mpred <> mpred def
R39267:39298 VST.veric.rmaps <> dependent_type_functor_rec def
R39304:39311 VST.veric.mpred <> AssertTT def
R39313:39313 VST.floyd.call_lemmas <> A:606 var
R39300:39301 VST.floyd.call_lemmas <> ts:609 var
binder 39170:39173 <> Post:610
binder 39328:39334 <> witness:611
binder 39336:39340 <> Frame:612
binder 39342:39343 <> bl:613
binder 39345:39348 <> Ppre:614
binder 39350:39353 <> Rpre:615
binder 39355:39357 <> GV':616
binder 39359:39360 <> vl:617
binder 39362:39363 <> gv:618
binder 39365:39368 <> args:619
R39393:39395 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39380:39390 VST.floyd.local2ptree_denote <> local2ptree def
R39392:39392 VST.floyd.call_lemmas <> Q:600 var
R39396:39396 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R39402:39403 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R39408:39409 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R39413:39414 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R39417:39417 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R39397:39401 VST.floyd.call_lemmas <> Qtemp:594 var
R39404:39407 VST.floyd.call_lemmas <> Qvar:595 var
R39410:39412 Coq.Init.Datatypes <> nil constr
R39415:39416 VST.floyd.call_lemmas <> GV:596 var
binder 39372:39376 <> PTREE:620
R39535:39537 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39431:39440 VST.floyd.local2ptree_denote <> force_list def
R39443:39445 Coq.Lists.List <> map def
R39501:39522 VST.floyd.local2ptree_denote <> explicit_cast_exprlist def
R39531:39532 VST.floyd.call_lemmas <> bl:613 var
R39524:39529 VST.floyd.call_lemmas <> argsig:604 var
R39448:39463 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R39482:39483 VST.floyd.call_lemmas <> GV:596 var
R39477:39480 VST.floyd.call_lemmas <> Qvar:595 var
R39471:39475 VST.floyd.call_lemmas <> Qtemp:594 var
R39465:39469 VST.floyd.call_lemmas <> Delta:598 var
R39538:39541 Coq.Init.Datatypes <> Some constr
R39543:39544 VST.floyd.call_lemmas <> vl:617 var
binder 39422:39427 <> MSUBST:621
R39863:39865 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39849:39851 VST.floyd.call_lemmas <> Pre:608 var
R39856:39862 VST.floyd.call_lemmas <> witness:611 var
R39853:39854 VST.floyd.call_lemmas <> ts:605 var
R39866:39870 VST.floyd.canon <> PROPx def
R39878:39884 VST.floyd.client_lemmas <> LAMBDAx syndef
R39889:39892 VST.floyd.call_lemmas <> args:619 var
R39886:39887 VST.floyd.call_lemmas <> gv:618 var
R39895:39898 VST.floyd.canon <> SEPx def
R39900:39903 VST.floyd.call_lemmas <> Rpre:615 var
R39872:39875 VST.floyd.call_lemmas <> Ppre:614 var
binder 39843:39846 <> PRE1:622
R39944:39946 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39918:39928 VST.floyd.local2ptree_denote <> local2ptree def
R39931:39933 Coq.Lists.List <> map def
R39941:39942 VST.floyd.call_lemmas <> gv:618 var
R39935:39939 VST.floyd.canon <> gvars constr
R39947:39947 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R39958:39959 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R39973:39974 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R39978:39979 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R39983:39983 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R39948:39957 compcert.lib.Maps PTree Leaf constr
R39960:39970 compcert.lib.Maps PTree empty def
R39975:39977 Coq.Init.Datatypes <> nil constr
R39980:39982 VST.floyd.call_lemmas <> GV':616 var
binder 39910:39915 <> PTREE':623
R40025:40025 Coq.Init.Logic <> ::type_scope:x_'='_x not
R40000:40005 Coq.Lists.List <> firstn def
R40023:40024 VST.floyd.call_lemmas <> vl:617 var
R40008:40013 Coq.Lists.List <> length syndef
R40015:40020 VST.floyd.call_lemmas <> argsig:604 var
R40026:40029 VST.floyd.call_lemmas <> args:619 var
binder 39988:39996 <> CHECKTEMP:624
R40043:40058 VST.floyd.call_lemmas <> check_gvars_spec def
R40063:40065 VST.floyd.call_lemmas <> GV':616 var
R40060:40061 VST.floyd.call_lemmas <> GV:596 var
binder 40035:40040 <> CHECKG:625
R40104:40108 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R40076:40080 VST.floyd.canon <> PROPx def
R40085:40090 VST.floyd.canon <> LOCALx def
R40095:40098 VST.floyd.canon <> SEPx def
R40100:40101 VST.floyd.call_lemmas <> R':602 var
R40092:40092 VST.floyd.call_lemmas <> Q:600 var
R40082:40082 VST.floyd.call_lemmas <> P:599 var
R40109:40111 VST.msl.seplog <> ::logic:'|>'_x not
R40112:40116 VST.floyd.canon <> PROPx def
R40121:40126 VST.floyd.canon <> LOCALx def
R40131:40134 VST.floyd.canon <> SEPx def
R40136:40136 VST.floyd.call_lemmas <> R:601 var
R40128:40128 VST.floyd.call_lemmas <> Q:600 var
R40118:40118 VST.floyd.call_lemmas <> P:599 var
binder 40071:40073 <> HR':626
R40170:40185 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R40151:40167 VST.floyd.base <> fold_right_sepcon def
R40169:40169 VST.floyd.call_lemmas <> R:601 var
R40208:40210 VST.msl.seplog <> ::logic:x_'*'_x not
R40186:40202 VST.floyd.base <> fold_right_sepcon def
R40204:40207 VST.floyd.call_lemmas <> Rpre:615 var
R40211:40227 VST.floyd.base <> fold_right_sepcon def
R40229:40233 VST.floyd.call_lemmas <> Frame:612 var
binder 40143:40147 <> FRAME:627
R40245:40258 VST.floyd.client_lemmas <> fold_right_and def
R40265:40268 VST.floyd.call_lemmas <> Ppre:614 var
R40260:40263 Coq.Init.Logic <> True ind
binder 40238:40241 <> PPRE:628
R40292:40294 Coq.Init.Logic <> ::type_scope:x_'='_x not
R40279:40284 Coq.Lists.List <> length syndef
R40286:40291 VST.floyd.call_lemmas <> argsig:604 var
R40295:40300 Coq.Lists.List <> length syndef
R40302:40303 VST.floyd.call_lemmas <> bl:613 var
binder 40273:40275 <> LEN:629
R40307:40313 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R40319:40320 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R40474:40485 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R40314:40318 VST.floyd.call_lemmas <> Delta:598 var
R40442:40445 VST.msl.seplog <> ::logic:x_'&&'_x not
R40367:40371 VST.msl.seplog <> ::logic:x_'&&'_x not
R40441:40441 VST.msl.seplog <> ::logic:x_'&&'_x not
R40336:40339 VST.msl.seplog <> ::logic:x_'&&'_x not
R40321:40327 VST.veric.SeparationLogic <> tc_expr def
R40335:40335 VST.floyd.call_lemmas <> a:597 var
R40329:40333 VST.floyd.call_lemmas <> Delta:598 var
R40340:40350 VST.veric.SeparationLogic <> tc_exprlist def
R40365:40366 VST.floyd.call_lemmas <> bl:613 var
R40358:40363 VST.floyd.call_lemmas <> argsig:604 var
R40352:40356 VST.floyd.call_lemmas <> Delta:598 var
R40372:40374 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R40382:40384 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R40379:40381 compcert.common.Values <> val ind
binder 40375:40375 <> v:630
R40406:40410 VST.msl.seplog <> ::logic:x_'&&'_x not
R40385:40389 VST.veric.mpred <> lift0 def
R40392:40399 VST.veric.SeparationLogic <> func_ptr def
R40404:40404 VST.floyd.call_lemmas <> v:630 var
R40401:40402 VST.floyd.call_lemmas <> fs:603 var
R40411:40415 VST.veric.SeparationLogic <> local def
R40418:40420 VST.veric.lift LiftNotation :::'`'_x not
R40425:40439 VST.veric.lift LiftNotation :::'`'_x not
R40421:40422 Coq.Init.Logic <> eq ind
R40424:40424 VST.floyd.call_lemmas <> v:630 var
R40428:40436 VST.veric.expr <> eval_expr def
R40438:40438 VST.floyd.call_lemmas <> a:597 var
R40446:40450 VST.floyd.canon <> PROPx def
R40455:40460 VST.floyd.canon <> LOCALx def
R40465:40468 VST.floyd.canon <> SEPx def
R40470:40471 VST.floyd.call_lemmas <> R':602 var
R40462:40462 VST.floyd.call_lemmas <> Q:600 var
R40452:40452 VST.floyd.call_lemmas <> P:599 var
R40486:40486 VST.msl.seplog <> ::logic:x_'&&'_x not
R40533:40542 VST.msl.seplog <> ::logic:x_'&&'_x not
R40695:40695 VST.msl.seplog <> ::logic:x_'&&'_x not
R40502:40505 VST.msl.seplog <> ::logic:x_'&&'_x not
R40487:40493 VST.veric.SeparationLogic <> tc_expr def
R40501:40501 VST.floyd.call_lemmas <> a:597 var
R40495:40499 VST.floyd.call_lemmas <> Delta:598 var
R40506:40516 VST.veric.SeparationLogic <> tc_exprlist def
R40531:40532 VST.floyd.call_lemmas <> bl:613 var
R40524:40529 VST.floyd.call_lemmas <> argsig:604 var
R40518:40522 VST.floyd.call_lemmas <> Delta:598 var
R40659:40661 VST.msl.seplog <> ::logic:x_'*'_x not
R40614:40621 VST.msl.seplog <> ::logic:x_'*'_x not
R40543:40546 VST.msl.seplog <> ::logic:'|>'_x not
R40613:40613 VST.msl.seplog <> ::logic:'|>'_x not
binder 40551:40553 <> rho:631
R40558:40560 VST.floyd.call_lemmas <> Pre:608 var
R40573:40573 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R40583:40584 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R40612:40612 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R40574:40578 VST.veric.mpred <> ge_of def
R40580:40582 VST.floyd.call_lemmas <> rho:631 var
R40585:40597 VST.veric.expr <> eval_exprlist def
R40609:40611 VST.floyd.call_lemmas <> rho:631 var
R40606:40607 VST.floyd.call_lemmas <> bl:613 var
R40599:40604 VST.floyd.call_lemmas <> argsig:604 var
R40565:40571 VST.floyd.call_lemmas <> witness:611 var
R40562:40563 VST.floyd.call_lemmas <> ts:605 var
R40622:40624 VST.veric.lift LiftNotation :::'`'_x not
R40637:40658 VST.veric.lift LiftNotation :::'`'_x not
R40625:40633 VST.floyd.client_lemmas <> func_ptr' def
R40635:40636 VST.floyd.call_lemmas <> fs:603 var
R40647:40655 VST.veric.expr <> eval_expr def
R40657:40657 VST.floyd.call_lemmas <> a:597 var
R40662:40663 VST.msl.seplog <> ::logic:'|>'_x not
R40664:40668 VST.floyd.canon <> PROPx def
R40673:40678 VST.floyd.canon <> LOCALx def
R40683:40686 VST.floyd.canon <> SEPx def
R40688:40692 VST.floyd.call_lemmas <> Frame:612 var
R40680:40680 VST.floyd.call_lemmas <> Q:600 var
R40670:40670 VST.floyd.call_lemmas <> P:599 var
R40736:40758 VST.floyd.call_lemmas <> actual_value_not_Vundef thm
R40736:40758 VST.floyd.call_lemmas <> actual_value_not_Vundef thm
R40827:40836 VST.msl.log_normalize <> andp_assoc thm
R40827:40836 VST.msl.log_normalize <> andp_assoc thm
R40827:40836 VST.msl.log_normalize <> andp_assoc thm
R40827:40836 VST.msl.log_normalize <> andp_assoc thm
R40827:40836 VST.msl.log_normalize <> andp_assoc thm
R40827:40836 VST.msl.log_normalize <> andp_assoc thm
R40848:40856 VST.msl.log_normalize <> andp_comm thm
R40861:40863 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R40871:40872 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R40868:40870 compcert.common.Values <> val ind
binder 40864:40864 <> v:632
R40894:40897 VST.msl.seplog <> ::logic:x_'&&'_x not
R40873:40877 VST.veric.mpred <> lift0 def
R40880:40887 VST.veric.SeparationLogic <> func_ptr def
R40892:40892 VST.floyd.call_lemmas <> v:632 var
R40898:40902 VST.veric.SeparationLogic <> local def
R40905:40908 VST.veric.lift LiftNotation :::'`'_x not
R40913:40928 VST.veric.lift LiftNotation :::'`'_x not
R40909:40910 Coq.Init.Logic <> eq ind
R40912:40912 VST.floyd.call_lemmas <> v:632 var
R40917:40925 VST.veric.expr <> eval_expr def
R40848:40856 VST.msl.log_normalize <> andp_comm thm
R40861:40863 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R40871:40872 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R40868:40870 compcert.common.Values <> val ind
binder 40864:40864 <> v:633
R40894:40897 VST.msl.seplog <> ::logic:x_'&&'_x not
R40873:40877 VST.veric.mpred <> lift0 def
R40880:40887 VST.veric.SeparationLogic <> func_ptr def
R40892:40892 VST.floyd.call_lemmas <> v:633 var
R40898:40902 VST.veric.SeparationLogic <> local def
R40905:40908 VST.veric.lift LiftNotation :::'`'_x not
R40913:40928 VST.veric.lift LiftNotation :::'`'_x not
R40909:40910 Coq.Init.Logic <> eq ind
R40912:40912 VST.floyd.call_lemmas <> v:633 var
R40917:40925 VST.veric.expr <> eval_expr def
R40848:40856 VST.msl.log_normalize <> andp_comm thm
R40861:40863 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R40871:40872 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R40868:40870 compcert.common.Values <> val ind
binder 40864:40864 <> v:634
R40894:40897 VST.msl.seplog <> ::logic:x_'&&'_x not
R40873:40877 VST.veric.mpred <> lift0 def
R40880:40887 VST.veric.SeparationLogic <> func_ptr def
R40892:40892 VST.floyd.call_lemmas <> v:634 var
R40898:40902 VST.veric.SeparationLogic <> local def
R40905:40908 VST.veric.lift LiftNotation :::'`'_x not
R40913:40928 VST.veric.lift LiftNotation :::'`'_x not
R40909:40910 Coq.Init.Logic <> eq ind
R40912:40912 VST.floyd.call_lemmas <> v:634 var
R40917:40925 VST.veric.expr <> eval_expr def
R40951:40960 VST.msl.log_normalize <> andp_assoc thm
R40951:40960 VST.msl.log_normalize <> andp_assoc thm
R40951:40960 VST.msl.log_normalize <> andp_assoc thm
R40951:40960 VST.msl.log_normalize <> andp_assoc thm
R40951:40960 VST.msl.log_normalize <> andp_assoc thm
R40951:40960 VST.msl.log_normalize <> andp_assoc thm
R40951:40960 VST.msl.log_normalize <> andp_assoc thm
R40972:40980 VST.msl.log_normalize <> exp_andp1 thm
R40972:40980 VST.msl.log_normalize <> exp_andp1 thm
R40972:40980 VST.msl.log_normalize <> exp_andp1 thm
R40972:40980 VST.msl.log_normalize <> exp_andp1 thm
R41006:41015 VST.msl.seplog <> andp_right meth
R41006:41015 VST.msl.seplog <> andp_right meth
R41006:41015 VST.msl.seplog <> andp_right meth
R41006:41015 VST.msl.seplog <> andp_right meth
R41006:41015 VST.msl.seplog <> andp_right meth
R41006:41015 VST.msl.seplog <> andp_right meth
R41057:41065 VST.msl.log_normalize <> andp_comm thm
R41057:41065 VST.msl.log_normalize <> andp_comm thm
R41057:41065 VST.msl.log_normalize <> andp_comm thm
R41076:41085 VST.msl.log_normalize <> andp_assoc thm
R41076:41085 VST.msl.log_normalize <> andp_assoc thm
R41076:41085 VST.msl.log_normalize <> andp_assoc thm
R41122:41126 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R41134:41136 VST.msl.seplog <> ::logic:x_'*'_x not
R41129:41131 VST.msl.seplog <> ::logic:x_'*'_x not
R41122:41126 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R41134:41136 VST.msl.seplog <> ::logic:x_'*'_x not
R41129:41131 VST.msl.seplog <> ::logic:x_'*'_x not
R41169:41179 VST.msl.seplog <> sepcon_comm meth
R41169:41179 VST.msl.seplog <> sepcon_comm meth
R41169:41179 VST.msl.seplog <> sepcon_comm meth
R41190:41214 VST.floyd.call_lemmas <> func_ptr'_func_ptr_lifted thm
R41190:41214 VST.floyd.call_lemmas <> func_ptr'_func_ptr_lifted thm
R41190:41214 VST.floyd.call_lemmas <> func_ptr'_func_ptr_lifted thm
R41271:41275 VST.msl.seplog <> ::logic:x_'&&'_x not
R41339:41339 VST.msl.seplog <> ::logic:x_'&&'_x not
R41243:41244 VST.veric.lift LiftNotation :::'`('_x_')' not
R41256:41270 VST.veric.lift LiftNotation :::'`('_x_')' not
R41245:41252 VST.veric.SeparationLogic <> func_ptr def
R41259:41267 VST.veric.expr <> eval_expr def
R41303:41309 VST.msl.seplog <> ::logic:x_'&&'_x not
R41276:41286 VST.veric.SeparationLogic <> tc_exprlist def
R41310:41311 VST.msl.seplog <> ::logic:'|>'_x not
R41312:41316 VST.floyd.canon <> PROPx def
R41321:41326 VST.floyd.canon <> LOCALx def
R41331:41334 VST.floyd.canon <> SEPx def
R41223:41234 VST.floyd.assert_lemmas <> ENTAIL_trans thm
R41271:41275 VST.msl.seplog <> ::logic:x_'&&'_x not
R41339:41339 VST.msl.seplog <> ::logic:x_'&&'_x not
R41243:41244 VST.veric.lift LiftNotation :::'`('_x_')' not
R41256:41270 VST.veric.lift LiftNotation :::'`('_x_')' not
R41245:41252 VST.veric.SeparationLogic <> func_ptr def
R41259:41267 VST.veric.expr <> eval_expr def
R41303:41309 VST.msl.seplog <> ::logic:x_'&&'_x not
R41276:41286 VST.veric.SeparationLogic <> tc_exprlist def
R41310:41311 VST.msl.seplog <> ::logic:'|>'_x not
R41312:41316 VST.floyd.canon <> PROPx def
R41321:41326 VST.floyd.canon <> LOCALx def
R41331:41334 VST.floyd.canon <> SEPx def
R41223:41234 VST.floyd.assert_lemmas <> ENTAIL_trans thm
R41354:41363 VST.msl.seplog <> andp_left2 meth
R41354:41363 VST.msl.seplog <> andp_left2 meth
R41377:41386 VST.msl.log_normalize <> andp_assoc thm
R41377:41386 VST.msl.log_normalize <> andp_assoc thm
R41377:41386 VST.msl.log_normalize <> andp_assoc thm
R41397:41406 VST.msl.seplog <> andp_right meth
R41397:41406 VST.msl.seplog <> andp_right meth
R41443:41452 VST.msl.log_normalize <> andp_assoc thm
R41443:41452 VST.msl.log_normalize <> andp_assoc thm
R41443:41452 VST.msl.log_normalize <> andp_assoc thm
R41443:41452 VST.msl.log_normalize <> andp_assoc thm
R41443:41452 VST.msl.log_normalize <> andp_assoc thm
R41443:41452 VST.msl.log_normalize <> andp_assoc thm
R41467:41476 VST.msl.seplog <> andp_left2 meth
R41467:41476 VST.msl.seplog <> andp_left2 meth
R41467:41476 VST.msl.seplog <> andp_left2 meth
R41467:41476 VST.msl.seplog <> andp_left2 meth
R41514:41518 VST.veric.SeparationLogic <> local def
R41521:41525 VST.veric.mpred <> lift0 def
R41528:41532 VST.veric.mpred <> lift1 def
R41563:41572 VST.msl.seplog <> andp_right meth
R41563:41572 VST.msl.seplog <> andp_right meth
R41598:41607 VST.msl.seplog <> andp_left1 meth
R41598:41607 VST.msl.seplog <> andp_left1 meth
R41598:41607 VST.msl.seplog <> andp_left1 meth
R41621:41630 VST.msl.seplog <> andp_left2 meth
R41621:41630 VST.msl.seplog <> andp_left2 meth
R41621:41630 VST.msl.seplog <> andp_left2 meth
R41651:41660 VST.msl.seplog <> andp_right meth
R41651:41660 VST.msl.seplog <> andp_right meth
R41671:41680 VST.msl.seplog <> andp_left2 meth
R41689:41698 VST.msl.seplog <> andp_left1 meth
R41671:41680 VST.msl.seplog <> andp_left2 meth
R41689:41698 VST.msl.seplog <> andp_left1 meth
R41717:41727 VST.veric.SeparationLogic <> tc_exprlist def
R41717:41727 VST.veric.SeparationLogic <> tc_exprlist def
R41768:41780 VST.msl.seplog <> derives_trans meth
R41790:41801 VST.msl.log_normalize <> andp_derives thm
R41811:41822 VST.msl.seplog <> derives_refl meth
R41832:41841 VST.msl.seplog <> andp_left2 meth
R41850:41861 VST.msl.seplog <> derives_refl meth
R41768:41780 VST.msl.seplog <> derives_trans meth
R41790:41801 VST.msl.log_normalize <> andp_derives thm
R41811:41822 VST.msl.seplog <> derives_refl meth
R41832:41841 VST.msl.seplog <> andp_left2 meth
R41850:41861 VST.msl.seplog <> derives_refl meth
R41956:41959 VST.msl.seplog <> ::logic:x_'&&'_x not
R41928:41931 VST.msl.seplog <> ::logic:x_'&&'_x not
R41932:41936 VST.veric.SeparationLogic <> local def
R41939:41948 VST.veric.SeparationLogic <> tc_environ def
R41960:41962 VST.msl.seplog <> ::logic:'|>'_x not
R41963:41967 VST.floyd.canon <> PROPx def
R41972:41977 VST.floyd.canon <> LOCALx def
R41982:41985 VST.floyd.canon <> SEPx def
R41896:41908 VST.msl.seplog <> derives_trans meth
R41956:41959 VST.msl.seplog <> ::logic:x_'&&'_x not
R41928:41931 VST.msl.seplog <> ::logic:x_'&&'_x not
R41932:41936 VST.veric.SeparationLogic <> local def
R41939:41948 VST.veric.SeparationLogic <> tc_environ def
R41960:41962 VST.msl.seplog <> ::logic:'|>'_x not
R41963:41967 VST.floyd.canon <> PROPx def
R41972:41977 VST.floyd.canon <> LOCALx def
R41982:41985 VST.floyd.canon <> SEPx def
R41896:41908 VST.msl.seplog <> derives_trans meth
R42005:42013 VST.msl.log_normalize <> andp_comm thm
R42005:42013 VST.msl.log_normalize <> andp_comm thm
R42005:42013 VST.msl.log_normalize <> andp_comm thm
R42052:42063 VST.msl.seplog <> later_sepcon meth
R42052:42063 VST.msl.seplog <> later_sepcon meth
R42052:42063 VST.msl.seplog <> later_sepcon meth
R42074:42084 VST.msl.log_normalize <> later_left2 thm
R42074:42084 VST.msl.log_normalize <> later_left2 thm
R42124:42146 VST.floyd.local2ptree_eval <> msubst_eval_exprlist_eq thm
R42124:42146 VST.floyd.local2ptree_eval <> msubst_eval_exprlist_eq thm
R42251:42260 VST.msl.log_normalize <> andp_assoc thm
R42251:42260 VST.msl.log_normalize <> andp_assoc thm
R42251:42260 VST.msl.log_normalize <> andp_assoc thm
R42269:42278 VST.msl.seplog <> andp_left2 meth
R42269:42278 VST.msl.seplog <> andp_left2 meth
R42352:42360 VST.msl.seplog <> ::logic:x_'&&'_x not
R42307:42311 VST.veric.SeparationLogic <> local def
R42314:42317 VST.veric.lift LiftNotation :::'`'_x not
R42323:42350 VST.veric.lift LiftNotation :::'`'_x not
R42318:42319 Coq.Init.Logic <> eq ind
R42327:42339 VST.veric.expr <> eval_exprlist def
R42361:42365 VST.floyd.canon <> PROPx def
R42370:42375 VST.floyd.canon <> LOCALx def
R42380:42383 VST.floyd.canon <> SEPx def
R42287:42299 VST.msl.seplog <> derives_trans meth
R42352:42360 VST.msl.seplog <> ::logic:x_'&&'_x not
R42307:42311 VST.veric.SeparationLogic <> local def
R42314:42317 VST.veric.lift LiftNotation :::'`'_x not
R42323:42350 VST.veric.lift LiftNotation :::'`'_x not
R42318:42319 Coq.Init.Logic <> eq ind
R42327:42339 VST.veric.expr <> eval_exprlist def
R42361:42365 VST.floyd.canon <> PROPx def
R42370:42375 VST.floyd.canon <> LOCALx def
R42380:42383 VST.floyd.canon <> SEPx def
R42287:42299 VST.msl.seplog <> derives_trans meth
R42400:42420 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R42400:42420 VST.floyd.local2ptree_denote <> local2ptree_soundness thm
R42485:42492 VST.msl.log_normalize <> add_andp thm
R42485:42492 VST.msl.log_normalize <> add_andp thm
R42485:42492 VST.msl.log_normalize <> add_andp thm
R42542:42546 VST.veric.SeparationLogic <> local def
R42549:42553 VST.veric.lift <> liftx def
R42556:42560 VST.veric.mpred <> lift1 def
R42563:42566 VST.veric.lift <> lift def
R42608:42612 VST.floyd.canon <> PROPx def
R42646:42662 VST.msl.log_normalize <> sepcon_andp_prop' thm
R42646:42662 VST.msl.log_normalize <> sepcon_andp_prop' thm
R42646:42662 VST.msl.log_normalize <> sepcon_andp_prop' thm
R42671:42680 VST.msl.seplog <> andp_right meth
R42671:42680 VST.msl.seplog <> andp_right meth
R42691:42700 VST.msl.seplog <> prop_right meth
R42691:42700 VST.msl.seplog <> prop_right meth
R42782:42788 VST.floyd.canon <> PARAMSx def
R42791:42798 VST.floyd.canon <> GLOBALSx def
R42801:42805 VST.floyd.canon <> PROPx def
R42808:42813 VST.floyd.canon <> LOCALx def
R42816:42819 VST.floyd.canon <> SEPx def
R42822:42838 VST.veric.SeparationLogic <> argsassert2assert def
R42866:42870 VST.veric.SeparationLogic <> local def
R42873:42877 VST.veric.lift <> liftx def
R42880:42884 VST.veric.mpred <> lift1 def
R42887:42890 VST.veric.lift <> lift def
R42918:42930 VST.msl.seplog <> derives_trans meth
R42918:42930 VST.msl.seplog <> derives_trans meth
R42969:42978 VST.msl.seplog <> andp_right meth
R42989:42998 VST.msl.seplog <> prop_right meth
R42969:42978 VST.msl.seplog <> andp_right meth
R42989:42998 VST.msl.seplog <> prop_right meth
R43168:43184 VST.floyd.call_lemmas <> local2ptree_gvars thm
R43168:43184 VST.floyd.call_lemmas <> local2ptree_gvars thm
R43168:43184 VST.floyd.call_lemmas <> local2ptree_gvars thm
R43282:43293 VST.floyd.call_lemmas <> rev_nil_elim thm
R43282:43293 VST.floyd.call_lemmas <> rev_nil_elim thm
R43308:43317 Coq.Lists.List <> map_eq_nil thm
R43308:43317 Coq.Lists.List <> map_eq_nil thm
R43351:43370 VST.floyd.call_lemmas <> local2ptree_aux_elim thm
R43351:43370 VST.floyd.call_lemmas <> local2ptree_aux_elim thm
prf 43424:43443 <> semax_call_aux55_nil
R43459:43467 VST.veric.mpred <> compspecs class
binder 43455:43456 <> cs:635
R43478:43484 compcert.lib.Maps PTree t def
R43486:43488 compcert.common.Values <> val ind
binder 43471:43475 <> Qtemp:636
R43498:43504 compcert.lib.Maps PTree t def
R43511:43513 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R43507:43510 compcert.cfrontend.Ctypes <> type ind
R43514:43516 compcert.common.Values <> val ind
binder 43492:43495 <> Qvar:637
binder 43520:43521 <> GV:638
R43527:43530 compcert.cfrontend.Clight <> expr ind
binder 43524:43524 <> a:639
binder 43538:43542 <> Delta:640
binder 43544:43544 <> P:641
binder 43546:43546 <> Q:642
binder 43548:43548 <> R:643
binder 43550:43551 <> R':644
binder 43553:43554 <> fs:645
binder 43556:43561 <> argsig:646
R43580:43593 VST.veric.rmaps <> TypeTree ind
binder 43576:43576 <> A:647
R43623:43626 Coq.Init.Datatypes <> list ind
binder 43618:43619 <> ts:648
R43648:43682 VST.msl.functors MixVariantFunctor _functor proj
R43768:43772 VST.veric.mpred <> mpred def
R43701:43732 VST.veric.rmaps <> dependent_type_functor_rec def
R43757:43762 VST.veric.mpred <> ArgsTT def
R43764:43764 VST.floyd.call_lemmas <> A:647 var
R43753:43754 VST.floyd.call_lemmas <> ts:648 var
binder 43606:43608 <> Pre:649
R43806:43809 Coq.Init.Datatypes <> list ind
binder 43801:43802 <> ts:650
R43831:43865 VST.msl.functors MixVariantFunctor _functor proj
R43953:43957 VST.veric.mpred <> mpred def
R43884:43915 VST.veric.rmaps <> dependent_type_functor_rec def
R43940:43947 VST.veric.mpred <> AssertTT def
R43949:43949 VST.floyd.call_lemmas <> A:647 var
R43936:43937 VST.floyd.call_lemmas <> ts:650 var
binder 43787:43790 <> Post:651
binder 43983:43989 <> witness:652
binder 43991:43995 <> Frame:653
binder 43997:43998 <> bl:654
binder 44000:44003 <> Ppre:655
binder 44005:44008 <> Rpre:656
binder 44010:44012 <> GV':657
binder 44014:44015 <> vl:658
binder 44017:44018 <> gv:659
binder 44020:44023 <> args:660
R44048:44050 Coq.Init.Logic <> ::type_scope:x_'='_x not
R44035:44045 VST.floyd.local2ptree_denote <> local2ptree def
R44047:44047 VST.floyd.call_lemmas <> Q:642 var
R44051:44051 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R44057:44058 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R44063:44064 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R44068:44069 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R44072:44072 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R44052:44056 VST.floyd.call_lemmas <> Qtemp:636 var
R44059:44062 VST.floyd.call_lemmas <> Qvar:637 var
R44065:44067 Coq.Init.Datatypes <> nil constr
R44070:44071 VST.floyd.call_lemmas <> GV:638 var
binder 44027:44031 <> PTREE:661
R44190:44192 Coq.Init.Logic <> ::type_scope:x_'='_x not
R44086:44095 VST.floyd.local2ptree_denote <> force_list def
R44098:44100 Coq.Lists.List <> map def
R44156:44177 VST.floyd.local2ptree_denote <> explicit_cast_exprlist def
R44186:44187 VST.floyd.call_lemmas <> bl:654 var
R44179:44184 VST.floyd.call_lemmas <> argsig:646 var
R44103:44118 VST.floyd.local2ptree_eval <> msubst_eval_expr def
R44137:44138 VST.floyd.call_lemmas <> GV:638 var
R44132:44135 VST.floyd.call_lemmas <> Qvar:637 var
R44126:44130 VST.floyd.call_lemmas <> Qtemp:636 var
R44120:44124 VST.floyd.call_lemmas <> Delta:640 var
R44193:44196 Coq.Init.Datatypes <> Some constr
R44198:44199 VST.floyd.call_lemmas <> vl:658 var
binder 44077:44082 <> MSUBST:662
R44519:44521 Coq.Init.Logic <> ::type_scope:x_'='_x not
R44504:44506 VST.floyd.call_lemmas <> Pre:649 var
R44512:44518 VST.floyd.call_lemmas <> witness:652 var
R44508:44510 Coq.Init.Datatypes <> nil constr
R44522:44526 VST.floyd.canon <> PROPx def
R44534:44540 VST.floyd.client_lemmas <> LAMBDAx syndef
R44545:44548 VST.floyd.call_lemmas <> args:660 var
R44542:44543 VST.floyd.call_lemmas <> gv:659 var
R44551:44554 VST.floyd.canon <> SEPx def
R44556:44559 VST.floyd.call_lemmas <> Rpre:656 var
R44528:44531 VST.floyd.call_lemmas <> Ppre:655 var
binder 44498:44501 <> PRE1:663
R44600:44602 Coq.Init.Logic <> ::type_scope:x_'='_x not
R44574:44584 VST.floyd.local2ptree_denote <> local2ptree def
R44587:44589 Coq.Lists.List <> map def
R44597:44598 VST.floyd.call_lemmas <> gv:659 var
R44591:44595 VST.floyd.canon <> gvars constr
R44603:44603 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R44614:44615 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R44629:44630 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R44634:44635 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R44639:44639 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R44604:44613 compcert.lib.Maps PTree Leaf constr
R44616:44626 compcert.lib.Maps PTree empty def
R44631:44633 Coq.Init.Datatypes <> nil constr
R44636:44638 VST.floyd.call_lemmas <> GV':657 var
binder 44566:44571 <> PTREE':664
R44682:44683 Coq.Init.Logic <> ::type_scope:x_'='_x not
R44657:44662 Coq.Lists.List <> firstn def
R44680:44681 VST.floyd.call_lemmas <> vl:658 var
R44665:44670 Coq.Lists.List <> length syndef
R44672:44677 VST.floyd.call_lemmas <> argsig:646 var
R44684:44687 VST.floyd.call_lemmas <> args:660 var
binder 44645:44653 <> CHECKTEMP:665
R44701:44716 VST.floyd.call_lemmas <> check_gvars_spec def
R44721:44723 VST.floyd.call_lemmas <> GV':657 var
R44718:44719 VST.floyd.call_lemmas <> GV:638 var
binder 44693:44698 <> CHECKG:666
R44761:44765 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R44733:44737 VST.floyd.canon <> PROPx def
R44742:44747 VST.floyd.canon <> LOCALx def
R44752:44755 VST.floyd.canon <> SEPx def
R44757:44758 VST.floyd.call_lemmas <> R':644 var
R44749:44749 VST.floyd.call_lemmas <> Q:642 var
R44739:44739 VST.floyd.call_lemmas <> P:641 var
R44766:44768 VST.msl.seplog <> ::logic:'|>'_x not
R44769:44773 VST.floyd.canon <> PROPx def
R44778:44783 VST.floyd.canon <> LOCALx def
R44788:44791 VST.floyd.canon <> SEPx def
R44793:44793 VST.floyd.call_lemmas <> R:643 var
R44785:44785 VST.floyd.call_lemmas <> Q:642 var
R44775:44775 VST.floyd.call_lemmas <> P:641 var
binder 44728:44730 <> HR':667
R44827:44842 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R44808:44824 VST.floyd.base <> fold_right_sepcon def
R44826:44826 VST.floyd.call_lemmas <> R:643 var
R44865:44867 VST.msl.seplog <> ::logic:x_'*'_x not
R44843:44859 VST.floyd.base <> fold_right_sepcon def
R44861:44864 VST.floyd.call_lemmas <> Rpre:656 var
R44868:44884 VST.floyd.base <> fold_right_sepcon def
R44886:44890 VST.floyd.call_lemmas <> Frame:653 var
binder 44800:44804 <> FRAME:668
R44902:44915 VST.floyd.client_lemmas <> fold_right_and def
R44922:44925 VST.floyd.call_lemmas <> Ppre:655 var
R44917:44920 Coq.Init.Logic <> True ind
binder 44895:44898 <> PPRE:669
R44949:44951 Coq.Init.Logic <> ::type_scope:x_'='_x not
R44936:44941 Coq.Lists.List <> length syndef
R44943:44948 VST.floyd.call_lemmas <> argsig:646 var
R44952:44957 Coq.Lists.List <> length syndef
R44959:44960 VST.floyd.call_lemmas <> bl:654 var
binder 44930:44932 <> LEN:670
R44964:44970 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R44976:44977 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R45131:45142 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R44971:44975 VST.floyd.call_lemmas <> Delta:640 var
R45099:45102 VST.msl.seplog <> ::logic:x_'&&'_x not
R45024:45028 VST.msl.seplog <> ::logic:x_'&&'_x not
R45098:45098 VST.msl.seplog <> ::logic:x_'&&'_x not
R44993:44996 VST.msl.seplog <> ::logic:x_'&&'_x not
R44978:44984 VST.veric.SeparationLogic <> tc_expr def
R44992:44992 VST.floyd.call_lemmas <> a:639 var
R44986:44990 VST.floyd.call_lemmas <> Delta:640 var
R44997:45007 VST.veric.SeparationLogic <> tc_exprlist def
R45022:45023 VST.floyd.call_lemmas <> bl:654 var
R45015:45020 VST.floyd.call_lemmas <> argsig:646 var
R45009:45013 VST.floyd.call_lemmas <> Delta:640 var
R45029:45031 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R45039:45041 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R45036:45038 compcert.common.Values <> val ind
binder 45032:45032 <> v:671
R45063:45067 VST.msl.seplog <> ::logic:x_'&&'_x not
R45042:45046 VST.veric.mpred <> lift0 def
R45049:45056 VST.veric.SeparationLogic <> func_ptr def
R45061:45061 VST.floyd.call_lemmas <> v:671 var
R45058:45059 VST.floyd.call_lemmas <> fs:645 var
R45068:45072 VST.veric.SeparationLogic <> local def
R45075:45077 VST.veric.lift LiftNotation :::'`'_x not
R45082:45096 VST.veric.lift LiftNotation :::'`'_x not
R45078:45079 Coq.Init.Logic <> eq ind
R45081:45081 VST.floyd.call_lemmas <> v:671 var
R45085:45093 VST.veric.expr <> eval_expr def
R45095:45095 VST.floyd.call_lemmas <> a:639 var
R45103:45107 VST.floyd.canon <> PROPx def
R45112:45117 VST.floyd.canon <> LOCALx def
R45122:45125 VST.floyd.canon <> SEPx def
R45127:45128 VST.floyd.call_lemmas <> R':644 var
R45119:45119 VST.floyd.call_lemmas <> Q:642 var
R45109:45109 VST.floyd.call_lemmas <> P:641 var
R45143:45143 VST.msl.seplog <> ::logic:x_'&&'_x not
R45190:45199 VST.msl.seplog <> ::logic:x_'&&'_x not
R45353:45353 VST.msl.seplog <> ::logic:x_'&&'_x not
R45159:45162 VST.msl.seplog <> ::logic:x_'&&'_x not
R45144:45150 VST.veric.SeparationLogic <> tc_expr def
R45158:45158 VST.floyd.call_lemmas <> a:639 var
R45152:45156 VST.floyd.call_lemmas <> Delta:640 var
R45163:45173 VST.veric.SeparationLogic <> tc_exprlist def
R45188:45189 VST.floyd.call_lemmas <> bl:654 var
R45181:45186 VST.floyd.call_lemmas <> argsig:646 var
R45175:45179 VST.floyd.call_lemmas <> Delta:640 var
R45317:45319 VST.msl.seplog <> ::logic:x_'*'_x not
R45272:45279 VST.msl.seplog <> ::logic:x_'*'_x not
R45200:45203 VST.msl.seplog <> ::logic:'|>'_x not
R45271:45271 VST.msl.seplog <> ::logic:'|>'_x not
binder 45208:45210 <> rho:672
R45215:45217 VST.floyd.call_lemmas <> Pre:649 var
R45231:45231 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45241:45242 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45270:45270 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R45232:45236 VST.veric.mpred <> ge_of def
R45238:45240 VST.floyd.call_lemmas <> rho:672 var
R45243:45255 VST.veric.expr <> eval_exprlist def
R45267:45269 VST.floyd.call_lemmas <> rho:672 var
R45264:45265 VST.floyd.call_lemmas <> bl:654 var
R45257:45262 VST.floyd.call_lemmas <> argsig:646 var
R45223:45229 VST.floyd.call_lemmas <> witness:652 var
R45219:45221 Coq.Init.Datatypes <> nil constr
R45280:45282 VST.veric.lift LiftNotation :::'`'_x not
R45295:45316 VST.veric.lift LiftNotation :::'`'_x not
R45283:45291 VST.floyd.client_lemmas <> func_ptr' def
R45293:45294 VST.floyd.call_lemmas <> fs:645 var
R45305:45313 VST.veric.expr <> eval_expr def
R45315:45315 VST.floyd.call_lemmas <> a:639 var
R45320:45321 VST.msl.seplog <> ::logic:'|>'_x not
R45322:45326 VST.floyd.canon <> PROPx def
R45331:45336 VST.floyd.canon <> LOCALx def
R45341:45344 VST.floyd.canon <> SEPx def
R45346:45350 VST.floyd.call_lemmas <> Frame:653 var
R45338:45338 VST.floyd.call_lemmas <> Q:642 var
R45328:45328 VST.floyd.call_lemmas <> P:641 var
R45405:45407 Coq.Init.Datatypes <> nil constr
R45378:45393 VST.floyd.call_lemmas <> semax_call_aux55 thm
R45405:45407 Coq.Init.Datatypes <> nil constr
R45378:45393 VST.floyd.call_lemmas <> semax_call_aux55 thm
prf 45436:45450 <> tc_exprlist_len
R45467:45475 VST.veric.mpred <> compspecs class
binder 45462:45463 <> cs:673
binder 45478:45482 <> Delta:674
binder 45484:45489 <> argsig:675
binder 45491:45492 <> bl:676
R45524:45528 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R45497:45507 VST.veric.SeparationLogic <> tc_exprlist def
R45522:45523 VST.floyd.call_lemmas <> bl:676 var
R45515:45520 VST.floyd.call_lemmas <> argsig:675 var
R45509:45513 VST.floyd.call_lemmas <> Delta:674 var
R45529:45531 VST.msl.seplog <> ::logic:'!!'_x not
R45557:45557 VST.msl.seplog <> ::logic:'!!'_x not
R45545:45547 Coq.Init.Logic <> ::type_scope:x_'='_x not
R45532:45537 Coq.Lists.List <> length syndef
R45539:45544 VST.floyd.call_lemmas <> argsig:675 var
R45548:45553 Coq.Lists.List <> length syndef
R45555:45556 VST.floyd.call_lemmas <> bl:676 var
R45596:45606 VST.veric.SeparationLogic <> tc_exprlist def
R45673:45679 VST.msl.log_normalize <> FF_left thm
R45673:45679 VST.msl.log_normalize <> FF_left thm
R45673:45679 VST.msl.log_normalize <> FF_left thm
R45673:45679 VST.msl.log_normalize <> FF_left thm
R45673:45679 VST.msl.log_normalize <> FF_left thm
R45689:45698 VST.msl.seplog <> prop_right meth
R45689:45698 VST.msl.seplog <> prop_right meth
R45723:45743 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R45723:45743 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R45723:45743 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R45723:45743 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R45723:45743 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R45723:45743 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R45759:45768 VST.msl.seplog <> andp_left2 meth
R45759:45768 VST.msl.seplog <> andp_left2 meth
R45779:45791 VST.msl.seplog <> derives_trans meth
R45779:45791 VST.msl.seplog <> derives_trans meth
prf 45839:45854 <> semax_pre_setup2
binder 45857:45858 <> cs:677
binder 45860:45864 <> Espec:678
binder 45867:45871 <> Delta:679
binder 45873:45874 <> fs:680
binder 45876:45876 <> a:681
binder 45878:45879 <> bl:682
binder 45881:45886 <> argsig:683
binder 45888:45888 <> P:684
binder 45890:45890 <> Q:685
binder 45892:45893 <> R':686
binder 45918:45922 <> Post2:687
binder 45924:45925 <> rv:688
R45936:45939 Coq.Init.Datatypes <> list ind
R45941:45943 compcert.common.Values <> val ind
binder 45928:45929 <> vl:689
binder 45931:45934 <> args:690
R45959:45965 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R45971:45972 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R46001:46005 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R45966:45970 VST.floyd.call_lemmas <> Delta:679 var
R45973:45977 VST.floyd.canon <> PROPx def
R45982:45987 VST.floyd.canon <> LOCALx def
R45992:45995 VST.floyd.canon <> SEPx def
R45997:45998 VST.floyd.call_lemmas <> R':686 var
R45989:45989 VST.floyd.call_lemmas <> Q:685 var
R45979:45979 VST.floyd.call_lemmas <> P:684 var
R46006:46012 VST.veric.SeparationLogic <> tc_expr def
R46020:46020 VST.floyd.call_lemmas <> a:681 var
R46014:46018 VST.floyd.call_lemmas <> Delta:679 var
binder 45953:45955 <> TC0:691
R46036:46042 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R46048:46049 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R46078:46082 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R46043:46047 VST.floyd.call_lemmas <> Delta:679 var
R46050:46054 VST.floyd.canon <> PROPx def
R46059:46064 VST.floyd.canon <> LOCALx def
R46069:46072 VST.floyd.canon <> SEPx def
R46074:46075 VST.floyd.call_lemmas <> R':686 var
R46066:46066 VST.floyd.call_lemmas <> Q:685 var
R46056:46056 VST.floyd.call_lemmas <> P:684 var
R46083:46093 VST.veric.SeparationLogic <> tc_exprlist def
R46108:46109 VST.floyd.call_lemmas <> bl:682 var
R46101:46106 VST.floyd.call_lemmas <> argsig:683 var
R46095:46099 VST.floyd.call_lemmas <> Delta:679 var
binder 46030:46032 <> TC1:692
R46309:46315 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R46321:46322 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R46351:46394 VST.floyd.canon <> :::'ENTAIL'_x_','_x_'|--'_x not
R46316:46320 VST.floyd.call_lemmas <> Delta:679 var
R46323:46327 VST.floyd.canon <> PROPx def
R46332:46337 VST.floyd.canon <> LOCALx def
R46342:46345 VST.floyd.canon <> SEPx def
R46347:46348 VST.floyd.call_lemmas <> R':686 var
R46339:46339 VST.floyd.call_lemmas <> Q:685 var
R46329:46329 VST.floyd.call_lemmas <> P:684 var
R46395:46398 VST.msl.seplog <> ::logic:'!!'_x not
R46429:46429 VST.msl.seplog <> ::logic:'!!'_x not
R46424:46424 Coq.Init.Logic <> ::type_scope:x_'='_x not
R46399:46404 Coq.Lists.List <> firstn def
R46422:46423 VST.floyd.call_lemmas <> vl:689 var
R46407:46412 Coq.Lists.List <> length syndef
R46414:46419 VST.floyd.call_lemmas <> argsig:683 var
R46425:46428 VST.floyd.call_lemmas <> args:690 var
binder 46297:46305 <> CHECKTEMP:693
R46882:46890 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46892:46896 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R47061:47077 VST.veric.SeparationLogic <> normal_ret_assert def
R47079:47083 VST.floyd.call_lemmas <> Post2:687 var
R47045:47049 compcert.cfrontend.Clight <> Scall constr
R47056:47057 VST.floyd.call_lemmas <> bl:682 var
R47054:47054 VST.floyd.call_lemmas <> a:681 var
R47051:47052 VST.floyd.call_lemmas <> rv:688 var
R47001:47013 VST.msl.seplog <> ::logic:x_'&&'_x not
R46924:46926 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R46934:46935 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R46931:46933 compcert.common.Values <> val ind
binder 46927:46927 <> v:694
R46957:46960 VST.msl.seplog <> ::logic:x_'&&'_x not
R46936:46940 VST.veric.mpred <> lift0 def
R46943:46950 VST.veric.SeparationLogic <> func_ptr def
R46955:46955 VST.floyd.call_lemmas <> v:694 var
R46952:46953 VST.floyd.call_lemmas <> fs:680 var
R46961:46965 VST.veric.SeparationLogic <> local def
R46968:46971 VST.veric.lift LiftNotation :::'`'_x not
R46976:46991 VST.veric.lift LiftNotation :::'`'_x not
R46972:46973 Coq.Init.Logic <> eq ind
R46975:46975 VST.floyd.call_lemmas <> v:694 var
R46980:46988 VST.veric.expr <> eval_expr def
R46990:46990 VST.floyd.call_lemmas <> a:681 var
R47014:47018 VST.floyd.canon <> PROPx def
R47023:47028 VST.floyd.canon <> LOCALx def
R47033:47036 VST.floyd.canon <> SEPx def
R47038:47039 VST.floyd.call_lemmas <> R':686 var
R47030:47030 VST.floyd.call_lemmas <> Q:685 var
R47020:47020 VST.floyd.call_lemmas <> P:684 var
R46907:46911 VST.floyd.call_lemmas <> Delta:679 var
R46901:46905 VST.floyd.call_lemmas <> Espec:678 var
R46898:46899 VST.floyd.call_lemmas <> cs:677 var
R46436:46440 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R46858:46874 VST.veric.SeparationLogic <> normal_ret_assert def
R46876:46880 VST.floyd.call_lemmas <> Post2:687 var
R46842:46846 compcert.cfrontend.Clight <> Scall constr
R46853:46854 VST.floyd.call_lemmas <> bl:682 var
R46851:46851 VST.floyd.call_lemmas <> a:681 var
R46848:46849 VST.floyd.call_lemmas <> rv:688 var
R46735:46751 VST.msl.seplog <> ::logic:x_'&&'_x not
R46683:46687 VST.msl.seplog <> ::logic:x_'&&'_x not
R46734:46734 VST.msl.seplog <> ::logic:x_'&&'_x not
R46637:46654 VST.msl.seplog <> ::logic:x_'&&'_x not
R46517:46533 VST.msl.seplog <> ::logic:x_'&&'_x not
R46467:46470 VST.msl.seplog <> ::logic:'!!'_x not
R46516:46516 VST.msl.seplog <> ::logic:'!!'_x not
R46494:46496 Coq.Init.Logic <> ::type_scope:x_'='_x not
R46471:46486 Coq.Init.Datatypes <> length def
R46488:46493 VST.floyd.call_lemmas <> argsig:683 var
R46497:46512 Coq.Init.Datatypes <> length def
R46514:46515 VST.floyd.call_lemmas <> bl:682 var
R46534:46605 VST.msl.seplog <> ::logic:'!!'_x not
R46636:46636 VST.msl.seplog <> ::logic:'!!'_x not
R46631:46631 Coq.Init.Logic <> ::type_scope:x_'='_x not
R46606:46611 Coq.Lists.List <> firstn def
R46629:46630 VST.floyd.call_lemmas <> vl:689 var
R46614:46619 Coq.Lists.List <> length syndef
R46621:46626 VST.floyd.call_lemmas <> argsig:683 var
R46632:46635 VST.floyd.call_lemmas <> args:690 var
R46655:46659 VST.floyd.canon <> PROPx def
R46664:46669 VST.floyd.canon <> LOCALx def
R46674:46677 VST.floyd.canon <> SEPx def
R46679:46680 VST.floyd.call_lemmas <> R':686 var
R46671:46671 VST.floyd.call_lemmas <> Q:685 var
R46661:46661 VST.floyd.call_lemmas <> P:684 var
R46703:46706 VST.msl.seplog <> ::logic:x_'&&'_x not
R46688:46694 VST.veric.SeparationLogic <> tc_expr def
R46702:46702 VST.floyd.call_lemmas <> a:681 var
R46696:46700 VST.floyd.call_lemmas <> Delta:679 var
R46707:46717 VST.veric.SeparationLogic <> tc_exprlist def
R46732:46733 VST.floyd.call_lemmas <> bl:682 var
R46725:46730 VST.floyd.call_lemmas <> argsig:683 var
R46719:46723 VST.floyd.call_lemmas <> Delta:679 var
R46753:46755 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R46763:46764 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R46760:46762 compcert.common.Values <> val ind
binder 46756:46756 <> v:695
R46786:46789 VST.msl.seplog <> ::logic:x_'&&'_x not
R46765:46769 VST.veric.mpred <> lift0 def
R46772:46779 VST.veric.SeparationLogic <> func_ptr def
R46784:46784 VST.floyd.call_lemmas <> v:695 var
R46781:46782 VST.floyd.call_lemmas <> fs:680 var
R46790:46794 VST.veric.SeparationLogic <> local def
R46797:46800 VST.veric.lift LiftNotation :::'`'_x not
R46805:46820 VST.veric.lift LiftNotation :::'`'_x not
R46801:46802 Coq.Init.Logic <> eq ind
R46804:46804 VST.floyd.call_lemmas <> v:695 var
R46809:46817 VST.veric.expr <> eval_expr def
R46819:46819 VST.floyd.call_lemmas <> a:681 var
R46451:46455 VST.floyd.call_lemmas <> Delta:679 var
R46445:46449 VST.floyd.call_lemmas <> Espec:678 var
R46442:46443 VST.floyd.call_lemmas <> cs:677 var
R47131:47131 VST.msl.seplog <> ::logic:x_'&&'_x not
R47178:47192 VST.msl.seplog <> ::logic:x_'&&'_x not
R47493:47493 VST.msl.seplog <> ::logic:x_'&&'_x not
R47147:47150 VST.msl.seplog <> ::logic:x_'&&'_x not
R47132:47138 VST.veric.SeparationLogic <> tc_expr def
R47151:47161 VST.veric.SeparationLogic <> tc_exprlist def
R47271:47284 VST.msl.seplog <> ::logic:x_'&&'_x not
R47492:47492 VST.msl.seplog <> ::logic:x_'&&'_x not
R47194:47196 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R47204:47205 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R47201:47203 compcert.common.Values <> val ind
binder 47197:47197 <> v:696
R47227:47230 VST.msl.seplog <> ::logic:x_'&&'_x not
R47206:47210 VST.veric.mpred <> lift0 def
R47213:47220 VST.veric.SeparationLogic <> func_ptr def
R47225:47225 VST.floyd.call_lemmas <> v:696 var
R47231:47235 VST.veric.SeparationLogic <> local def
R47238:47241 VST.veric.lift LiftNotation :::'`'_x not
R47246:47261 VST.veric.lift LiftNotation :::'`'_x not
R47242:47243 Coq.Init.Logic <> eq ind
R47245:47245 VST.floyd.call_lemmas <> v:696 var
R47250:47258 VST.veric.expr <> eval_expr def
R47450:47463 VST.msl.seplog <> ::logic:x_'&&'_x not
R47334:47347 VST.msl.seplog <> ::logic:x_'&&'_x not
R47285:47287 VST.msl.seplog <> ::logic:'!!'_x not
R47333:47333 VST.msl.seplog <> ::logic:'!!'_x not
R47311:47313 Coq.Init.Logic <> ::type_scope:x_'='_x not
R47288:47303 Coq.Init.Datatypes <> length def
R47314:47329 Coq.Init.Datatypes <> length def
R47348:47350 VST.msl.seplog <> ::logic:'!!'_x not
R47381:47449 VST.msl.seplog <> ::logic:'!!'_x not
R47376:47376 Coq.Init.Logic <> ::type_scope:x_'='_x not
R47351:47356 Coq.Lists.List <> firstn def
R47359:47364 Coq.Lists.List <> length syndef
R47464:47468 VST.floyd.canon <> PROPx def
R47473:47478 VST.floyd.canon <> LOCALx def
R47483:47486 VST.floyd.canon <> SEPx def
R47112:47120 VST.floyd.canon <> semax_pre thm
R47131:47131 VST.msl.seplog <> ::logic:x_'&&'_x not
R47178:47192 VST.msl.seplog <> ::logic:x_'&&'_x not
R47493:47493 VST.msl.seplog <> ::logic:x_'&&'_x not
R47147:47150 VST.msl.seplog <> ::logic:x_'&&'_x not
R47132:47138 VST.veric.SeparationLogic <> tc_expr def
R47151:47161 VST.veric.SeparationLogic <> tc_exprlist def
R47271:47284 VST.msl.seplog <> ::logic:x_'&&'_x not
R47492:47492 VST.msl.seplog <> ::logic:x_'&&'_x not
R47194:47196 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R47204:47205 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R47201:47203 compcert.common.Values <> val ind
binder 47197:47197 <> v:697
R47227:47230 VST.msl.seplog <> ::logic:x_'&&'_x not
R47206:47210 VST.veric.mpred <> lift0 def
R47213:47220 VST.veric.SeparationLogic <> func_ptr def
R47225:47225 VST.floyd.call_lemmas <> v:697 var
R47231:47235 VST.veric.SeparationLogic <> local def
R47238:47241 VST.veric.lift LiftNotation :::'`'_x not
R47246:47261 VST.veric.lift LiftNotation :::'`'_x not
R47242:47243 Coq.Init.Logic <> eq ind
R47245:47245 VST.floyd.call_lemmas <> v:697 var
R47250:47258 VST.veric.expr <> eval_expr def
R47450:47463 VST.msl.seplog <> ::logic:x_'&&'_x not
R47334:47347 VST.msl.seplog <> ::logic:x_'&&'_x not
R47285:47287 VST.msl.seplog <> ::logic:'!!'_x not
R47333:47333 VST.msl.seplog <> ::logic:'!!'_x not
R47311:47313 Coq.Init.Logic <> ::type_scope:x_'='_x not
R47288:47303 Coq.Init.Datatypes <> length def
R47314:47329 Coq.Init.Datatypes <> length def
R47348:47350 VST.msl.seplog <> ::logic:'!!'_x not
R47381:47449 VST.msl.seplog <> ::logic:'!!'_x not
R47376:47376 Coq.Init.Logic <> ::type_scope:x_'='_x not
R47351:47356 Coq.Lists.List <> firstn def
R47359:47364 Coq.Lists.List <> length syndef
R47464:47468 VST.floyd.canon <> PROPx def
R47473:47478 VST.floyd.canon <> LOCALx def
R47483:47486 VST.floyd.canon <> SEPx def
R47112:47120 VST.floyd.canon <> semax_pre thm
R47507:47516 VST.msl.seplog <> andp_right meth
R47528:47537 VST.msl.seplog <> andp_right meth
R47547:47556 VST.msl.seplog <> andp_left2 meth
R47559:47568 VST.msl.seplog <> andp_left1 meth
R47571:47582 VST.msl.seplog <> derives_refl meth
R47507:47516 VST.msl.seplog <> andp_right meth
R47528:47537 VST.msl.seplog <> andp_right meth
R47547:47556 VST.msl.seplog <> andp_left2 meth
R47559:47568 VST.msl.seplog <> andp_left1 meth
R47571:47582 VST.msl.seplog <> derives_refl meth
R47599:47611 VST.msl.seplog <> derives_trans meth
R47623:47632 VST.msl.seplog <> andp_right meth
R47599:47611 VST.msl.seplog <> derives_trans meth
R47623:47632 VST.msl.seplog <> andp_right meth
R47672:47683 VST.msl.log_normalize <> andp_derives thm
R47696:47705 VST.msl.seplog <> andp_left2 meth
R47672:47683 VST.msl.log_normalize <> andp_derives thm
R47696:47705 VST.msl.seplog <> andp_left2 meth
R47733:47742 VST.msl.log_normalize <> andp_assoc thm
R47745:47753 VST.msl.log_normalize <> andp_comm thm
R47733:47742 VST.msl.log_normalize <> andp_assoc thm
R47733:47742 VST.msl.log_normalize <> andp_assoc thm
R47745:47753 VST.msl.log_normalize <> andp_comm thm
R47745:47753 VST.msl.log_normalize <> andp_comm thm
R47771:47780 VST.msl.log_normalize <> andp_assoc thm
R47789:47798 VST.msl.seplog <> andp_left1 meth
R47771:47780 VST.msl.log_normalize <> andp_assoc thm
R47771:47780 VST.msl.log_normalize <> andp_assoc thm
R47789:47798 VST.msl.seplog <> andp_left1 meth
R47807:47816 VST.msl.seplog <> andp_right meth
R47807:47816 VST.msl.seplog <> andp_right meth
R47846:47854 VST.msl.log_normalize <> andp_comm thm
R47846:47854 VST.msl.log_normalize <> andp_comm thm
R47846:47854 VST.msl.log_normalize <> andp_comm thm
R47867:47876 VST.msl.seplog <> andp_right meth
R47867:47876 VST.msl.seplog <> andp_right meth
R47901:47913 VST.msl.seplog <> derives_trans meth
R47936:47950 VST.floyd.call_lemmas <> tc_exprlist_len thm
R47901:47913 VST.msl.seplog <> derives_trans meth
R47936:47950 VST.floyd.call_lemmas <> tc_exprlist_len thm
R47966:47974 VST.msl.log_normalize <> andp_comm thm
R47977:47986 VST.msl.log_normalize <> andp_assoc thm
R47966:47974 VST.msl.log_normalize <> andp_comm thm
R47966:47974 VST.msl.log_normalize <> andp_comm thm
R47977:47986 VST.msl.log_normalize <> andp_assoc thm
R47977:47986 VST.msl.log_normalize <> andp_assoc thm
R48000:48008 VST.msl.log_normalize <> andp_comm thm
R48000:48008 VST.msl.log_normalize <> andp_comm thm
R48000:48008 VST.msl.log_normalize <> andp_comm thm
prf 48032:48050 <> semax_call_id00_wow
R48067:48075 VST.veric.mpred <> compspecs class
binder 48063:48064 <> cs:698
binder 48079:48083 <> Qtemp:699
binder 48085:48088 <> Qvar:700
binder 48090:48090 <> a:701
binder 48092:48093 <> GV:702
binder 48095:48099 <> Delta:703
binder 48101:48101 <> P:704
binder 48103:48103 <> Q:705
binder 48105:48105 <> R:706
binder 48107:48108 <> R':707
binder 48113:48114 <> fs:708
binder 48116:48121 <> argsig:709
binder 48123:48127 <> retty:710
binder 48129:48130 <> cc:711
binder 48132:48133 <> ts:712
R48140:48153 VST.veric.rmaps <> TypeTree ind
binder 48137:48137 <> A:713
binder 48157:48159 <> Pre:714
binder 48161:48164 <> Post:715
binder 48166:48170 <> NEPre:716
binder 48172:48177 <> NEPost:717
R48193:48227 VST.msl.functors MixVariantFunctor _functor proj
R48269:48273 VST.veric.mpred <> mpred def
R48230:48261 VST.veric.rmaps <> dependent_type_functor_rec def
R48266:48266 VST.floyd.call_lemmas <> A:713 var
R48263:48264 VST.floyd.call_lemmas <> ts:712 var
binder 48184:48190 <> witness:718
R48287:48290 Coq.Init.Datatypes <> list ind
R48292:48296 VST.veric.mpred <> mpred def
binder 48280:48284 <> Frame:719
R48307:48310 Coq.Init.Datatypes <> list ind
R48312:48315 compcert.cfrontend.Clight <> expr ind
binder 48303:48304 <> bl:720
R48328:48331 Coq.Init.Datatypes <> list ind
binder 48322:48325 <> Ppre:721
R48373:48376 Coq.Init.Datatypes <> list ind
R48378:48382 VST.veric.mpred <> mpred def
binder 48367:48370 <> Rpre:722
binder 48426:48428 <> GV':723
binder 48430:48431 <> gv:724
binder 48433:48436 <> args:725
R48448:48451 Coq.Init.Datatypes <> list ind
R48453:48455 compcert.common.Values <> val ind
binder 48443:48444 <> vl:726
R48469:48479 VST.floyd.call_lemmas <> call_setup2 def
R48640:48643 VST.floyd.call_lemmas <> args:725 var
R48637:48638 VST.floyd.call_lemmas <> gv:724 var
R48633:48635 VST.floyd.call_lemmas <> GV':723 var
R48614:48617 VST.floyd.call_lemmas <> Rpre:722 var
R48600:48603 VST.floyd.call_lemmas <> Ppre:721 var
R48594:48598 VST.floyd.call_lemmas <> Frame:719 var
R48586:48592 VST.floyd.call_lemmas <> witness:718 var
R48564:48565 VST.floyd.call_lemmas <> vl:726 var
R48561:48562 VST.floyd.call_lemmas <> bl:720 var
R48554:48559 VST.floyd.call_lemmas <> NEPost:717 var
R48548:48552 VST.floyd.call_lemmas <> NEPre:716 var
R48543:48546 VST.floyd.call_lemmas <> Post:715 var
R48539:48541 VST.floyd.call_lemmas <> Pre:714 var
R48537:48537 VST.floyd.call_lemmas <> A:713 var
R48534:48535 VST.floyd.call_lemmas <> ts:712 var
R48531:48532 VST.floyd.call_lemmas <> cc:711 var
R48525:48529 VST.floyd.call_lemmas <> retty:710 var
R48518:48523 VST.floyd.call_lemmas <> argsig:709 var
R48515:48516 VST.floyd.call_lemmas <> fs:708 var
R48512:48513 VST.floyd.call_lemmas <> R':707 var
R48510:48510 VST.floyd.call_lemmas <> R:706 var
R48508:48508 VST.floyd.call_lemmas <> Q:705 var
R48506:48506 VST.floyd.call_lemmas <> P:704 var
R48500:48504 VST.floyd.call_lemmas <> Delta:703 var
R48498:48498 VST.floyd.call_lemmas <> a:701 var
R48495:48496 VST.floyd.call_lemmas <> GV:702 var
R48490:48493 VST.floyd.call_lemmas <> Qvar:700 var
R48484:48488 VST.floyd.call_lemmas <> Qtemp:699 var
R48481:48482 VST.floyd.call_lemmas <> cs:698 var
binder 48462:48466 <> SETUP:727
binder 48648:48652 <> Espec:728
R48683:48686 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R48687:48691 VST.veric.mpred <> mpred def
R48676:48682 VST.veric.mpred <> environ ind
binder 48669:48673 <> Post2:729
binder 48708:48708 <> B:730
R48739:48742 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R48743:48746 Coq.Init.Datatypes <> list ind
R48738:48738 VST.floyd.call_lemmas <> B:730 var
binder 48731:48735 <> Ppost:731
R48776:48779 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R48780:48783 Coq.Init.Datatypes <> list ind
R48785:48789 VST.veric.mpred <> mpred def
R48775:48775 VST.floyd.call_lemmas <> B:730 var
binder 48768:48772 <> Rpost:732
R48808:48810 Coq.Init.Logic <> ::type_scope:x_'='_x not
R48803:48807 VST.floyd.call_lemmas <> retty:710 var
R48811:48815 compcert.cfrontend.Ctypes <> Tvoid constr
binder 48796:48800 <> RETTY:733
R48844:48847 Coq.Init.Logic <> ::type_scope:x_'='_x not
R48910:48910 Coq.Init.Logic <> ::type_scope:x_'='_x not
R48829:48832 VST.floyd.call_lemmas <> Post:715 var
R48837:48843 VST.floyd.call_lemmas <> witness:718 var
R48834:48835 VST.floyd.call_lemmas <> ts:712 var
R48848:48850 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R48857:48858 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R48856:48856 VST.floyd.call_lemmas <> B:730 var
binder 48851:48854 <> vret:734
R48859:48863 VST.floyd.canon <> PROPx def
R48879:48884 VST.floyd.canon <> LOCALx def
R48891:48894 VST.floyd.canon <> SEPx def
R48897:48901 VST.floyd.call_lemmas <> Rpost:732 var
R48903:48906 VST.floyd.call_lemmas <> vret:734 var
R48886:48888 Coq.Init.Datatypes <> nil constr
R48866:48870 VST.floyd.call_lemmas <> Ppost:731 var
R48872:48875 VST.floyd.call_lemmas <> vret:734 var
binder 48822:48826 <> POST1:735
R48929:48931 Coq.Init.Logic <> ::type_scope:x_'='_x not
R48924:48928 VST.floyd.call_lemmas <> Post2:729 var
R48932:48934 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R48941:48942 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R48940:48940 VST.floyd.call_lemmas <> B:730 var
binder 48935:48938 <> vret:736
R48943:48947 VST.floyd.canon <> PROPx def
R48968:48973 VST.floyd.canon <> LOCALx def
R48991:48994 VST.floyd.canon <> SEPx def
R49007:49010 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R48997:49001 VST.floyd.call_lemmas <> Rpost:732 var
R49003:49006 VST.floyd.call_lemmas <> vret:736 var
R49011:49015 VST.floyd.call_lemmas <> Frame:719 var
R48975:48975 VST.floyd.call_lemmas <> Q:705 var
R48951:48953 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R48950:48950 VST.floyd.call_lemmas <> P:704 var
R48954:48958 VST.floyd.call_lemmas <> Ppost:731 var
R48960:48963 VST.floyd.call_lemmas <> vret:736 var
binder 48917:48921 <> POST2:737
R49031:49044 VST.floyd.client_lemmas <> fold_right_and def
R49051:49054 VST.floyd.call_lemmas <> Ppre:721 var
R49046:49049 Coq.Init.Logic <> True ind
binder 49025:49028 <> PPRE:738
R49062:49066 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R49141:49157 VST.veric.SeparationLogic <> normal_ret_assert def
R49159:49163 VST.floyd.call_lemmas <> Post2:729 var
R49119:49123 compcert.cfrontend.Clight <> Scall constr
R49132:49133 VST.floyd.call_lemmas <> bl:720 var
R49130:49130 VST.floyd.call_lemmas <> a:701 var
R49125:49128 Coq.Init.Datatypes <> None constr
R49084:49088 VST.floyd.canon <> PROPx def
R49093:49098 VST.floyd.canon <> LOCALx def
R49103:49106 VST.floyd.canon <> SEPx def
R49108:49109 VST.floyd.call_lemmas <> R':707 var
R49100:49100 VST.floyd.call_lemmas <> Q:705 var
R49090:49090 VST.floyd.call_lemmas <> P:704 var
R49077:49081 VST.floyd.call_lemmas <> Delta:703 var
R49071:49075 VST.floyd.call_lemmas <> Espec:728 var
R49068:49069 VST.floyd.call_lemmas <> cs:698 var
R49531:49546 VST.floyd.call_lemmas <> semax_pre_setup2 thm
R49531:49546 VST.floyd.call_lemmas <> semax_pre_setup2 thm
R49608:49611 VST.msl.seplog <> ::logic:x_'&&'_x not
R49593:49599 VST.veric.SeparationLogic <> tc_expr def
R49612:49622 VST.veric.SeparationLogic <> tc_exprlist def
R49608:49611 VST.msl.seplog <> ::logic:x_'&&'_x not
R49593:49599 VST.veric.SeparationLogic <> tc_expr def
R49612:49622 VST.veric.SeparationLogic <> tc_exprlist def
R49663:49672 VST.msl.log_normalize <> andp_assoc thm
R49663:49672 VST.msl.log_normalize <> andp_assoc thm
R49663:49672 VST.msl.log_normalize <> andp_assoc thm
R49663:49672 VST.msl.log_normalize <> andp_assoc thm
R49663:49672 VST.msl.log_normalize <> andp_assoc thm
R49663:49672 VST.msl.log_normalize <> andp_assoc thm
R49682:49699 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R49682:49699 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R49716:49733 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R49716:49733 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R49753:49761 VST.msl.log_normalize <> andp_comm thm
R49753:49761 VST.msl.log_normalize <> andp_comm thm
R49753:49761 VST.msl.log_normalize <> andp_comm thm
R49771:49785 VST.floyd.canon <> semax_pre_post' thm
R49805:49815 VST.floyd.call_lemmas <> semax_call0 thm
R49771:49785 VST.floyd.canon <> semax_pre_post' thm
R49805:49815 VST.floyd.call_lemmas <> semax_call0 thm
R49951:49966 VST.floyd.call_lemmas <> semax_call_aux55 thm
R49951:49966 VST.floyd.call_lemmas <> semax_call_aux55 thm
R50066:50071 VST.floyd.call_lemmas <> ifvoid def
R50104:50112 VST.msl.seplog <> exp_right meth
R50104:50112 VST.msl.seplog <> exp_right meth
R50131:50152 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R50131:50152 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R50131:50152 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R50164:50184 VST.floyd.canon <> fold_right_sepcon_app thm
R50164:50184 VST.floyd.canon <> fold_right_sepcon_app thm
R50164:50184 VST.floyd.canon <> fold_right_sepcon_app thm
R50194:50203 VST.msl.seplog <> andp_right meth
R50194:50203 VST.msl.seplog <> andp_right meth
R50213:50222 VST.msl.seplog <> prop_right meth
R50213:50222 VST.msl.seplog <> prop_right meth
prf 50277:50299 <> semax_call_id00_wow_nil
R50315:50323 VST.veric.mpred <> compspecs class
binder 50311:50312 <> cs:739
binder 50327:50331 <> Qtemp:740
binder 50333:50336 <> Qvar:741
binder 50338:50339 <> GV:742
binder 50341:50341 <> a:743
binder 50343:50347 <> Delta:744
binder 50349:50349 <> P:745
binder 50351:50351 <> Q:746
binder 50353:50353 <> R:747
binder 50355:50356 <> R':748
binder 50361:50362 <> fs:749
binder 50364:50369 <> argsig:750
binder 50371:50375 <> retty:751
binder 50377:50378 <> cc:752
R50385:50398 VST.veric.rmaps <> TypeTree ind
binder 50382:50382 <> A:753
binder 50402:50404 <> Pre:754
binder 50406:50409 <> Post:755
binder 50411:50415 <> NEPre:756
binder 50417:50422 <> NEPost:757
R50438:50472 VST.msl.functors MixVariantFunctor _functor proj
R50515:50519 VST.veric.mpred <> mpred def
R50475:50506 VST.veric.rmaps <> dependent_type_functor_rec def
R50512:50512 VST.floyd.call_lemmas <> A:753 var
R50508:50510 Coq.Init.Datatypes <> nil constr
binder 50429:50435 <> witness:758
R50533:50536 Coq.Init.Datatypes <> list ind
R50538:50542 VST.veric.mpred <> mpred def
binder 50526:50530 <> Frame:759
R50553:50556 Coq.Init.Datatypes <> list ind
R50558:50561 compcert.cfrontend.Clight <> expr ind
binder 50549:50550 <> bl:760
R50574:50577 Coq.Init.Datatypes <> list ind
binder 50568:50571 <> Ppre:761
R50619:50622 Coq.Init.Datatypes <> list ind
R50624:50628 VST.veric.mpred <> mpred def
binder 50613:50616 <> Rpre:762
binder 50672:50674 <> GV':763
binder 50676:50677 <> gv:764
binder 50679:50682 <> args:765
R50694:50697 Coq.Init.Datatypes <> list ind
R50699:50701 compcert.common.Values <> val ind
binder 50689:50690 <> vl:766
R50715:50729 VST.floyd.call_lemmas <> call_setup2_nil def
R50887:50890 VST.floyd.call_lemmas <> args:765 var
R50884:50885 VST.floyd.call_lemmas <> gv:764 var
R50880:50882 VST.floyd.call_lemmas <> GV':763 var
R50861:50864 VST.floyd.call_lemmas <> Rpre:762 var
R50847:50850 VST.floyd.call_lemmas <> Ppre:761 var
R50841:50845 VST.floyd.call_lemmas <> Frame:759 var
R50833:50839 VST.floyd.call_lemmas <> witness:758 var
R50811:50812 VST.floyd.call_lemmas <> vl:766 var
R50808:50809 VST.floyd.call_lemmas <> bl:760 var
R50801:50806 VST.floyd.call_lemmas <> NEPost:757 var
R50795:50799 VST.floyd.call_lemmas <> NEPre:756 var
R50790:50793 VST.floyd.call_lemmas <> Post:755 var
R50786:50788 VST.floyd.call_lemmas <> Pre:754 var
R50784:50784 VST.floyd.call_lemmas <> A:753 var
R50781:50782 VST.floyd.call_lemmas <> cc:752 var
R50775:50779 VST.floyd.call_lemmas <> retty:751 var
R50768:50773 VST.floyd.call_lemmas <> argsig:750 var
R50765:50766 VST.floyd.call_lemmas <> fs:749 var
R50762:50763 VST.floyd.call_lemmas <> R':748 var
R50760:50760 VST.floyd.call_lemmas <> R:747 var
R50758:50758 VST.floyd.call_lemmas <> Q:746 var
R50756:50756 VST.floyd.call_lemmas <> P:745 var
R50750:50754 VST.floyd.call_lemmas <> Delta:744 var
R50748:50748 VST.floyd.call_lemmas <> a:743 var
R50745:50746 VST.floyd.call_lemmas <> GV:742 var
R50740:50743 VST.floyd.call_lemmas <> Qvar:741 var
R50734:50738 VST.floyd.call_lemmas <> Qtemp:740 var
R50731:50732 VST.floyd.call_lemmas <> cs:739 var
binder 50708:50712 <> SETUP:767
binder 50895:50899 <> Espec:768
R50930:50933 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50934:50938 VST.veric.mpred <> mpred def
R50923:50929 VST.veric.mpred <> environ ind
binder 50916:50920 <> Post2:769
binder 50955:50955 <> B:770
R50986:50989 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R50990:50993 Coq.Init.Datatypes <> list ind
R50985:50985 VST.floyd.call_lemmas <> B:770 var
binder 50978:50982 <> Ppost:771
R51023:51026 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R51027:51030 Coq.Init.Datatypes <> list ind
R51032:51036 VST.veric.mpred <> mpred def
R51022:51022 VST.floyd.call_lemmas <> B:770 var
binder 51015:51019 <> Rpost:772
R51055:51057 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51050:51054 VST.floyd.call_lemmas <> retty:751 var
R51058:51062 compcert.cfrontend.Ctypes <> Tvoid constr
binder 51043:51047 <> RETTY:773
R51092:51095 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51158:51158 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51076:51079 VST.floyd.call_lemmas <> Post:755 var
R51085:51091 VST.floyd.call_lemmas <> witness:758 var
R51081:51083 Coq.Init.Datatypes <> nil constr
R51096:51098 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R51105:51106 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R51104:51104 VST.floyd.call_lemmas <> B:770 var
binder 51099:51102 <> vret:774
R51107:51111 VST.floyd.canon <> PROPx def
R51127:51132 VST.floyd.canon <> LOCALx def
R51139:51142 VST.floyd.canon <> SEPx def
R51145:51149 VST.floyd.call_lemmas <> Rpost:772 var
R51151:51154 VST.floyd.call_lemmas <> vret:774 var
R51134:51136 Coq.Init.Datatypes <> nil constr
R51114:51118 VST.floyd.call_lemmas <> Ppost:771 var
R51120:51123 VST.floyd.call_lemmas <> vret:774 var
binder 51069:51073 <> POST1:775
R51177:51179 Coq.Init.Logic <> ::type_scope:x_'='_x not
R51172:51176 VST.floyd.call_lemmas <> Post2:769 var
R51180:51182 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R51189:51190 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R51188:51188 VST.floyd.call_lemmas <> B:770 var
binder 51183:51186 <> vret:776
R51191:51195 VST.floyd.canon <> PROPx def
R51216:51221 VST.floyd.canon <> LOCALx def
R51239:51242 VST.floyd.canon <> SEPx def
R51255:51258 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R51245:51249 VST.floyd.call_lemmas <> Rpost:772 var
R51251:51254 VST.floyd.call_lemmas <> vret:776 var
R51259:51263 VST.floyd.call_lemmas <> Frame:759 var
R51223:51223 VST.floyd.call_lemmas <> Q:746 var
R51199:51201 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R51198:51198 VST.floyd.call_lemmas <> P:745 var
R51202:51206 VST.floyd.call_lemmas <> Ppost:771 var
R51208:51211 VST.floyd.call_lemmas <> vret:776 var
binder 51165:51169 <> POST2:777
R51279:51292 VST.floyd.client_lemmas <> fold_right_and def
R51299:51302 VST.floyd.call_lemmas <> Ppre:761 var
R51294:51297 Coq.Init.Logic <> True ind
binder 51273:51276 <> PPRE:778
R51310:51314 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R51389:51405 VST.veric.SeparationLogic <> normal_ret_assert def
R51407:51411 VST.floyd.call_lemmas <> Post2:769 var
R51367:51371 compcert.cfrontend.Clight <> Scall constr
R51380:51381 VST.floyd.call_lemmas <> bl:760 var
R51378:51378 VST.floyd.call_lemmas <> a:743 var
R51373:51376 Coq.Init.Datatypes <> None constr
R51332:51336 VST.floyd.canon <> PROPx def
R51341:51346 VST.floyd.canon <> LOCALx def
R51351:51354 VST.floyd.canon <> SEPx def
R51356:51357 VST.floyd.call_lemmas <> R':748 var
R51348:51348 VST.floyd.call_lemmas <> Q:746 var
R51338:51338 VST.floyd.call_lemmas <> P:745 var
R51325:51329 VST.floyd.call_lemmas <> Delta:744 var
R51319:51323 VST.floyd.call_lemmas <> Espec:768 var
R51316:51317 VST.floyd.call_lemmas <> cs:739 var
R51438:51458 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R51438:51458 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R51438:51458 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R51477:51495 VST.floyd.call_lemmas <> semax_call_id00_wow thm
R51477:51495 VST.floyd.call_lemmas <> semax_call_id00_wow thm
prf 51523:51540 <> semax_call_id1_wow
R51556:51564 VST.veric.mpred <> compspecs class
binder 51552:51553 <> cs:779
binder 51568:51572 <> Qtemp:780
binder 51574:51577 <> Qvar:781
binder 51579:51580 <> GV:782
binder 51582:51582 <> a:783
binder 51584:51588 <> Delta:784
binder 51590:51590 <> P:785
binder 51592:51592 <> Q:786
binder 51594:51594 <> R:787
binder 51596:51597 <> R':788
binder 51602:51603 <> fs:789
binder 51605:51610 <> argsig:790
binder 51612:51616 <> retty:791
binder 51618:51619 <> cc:792
binder 51621:51622 <> ts:793
R51629:51642 VST.veric.rmaps <> TypeTree ind
binder 51626:51626 <> A:794
binder 51646:51648 <> Pre:795
binder 51650:51653 <> Post:796
binder 51655:51659 <> NEPre:797
binder 51661:51666 <> NEPost:798
R51682:51716 VST.msl.functors MixVariantFunctor _functor proj
R51758:51762 VST.veric.mpred <> mpred def
R51719:51750 VST.veric.rmaps <> dependent_type_functor_rec def
R51755:51755 VST.floyd.call_lemmas <> A:794 var
R51752:51753 VST.floyd.call_lemmas <> ts:793 var
binder 51673:51679 <> witness:799
R51776:51779 Coq.Init.Datatypes <> list ind
R51781:51785 VST.veric.mpred <> mpred def
binder 51769:51773 <> Frame:800
R51796:51799 Coq.Init.Datatypes <> list ind
R51801:51804 compcert.cfrontend.Clight <> expr ind
binder 51792:51793 <> bl:801
R51817:51820 Coq.Init.Datatypes <> list ind
binder 51811:51814 <> Ppre:802
R51862:51865 Coq.Init.Datatypes <> list ind
R51867:51871 VST.veric.mpred <> mpred def
binder 51856:51859 <> Rpre:803
binder 51915:51917 <> GV':804
binder 51919:51920 <> gv:805
binder 51922:51925 <> args:806
R51937:51940 Coq.Init.Datatypes <> list ind
R51942:51944 compcert.common.Values <> val ind
binder 51932:51933 <> vl:807
R51958:51968 VST.floyd.call_lemmas <> call_setup2 def
R52129:52132 VST.floyd.call_lemmas <> args:806 var
R52126:52127 VST.floyd.call_lemmas <> gv:805 var
R52122:52124 VST.floyd.call_lemmas <> GV':804 var
R52103:52106 VST.floyd.call_lemmas <> Rpre:803 var
R52089:52092 VST.floyd.call_lemmas <> Ppre:802 var
R52083:52087 VST.floyd.call_lemmas <> Frame:800 var
R52075:52081 VST.floyd.call_lemmas <> witness:799 var
R52053:52054 VST.floyd.call_lemmas <> vl:807 var
R52050:52051 VST.floyd.call_lemmas <> bl:801 var
R52043:52048 VST.floyd.call_lemmas <> NEPost:798 var
R52037:52041 VST.floyd.call_lemmas <> NEPre:797 var
R52032:52035 VST.floyd.call_lemmas <> Post:796 var
R52028:52030 VST.floyd.call_lemmas <> Pre:795 var
R52026:52026 VST.floyd.call_lemmas <> A:794 var
R52023:52024 VST.floyd.call_lemmas <> ts:793 var
R52020:52021 VST.floyd.call_lemmas <> cc:792 var
R52014:52018 VST.floyd.call_lemmas <> retty:791 var
R52007:52012 VST.floyd.call_lemmas <> argsig:790 var
R52004:52005 VST.floyd.call_lemmas <> fs:789 var
R52001:52002 VST.floyd.call_lemmas <> R':788 var
R51999:51999 VST.floyd.call_lemmas <> R:787 var
R51997:51997 VST.floyd.call_lemmas <> Q:786 var
R51995:51995 VST.floyd.call_lemmas <> P:785 var
R51989:51993 VST.floyd.call_lemmas <> Delta:784 var
R51987:51987 VST.floyd.call_lemmas <> a:783 var
R51984:51985 VST.floyd.call_lemmas <> GV:782 var
R51979:51982 VST.floyd.call_lemmas <> Qvar:781 var
R51973:51977 VST.floyd.call_lemmas <> Qtemp:780 var
R51970:51971 VST.floyd.call_lemmas <> cs:779 var
binder 51951:51955 <> SETUP:808
binder 52138:52140 <> ret:809
R52157:52160 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R52161:52165 VST.veric.mpred <> mpred def
R52150:52156 VST.veric.mpred <> environ ind
binder 52143:52147 <> Post2:810
R52176:52179 Coq.Init.Datatypes <> list ind
R52181:52188 VST.floyd.canon <> localdef ind
binder 52170:52173 <> Qnew:811
binder 52196:52196 <> B:812
R52214:52217 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R52218:52221 Coq.Init.Datatypes <> list ind
R52213:52213 VST.floyd.call_lemmas <> B:812 var
binder 52206:52210 <> Ppost:813
R52234:52237 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R52238:52240 compcert.common.Values <> val ind
R52233:52233 VST.floyd.call_lemmas <> B:812 var
binder 52230:52230 <> F:814
R52252:52255 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R52256:52259 Coq.Init.Datatypes <> list ind
R52261:52265 VST.veric.mpred <> mpred def
R52251:52251 VST.floyd.call_lemmas <> B:812 var
binder 52244:52248 <> Rpost:815
binder 52268:52272 <> Espec:816
R52306:52308 Coq.Init.Logic <> ::type_scope:x_'='_x not
R52285:52295 VST.veric.SeparationLogic <> typeof_temp def
R52303:52305 VST.floyd.call_lemmas <> ret:809 var
R52297:52301 VST.floyd.call_lemmas <> Delta:784 var
R52309:52312 Coq.Init.Datatypes <> Some constr
R52314:52318 VST.floyd.call_lemmas <> retty:791 var
binder 52278:52282 <> TYret:817
R52334:52344 VST.floyd.call_lemmas <> check_retty def
R52346:52350 VST.floyd.call_lemmas <> retty:791 var
binder 52325:52331 <> OKretty:818
R52379:52381 Coq.Init.Logic <> ::type_scope:x_'='_x not
R52364:52367 VST.floyd.call_lemmas <> Post:796 var
R52372:52378 VST.floyd.call_lemmas <> witness:799 var
R52369:52370 VST.floyd.call_lemmas <> ts:793 var
R52382:52384 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R52391:52392 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R52390:52390 VST.floyd.call_lemmas <> B:812 var
binder 52385:52388 <> vret:819
R52393:52397 VST.floyd.canon <> PROPx def
R52443:52448 VST.floyd.canon <> LOCALx def
R52513:52516 VST.floyd.canon <> SEPx def
R52519:52523 VST.floyd.call_lemmas <> Rpost:815 var
R52525:52528 VST.floyd.call_lemmas <> vret:819 var
R52473:52476 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R52451:52454 VST.floyd.canon <> temp constr
R52466:52466 VST.floyd.call_lemmas <> F:814 var
R52468:52471 VST.floyd.call_lemmas <> vret:819 var
R52456:52463 VST.veric.SeparationLogic <> ret_temp def
R52477:52479 Coq.Init.Datatypes <> nil constr
R52400:52404 VST.floyd.call_lemmas <> Ppost:813 var
R52406:52409 VST.floyd.call_lemmas <> vret:819 var
binder 52357:52361 <> POST1:820
R52572:52574 Coq.Init.Logic <> ::type_scope:x_'='_x not
R52546:52565 VST.floyd.client_lemmas <> remove_localdef_temp def
R52571:52571 VST.floyd.call_lemmas <> Q:786 var
R52567:52569 VST.floyd.call_lemmas <> ret:809 var
R52575:52578 VST.floyd.call_lemmas <> Qnew:811 var
binder 52538:52543 <> DELETE:821
R52594:52596 Coq.Init.Logic <> ::type_scope:x_'='_x not
R52589:52593 VST.floyd.call_lemmas <> Post2:810 var
R52597:52599 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R52606:52607 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R52605:52605 VST.floyd.call_lemmas <> B:812 var
binder 52600:52603 <> vret:822
R52608:52612 VST.floyd.canon <> PROPx def
R52632:52637 VST.floyd.canon <> LOCALx def
R52681:52684 VST.floyd.canon <> SEPx def
R52697:52700 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R52687:52691 VST.floyd.call_lemmas <> Rpost:815 var
R52693:52696 VST.floyd.call_lemmas <> vret:822 var
R52701:52705 VST.floyd.call_lemmas <> Frame:800 var
R52657:52660 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R52640:52643 VST.floyd.canon <> temp constr
R52650:52650 VST.floyd.call_lemmas <> F:814 var
R52652:52655 VST.floyd.call_lemmas <> vret:822 var
R52645:52647 VST.floyd.call_lemmas <> ret:809 var
R52661:52664 VST.floyd.call_lemmas <> Qnew:811 var
R52616:52618 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R52615:52615 VST.floyd.call_lemmas <> P:785 var
R52619:52623 VST.floyd.call_lemmas <> Ppost:813 var
R52625:52628 VST.floyd.call_lemmas <> vret:822 var
binder 52585:52586 <> H0:823
R52721:52734 VST.floyd.client_lemmas <> fold_right_and def
R52741:52744 VST.floyd.call_lemmas <> Ppre:802 var
R52736:52739 Coq.Init.Logic <> True ind
binder 52715:52718 <> PPRE:824
R52752:52756 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R52837:52853 VST.veric.SeparationLogic <> normal_ret_assert def
R52855:52859 VST.floyd.call_lemmas <> Post2:810 var
R52809:52813 compcert.cfrontend.Clight <> Scall constr
R52828:52829 VST.floyd.call_lemmas <> bl:801 var
R52826:52826 VST.floyd.call_lemmas <> a:783 var
R52816:52819 Coq.Init.Datatypes <> Some constr
R52821:52823 VST.floyd.call_lemmas <> ret:809 var
R52774:52778 VST.floyd.canon <> PROPx def
R52783:52788 VST.floyd.canon <> LOCALx def
R52793:52796 VST.floyd.canon <> SEPx def
R52798:52799 VST.floyd.call_lemmas <> R':788 var
R52790:52790 VST.floyd.call_lemmas <> Q:786 var
R52780:52780 VST.floyd.call_lemmas <> P:785 var
R52767:52771 VST.floyd.call_lemmas <> Delta:784 var
R52761:52765 VST.floyd.call_lemmas <> Espec:816 var
R52758:52759 VST.floyd.call_lemmas <> cs:779 var
R53229:53244 VST.floyd.call_lemmas <> semax_pre_setup2 thm
R53229:53244 VST.floyd.call_lemmas <> semax_pre_setup2 thm
R53291:53294 VST.msl.seplog <> ::logic:x_'&&'_x not
R53276:53282 VST.veric.SeparationLogic <> tc_expr def
R53295:53305 VST.veric.SeparationLogic <> tc_exprlist def
R53291:53294 VST.msl.seplog <> ::logic:x_'&&'_x not
R53276:53282 VST.veric.SeparationLogic <> tc_expr def
R53295:53305 VST.veric.SeparationLogic <> tc_exprlist def
R53348:53357 VST.msl.log_normalize <> andp_assoc thm
R53348:53357 VST.msl.log_normalize <> andp_assoc thm
R53348:53357 VST.msl.log_normalize <> andp_assoc thm
R53348:53357 VST.msl.log_normalize <> andp_assoc thm
R53348:53357 VST.msl.log_normalize <> andp_assoc thm
R53348:53357 VST.msl.log_normalize <> andp_assoc thm
R53369:53386 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R53369:53386 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R53406:53423 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R53406:53423 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R53444:53452 VST.msl.log_normalize <> andp_comm thm
R53444:53452 VST.msl.log_normalize <> andp_comm thm
R53444:53452 VST.msl.log_normalize <> andp_comm thm
R53467:53481 VST.floyd.canon <> semax_pre_post' thm
R53504:53514 VST.floyd.call_lemmas <> semax_call1 thm
R53708:53708 Coq.Init.Logic <> I constr
R53743:53753 VST.veric.SeparationLogic <> typeof_temp def
R53781:53781 compcert.lib.Maps <> :::x_'!'_x not
R53798:53801 compcert.lib.Maps <> :::x_'!'_x not
R53782:53791 VST.veric.seplog <> temp_types def
R53467:53481 VST.floyd.canon <> semax_pre_post' thm
R53504:53514 VST.floyd.call_lemmas <> semax_call1 thm
R53708:53708 Coq.Init.Logic <> I constr
R53708:53708 Coq.Init.Logic <> I constr
R53708:53708 Coq.Init.Logic <> I constr
R53708:53708 Coq.Init.Logic <> I constr
R53708:53708 Coq.Init.Logic <> I constr
R53708:53708 Coq.Init.Logic <> I constr
R53708:53708 Coq.Init.Logic <> I constr
R53781:53781 compcert.lib.Maps <> :::x_'!'_x not
R53798:53801 compcert.lib.Maps <> :::x_'!'_x not
R53782:53791 VST.veric.seplog <> temp_types def
R53859:53874 VST.floyd.call_lemmas <> semax_call_aux55 thm
R53859:53874 VST.floyd.call_lemmas <> semax_call_aux55 thm
R54027:54030 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R54039:54047 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 54031:54034 <> vret:825
R54173:54188 VST.msl.seplog <> ::logic:x_'*'_x not
R54275:54275 VST.msl.seplog <> ::logic:x_'*'_x not
R54048:54049 VST.veric.lift LiftNotation :::'`('_x_')' not
R54147:54147 VST.veric.lift LiftNotation :::'`('_x_')' not
R54050:54054 VST.floyd.canon <> PROPx def
R54079:54084 VST.floyd.canon <> LOCALx def
R54128:54131 VST.floyd.canon <> SEPx def
R54140:54143 VST.floyd.call_lemmas <> vret:825 var
R54110:54111 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R54088:54091 VST.floyd.canon <> temp constr
R54105:54108 VST.floyd.call_lemmas <> vret:825 var
R54093:54100 VST.veric.SeparationLogic <> ret_temp def
R54112:54114 Coq.Init.Datatypes <> nil constr
R54063:54066 VST.floyd.call_lemmas <> vret:825 var
R54157:54167 VST.veric.SeparationLogic <> get_result1 def
R54213:54216 VST.msl.seplog <> ::logic:x_'&&'_x not
R54189:54193 VST.veric.SeparationLogic <> local def
R54196:54205 VST.veric.SeparationLogic <> tc_environ def
R54217:54221 VST.floyd.canon <> PROPx def
R54226:54231 VST.floyd.canon <> LOCALx def
R54263:54266 VST.floyd.canon <> SEPx def
R54234:54253 VST.floyd.client_lemmas <> remove_localdef_temp def
R54003:54015 VST.msl.seplog <> derives_trans meth
R54027:54030 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R54039:54047 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
binder 54031:54034 <> vret:826
R54173:54188 VST.msl.seplog <> ::logic:x_'*'_x not
R54275:54275 VST.msl.seplog <> ::logic:x_'*'_x not
R54048:54049 VST.veric.lift LiftNotation :::'`('_x_')' not
R54147:54147 VST.veric.lift LiftNotation :::'`('_x_')' not
R54050:54054 VST.floyd.canon <> PROPx def
R54079:54084 VST.floyd.canon <> LOCALx def
R54128:54131 VST.floyd.canon <> SEPx def
R54140:54143 VST.floyd.call_lemmas <> vret:826 var
R54110:54111 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R54088:54091 VST.floyd.canon <> temp constr
R54105:54108 VST.floyd.call_lemmas <> vret:826 var
R54093:54100 VST.veric.SeparationLogic <> ret_temp def
R54112:54114 Coq.Init.Datatypes <> nil constr
R54063:54066 VST.floyd.call_lemmas <> vret:826 var
R54157:54167 VST.veric.SeparationLogic <> get_result1 def
R54213:54216 VST.msl.seplog <> ::logic:x_'&&'_x not
R54189:54193 VST.veric.SeparationLogic <> local def
R54196:54205 VST.veric.SeparationLogic <> tc_environ def
R54217:54221 VST.floyd.canon <> PROPx def
R54226:54231 VST.floyd.canon <> LOCALx def
R54263:54266 VST.floyd.canon <> SEPx def
R54234:54253 VST.floyd.client_lemmas <> remove_localdef_temp def
R54003:54015 VST.msl.seplog <> derives_trans meth
R54322:54330 VST.msl.seplog <> exp_right meth
R54322:54330 VST.msl.seplog <> exp_right meth
R54361:54368 VST.msl.seplog <> exp_left meth
R54361:54368 VST.msl.seplog <> exp_left meth
R54389:54397 VST.msl.seplog <> exp_right meth
R54389:54397 VST.msl.seplog <> exp_right meth
R54493:54504 VST.floyd.call_lemmas <> PROP_combine thm
R54493:54504 VST.floyd.call_lemmas <> PROP_combine thm
R54493:54504 VST.floyd.call_lemmas <> PROP_combine thm
R54518:54527 Coq.Lists.List <> fold_right def
R54562:54571 VST.msl.seplog <> andp_right meth
R54584:54593 VST.msl.seplog <> prop_right meth
R54562:54571 VST.msl.seplog <> andp_right meth
R54562:54571 VST.msl.seplog <> andp_right meth
R54562:54571 VST.msl.seplog <> andp_right meth
R54562:54571 VST.msl.seplog <> andp_right meth
R54562:54571 VST.msl.seplog <> andp_right meth
R54584:54593 VST.msl.seplog <> prop_right meth
R54584:54593 VST.msl.seplog <> prop_right meth
R54584:54593 VST.msl.seplog <> prop_right meth
R54615:54636 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R54615:54636 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R54615:54636 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R54615:54636 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R54652:54673 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R54652:54673 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R54652:54673 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R54652:54673 VST.floyd.call_lemmas <> fold_right_and_app_low thm
prf 54732:54753 <> semax_call_id1_wow_nil
R54769:54777 VST.veric.mpred <> compspecs class
binder 54765:54766 <> cs:827
binder 54781:54785 <> Qtemp:828
binder 54787:54790 <> Qvar:829
binder 54792:54793 <> GV:830
binder 54795:54795 <> a:831
binder 54797:54801 <> Delta:832
binder 54803:54803 <> P:833
binder 54805:54805 <> Q:834
binder 54807:54807 <> R:835
binder 54809:54810 <> R':836
binder 54815:54816 <> fs:837
binder 54818:54823 <> argsig:838
binder 54825:54829 <> retty:839
binder 54831:54832 <> cc:840
R54839:54852 VST.veric.rmaps <> TypeTree ind
binder 54836:54836 <> A:841
binder 54856:54858 <> Pre:842
binder 54860:54863 <> Post:843
binder 54865:54869 <> NEPre:844
binder 54871:54876 <> NEPost:845
R54892:54926 VST.msl.functors MixVariantFunctor _functor proj
R54969:54973 VST.veric.mpred <> mpred def
R54929:54960 VST.veric.rmaps <> dependent_type_functor_rec def
R54966:54966 VST.floyd.call_lemmas <> A:841 var
R54962:54964 Coq.Init.Datatypes <> nil constr
binder 54883:54889 <> witness:846
R54987:54990 Coq.Init.Datatypes <> list ind
R54992:54996 VST.veric.mpred <> mpred def
binder 54980:54984 <> Frame:847
R55007:55010 Coq.Init.Datatypes <> list ind
R55012:55015 compcert.cfrontend.Clight <> expr ind
binder 55003:55004 <> bl:848
R55028:55031 Coq.Init.Datatypes <> list ind
binder 55022:55025 <> Ppre:849
R55073:55076 Coq.Init.Datatypes <> list ind
R55078:55082 VST.veric.mpred <> mpred def
binder 55067:55070 <> Rpre:850
binder 55126:55128 <> GV':851
binder 55130:55131 <> gv:852
binder 55133:55136 <> args:853
R55148:55151 Coq.Init.Datatypes <> list ind
R55153:55155 compcert.common.Values <> val ind
binder 55143:55144 <> vl:854
R55169:55183 VST.floyd.call_lemmas <> call_setup2_nil def
R55341:55344 VST.floyd.call_lemmas <> args:853 var
R55338:55339 VST.floyd.call_lemmas <> gv:852 var
R55334:55336 VST.floyd.call_lemmas <> GV':851 var
R55315:55318 VST.floyd.call_lemmas <> Rpre:850 var
R55301:55304 VST.floyd.call_lemmas <> Ppre:849 var
R55295:55299 VST.floyd.call_lemmas <> Frame:847 var
R55287:55293 VST.floyd.call_lemmas <> witness:846 var
R55265:55266 VST.floyd.call_lemmas <> vl:854 var
R55262:55263 VST.floyd.call_lemmas <> bl:848 var
R55255:55260 VST.floyd.call_lemmas <> NEPost:845 var
R55249:55253 VST.floyd.call_lemmas <> NEPre:844 var
R55244:55247 VST.floyd.call_lemmas <> Post:843 var
R55240:55242 VST.floyd.call_lemmas <> Pre:842 var
R55238:55238 VST.floyd.call_lemmas <> A:841 var
R55235:55236 VST.floyd.call_lemmas <> cc:840 var
R55229:55233 VST.floyd.call_lemmas <> retty:839 var
R55222:55227 VST.floyd.call_lemmas <> argsig:838 var
R55219:55220 VST.floyd.call_lemmas <> fs:837 var
R55216:55217 VST.floyd.call_lemmas <> R':836 var
R55214:55214 VST.floyd.call_lemmas <> R:835 var
R55212:55212 VST.floyd.call_lemmas <> Q:834 var
R55210:55210 VST.floyd.call_lemmas <> P:833 var
R55204:55208 VST.floyd.call_lemmas <> Delta:832 var
R55202:55202 VST.floyd.call_lemmas <> a:831 var
R55199:55200 VST.floyd.call_lemmas <> GV:830 var
R55194:55197 VST.floyd.call_lemmas <> Qvar:829 var
R55188:55192 VST.floyd.call_lemmas <> Qtemp:828 var
R55185:55186 VST.floyd.call_lemmas <> cs:827 var
binder 55162:55166 <> SETUP:855
binder 55350:55352 <> ret:856
R55369:55372 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R55373:55377 VST.veric.mpred <> mpred def
R55362:55368 VST.veric.mpred <> environ ind
binder 55355:55359 <> Post2:857
R55388:55391 Coq.Init.Datatypes <> list ind
R55393:55400 VST.floyd.canon <> localdef ind
binder 55382:55385 <> Qnew:858
binder 55408:55408 <> B:859
R55426:55429 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R55430:55433 Coq.Init.Datatypes <> list ind
R55425:55425 VST.floyd.call_lemmas <> B:859 var
binder 55418:55422 <> Ppost:860
R55446:55449 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R55450:55452 compcert.common.Values <> val ind
R55445:55445 VST.floyd.call_lemmas <> B:859 var
binder 55442:55442 <> F:861
R55464:55467 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R55468:55471 Coq.Init.Datatypes <> list ind
R55473:55477 VST.veric.mpred <> mpred def
R55463:55463 VST.floyd.call_lemmas <> B:859 var
binder 55456:55460 <> Rpost:862
binder 55480:55484 <> Espec:863
R55518:55520 Coq.Init.Logic <> ::type_scope:x_'='_x not
R55497:55507 VST.veric.SeparationLogic <> typeof_temp def
R55515:55517 VST.floyd.call_lemmas <> ret:856 var
R55509:55513 VST.floyd.call_lemmas <> Delta:832 var
R55521:55524 Coq.Init.Datatypes <> Some constr
R55526:55530 VST.floyd.call_lemmas <> retty:839 var
binder 55490:55494 <> TYret:864
R55546:55556 VST.floyd.call_lemmas <> check_retty def
R55558:55562 VST.floyd.call_lemmas <> retty:839 var
binder 55537:55543 <> OKretty:865
R55592:55594 Coq.Init.Logic <> ::type_scope:x_'='_x not
R55576:55579 VST.floyd.call_lemmas <> Post:843 var
R55585:55591 VST.floyd.call_lemmas <> witness:846 var
R55581:55583 Coq.Init.Datatypes <> nil constr
R55595:55597 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R55604:55605 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R55603:55603 VST.floyd.call_lemmas <> B:859 var
binder 55598:55601 <> vret:866
R55606:55610 VST.floyd.canon <> PROPx def
R55656:55661 VST.floyd.canon <> LOCALx def
R55726:55729 VST.floyd.canon <> SEPx def
R55732:55736 VST.floyd.call_lemmas <> Rpost:862 var
R55738:55741 VST.floyd.call_lemmas <> vret:866 var
R55686:55689 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R55664:55667 VST.floyd.canon <> temp constr
R55679:55679 VST.floyd.call_lemmas <> F:861 var
R55681:55684 VST.floyd.call_lemmas <> vret:866 var
R55669:55676 VST.veric.SeparationLogic <> ret_temp def
R55690:55692 Coq.Init.Datatypes <> nil constr
R55613:55617 VST.floyd.call_lemmas <> Ppost:860 var
R55619:55622 VST.floyd.call_lemmas <> vret:866 var
binder 55569:55573 <> POST1:867
R55785:55787 Coq.Init.Logic <> ::type_scope:x_'='_x not
R55759:55778 VST.floyd.client_lemmas <> remove_localdef_temp def
R55784:55784 VST.floyd.call_lemmas <> Q:834 var
R55780:55782 VST.floyd.call_lemmas <> ret:856 var
R55788:55791 VST.floyd.call_lemmas <> Qnew:858 var
binder 55751:55756 <> DELETE:868
R55807:55809 Coq.Init.Logic <> ::type_scope:x_'='_x not
R55802:55806 VST.floyd.call_lemmas <> Post2:857 var
R55810:55812 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R55819:55820 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R55818:55818 VST.floyd.call_lemmas <> B:859 var
binder 55813:55816 <> vret:869
R55821:55825 VST.floyd.canon <> PROPx def
R55845:55850 VST.floyd.canon <> LOCALx def
R55894:55897 VST.floyd.canon <> SEPx def
R55910:55913 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R55900:55904 VST.floyd.call_lemmas <> Rpost:862 var
R55906:55909 VST.floyd.call_lemmas <> vret:869 var
R55914:55918 VST.floyd.call_lemmas <> Frame:847 var
R55870:55873 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R55853:55856 VST.floyd.canon <> temp constr
R55863:55863 VST.floyd.call_lemmas <> F:861 var
R55865:55868 VST.floyd.call_lemmas <> vret:869 var
R55858:55860 VST.floyd.call_lemmas <> ret:856 var
R55874:55877 VST.floyd.call_lemmas <> Qnew:858 var
R55829:55831 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R55828:55828 VST.floyd.call_lemmas <> P:833 var
R55832:55836 VST.floyd.call_lemmas <> Ppost:860 var
R55838:55841 VST.floyd.call_lemmas <> vret:869 var
binder 55798:55799 <> H0:870
R55934:55947 VST.floyd.client_lemmas <> fold_right_and def
R55954:55957 VST.floyd.call_lemmas <> Ppre:849 var
R55949:55952 Coq.Init.Logic <> True ind
binder 55928:55931 <> PPRE:871
R55965:55969 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R56050:56066 VST.veric.SeparationLogic <> normal_ret_assert def
R56068:56072 VST.floyd.call_lemmas <> Post2:857 var
R56022:56026 compcert.cfrontend.Clight <> Scall constr
R56041:56042 VST.floyd.call_lemmas <> bl:848 var
R56039:56039 VST.floyd.call_lemmas <> a:831 var
R56029:56032 Coq.Init.Datatypes <> Some constr
R56034:56036 VST.floyd.call_lemmas <> ret:856 var
R55987:55991 VST.floyd.canon <> PROPx def
R55996:56001 VST.floyd.canon <> LOCALx def
R56006:56009 VST.floyd.canon <> SEPx def
R56011:56012 VST.floyd.call_lemmas <> R':836 var
R56003:56003 VST.floyd.call_lemmas <> Q:834 var
R55993:55993 VST.floyd.call_lemmas <> P:833 var
R55980:55984 VST.floyd.call_lemmas <> Delta:832 var
R55974:55978 VST.floyd.call_lemmas <> Espec:863 var
R55971:55972 VST.floyd.call_lemmas <> cs:827 var
R56099:56119 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R56099:56119 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R56099:56119 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R56138:56155 VST.floyd.call_lemmas <> semax_call_id1_wow thm
R56138:56155 VST.floyd.call_lemmas <> semax_call_id1_wow thm
prf 56183:56202 <> semax_call_id1_x_wow
R56218:56226 VST.veric.mpred <> compspecs class
binder 56214:56215 <> cs:872
binder 56230:56234 <> Qtemp:873
binder 56236:56239 <> Qvar:874
binder 56241:56242 <> GV:875
binder 56244:56244 <> a:876
binder 56246:56250 <> Delta:877
binder 56252:56252 <> P:878
binder 56254:56254 <> Q:879
binder 56256:56256 <> R:880
binder 56258:56259 <> R':881
binder 56264:56265 <> fs:882
binder 56267:56272 <> argsig:883
binder 56274:56279 <> retty':884
binder 56281:56282 <> cc:885
binder 56284:56285 <> ts:886
R56292:56305 VST.veric.rmaps <> TypeTree ind
binder 56289:56289 <> A:887
binder 56309:56311 <> Pre:888
binder 56313:56316 <> Post:889
binder 56318:56322 <> NEPre:890
binder 56324:56329 <> NEPost:891
R56345:56379 VST.msl.functors MixVariantFunctor _functor proj
R56421:56425 VST.veric.mpred <> mpred def
R56382:56413 VST.veric.rmaps <> dependent_type_functor_rec def
R56418:56418 VST.floyd.call_lemmas <> A:887 var
R56415:56416 VST.floyd.call_lemmas <> ts:886 var
binder 56336:56342 <> witness:892
R56439:56442 Coq.Init.Datatypes <> list ind
R56444:56448 VST.veric.mpred <> mpred def
binder 56432:56436 <> Frame:893
R56459:56462 Coq.Init.Datatypes <> list ind
R56464:56467 compcert.cfrontend.Clight <> expr ind
binder 56455:56456 <> bl:894
R56480:56483 Coq.Init.Datatypes <> list ind
binder 56474:56477 <> Ppre:895
R56525:56528 Coq.Init.Datatypes <> list ind
R56530:56534 VST.veric.mpred <> mpred def
binder 56519:56522 <> Rpre:896
binder 56578:56580 <> GV':897
binder 56582:56583 <> gv:898
binder 56585:56588 <> args:899
R56600:56603 Coq.Init.Datatypes <> list ind
R56605:56607 compcert.common.Values <> val ind
binder 56595:56596 <> vl:900
R56621:56631 VST.floyd.call_lemmas <> call_setup2 def
R56793:56796 VST.floyd.call_lemmas <> args:899 var
R56790:56791 VST.floyd.call_lemmas <> gv:898 var
R56786:56788 VST.floyd.call_lemmas <> GV':897 var
R56767:56770 VST.floyd.call_lemmas <> Rpre:896 var
R56753:56756 VST.floyd.call_lemmas <> Ppre:895 var
R56747:56751 VST.floyd.call_lemmas <> Frame:893 var
R56739:56745 VST.floyd.call_lemmas <> witness:892 var
R56717:56718 VST.floyd.call_lemmas <> vl:900 var
R56714:56715 VST.floyd.call_lemmas <> bl:894 var
R56707:56712 VST.floyd.call_lemmas <> NEPost:891 var
R56701:56705 VST.floyd.call_lemmas <> NEPre:890 var
R56696:56699 VST.floyd.call_lemmas <> Post:889 var
R56692:56694 VST.floyd.call_lemmas <> Pre:888 var
R56690:56690 VST.floyd.call_lemmas <> A:887 var
R56687:56688 VST.floyd.call_lemmas <> ts:886 var
R56684:56685 VST.floyd.call_lemmas <> cc:885 var
R56677:56682 VST.floyd.call_lemmas <> retty':884 var
R56670:56675 VST.floyd.call_lemmas <> argsig:883 var
R56667:56668 VST.floyd.call_lemmas <> fs:882 var
R56664:56665 VST.floyd.call_lemmas <> R':881 var
R56662:56662 VST.floyd.call_lemmas <> R:880 var
R56660:56660 VST.floyd.call_lemmas <> Q:879 var
R56658:56658 VST.floyd.call_lemmas <> P:878 var
R56652:56656 VST.floyd.call_lemmas <> Delta:877 var
R56650:56650 VST.floyd.call_lemmas <> a:876 var
R56647:56648 VST.floyd.call_lemmas <> GV:875 var
R56642:56645 VST.floyd.call_lemmas <> Qvar:874 var
R56636:56640 VST.floyd.call_lemmas <> Qtemp:873 var
R56633:56634 VST.floyd.call_lemmas <> cs:872 var
binder 56614:56618 <> SETUP:901
binder 56802:56806 <> retty:902
binder 56809:56813 <> Espec:903
binder 56815:56817 <> ret:904
binder 56819:56822 <> ret':905
R56852:56855 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56856:56860 VST.veric.mpred <> mpred def
R56845:56851 VST.veric.mpred <> environ ind
binder 56838:56842 <> Post2:906
R56883:56886 Coq.Init.Datatypes <> list ind
R56888:56895 VST.floyd.canon <> localdef ind
binder 56877:56880 <> Qnew:907
binder 56912:56912 <> B:908
R56943:56946 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56947:56950 Coq.Init.Datatypes <> list ind
R56942:56942 VST.floyd.call_lemmas <> B:908 var
binder 56935:56939 <> Ppost:909
R56976:56979 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R56980:56982 compcert.common.Values <> val ind
R56975:56975 VST.floyd.call_lemmas <> B:908 var
binder 56972:56972 <> F:910
R57007:57010 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R57011:57014 Coq.Init.Datatypes <> list ind
R57016:57020 VST.veric.mpred <> mpred def
R57006:57006 VST.floyd.call_lemmas <> B:908 var
binder 56999:57003 <> Rpost:911
R57055:57057 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57034:57044 VST.veric.SeparationLogic <> typeof_temp def
R57052:57054 VST.floyd.call_lemmas <> ret:904 var
R57046:57050 VST.floyd.call_lemmas <> Delta:877 var
R57058:57061 Coq.Init.Datatypes <> Some constr
R57063:57067 VST.floyd.call_lemmas <> retty:902 var
binder 57027:57031 <> TYret:912
R57108:57110 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57083:57083 compcert.lib.Maps <> :::x_'!'_x not
R57100:57103 compcert.lib.Maps <> :::x_'!'_x not
R57104:57107 VST.floyd.call_lemmas <> ret':905 var
R57084:57093 VST.veric.seplog <> temp_types def
R57095:57099 VST.floyd.call_lemmas <> Delta:877 var
R57111:57114 Coq.Init.Datatypes <> Some constr
R57116:57121 VST.floyd.call_lemmas <> retty':884 var
binder 57074:57080 <> RETinit:913
R57137:57147 VST.floyd.call_lemmas <> check_retty def
R57149:57153 VST.floyd.call_lemmas <> retty:902 var
binder 57128:57134 <> OKretty:914
R57170:57180 VST.floyd.call_lemmas <> check_retty def
R57182:57187 VST.floyd.call_lemmas <> retty':884 var
binder 57160:57167 <> OKretty':915
R57231:57233 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57203:57217 VST.veric.expr <> is_neutral_cast def
R57226:57230 VST.floyd.call_lemmas <> retty:902 var
R57219:57224 VST.floyd.call_lemmas <> retty':884 var
R57234:57237 Coq.Init.Datatypes <> true constr
binder 57194:57200 <> NEUTRAL:916
R57254:57257 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R57251:57253 VST.floyd.call_lemmas <> ret:904 var
R57258:57261 VST.floyd.call_lemmas <> ret':905 var
binder 57244:57248 <> NEret:917
R57290:57292 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57275:57278 VST.floyd.call_lemmas <> Post:889 var
R57283:57289 VST.floyd.call_lemmas <> witness:892 var
R57280:57281 VST.floyd.call_lemmas <> ts:886 var
R57293:57295 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R57302:57303 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R57301:57301 VST.floyd.call_lemmas <> B:908 var
binder 57296:57299 <> vret:918
R57304:57308 VST.floyd.canon <> PROPx def
R57354:57359 VST.floyd.canon <> LOCALx def
R57424:57427 VST.floyd.canon <> SEPx def
R57430:57434 VST.floyd.call_lemmas <> Rpost:911 var
R57436:57439 VST.floyd.call_lemmas <> vret:918 var
R57384:57387 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R57362:57365 VST.floyd.canon <> temp constr
R57377:57377 VST.floyd.call_lemmas <> F:910 var
R57379:57382 VST.floyd.call_lemmas <> vret:918 var
R57367:57374 VST.veric.SeparationLogic <> ret_temp def
R57388:57390 Coq.Init.Datatypes <> nil constr
R57311:57315 VST.floyd.call_lemmas <> Ppost:909 var
R57317:57320 VST.floyd.call_lemmas <> vret:918 var
binder 57268:57272 <> POST1:919
R57483:57485 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57457:57476 VST.floyd.client_lemmas <> remove_localdef_temp def
R57482:57482 VST.floyd.call_lemmas <> Q:879 var
R57478:57480 VST.floyd.call_lemmas <> ret:904 var
R57486:57489 VST.floyd.call_lemmas <> Qnew:907 var
binder 57449:57454 <> DELETE:920
R57533:57535 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57506:57525 VST.floyd.client_lemmas <> remove_localdef_temp def
R57532:57532 VST.floyd.call_lemmas <> Q:879 var
R57527:57530 VST.floyd.call_lemmas <> ret':905 var
R57536:57536 VST.floyd.call_lemmas <> Q:879 var
binder 57496:57502 <> DELETE':921
R57552:57554 Coq.Init.Logic <> ::type_scope:x_'='_x not
R57547:57551 VST.floyd.call_lemmas <> Post2:906 var
R57555:57557 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R57564:57565 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R57563:57563 VST.floyd.call_lemmas <> B:908 var
binder 57558:57561 <> vret:922
R57566:57570 VST.floyd.canon <> PROPx def
R57609:57614 VST.floyd.canon <> LOCALx def
R57665:57668 VST.floyd.canon <> SEPx def
R57681:57684 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R57671:57675 VST.floyd.call_lemmas <> Rpost:911 var
R57677:57680 VST.floyd.call_lemmas <> vret:922 var
R57685:57689 VST.floyd.call_lemmas <> Frame:893 var
R57634:57637 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R57617:57620 VST.floyd.canon <> temp constr
R57627:57627 VST.floyd.call_lemmas <> F:910 var
R57629:57632 VST.floyd.call_lemmas <> vret:922 var
R57622:57624 VST.floyd.call_lemmas <> ret:904 var
R57638:57641 VST.floyd.call_lemmas <> Qnew:907 var
R57574:57576 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R57573:57573 VST.floyd.call_lemmas <> P:878 var
R57577:57581 VST.floyd.call_lemmas <> Ppost:909 var
R57583:57586 VST.floyd.call_lemmas <> vret:922 var
binder 57543:57544 <> H0:923
R57705:57718 VST.floyd.client_lemmas <> fold_right_and def
R57725:57728 VST.floyd.call_lemmas <> Ppre:895 var
R57720:57723 Coq.Init.Logic <> True ind
binder 57699:57702 <> PPRE:924
R57736:57740 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R57887:57903 VST.veric.SeparationLogic <> normal_ret_assert def
R57905:57909 VST.floyd.call_lemmas <> Post2:906 var
R57792:57800 compcert.cfrontend.Clight <> Ssequence constr
R57834:57837 compcert.cfrontend.Clight <> Sset constr
R57844:57848 compcert.cfrontend.Clight <> Ecast constr
R57873:57877 VST.floyd.call_lemmas <> retty:902 var
R57851:57858 compcert.cfrontend.Clight <> Etempvar constr
R57865:57870 VST.floyd.call_lemmas <> retty':884 var
R57860:57863 VST.floyd.call_lemmas <> ret':905 var
R57839:57841 VST.floyd.call_lemmas <> ret:904 var
R57803:57807 compcert.cfrontend.Clight <> Scall constr
R57823:57824 VST.floyd.call_lemmas <> bl:894 var
R57821:57821 VST.floyd.call_lemmas <> a:876 var
R57810:57813 Coq.Init.Datatypes <> Some constr
R57815:57818 VST.floyd.call_lemmas <> ret':905 var
R57758:57762 VST.floyd.canon <> PROPx def
R57767:57772 VST.floyd.canon <> LOCALx def
R57777:57780 VST.floyd.canon <> SEPx def
R57782:57783 VST.floyd.call_lemmas <> R':881 var
R57774:57774 VST.floyd.call_lemmas <> Q:879 var
R57764:57764 VST.floyd.call_lemmas <> P:878 var
R57751:57755 VST.floyd.call_lemmas <> Delta:877 var
R57745:57749 VST.floyd.call_lemmas <> Espec:903 var
R57742:57743 VST.floyd.call_lemmas <> cs:872 var
R57939:57948 VST.floyd.canon <> semax_seq' thm
R57939:57948 VST.floyd.canon <> semax_seq' thm
R57960:57977 VST.floyd.call_lemmas <> semax_call_id1_wow thm
R57960:57977 VST.floyd.call_lemmas <> semax_call_id1_wow thm
R58012:58022 VST.veric.SeparationLogic <> typeof_temp def
R58063:58080 VST.floyd.base <> extract_exists_pre def
R58063:58080 VST.floyd.base <> extract_exists_pre def
R58104:58118 VST.floyd.canon <> semax_pre_post' thm
R58137:58153 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_set_forward prfax
R58104:58118 VST.floyd.canon <> semax_pre_post' thm
R58137:58153 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_set_forward prfax
R58168:58180 VST.msl.seplog <> derives_trans meth
R58193:58201 VST.msl.seplog <> now_later meth
R58168:58180 VST.msl.seplog <> derives_trans meth
R58193:58201 VST.msl.seplog <> now_later meth
R58228:58232 VST.floyd.canon <> PROPx def
R58259:58264 VST.floyd.canon <> LOCALx def
R58296:58299 VST.floyd.canon <> SEPx def
R58312:58315 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R58285:58288 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R58267:58270 VST.floyd.canon <> temp constr
R58236:58239 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R58338:58347 VST.msl.seplog <> andp_right meth
R58357:58366 VST.msl.seplog <> andp_right meth
R58338:58347 VST.msl.seplog <> andp_right meth
R58357:58366 VST.msl.seplog <> andp_right meth
R58385:58391 VST.veric.SeparationLogic <> tc_expr def
R58508:58511 Coq.Init.Datatypes <> ::bool_scope:x_'||'_x not
R58479:58493 VST.veric.expr <> is_neutral_cast def
R58512:58525 VST.veric.expr <> same_base_type def
R58561:58564 Coq.Init.Datatypes <> true constr
R58685:58699 VST.veric.expr <> is_neutral_cast def
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58508:58511 Coq.Init.Datatypes <> ::bool_scope:x_'||'_x not
R58479:58493 VST.veric.expr <> is_neutral_cast def
R58512:58525 VST.veric.expr <> same_base_type def
R58561:58564 Coq.Init.Datatypes <> true constr
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58711:58723 VST.veric.Cop2 <> eqb_type_refl thm
R58754:58774 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R58754:58774 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R58754:58774 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R58789:58798 VST.msl.seplog <> andp_right meth
R58822:58845 VST.floyd.typecheck_lemmas <> neutral_isCastResultType thm
R58789:58798 VST.msl.seplog <> andp_right meth
R58822:58845 VST.floyd.typecheck_lemmas <> neutral_isCastResultType thm
R58867:58891 VST.floyd.client_lemmas <> PQR_denote_tc_initialized thm
R58867:58891 VST.floyd.client_lemmas <> PQR_denote_tc_initialized thm
R58913:58922 VST.veric.SeparationLogic <> tc_temp_id def
R58925:58941 VST.veric.expr <> typecheck_temp_id def
R58957:58967 VST.veric.SeparationLogic <> typeof_temp def
R58995:58995 compcert.lib.Maps <> :::x_'!'_x not
R59012:59015 compcert.lib.Maps <> :::x_'!'_x not
R58996:59005 VST.veric.seplog <> temp_types def
R58995:58995 compcert.lib.Maps <> :::x_'!'_x not
R59012:59015 compcert.lib.Maps <> :::x_'!'_x not
R58996:59005 VST.veric.seplog <> temp_types def
R59103:59123 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R59103:59123 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R59103:59123 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R59103:59123 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R59147:59167 VST.floyd.typecheck_lemmas <> denote_tc_assert_bool thm
R59147:59167 VST.floyd.typecheck_lemmas <> denote_tc_assert_bool thm
R59147:59167 VST.floyd.typecheck_lemmas <> denote_tc_assert_bool thm
R59228:59230 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59184:59198 VST.veric.expr <> is_neutral_cast def
R59201:59214 VST.veric.expr <> implicit_deref def
R59231:59234 Coq.Init.Datatypes <> true constr
R59228:59230 Coq.Init.Logic <> ::type_scope:x_'='_x not
R59184:59198 VST.veric.expr <> is_neutral_cast def
R59201:59214 VST.veric.expr <> implicit_deref def
R59231:59234 Coq.Init.Datatypes <> true constr
R59493:59506 VST.veric.expr <> implicit_deref def
R59509:59523 VST.veric.expr <> is_neutral_cast def
R59534:59546 VST.veric.Cop2 <> eqb_type_refl thm
R59534:59546 VST.veric.Cop2 <> eqb_type_refl thm
R59534:59546 VST.veric.Cop2 <> eqb_type_refl thm
R59589:59598 VST.msl.seplog <> andp_right meth
R59589:59598 VST.msl.seplog <> andp_right meth
R59607:59616 VST.msl.seplog <> prop_right meth
R59607:59616 VST.msl.seplog <> prop_right meth
R59637:59660 VST.floyd.typecheck_lemmas <> neutral_isCastResultType thm
R59637:59660 VST.floyd.typecheck_lemmas <> neutral_isCastResultType thm
R59687:59698 VST.floyd.canon <> insert_local thm
R59687:59698 VST.floyd.canon <> insert_local thm
R59687:59698 VST.floyd.canon <> insert_local thm
R59687:59698 VST.floyd.canon <> insert_local thm
R59687:59698 VST.floyd.canon <> insert_local thm
R59707:59716 VST.msl.seplog <> andp_left2 meth
R59707:59716 VST.msl.seplog <> andp_left2 meth
R59731:59742 VST.msl.log_normalize <> andp_derives thm
R59731:59742 VST.msl.log_normalize <> andp_derives thm
R59775:59801 VST.floyd.client_lemmas <> derives_remove_localdef_PQR thm
R59775:59801 VST.floyd.client_lemmas <> derives_remove_localdef_PQR thm
R59854:59862 VST.msl.seplog <> exp_right meth
R59854:59862 VST.msl.seplog <> exp_right meth
R59902:59913 VST.floyd.canon <> insert_local thm
R59902:59913 VST.floyd.canon <> insert_local thm
R59902:59913 VST.floyd.canon <> insert_local thm
R59902:59913 VST.floyd.canon <> insert_local thm
R59902:59913 VST.floyd.canon <> insert_local thm
R59960:59969 VST.msl.log_normalize <> andp_assoc thm
R59960:59969 VST.msl.log_normalize <> andp_assoc thm
R59960:59969 VST.msl.log_normalize <> andp_assoc thm
R59960:59969 VST.msl.log_normalize <> andp_assoc thm
R59960:59969 VST.msl.log_normalize <> andp_assoc thm
R59982:59993 VST.msl.log_normalize <> andp_derives thm
R60017:60041 VST.floyd.client_lemmas <> subst_remove_localdef_PQR thm
R59982:59993 VST.msl.log_normalize <> andp_derives thm
R60017:60041 VST.floyd.client_lemmas <> subst_remove_localdef_PQR thm
R60122:60124 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60104:60112 VST.veric.Cop2 <> eqb_ident def
R60125:60129 Coq.Init.Datatypes <> false constr
R60167:60180 VST.veric.Cop2 <> eqb_ident_spec thm
R60211:60219 VST.veric.Cop2 <> eqb_ident def
R60122:60124 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60104:60112 VST.veric.Cop2 <> eqb_ident def
R60125:60129 Coq.Init.Datatypes <> false constr
R60167:60180 VST.veric.Cop2 <> eqb_ident_spec thm
R60211:60219 VST.veric.Cop2 <> eqb_ident def
R60302:60312 Coq.PArith.BinPos Pos eqb_neq thm
R60302:60312 Coq.PArith.BinPos Pos eqb_neq thm
R60356:60361 VST.veric.Cop2 <> tc_val def
R60371:60377 VST.veric.mpred <> eval_id def
R60407:60419 VST.floyd.client_lemmas <> tc_eval'_id_i thm
R60356:60361 VST.veric.Cop2 <> tc_val def
R60371:60377 VST.veric.mpred <> eval_id def
R60407:60419 VST.floyd.client_lemmas <> tc_eval'_id_i thm
R60470:60493 VST.veric.expr2 <> neutral_cast_lemma thm
R60504:60512 VST.veric.expr <> eval_cast def
R60470:60493 VST.veric.expr2 <> neutral_cast_lemma thm
prf 60596:60619 <> semax_call_id1_x_wow_nil
R60635:60643 VST.veric.mpred <> compspecs class
binder 60631:60632 <> cs:925
binder 60647:60651 <> Qtemp:926
binder 60653:60656 <> Qvar:927
binder 60658:60659 <> GV:928
binder 60661:60661 <> a:929
binder 60663:60667 <> Delta:930
binder 60669:60669 <> P:931
binder 60671:60671 <> Q:932
binder 60673:60673 <> R:933
binder 60675:60676 <> R':934
binder 60681:60682 <> fs:935
binder 60684:60689 <> argsig:936
binder 60691:60696 <> retty':937
binder 60698:60699 <> cc:938
R60706:60719 VST.veric.rmaps <> TypeTree ind
binder 60703:60703 <> A:939
binder 60723:60725 <> Pre:940
binder 60727:60730 <> Post:941
binder 60732:60736 <> NEPre:942
binder 60738:60743 <> NEPost:943
R60759:60793 VST.msl.functors MixVariantFunctor _functor proj
R60836:60840 VST.veric.mpred <> mpred def
R60796:60827 VST.veric.rmaps <> dependent_type_functor_rec def
R60833:60833 VST.floyd.call_lemmas <> A:939 var
R60829:60831 Coq.Init.Datatypes <> nil constr
binder 60750:60756 <> witness:944
R60854:60857 Coq.Init.Datatypes <> list ind
R60859:60863 VST.veric.mpred <> mpred def
binder 60847:60851 <> Frame:945
R60874:60877 Coq.Init.Datatypes <> list ind
R60879:60882 compcert.cfrontend.Clight <> expr ind
binder 60870:60871 <> bl:946
R60895:60898 Coq.Init.Datatypes <> list ind
binder 60889:60892 <> Ppre:947
R60913:60916 Coq.Init.Datatypes <> list ind
R60918:60922 VST.veric.mpred <> mpred def
binder 60907:60910 <> Rpre:948
binder 60929:60931 <> GV':949
binder 60933:60934 <> gv:950
binder 60936:60939 <> args:951
R60951:60954 Coq.Init.Datatypes <> list ind
R60956:60958 compcert.common.Values <> val ind
binder 60946:60947 <> vl:952
R60972:60986 VST.floyd.call_lemmas <> call_setup2_nil def
R61145:61148 VST.floyd.call_lemmas <> args:951 var
R61142:61143 VST.floyd.call_lemmas <> gv:950 var
R61138:61140 VST.floyd.call_lemmas <> GV':949 var
R61119:61122 VST.floyd.call_lemmas <> Rpre:948 var
R61105:61108 VST.floyd.call_lemmas <> Ppre:947 var
R61099:61103 VST.floyd.call_lemmas <> Frame:945 var
R61091:61097 VST.floyd.call_lemmas <> witness:944 var
R61069:61070 VST.floyd.call_lemmas <> vl:952 var
R61066:61067 VST.floyd.call_lemmas <> bl:946 var
R61059:61064 VST.floyd.call_lemmas <> NEPost:943 var
R61053:61057 VST.floyd.call_lemmas <> NEPre:942 var
R61048:61051 VST.floyd.call_lemmas <> Post:941 var
R61044:61046 VST.floyd.call_lemmas <> Pre:940 var
R61042:61042 VST.floyd.call_lemmas <> A:939 var
R61039:61040 VST.floyd.call_lemmas <> cc:938 var
R61032:61037 VST.floyd.call_lemmas <> retty':937 var
R61025:61030 VST.floyd.call_lemmas <> argsig:936 var
R61022:61023 VST.floyd.call_lemmas <> fs:935 var
R61019:61020 VST.floyd.call_lemmas <> R':934 var
R61017:61017 VST.floyd.call_lemmas <> R:933 var
R61015:61015 VST.floyd.call_lemmas <> Q:932 var
R61013:61013 VST.floyd.call_lemmas <> P:931 var
R61007:61011 VST.floyd.call_lemmas <> Delta:930 var
R61005:61005 VST.floyd.call_lemmas <> a:929 var
R61002:61003 VST.floyd.call_lemmas <> GV:928 var
R60997:61000 VST.floyd.call_lemmas <> Qvar:927 var
R60991:60995 VST.floyd.call_lemmas <> Qtemp:926 var
R60988:60989 VST.floyd.call_lemmas <> cs:925 var
binder 60965:60969 <> SETUP:953
binder 61154:61158 <> retty:954
binder 61161:61165 <> Espec:955
binder 61167:61169 <> ret:956
binder 61171:61174 <> ret':957
R61204:61207 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61208:61212 VST.veric.mpred <> mpred def
R61197:61203 VST.veric.mpred <> environ ind
binder 61190:61194 <> Post2:958
R61235:61238 Coq.Init.Datatypes <> list ind
R61240:61247 VST.floyd.canon <> localdef ind
binder 61229:61232 <> Qnew:959
binder 61264:61264 <> B:960
R61295:61298 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61299:61302 Coq.Init.Datatypes <> list ind
R61294:61294 VST.floyd.call_lemmas <> B:960 var
binder 61287:61291 <> Ppost:961
R61328:61331 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61332:61334 compcert.common.Values <> val ind
R61327:61327 VST.floyd.call_lemmas <> B:960 var
binder 61324:61324 <> F:962
R61359:61362 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R61363:61366 Coq.Init.Datatypes <> list ind
R61368:61372 VST.veric.mpred <> mpred def
R61358:61358 VST.floyd.call_lemmas <> B:960 var
binder 61351:61355 <> Rpost:963
R61407:61409 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61386:61396 VST.veric.SeparationLogic <> typeof_temp def
R61404:61406 VST.floyd.call_lemmas <> ret:956 var
R61398:61402 VST.floyd.call_lemmas <> Delta:930 var
R61410:61413 Coq.Init.Datatypes <> Some constr
R61415:61419 VST.floyd.call_lemmas <> retty:954 var
binder 61379:61383 <> TYret:964
R61460:61462 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61435:61435 compcert.lib.Maps <> :::x_'!'_x not
R61452:61455 compcert.lib.Maps <> :::x_'!'_x not
R61456:61459 VST.floyd.call_lemmas <> ret':957 var
R61436:61445 VST.veric.seplog <> temp_types def
R61447:61451 VST.floyd.call_lemmas <> Delta:930 var
R61463:61466 Coq.Init.Datatypes <> Some constr
R61468:61473 VST.floyd.call_lemmas <> retty':937 var
binder 61426:61432 <> RETinit:965
R61489:61499 VST.floyd.call_lemmas <> check_retty def
R61501:61505 VST.floyd.call_lemmas <> retty:954 var
binder 61480:61486 <> OKretty:966
R61522:61532 VST.floyd.call_lemmas <> check_retty def
R61534:61539 VST.floyd.call_lemmas <> retty':937 var
binder 61512:61519 <> OKretty':967
R61583:61585 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61555:61569 VST.veric.expr <> is_neutral_cast def
R61578:61582 VST.floyd.call_lemmas <> retty:954 var
R61571:61576 VST.floyd.call_lemmas <> retty':937 var
R61586:61589 Coq.Init.Datatypes <> true constr
binder 61546:61552 <> NEUTRAL:968
R61606:61609 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R61603:61605 VST.floyd.call_lemmas <> ret:956 var
R61610:61613 VST.floyd.call_lemmas <> ret':957 var
binder 61596:61600 <> NEret:969
R61643:61645 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61627:61630 VST.floyd.call_lemmas <> Post:941 var
R61636:61642 VST.floyd.call_lemmas <> witness:944 var
R61632:61634 Coq.Init.Datatypes <> nil constr
R61646:61648 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R61655:61656 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R61654:61654 VST.floyd.call_lemmas <> B:960 var
binder 61649:61652 <> vret:970
R61657:61661 VST.floyd.canon <> PROPx def
R61707:61712 VST.floyd.canon <> LOCALx def
R61777:61780 VST.floyd.canon <> SEPx def
R61783:61787 VST.floyd.call_lemmas <> Rpost:963 var
R61789:61792 VST.floyd.call_lemmas <> vret:970 var
R61737:61740 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R61715:61718 VST.floyd.canon <> temp constr
R61730:61730 VST.floyd.call_lemmas <> F:962 var
R61732:61735 VST.floyd.call_lemmas <> vret:970 var
R61720:61727 VST.veric.SeparationLogic <> ret_temp def
R61741:61743 Coq.Init.Datatypes <> nil constr
R61664:61668 VST.floyd.call_lemmas <> Ppost:961 var
R61670:61673 VST.floyd.call_lemmas <> vret:970 var
binder 61620:61624 <> POST1:971
R61836:61838 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61810:61829 VST.floyd.client_lemmas <> remove_localdef_temp def
R61835:61835 VST.floyd.call_lemmas <> Q:932 var
R61831:61833 VST.floyd.call_lemmas <> ret:956 var
R61839:61842 VST.floyd.call_lemmas <> Qnew:959 var
binder 61802:61807 <> DELETE:972
R61886:61888 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61859:61878 VST.floyd.client_lemmas <> remove_localdef_temp def
R61885:61885 VST.floyd.call_lemmas <> Q:932 var
R61880:61883 VST.floyd.call_lemmas <> ret':957 var
R61889:61889 VST.floyd.call_lemmas <> Q:932 var
binder 61849:61855 <> DELETE':973
R61905:61907 Coq.Init.Logic <> ::type_scope:x_'='_x not
R61900:61904 VST.floyd.call_lemmas <> Post2:958 var
R61908:61910 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R61917:61918 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R61916:61916 VST.floyd.call_lemmas <> B:960 var
binder 61911:61914 <> vret:974
R61919:61923 VST.floyd.canon <> PROPx def
R61962:61967 VST.floyd.canon <> LOCALx def
R62018:62021 VST.floyd.canon <> SEPx def
R62034:62037 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R62024:62028 VST.floyd.call_lemmas <> Rpost:963 var
R62030:62033 VST.floyd.call_lemmas <> vret:974 var
R62038:62042 VST.floyd.call_lemmas <> Frame:945 var
R61987:61990 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R61970:61973 VST.floyd.canon <> temp constr
R61980:61980 VST.floyd.call_lemmas <> F:962 var
R61982:61985 VST.floyd.call_lemmas <> vret:974 var
R61975:61977 VST.floyd.call_lemmas <> ret:956 var
R61991:61994 VST.floyd.call_lemmas <> Qnew:959 var
R61927:61929 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R61926:61926 VST.floyd.call_lemmas <> P:931 var
R61930:61934 VST.floyd.call_lemmas <> Ppost:961 var
R61936:61939 VST.floyd.call_lemmas <> vret:974 var
binder 61896:61897 <> H0:975
R62058:62071 VST.floyd.client_lemmas <> fold_right_and def
R62078:62081 VST.floyd.call_lemmas <> Ppre:947 var
R62073:62076 Coq.Init.Logic <> True ind
binder 62052:62055 <> PPRE:976
R62089:62093 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R62240:62256 VST.veric.SeparationLogic <> normal_ret_assert def
R62258:62262 VST.floyd.call_lemmas <> Post2:958 var
R62145:62153 compcert.cfrontend.Clight <> Ssequence constr
R62187:62190 compcert.cfrontend.Clight <> Sset constr
R62197:62201 compcert.cfrontend.Clight <> Ecast constr
R62226:62230 VST.floyd.call_lemmas <> retty:954 var
R62204:62211 compcert.cfrontend.Clight <> Etempvar constr
R62218:62223 VST.floyd.call_lemmas <> retty':937 var
R62213:62216 VST.floyd.call_lemmas <> ret':957 var
R62192:62194 VST.floyd.call_lemmas <> ret:956 var
R62156:62160 compcert.cfrontend.Clight <> Scall constr
R62176:62177 VST.floyd.call_lemmas <> bl:946 var
R62174:62174 VST.floyd.call_lemmas <> a:929 var
R62163:62166 Coq.Init.Datatypes <> Some constr
R62168:62171 VST.floyd.call_lemmas <> ret':957 var
R62111:62115 VST.floyd.canon <> PROPx def
R62120:62125 VST.floyd.canon <> LOCALx def
R62130:62133 VST.floyd.canon <> SEPx def
R62135:62136 VST.floyd.call_lemmas <> R':934 var
R62127:62127 VST.floyd.call_lemmas <> Q:932 var
R62117:62117 VST.floyd.call_lemmas <> P:931 var
R62104:62108 VST.floyd.call_lemmas <> Delta:930 var
R62098:62102 VST.floyd.call_lemmas <> Espec:955 var
R62095:62096 VST.floyd.call_lemmas <> cs:925 var
R62289:62309 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R62289:62309 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R62289:62309 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R62328:62347 VST.floyd.call_lemmas <> semax_call_id1_x_wow thm
R62328:62347 VST.floyd.call_lemmas <> semax_call_id1_x_wow thm
prf 62375:62394 <> semax_call_id1_y_wow
R62410:62418 VST.veric.mpred <> compspecs class
binder 62406:62407 <> cs:977
binder 62422:62426 <> Qtemp:978
binder 62428:62431 <> Qvar:979
binder 62433:62434 <> GV:980
binder 62436:62436 <> a:981
binder 62438:62442 <> Delta:982
binder 62444:62444 <> P:983
binder 62446:62446 <> Q:984
binder 62448:62448 <> R:985
binder 62450:62451 <> R':986
binder 62456:62457 <> fs:987
binder 62459:62464 <> argsig:988
binder 62466:62471 <> retty':989
binder 62473:62474 <> cc:990
binder 62476:62477 <> ts:991
R62484:62497 VST.veric.rmaps <> TypeTree ind
binder 62481:62481 <> A:992
binder 62501:62503 <> Pre:993
binder 62505:62508 <> Post:994
binder 62510:62514 <> NEPre:995
binder 62516:62521 <> NEPost:996
R62537:62571 VST.msl.functors MixVariantFunctor _functor proj
R62613:62617 VST.veric.mpred <> mpred def
R62574:62605 VST.veric.rmaps <> dependent_type_functor_rec def
R62610:62610 VST.floyd.call_lemmas <> A:992 var
R62607:62608 VST.floyd.call_lemmas <> ts:991 var
binder 62528:62534 <> witness:997
R62631:62634 Coq.Init.Datatypes <> list ind
R62636:62640 VST.veric.mpred <> mpred def
binder 62624:62628 <> Frame:998
R62651:62654 Coq.Init.Datatypes <> list ind
R62656:62659 compcert.cfrontend.Clight <> expr ind
binder 62647:62648 <> bl:999
R62672:62675 Coq.Init.Datatypes <> list ind
binder 62666:62669 <> Ppre:1000
R62690:62693 Coq.Init.Datatypes <> list ind
R62695:62699 VST.veric.mpred <> mpred def
binder 62684:62687 <> Rpre:1001
binder 62706:62708 <> GV':1002
binder 62710:62711 <> gv:1003
binder 62713:62716 <> args:1004
R62728:62731 Coq.Init.Datatypes <> list ind
R62733:62735 compcert.common.Values <> val ind
binder 62723:62724 <> vl:1005
R62749:62759 VST.floyd.call_lemmas <> call_setup2 def
R62898:62901 VST.floyd.call_lemmas <> args:1004 var
R62895:62896 VST.floyd.call_lemmas <> gv:1003 var
R62891:62893 VST.floyd.call_lemmas <> GV':1002 var
R62886:62889 VST.floyd.call_lemmas <> Rpre:1001 var
R62881:62884 VST.floyd.call_lemmas <> Ppre:1000 var
R62875:62879 VST.floyd.call_lemmas <> Frame:998 var
R62867:62873 VST.floyd.call_lemmas <> witness:997 var
R62845:62846 VST.floyd.call_lemmas <> vl:1005 var
R62842:62843 VST.floyd.call_lemmas <> bl:999 var
R62835:62840 VST.floyd.call_lemmas <> NEPost:996 var
R62829:62833 VST.floyd.call_lemmas <> NEPre:995 var
R62824:62827 VST.floyd.call_lemmas <> Post:994 var
R62820:62822 VST.floyd.call_lemmas <> Pre:993 var
R62818:62818 VST.floyd.call_lemmas <> A:992 var
R62815:62816 VST.floyd.call_lemmas <> ts:991 var
R62812:62813 VST.floyd.call_lemmas <> cc:990 var
R62805:62810 VST.floyd.call_lemmas <> retty':989 var
R62798:62803 VST.floyd.call_lemmas <> argsig:988 var
R62795:62796 VST.floyd.call_lemmas <> fs:987 var
R62792:62793 VST.floyd.call_lemmas <> R':986 var
R62790:62790 VST.floyd.call_lemmas <> R:985 var
R62788:62788 VST.floyd.call_lemmas <> Q:984 var
R62786:62786 VST.floyd.call_lemmas <> P:983 var
R62780:62784 VST.floyd.call_lemmas <> Delta:982 var
R62778:62778 VST.floyd.call_lemmas <> a:981 var
R62775:62776 VST.floyd.call_lemmas <> GV:980 var
R62770:62773 VST.floyd.call_lemmas <> Qvar:979 var
R62764:62768 VST.floyd.call_lemmas <> Qtemp:978 var
R62761:62762 VST.floyd.call_lemmas <> cs:977 var
binder 62742:62746 <> SETUP:1006
binder 62908:62912 <> Espec:1007
binder 62914:62916 <> ret:1008
binder 62918:62921 <> ret':1009
R62931:62934 compcert.cfrontend.Ctypes <> type ind
binder 62924:62928 <> retty:1010
R62966:62969 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R62970:62974 VST.veric.mpred <> mpred def
R62959:62965 VST.veric.mpred <> environ ind
binder 62952:62956 <> Post2:1011
R62997:63000 Coq.Init.Datatypes <> list ind
R63002:63009 VST.floyd.canon <> localdef ind
binder 62991:62994 <> Qnew:1012
binder 63026:63026 <> B:1013
R63057:63060 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63061:63064 Coq.Init.Datatypes <> list ind
R63056:63056 VST.floyd.call_lemmas <> B:1013 var
binder 63049:63053 <> Ppost:1014
R63090:63093 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63094:63096 compcert.common.Values <> val ind
R63089:63089 VST.floyd.call_lemmas <> B:1013 var
binder 63086:63086 <> F:1015
R63121:63124 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63125:63128 Coq.Init.Datatypes <> list ind
R63130:63134 VST.veric.mpred <> mpred def
R63120:63120 VST.floyd.call_lemmas <> B:1013 var
binder 63113:63117 <> Rpost:1016
R63169:63171 Coq.Init.Logic <> ::type_scope:x_'='_x not
R63148:63158 VST.veric.SeparationLogic <> typeof_temp def
R63166:63168 VST.floyd.call_lemmas <> ret:1008 var
R63160:63164 VST.floyd.call_lemmas <> Delta:982 var
R63172:63175 Coq.Init.Datatypes <> Some constr
R63177:63181 VST.floyd.call_lemmas <> retty:1010 var
binder 63141:63145 <> TYret:1017
R63222:63224 Coq.Init.Logic <> ::type_scope:x_'='_x not
R63197:63197 compcert.lib.Maps <> :::x_'!'_x not
R63214:63217 compcert.lib.Maps <> :::x_'!'_x not
R63218:63221 VST.floyd.call_lemmas <> ret':1009 var
R63198:63207 VST.veric.seplog <> temp_types def
R63209:63213 VST.floyd.call_lemmas <> Delta:982 var
R63225:63228 Coq.Init.Datatypes <> Some constr
R63230:63235 VST.floyd.call_lemmas <> retty':989 var
binder 63188:63194 <> RETinit:1018
R63251:63261 VST.floyd.call_lemmas <> check_retty def
R63263:63267 VST.floyd.call_lemmas <> retty:1010 var
binder 63242:63248 <> OKretty:1019
R63284:63294 VST.floyd.call_lemmas <> check_retty def
R63296:63301 VST.floyd.call_lemmas <> retty':989 var
binder 63274:63281 <> OKretty':1020
R63345:63347 Coq.Init.Logic <> ::type_scope:x_'='_x not
R63317:63331 VST.veric.expr <> is_neutral_cast def
R63340:63344 VST.floyd.call_lemmas <> retty:1010 var
R63333:63338 VST.floyd.call_lemmas <> retty':989 var
R63348:63351 Coq.Init.Datatypes <> true constr
binder 63308:63314 <> NEUTRAL:1021
R63368:63371 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R63365:63367 VST.floyd.call_lemmas <> ret:1008 var
R63372:63375 VST.floyd.call_lemmas <> ret':1009 var
binder 63358:63362 <> NEret:1022
R63404:63406 Coq.Init.Logic <> ::type_scope:x_'='_x not
R63389:63392 VST.floyd.call_lemmas <> Post:994 var
R63397:63403 VST.floyd.call_lemmas <> witness:997 var
R63394:63395 VST.floyd.call_lemmas <> ts:991 var
R63407:63409 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R63416:63417 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R63415:63415 VST.floyd.call_lemmas <> B:1013 var
binder 63410:63413 <> vret:1023
R63418:63422 VST.floyd.canon <> PROPx def
R63468:63473 VST.floyd.canon <> LOCALx def
R63538:63541 VST.floyd.canon <> SEPx def
R63544:63548 VST.floyd.call_lemmas <> Rpost:1016 var
R63550:63553 VST.floyd.call_lemmas <> vret:1023 var
R63498:63501 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R63476:63479 VST.floyd.canon <> temp constr
R63491:63491 VST.floyd.call_lemmas <> F:1015 var
R63493:63496 VST.floyd.call_lemmas <> vret:1023 var
R63481:63488 VST.veric.SeparationLogic <> ret_temp def
R63502:63504 Coq.Init.Datatypes <> nil constr
R63425:63429 VST.floyd.call_lemmas <> Ppost:1014 var
R63431:63434 VST.floyd.call_lemmas <> vret:1023 var
binder 63382:63386 <> POST1:1024
R63597:63599 Coq.Init.Logic <> ::type_scope:x_'='_x not
R63571:63590 VST.floyd.client_lemmas <> remove_localdef_temp def
R63596:63596 VST.floyd.call_lemmas <> Q:984 var
R63592:63594 VST.floyd.call_lemmas <> ret:1008 var
R63600:63603 VST.floyd.call_lemmas <> Qnew:1012 var
binder 63563:63568 <> DELETE:1025
R63647:63649 Coq.Init.Logic <> ::type_scope:x_'='_x not
R63620:63639 VST.floyd.client_lemmas <> remove_localdef_temp def
R63646:63646 VST.floyd.call_lemmas <> Q:984 var
R63641:63644 VST.floyd.call_lemmas <> ret':1009 var
R63650:63650 VST.floyd.call_lemmas <> Q:984 var
binder 63610:63616 <> DELETE':1026
R63666:63668 Coq.Init.Logic <> ::type_scope:x_'='_x not
R63661:63665 VST.floyd.call_lemmas <> Post2:1011 var
R63669:63671 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R63678:63679 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R63677:63677 VST.floyd.call_lemmas <> B:1013 var
binder 63672:63675 <> vret:1027
R63680:63684 VST.floyd.canon <> PROPx def
R63723:63728 VST.floyd.canon <> LOCALx def
R63779:63782 VST.floyd.canon <> SEPx def
R63795:63798 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R63785:63789 VST.floyd.call_lemmas <> Rpost:1016 var
R63791:63794 VST.floyd.call_lemmas <> vret:1027 var
R63799:63803 VST.floyd.call_lemmas <> Frame:998 var
R63748:63751 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R63731:63734 VST.floyd.canon <> temp constr
R63741:63741 VST.floyd.call_lemmas <> F:1015 var
R63743:63746 VST.floyd.call_lemmas <> vret:1027 var
R63736:63738 VST.floyd.call_lemmas <> ret:1008 var
R63752:63755 VST.floyd.call_lemmas <> Qnew:1012 var
R63688:63690 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R63687:63687 VST.floyd.call_lemmas <> P:983 var
R63691:63695 VST.floyd.call_lemmas <> Ppost:1014 var
R63697:63700 VST.floyd.call_lemmas <> vret:1027 var
binder 63657:63658 <> H0:1028
R63819:63832 VST.floyd.client_lemmas <> fold_right_and def
R63839:63842 VST.floyd.call_lemmas <> Ppre:1000 var
R63834:63837 Coq.Init.Logic <> True ind
binder 63813:63816 <> PPRE:1029
R63850:63854 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R63987:64003 VST.veric.SeparationLogic <> normal_ret_assert def
R64005:64009 VST.floyd.call_lemmas <> Post2:1011 var
R63906:63914 compcert.cfrontend.Clight <> Ssequence constr
R63948:63951 compcert.cfrontend.Clight <> Sset constr
R63958:63965 compcert.cfrontend.Clight <> Etempvar constr
R63972:63977 VST.floyd.call_lemmas <> retty':989 var
R63967:63970 VST.floyd.call_lemmas <> ret':1009 var
R63953:63955 VST.floyd.call_lemmas <> ret:1008 var
R63917:63921 compcert.cfrontend.Clight <> Scall constr
R63937:63938 VST.floyd.call_lemmas <> bl:999 var
R63935:63935 VST.floyd.call_lemmas <> a:981 var
R63924:63927 Coq.Init.Datatypes <> Some constr
R63929:63932 VST.floyd.call_lemmas <> ret':1009 var
R63872:63876 VST.floyd.canon <> PROPx def
R63881:63886 VST.floyd.canon <> LOCALx def
R63891:63894 VST.floyd.canon <> SEPx def
R63896:63897 VST.floyd.call_lemmas <> R':986 var
R63888:63888 VST.floyd.call_lemmas <> Q:984 var
R63878:63878 VST.floyd.call_lemmas <> P:983 var
R63865:63869 VST.floyd.call_lemmas <> Delta:982 var
R63859:63863 VST.floyd.call_lemmas <> Espec:1007 var
R63856:63857 VST.floyd.call_lemmas <> cs:977 var
R64039:64048 VST.floyd.canon <> semax_seq' thm
R64039:64048 VST.floyd.canon <> semax_seq' thm
R64060:64077 VST.floyd.call_lemmas <> semax_call_id1_wow thm
R64114:64124 VST.veric.SeparationLogic <> typeof_temp def
R64060:64077 VST.floyd.call_lemmas <> semax_call_id1_wow thm
R64165:64182 VST.floyd.base <> extract_exists_pre def
R64165:64182 VST.floyd.base <> extract_exists_pre def
R64206:64220 VST.floyd.canon <> semax_pre_post' thm
R64239:64255 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_set_forward prfax
R64206:64220 VST.floyd.canon <> semax_pre_post' thm
R64239:64255 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic semax_set_forward prfax
R64270:64282 VST.msl.seplog <> derives_trans meth
R64295:64303 VST.msl.seplog <> now_later meth
R64270:64282 VST.msl.seplog <> derives_trans meth
R64295:64303 VST.msl.seplog <> now_later meth
R64330:64334 VST.floyd.canon <> PROPx def
R64361:64366 VST.floyd.canon <> LOCALx def
R64398:64401 VST.floyd.canon <> SEPx def
R64414:64417 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R64387:64390 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R64369:64372 VST.floyd.canon <> temp constr
R64338:64341 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R64440:64449 VST.msl.seplog <> andp_right meth
R64459:64468 VST.msl.seplog <> andp_right meth
R64440:64449 VST.msl.seplog <> andp_right meth
R64459:64468 VST.msl.seplog <> andp_right meth
R64487:64493 VST.veric.SeparationLogic <> tc_expr def
R64522:64526 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R64522:64526 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R64561:64576 VST.veric.SeparationLogic <> denote_tc_assert def
R64704:64707 Coq.Init.Datatypes <> ::bool_scope:x_'||'_x not
R64675:64689 VST.veric.expr <> is_neutral_cast def
R64708:64721 VST.veric.expr <> same_base_type def
R64757:64760 Coq.Init.Datatypes <> true constr
R64881:64895 VST.veric.expr <> is_neutral_cast def
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64704:64707 Coq.Init.Datatypes <> ::bool_scope:x_'||'_x not
R64675:64689 VST.veric.expr <> is_neutral_cast def
R64708:64721 VST.veric.expr <> same_base_type def
R64757:64760 Coq.Init.Datatypes <> true constr
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64907:64919 VST.veric.Cop2 <> eqb_type_refl thm
R64976:65000 VST.floyd.client_lemmas <> PQR_denote_tc_initialized thm
R64976:65000 VST.floyd.client_lemmas <> PQR_denote_tc_initialized thm
R65022:65031 VST.veric.SeparationLogic <> tc_temp_id def
R65034:65050 VST.veric.expr <> typecheck_temp_id def
R65066:65076 VST.veric.SeparationLogic <> typeof_temp def
R65104:65104 compcert.lib.Maps <> :::x_'!'_x not
R65121:65124 compcert.lib.Maps <> :::x_'!'_x not
R65105:65114 VST.veric.seplog <> temp_types def
R65104:65104 compcert.lib.Maps <> :::x_'!'_x not
R65121:65124 compcert.lib.Maps <> :::x_'!'_x not
R65105:65114 VST.veric.seplog <> temp_types def
R65212:65232 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R65212:65232 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R65212:65232 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R65212:65232 VST.floyd.typecheck_lemmas <> denote_tc_assert_andp thm
R65256:65276 VST.floyd.typecheck_lemmas <> denote_tc_assert_bool thm
R65256:65276 VST.floyd.typecheck_lemmas <> denote_tc_assert_bool thm
R65256:65276 VST.floyd.typecheck_lemmas <> denote_tc_assert_bool thm
R65338:65340 Coq.Init.Logic <> ::type_scope:x_'='_x not
R65293:65307 VST.veric.expr <> is_neutral_cast def
R65310:65323 VST.veric.expr <> implicit_deref def
R65341:65344 Coq.Init.Datatypes <> true constr
R65338:65340 Coq.Init.Logic <> ::type_scope:x_'='_x not
R65293:65307 VST.veric.expr <> is_neutral_cast def
R65310:65323 VST.veric.expr <> implicit_deref def
R65341:65344 Coq.Init.Datatypes <> true constr
R65365:65378 VST.veric.expr <> implicit_deref def
R65365:65378 VST.veric.expr <> implicit_deref def
R65546:65555 VST.msl.seplog <> andp_right meth
R65546:65555 VST.msl.seplog <> andp_right meth
R65564:65573 VST.msl.seplog <> prop_right meth
R65564:65573 VST.msl.seplog <> prop_right meth
R65596:65619 VST.floyd.typecheck_lemmas <> neutral_isCastResultType thm
R65596:65619 VST.floyd.typecheck_lemmas <> neutral_isCastResultType thm
R65646:65657 VST.floyd.canon <> insert_local thm
R65646:65657 VST.floyd.canon <> insert_local thm
R65646:65657 VST.floyd.canon <> insert_local thm
R65646:65657 VST.floyd.canon <> insert_local thm
R65646:65657 VST.floyd.canon <> insert_local thm
R65666:65675 VST.msl.seplog <> andp_left2 meth
R65666:65675 VST.msl.seplog <> andp_left2 meth
R65690:65701 VST.msl.log_normalize <> andp_derives thm
R65690:65701 VST.msl.log_normalize <> andp_derives thm
R65734:65760 VST.floyd.client_lemmas <> derives_remove_localdef_PQR thm
R65734:65760 VST.floyd.client_lemmas <> derives_remove_localdef_PQR thm
R65799:65815 VST.veric.SeparationLogic <> normal_ret_assert def
R65843:65851 VST.msl.seplog <> exp_right meth
R65843:65851 VST.msl.seplog <> exp_right meth
R65891:65902 VST.floyd.canon <> insert_local thm
R65891:65902 VST.floyd.canon <> insert_local thm
R65891:65902 VST.floyd.canon <> insert_local thm
R65891:65902 VST.floyd.canon <> insert_local thm
R65891:65902 VST.floyd.canon <> insert_local thm
R65949:65958 VST.msl.log_normalize <> andp_assoc thm
R65949:65958 VST.msl.log_normalize <> andp_assoc thm
R65949:65958 VST.msl.log_normalize <> andp_assoc thm
R65949:65958 VST.msl.log_normalize <> andp_assoc thm
R65949:65958 VST.msl.log_normalize <> andp_assoc thm
R65971:65982 VST.msl.log_normalize <> andp_derives thm
R66006:66030 VST.floyd.client_lemmas <> subst_remove_localdef_PQR thm
R65971:65982 VST.msl.log_normalize <> andp_derives thm
R66006:66030 VST.floyd.client_lemmas <> subst_remove_localdef_PQR thm
R66111:66113 Coq.Init.Logic <> ::type_scope:x_'='_x not
R66093:66101 VST.veric.Cop2 <> eqb_ident def
R66114:66118 Coq.Init.Datatypes <> false constr
R66156:66169 VST.veric.Cop2 <> eqb_ident_spec thm
R66200:66208 VST.veric.Cop2 <> eqb_ident def
R66111:66113 Coq.Init.Logic <> ::type_scope:x_'='_x not
R66093:66101 VST.veric.Cop2 <> eqb_ident def
R66114:66118 Coq.Init.Datatypes <> false constr
R66156:66169 VST.veric.Cop2 <> eqb_ident_spec thm
R66200:66208 VST.veric.Cop2 <> eqb_ident def
R66295:66305 Coq.PArith.BinPos Pos eqb_neq thm
R66295:66305 Coq.PArith.BinPos Pos eqb_neq thm
prf 66349:66372 <> semax_call_id1_y_wow_nil
R66388:66396 VST.veric.mpred <> compspecs class
binder 66384:66385 <> cs:1030
binder 66400:66404 <> Qtemp:1031
binder 66406:66409 <> Qvar:1032
binder 66411:66412 <> GV:1033
binder 66414:66414 <> a:1034
binder 66416:66420 <> Delta:1035
binder 66422:66422 <> P:1036
binder 66424:66424 <> Q:1037
binder 66426:66426 <> R:1038
binder 66428:66429 <> R':1039
binder 66434:66435 <> fs:1040
binder 66437:66442 <> argsig:1041
binder 66444:66449 <> retty':1042
binder 66451:66452 <> cc:1043
R66459:66472 VST.veric.rmaps <> TypeTree ind
binder 66456:66456 <> A:1044
binder 66476:66478 <> Pre:1045
binder 66480:66483 <> Post:1046
binder 66485:66489 <> NEPre:1047
binder 66491:66496 <> NEPost:1048
R66512:66546 VST.msl.functors MixVariantFunctor _functor proj
R66589:66593 VST.veric.mpred <> mpred def
R66549:66580 VST.veric.rmaps <> dependent_type_functor_rec def
R66586:66586 VST.floyd.call_lemmas <> A:1044 var
R66582:66584 Coq.Init.Datatypes <> nil constr
binder 66503:66509 <> witness:1049
R66607:66610 Coq.Init.Datatypes <> list ind
R66612:66616 VST.veric.mpred <> mpred def
binder 66600:66604 <> Frame:1050
R66627:66630 Coq.Init.Datatypes <> list ind
R66632:66635 compcert.cfrontend.Clight <> expr ind
binder 66623:66624 <> bl:1051
R66648:66651 Coq.Init.Datatypes <> list ind
binder 66642:66645 <> Ppre:1052
R66666:66669 Coq.Init.Datatypes <> list ind
R66671:66675 VST.veric.mpred <> mpred def
binder 66660:66663 <> Rpre:1053
binder 66682:66684 <> GV':1054
binder 66686:66687 <> gv:1055
binder 66689:66692 <> args:1056
R66704:66707 Coq.Init.Datatypes <> list ind
R66709:66711 compcert.common.Values <> val ind
binder 66699:66700 <> vl:1057
R66725:66739 VST.floyd.call_lemmas <> call_setup2_nil def
R66875:66878 VST.floyd.call_lemmas <> args:1056 var
R66872:66873 VST.floyd.call_lemmas <> gv:1055 var
R66868:66870 VST.floyd.call_lemmas <> GV':1054 var
R66863:66866 VST.floyd.call_lemmas <> Rpre:1053 var
R66858:66861 VST.floyd.call_lemmas <> Ppre:1052 var
R66852:66856 VST.floyd.call_lemmas <> Frame:1050 var
R66844:66850 VST.floyd.call_lemmas <> witness:1049 var
R66822:66823 VST.floyd.call_lemmas <> vl:1057 var
R66819:66820 VST.floyd.call_lemmas <> bl:1051 var
R66812:66817 VST.floyd.call_lemmas <> NEPost:1048 var
R66806:66810 VST.floyd.call_lemmas <> NEPre:1047 var
R66801:66804 VST.floyd.call_lemmas <> Post:1046 var
R66797:66799 VST.floyd.call_lemmas <> Pre:1045 var
R66795:66795 VST.floyd.call_lemmas <> A:1044 var
R66792:66793 VST.floyd.call_lemmas <> cc:1043 var
R66785:66790 VST.floyd.call_lemmas <> retty':1042 var
R66778:66783 VST.floyd.call_lemmas <> argsig:1041 var
R66775:66776 VST.floyd.call_lemmas <> fs:1040 var
R66772:66773 VST.floyd.call_lemmas <> R':1039 var
R66770:66770 VST.floyd.call_lemmas <> R:1038 var
R66768:66768 VST.floyd.call_lemmas <> Q:1037 var
R66766:66766 VST.floyd.call_lemmas <> P:1036 var
R66760:66764 VST.floyd.call_lemmas <> Delta:1035 var
R66758:66758 VST.floyd.call_lemmas <> a:1034 var
R66755:66756 VST.floyd.call_lemmas <> GV:1033 var
R66750:66753 VST.floyd.call_lemmas <> Qvar:1032 var
R66744:66748 VST.floyd.call_lemmas <> Qtemp:1031 var
R66741:66742 VST.floyd.call_lemmas <> cs:1030 var
binder 66718:66722 <> SETUP:1058
binder 66885:66889 <> Espec:1059
binder 66891:66893 <> ret:1060
binder 66895:66898 <> ret':1061
R66908:66911 compcert.cfrontend.Ctypes <> type ind
binder 66901:66905 <> retty:1062
R66943:66946 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R66947:66951 VST.veric.mpred <> mpred def
R66936:66942 VST.veric.mpred <> environ ind
binder 66929:66933 <> Post2:1063
R66974:66977 Coq.Init.Datatypes <> list ind
R66979:66986 VST.floyd.canon <> localdef ind
binder 66968:66971 <> Qnew:1064
binder 67003:67003 <> B:1065
R67034:67037 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R67038:67041 Coq.Init.Datatypes <> list ind
R67033:67033 VST.floyd.call_lemmas <> B:1065 var
binder 67026:67030 <> Ppost:1066
R67067:67070 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R67071:67073 compcert.common.Values <> val ind
R67066:67066 VST.floyd.call_lemmas <> B:1065 var
binder 67063:67063 <> F:1067
R67098:67101 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R67102:67105 Coq.Init.Datatypes <> list ind
R67107:67111 VST.veric.mpred <> mpred def
R67097:67097 VST.floyd.call_lemmas <> B:1065 var
binder 67090:67094 <> Rpost:1068
R67146:67148 Coq.Init.Logic <> ::type_scope:x_'='_x not
R67125:67135 VST.veric.SeparationLogic <> typeof_temp def
R67143:67145 VST.floyd.call_lemmas <> ret:1060 var
R67137:67141 VST.floyd.call_lemmas <> Delta:1035 var
R67149:67152 Coq.Init.Datatypes <> Some constr
R67154:67158 VST.floyd.call_lemmas <> retty:1062 var
binder 67118:67122 <> TYret:1069
R67199:67201 Coq.Init.Logic <> ::type_scope:x_'='_x not
R67174:67174 compcert.lib.Maps <> :::x_'!'_x not
R67191:67194 compcert.lib.Maps <> :::x_'!'_x not
R67195:67198 VST.floyd.call_lemmas <> ret':1061 var
R67175:67184 VST.veric.seplog <> temp_types def
R67186:67190 VST.floyd.call_lemmas <> Delta:1035 var
R67202:67205 Coq.Init.Datatypes <> Some constr
R67207:67212 VST.floyd.call_lemmas <> retty':1042 var
binder 67165:67171 <> RETinit:1070
R67228:67238 VST.floyd.call_lemmas <> check_retty def
R67240:67244 VST.floyd.call_lemmas <> retty:1062 var
binder 67219:67225 <> OKretty:1071
R67261:67271 VST.floyd.call_lemmas <> check_retty def
R67273:67278 VST.floyd.call_lemmas <> retty':1042 var
binder 67251:67258 <> OKretty':1072
R67322:67324 Coq.Init.Logic <> ::type_scope:x_'='_x not
R67294:67308 VST.veric.expr <> is_neutral_cast def
R67317:67321 VST.floyd.call_lemmas <> retty:1062 var
R67310:67315 VST.floyd.call_lemmas <> retty':1042 var
R67325:67328 Coq.Init.Datatypes <> true constr
binder 67285:67291 <> NEUTRAL:1073
R67345:67348 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R67342:67344 VST.floyd.call_lemmas <> ret:1060 var
R67349:67352 VST.floyd.call_lemmas <> ret':1061 var
binder 67335:67339 <> NEret:1074
R67382:67384 Coq.Init.Logic <> ::type_scope:x_'='_x not
R67366:67369 VST.floyd.call_lemmas <> Post:1046 var
R67375:67381 VST.floyd.call_lemmas <> witness:1049 var
R67371:67373 Coq.Init.Datatypes <> nil constr
R67385:67387 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R67394:67395 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R67393:67393 VST.floyd.call_lemmas <> B:1065 var
binder 67388:67391 <> vret:1075
R67396:67400 VST.floyd.canon <> PROPx def
R67446:67451 VST.floyd.canon <> LOCALx def
R67516:67519 VST.floyd.canon <> SEPx def
R67522:67526 VST.floyd.call_lemmas <> Rpost:1068 var
R67528:67531 VST.floyd.call_lemmas <> vret:1075 var
R67476:67479 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R67454:67457 VST.floyd.canon <> temp constr
R67469:67469 VST.floyd.call_lemmas <> F:1067 var
R67471:67474 VST.floyd.call_lemmas <> vret:1075 var
R67459:67466 VST.veric.SeparationLogic <> ret_temp def
R67480:67482 Coq.Init.Datatypes <> nil constr
R67403:67407 VST.floyd.call_lemmas <> Ppost:1066 var
R67409:67412 VST.floyd.call_lemmas <> vret:1075 var
binder 67359:67363 <> POST1:1076
R67575:67577 Coq.Init.Logic <> ::type_scope:x_'='_x not
R67549:67568 VST.floyd.client_lemmas <> remove_localdef_temp def
R67574:67574 VST.floyd.call_lemmas <> Q:1037 var
R67570:67572 VST.floyd.call_lemmas <> ret:1060 var
R67578:67581 VST.floyd.call_lemmas <> Qnew:1064 var
binder 67541:67546 <> DELETE:1077
R67625:67627 Coq.Init.Logic <> ::type_scope:x_'='_x not
R67598:67617 VST.floyd.client_lemmas <> remove_localdef_temp def
R67624:67624 VST.floyd.call_lemmas <> Q:1037 var
R67619:67622 VST.floyd.call_lemmas <> ret':1061 var
R67628:67628 VST.floyd.call_lemmas <> Q:1037 var
binder 67588:67594 <> DELETE':1078
R67644:67646 Coq.Init.Logic <> ::type_scope:x_'='_x not
R67639:67643 VST.floyd.call_lemmas <> Post2:1063 var
R67647:67649 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R67656:67657 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R67655:67655 VST.floyd.call_lemmas <> B:1065 var
binder 67650:67653 <> vret:1079
R67658:67662 VST.floyd.canon <> PROPx def
R67701:67706 VST.floyd.canon <> LOCALx def
R67757:67760 VST.floyd.canon <> SEPx def
R67773:67776 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R67763:67767 VST.floyd.call_lemmas <> Rpost:1068 var
R67769:67772 VST.floyd.call_lemmas <> vret:1079 var
R67777:67781 VST.floyd.call_lemmas <> Frame:1050 var
R67726:67729 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R67709:67712 VST.floyd.canon <> temp constr
R67719:67719 VST.floyd.call_lemmas <> F:1067 var
R67721:67724 VST.floyd.call_lemmas <> vret:1079 var
R67714:67716 VST.floyd.call_lemmas <> ret:1060 var
R67730:67733 VST.floyd.call_lemmas <> Qnew:1064 var
R67666:67668 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R67665:67665 VST.floyd.call_lemmas <> P:1036 var
R67669:67673 VST.floyd.call_lemmas <> Ppost:1066 var
R67675:67678 VST.floyd.call_lemmas <> vret:1079 var
binder 67635:67636 <> H0:1080
R67797:67810 VST.floyd.client_lemmas <> fold_right_and def
R67817:67820 VST.floyd.call_lemmas <> Ppre:1052 var
R67812:67815 Coq.Init.Logic <> True ind
binder 67791:67794 <> PPRE:1081
R67828:67832 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R67965:67981 VST.veric.SeparationLogic <> normal_ret_assert def
R67983:67987 VST.floyd.call_lemmas <> Post2:1063 var
R67884:67892 compcert.cfrontend.Clight <> Ssequence constr
R67926:67929 compcert.cfrontend.Clight <> Sset constr
R67936:67943 compcert.cfrontend.Clight <> Etempvar constr
R67950:67955 VST.floyd.call_lemmas <> retty':1042 var
R67945:67948 VST.floyd.call_lemmas <> ret':1061 var
R67931:67933 VST.floyd.call_lemmas <> ret:1060 var
R67895:67899 compcert.cfrontend.Clight <> Scall constr
R67915:67916 VST.floyd.call_lemmas <> bl:1051 var
R67913:67913 VST.floyd.call_lemmas <> a:1034 var
R67902:67905 Coq.Init.Datatypes <> Some constr
R67907:67910 VST.floyd.call_lemmas <> ret':1061 var
R67850:67854 VST.floyd.canon <> PROPx def
R67859:67864 VST.floyd.canon <> LOCALx def
R67869:67872 VST.floyd.canon <> SEPx def
R67874:67875 VST.floyd.call_lemmas <> R':1039 var
R67866:67866 VST.floyd.call_lemmas <> Q:1037 var
R67856:67856 VST.floyd.call_lemmas <> P:1036 var
R67843:67847 VST.floyd.call_lemmas <> Delta:1035 var
R67837:67841 VST.floyd.call_lemmas <> Espec:1059 var
R67834:67835 VST.floyd.call_lemmas <> cs:1030 var
R68014:68034 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R68014:68034 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R68014:68034 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R68053:68072 VST.floyd.call_lemmas <> semax_call_id1_y_wow thm
R68053:68072 VST.floyd.call_lemmas <> semax_call_id1_y_wow thm
prf 68100:68118 <> semax_call_id01_wow
R68134:68142 VST.veric.mpred <> compspecs class
binder 68130:68131 <> cs:1082
binder 68146:68150 <> Qtemp:1083
binder 68152:68155 <> Qvar:1084
binder 68157:68158 <> GV:1085
binder 68160:68160 <> a:1086
binder 68162:68166 <> Delta:1087
binder 68168:68168 <> P:1088
binder 68170:68170 <> Q:1089
binder 68172:68172 <> R:1090
binder 68174:68175 <> R':1091
binder 68180:68181 <> fs:1092
binder 68183:68188 <> argsig:1093
binder 68190:68194 <> retty:1094
binder 68196:68197 <> cc:1095
binder 68199:68200 <> ts:1096
R68207:68220 VST.veric.rmaps <> TypeTree ind
binder 68204:68204 <> A:1097
binder 68224:68226 <> Pre:1098
binder 68228:68231 <> Post:1099
binder 68233:68237 <> NEPre:1100
binder 68239:68244 <> NEPost:1101
R68260:68294 VST.msl.functors MixVariantFunctor _functor proj
R68336:68340 VST.veric.mpred <> mpred def
R68297:68328 VST.veric.rmaps <> dependent_type_functor_rec def
R68333:68333 VST.floyd.call_lemmas <> A:1097 var
R68330:68331 VST.floyd.call_lemmas <> ts:1096 var
binder 68251:68257 <> witness:1102
R68354:68357 Coq.Init.Datatypes <> list ind
R68359:68363 VST.veric.mpred <> mpred def
binder 68347:68351 <> Frame:1103
R68374:68377 Coq.Init.Datatypes <> list ind
R68379:68382 compcert.cfrontend.Clight <> expr ind
binder 68370:68371 <> bl:1104
R68395:68398 Coq.Init.Datatypes <> list ind
binder 68389:68392 <> Ppre:1105
R68440:68443 Coq.Init.Datatypes <> list ind
R68445:68449 VST.veric.mpred <> mpred def
binder 68434:68437 <> Rpre:1106
binder 68493:68495 <> GV':1107
binder 68497:68498 <> gv:1108
binder 68500:68503 <> args:1109
R68515:68518 Coq.Init.Datatypes <> list ind
R68520:68522 compcert.common.Values <> val ind
binder 68510:68511 <> vl:1110
R68536:68546 VST.floyd.call_lemmas <> call_setup2 def
R68707:68710 VST.floyd.call_lemmas <> args:1109 var
R68704:68705 VST.floyd.call_lemmas <> gv:1108 var
R68700:68702 VST.floyd.call_lemmas <> GV':1107 var
R68681:68684 VST.floyd.call_lemmas <> Rpre:1106 var
R68667:68670 VST.floyd.call_lemmas <> Ppre:1105 var
R68661:68665 VST.floyd.call_lemmas <> Frame:1103 var
R68653:68659 VST.floyd.call_lemmas <> witness:1102 var
R68631:68632 VST.floyd.call_lemmas <> vl:1110 var
R68628:68629 VST.floyd.call_lemmas <> bl:1104 var
R68621:68626 VST.floyd.call_lemmas <> NEPost:1101 var
R68615:68619 VST.floyd.call_lemmas <> NEPre:1100 var
R68610:68613 VST.floyd.call_lemmas <> Post:1099 var
R68606:68608 VST.floyd.call_lemmas <> Pre:1098 var
R68604:68604 VST.floyd.call_lemmas <> A:1097 var
R68601:68602 VST.floyd.call_lemmas <> ts:1096 var
R68598:68599 VST.floyd.call_lemmas <> cc:1095 var
R68592:68596 VST.floyd.call_lemmas <> retty:1094 var
R68585:68590 VST.floyd.call_lemmas <> argsig:1093 var
R68582:68583 VST.floyd.call_lemmas <> fs:1092 var
R68579:68580 VST.floyd.call_lemmas <> R':1091 var
R68577:68577 VST.floyd.call_lemmas <> R:1090 var
R68575:68575 VST.floyd.call_lemmas <> Q:1089 var
R68573:68573 VST.floyd.call_lemmas <> P:1088 var
R68567:68571 VST.floyd.call_lemmas <> Delta:1087 var
R68565:68565 VST.floyd.call_lemmas <> a:1086 var
R68562:68563 VST.floyd.call_lemmas <> GV:1085 var
R68557:68560 VST.floyd.call_lemmas <> Qvar:1084 var
R68551:68555 VST.floyd.call_lemmas <> Qtemp:1083 var
R68548:68549 VST.floyd.call_lemmas <> cs:1082 var
binder 68529:68533 <> SETUP:1111
binder 68716:68720 <> Espec:1112
R68750:68753 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R68754:68758 VST.veric.mpred <> mpred def
R68743:68749 VST.veric.mpred <> environ ind
binder 68736:68740 <> Post2:1113
binder 68775:68775 <> B:1114
R68806:68809 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R68810:68813 Coq.Init.Datatypes <> list ind
R68805:68805 VST.floyd.call_lemmas <> B:1114 var
binder 68798:68802 <> Ppost:1115
R68839:68842 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R68843:68845 compcert.common.Values <> val ind
R68838:68838 VST.floyd.call_lemmas <> B:1114 var
binder 68835:68835 <> F:1116
R68870:68873 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R68874:68877 Coq.Init.Datatypes <> list ind
R68879:68883 VST.veric.mpred <> mpred def
R68869:68869 VST.floyd.call_lemmas <> B:1114 var
binder 68862:68866 <> Rpost:1117
R68893:68903 VST.floyd.call_lemmas <> check_retty def
R68905:68909 VST.floyd.call_lemmas <> retty:1094 var
R69019:69021 Coq.Init.Logic <> ::type_scope:x_'='_x not
R69004:69007 VST.floyd.call_lemmas <> Post:1099 var
R69012:69018 VST.floyd.call_lemmas <> witness:1102 var
R69009:69010 VST.floyd.call_lemmas <> ts:1096 var
R69022:69024 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69031:69032 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69030:69030 VST.floyd.call_lemmas <> B:1114 var
binder 69025:69028 <> vret:1118
R69033:69037 VST.floyd.canon <> PROPx def
R69083:69088 VST.floyd.canon <> LOCALx def
R69153:69156 VST.floyd.canon <> SEPx def
R69159:69163 VST.floyd.call_lemmas <> Rpost:1117 var
R69165:69168 VST.floyd.call_lemmas <> vret:1118 var
R69113:69116 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R69091:69094 VST.floyd.canon <> temp constr
R69106:69106 VST.floyd.call_lemmas <> F:1116 var
R69108:69111 VST.floyd.call_lemmas <> vret:1118 var
R69096:69103 VST.veric.SeparationLogic <> ret_temp def
R69117:69119 Coq.Init.Datatypes <> nil constr
R69040:69044 VST.floyd.call_lemmas <> Ppost:1115 var
R69046:69049 VST.floyd.call_lemmas <> vret:1118 var
binder 68997:69001 <> POST1:1119
R69190:69192 Coq.Init.Logic <> ::type_scope:x_'='_x not
R69185:69189 VST.floyd.call_lemmas <> Post2:1113 var
R69193:69195 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69202:69203 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R69201:69201 VST.floyd.call_lemmas <> B:1114 var
binder 69196:69199 <> vret:1120
R69204:69208 VST.floyd.canon <> PROPx def
R69228:69233 VST.floyd.canon <> LOCALx def
R69251:69254 VST.floyd.canon <> SEPx def
R69267:69270 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R69257:69261 VST.floyd.call_lemmas <> Rpost:1117 var
R69263:69266 VST.floyd.call_lemmas <> vret:1120 var
R69271:69275 VST.floyd.call_lemmas <> Frame:1103 var
R69235:69235 VST.floyd.call_lemmas <> Q:1089 var
R69212:69214 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R69211:69211 VST.floyd.call_lemmas <> P:1088 var
R69215:69219 VST.floyd.call_lemmas <> Ppost:1115 var
R69221:69224 VST.floyd.call_lemmas <> vret:1120 var
binder 69178:69182 <> POST2:1121
R69291:69304 VST.floyd.client_lemmas <> fold_right_and def
R69311:69314 VST.floyd.call_lemmas <> Ppre:1105 var
R69306:69309 Coq.Init.Logic <> True ind
binder 69285:69288 <> PPRE:1122
R69322:69326 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R69401:69417 VST.veric.SeparationLogic <> normal_ret_assert def
R69419:69423 VST.floyd.call_lemmas <> Post2:1113 var
R69379:69383 compcert.cfrontend.Clight <> Scall constr
R69392:69393 VST.floyd.call_lemmas <> bl:1104 var
R69390:69390 VST.floyd.call_lemmas <> a:1086 var
R69385:69388 Coq.Init.Datatypes <> None constr
R69344:69348 VST.floyd.canon <> PROPx def
R69353:69358 VST.floyd.canon <> LOCALx def
R69363:69366 VST.floyd.canon <> SEPx def
R69368:69369 VST.floyd.call_lemmas <> R':1091 var
R69360:69360 VST.floyd.call_lemmas <> Q:1089 var
R69350:69350 VST.floyd.call_lemmas <> P:1088 var
R69337:69341 VST.floyd.call_lemmas <> Delta:1087 var
R69331:69335 VST.floyd.call_lemmas <> Espec:1112 var
R69328:69329 VST.floyd.call_lemmas <> cs:1082 var
R69622:69637 VST.floyd.call_lemmas <> semax_pre_setup2 thm
R69622:69637 VST.floyd.call_lemmas <> semax_pre_setup2 thm
R69684:69687 VST.msl.seplog <> ::logic:x_'&&'_x not
R69669:69675 VST.veric.SeparationLogic <> tc_expr def
R69688:69698 VST.veric.SeparationLogic <> tc_exprlist def
R69684:69687 VST.msl.seplog <> ::logic:x_'&&'_x not
R69669:69675 VST.veric.SeparationLogic <> tc_expr def
R69688:69698 VST.veric.SeparationLogic <> tc_exprlist def
R69741:69750 VST.msl.log_normalize <> andp_assoc thm
R69741:69750 VST.msl.log_normalize <> andp_assoc thm
R69741:69750 VST.msl.log_normalize <> andp_assoc thm
R69741:69750 VST.msl.log_normalize <> andp_assoc thm
R69741:69750 VST.msl.log_normalize <> andp_assoc thm
R69741:69750 VST.msl.log_normalize <> andp_assoc thm
R69762:69779 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R69762:69779 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R69798:69815 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R69798:69815 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic semax_extract_prop prfax
R69836:69844 VST.msl.log_normalize <> andp_comm thm
R69836:69844 VST.msl.log_normalize <> andp_comm thm
R69836:69844 VST.msl.log_normalize <> andp_comm thm
R69859:69873 VST.floyd.canon <> semax_pre_post' thm
R69898:69908 VST.floyd.call_lemmas <> semax_call0 thm
R69859:69873 VST.floyd.canon <> semax_pre_post' thm
R69898:69908 VST.floyd.call_lemmas <> semax_call0 thm
R70077:70092 VST.floyd.call_lemmas <> semax_call_aux55 thm
R70077:70092 VST.floyd.call_lemmas <> semax_call_aux55 thm
R70243:70248 VST.floyd.call_lemmas <> ifvoid def
R70243:70248 VST.floyd.call_lemmas <> ifvoid def
R70285:70290 VST.floyd.call_lemmas <> ifvoid def
R70285:70290 VST.floyd.call_lemmas <> ifvoid def
R70406:70414 VST.msl.seplog <> exp_right meth
R70406:70414 VST.msl.seplog <> exp_right meth
R70446:70455 VST.msl.seplog <> andp_right meth
R70446:70455 VST.msl.seplog <> andp_right meth
R70474:70483 VST.msl.seplog <> prop_right meth
R70474:70483 VST.msl.seplog <> prop_right meth
R70498:70519 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R70498:70519 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R70498:70519 VST.floyd.call_lemmas <> fold_right_and_app_low thm
R70583:70603 VST.floyd.canon <> fold_right_sepcon_app thm
R70583:70603 VST.floyd.canon <> fold_right_sepcon_app thm
R70583:70603 VST.floyd.canon <> fold_right_sepcon_app thm
prf 70624:70646 <> semax_call_id01_wow_nil
R70662:70670 VST.veric.mpred <> compspecs class
binder 70658:70659 <> cs:1123
binder 70674:70678 <> Qtemp:1124
binder 70680:70683 <> Qvar:1125
binder 70685:70686 <> GV:1126
binder 70688:70688 <> a:1127
binder 70690:70694 <> Delta:1128
binder 70696:70696 <> P:1129
binder 70698:70698 <> Q:1130
binder 70700:70700 <> R:1131
binder 70702:70703 <> R':1132
binder 70708:70709 <> fs:1133
binder 70711:70716 <> argsig:1134
binder 70718:70722 <> retty:1135
binder 70724:70725 <> cc:1136
R70732:70745 VST.veric.rmaps <> TypeTree ind
binder 70729:70729 <> A:1137
binder 70749:70751 <> Pre:1138
binder 70753:70756 <> Post:1139
binder 70758:70762 <> NEPre:1140
binder 70764:70769 <> NEPost:1141
R70785:70819 VST.msl.functors MixVariantFunctor _functor proj
R70862:70866 VST.veric.mpred <> mpred def
R70822:70853 VST.veric.rmaps <> dependent_type_functor_rec def
R70859:70859 VST.floyd.call_lemmas <> A:1137 var
R70855:70857 Coq.Init.Datatypes <> nil constr
binder 70776:70782 <> witness:1142
R70880:70883 Coq.Init.Datatypes <> list ind
R70885:70889 VST.veric.mpred <> mpred def
binder 70873:70877 <> Frame:1143
R70900:70903 Coq.Init.Datatypes <> list ind
R70905:70908 compcert.cfrontend.Clight <> expr ind
binder 70896:70897 <> bl:1144
R70921:70924 Coq.Init.Datatypes <> list ind
binder 70915:70918 <> Ppre:1145
R70939:70942 Coq.Init.Datatypes <> list ind
R70944:70948 VST.veric.mpred <> mpred def
binder 70933:70936 <> Rpre:1146
binder 70955:70957 <> GV':1147
binder 70959:70960 <> gv:1148
binder 70962:70965 <> args:1149
R70977:70980 Coq.Init.Datatypes <> list ind
R70982:70984 compcert.common.Values <> val ind
binder 70972:70973 <> vl:1150
R70998:71012 VST.floyd.call_lemmas <> call_setup2_nil def
R71147:71150 VST.floyd.call_lemmas <> args:1149 var
R71144:71145 VST.floyd.call_lemmas <> gv:1148 var
R71140:71142 VST.floyd.call_lemmas <> GV':1147 var
R71135:71138 VST.floyd.call_lemmas <> Rpre:1146 var
R71130:71133 VST.floyd.call_lemmas <> Ppre:1145 var
R71124:71128 VST.floyd.call_lemmas <> Frame:1143 var
R71116:71122 VST.floyd.call_lemmas <> witness:1142 var
R71094:71095 VST.floyd.call_lemmas <> vl:1150 var
R71091:71092 VST.floyd.call_lemmas <> bl:1144 var
R71084:71089 VST.floyd.call_lemmas <> NEPost:1141 var
R71078:71082 VST.floyd.call_lemmas <> NEPre:1140 var
R71073:71076 VST.floyd.call_lemmas <> Post:1139 var
R71069:71071 VST.floyd.call_lemmas <> Pre:1138 var
R71067:71067 VST.floyd.call_lemmas <> A:1137 var
R71064:71065 VST.floyd.call_lemmas <> cc:1136 var
R71058:71062 VST.floyd.call_lemmas <> retty:1135 var
R71051:71056 VST.floyd.call_lemmas <> argsig:1134 var
R71048:71049 VST.floyd.call_lemmas <> fs:1133 var
R71045:71046 VST.floyd.call_lemmas <> R':1132 var
R71043:71043 VST.floyd.call_lemmas <> R:1131 var
R71041:71041 VST.floyd.call_lemmas <> Q:1130 var
R71039:71039 VST.floyd.call_lemmas <> P:1129 var
R71033:71037 VST.floyd.call_lemmas <> Delta:1128 var
R71031:71031 VST.floyd.call_lemmas <> a:1127 var
R71028:71029 VST.floyd.call_lemmas <> GV:1126 var
R71023:71026 VST.floyd.call_lemmas <> Qvar:1125 var
R71017:71021 VST.floyd.call_lemmas <> Qtemp:1124 var
R71014:71015 VST.floyd.call_lemmas <> cs:1123 var
binder 70991:70995 <> SETUP:1151
binder 71156:71160 <> Espec:1152
R71190:71193 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R71194:71198 VST.veric.mpred <> mpred def
R71183:71189 VST.veric.mpred <> environ ind
binder 71176:71180 <> Post2:1153
binder 71215:71215 <> B:1154
R71246:71249 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R71250:71253 Coq.Init.Datatypes <> list ind
R71245:71245 VST.floyd.call_lemmas <> B:1154 var
binder 71238:71242 <> Ppost:1155
R71279:71282 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R71283:71285 compcert.common.Values <> val ind
R71278:71278 VST.floyd.call_lemmas <> B:1154 var
binder 71275:71275 <> F:1156
R71310:71313 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R71314:71317 Coq.Init.Datatypes <> list ind
R71319:71323 VST.veric.mpred <> mpred def
R71309:71309 VST.floyd.call_lemmas <> B:1154 var
binder 71302:71306 <> Rpost:1157
R71333:71343 VST.floyd.call_lemmas <> check_retty def
R71345:71349 VST.floyd.call_lemmas <> retty:1135 var
R71460:71462 Coq.Init.Logic <> ::type_scope:x_'='_x not
R71444:71447 VST.floyd.call_lemmas <> Post:1139 var
R71453:71459 VST.floyd.call_lemmas <> witness:1142 var
R71449:71451 Coq.Init.Datatypes <> nil constr
R71463:71465 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R71472:71473 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R71471:71471 VST.floyd.call_lemmas <> B:1154 var
binder 71466:71469 <> vret:1158
R71474:71478 VST.floyd.canon <> PROPx def
R71524:71529 VST.floyd.canon <> LOCALx def
R71594:71597 VST.floyd.canon <> SEPx def
R71600:71604 VST.floyd.call_lemmas <> Rpost:1157 var
R71606:71609 VST.floyd.call_lemmas <> vret:1158 var
R71554:71557 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R71532:71535 VST.floyd.canon <> temp constr
R71547:71547 VST.floyd.call_lemmas <> F:1156 var
R71549:71552 VST.floyd.call_lemmas <> vret:1158 var
R71537:71544 VST.veric.SeparationLogic <> ret_temp def
R71558:71560 Coq.Init.Datatypes <> nil constr
R71481:71485 VST.floyd.call_lemmas <> Ppost:1155 var
R71487:71490 VST.floyd.call_lemmas <> vret:1158 var
binder 71437:71441 <> POST1:1159
R71631:71633 Coq.Init.Logic <> ::type_scope:x_'='_x not
R71626:71630 VST.floyd.call_lemmas <> Post2:1153 var
R71634:71636 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R71643:71644 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R71642:71642 VST.floyd.call_lemmas <> B:1154 var
binder 71637:71640 <> vret:1160
R71645:71649 VST.floyd.canon <> PROPx def
R71669:71674 VST.floyd.canon <> LOCALx def
R71692:71695 VST.floyd.canon <> SEPx def
R71708:71711 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R71698:71702 VST.floyd.call_lemmas <> Rpost:1157 var
R71704:71707 VST.floyd.call_lemmas <> vret:1160 var
R71712:71716 VST.floyd.call_lemmas <> Frame:1143 var
R71676:71676 VST.floyd.call_lemmas <> Q:1130 var
R71653:71655 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R71652:71652 VST.floyd.call_lemmas <> P:1129 var
R71656:71660 VST.floyd.call_lemmas <> Ppost:1155 var
R71662:71665 VST.floyd.call_lemmas <> vret:1160 var
binder 71619:71623 <> POST2:1161
R71732:71745 VST.floyd.client_lemmas <> fold_right_and def
R71752:71755 VST.floyd.call_lemmas <> Ppre:1145 var
R71747:71750 Coq.Init.Logic <> True ind
binder 71726:71729 <> PPRE:1162
R71763:71767 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R71842:71858 VST.veric.SeparationLogic <> normal_ret_assert def
R71860:71864 VST.floyd.call_lemmas <> Post2:1153 var
R71820:71824 compcert.cfrontend.Clight <> Scall constr
R71833:71834 VST.floyd.call_lemmas <> bl:1144 var
R71831:71831 VST.floyd.call_lemmas <> a:1127 var
R71826:71829 Coq.Init.Datatypes <> None constr
R71785:71789 VST.floyd.canon <> PROPx def
R71794:71799 VST.floyd.canon <> LOCALx def
R71804:71807 VST.floyd.canon <> SEPx def
R71809:71810 VST.floyd.call_lemmas <> R':1132 var
R71801:71801 VST.floyd.call_lemmas <> Q:1130 var
R71791:71791 VST.floyd.call_lemmas <> P:1129 var
R71778:71782 VST.floyd.call_lemmas <> Delta:1128 var
R71772:71776 VST.floyd.call_lemmas <> Espec:1152 var
R71769:71770 VST.floyd.call_lemmas <> cs:1123 var
R71891:71911 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R71891:71911 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R71891:71911 VST.floyd.call_lemmas <> call_setup2_nil_equiv thm
R71930:71948 VST.floyd.call_lemmas <> semax_call_id01_wow thm
R71930:71948 VST.floyd.call_lemmas <> semax_call_id01_wow thm
prf 71976:71997 <> match_funcptr'_funcptr
binder 72008:72009 <> fs:1163
binder 72011:72011 <> v:1164
binder 72013:72013 <> B:1165
R72037:72041 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R72033:72035 VST.msl.seplog <> ::logic:x_'*'_x not
R72019:72027 VST.floyd.client_lemmas <> func_ptr' def
R72032:72032 VST.floyd.call_lemmas <> v:1164 var
R72029:72030 VST.floyd.call_lemmas <> fs:1163 var
R72036:72036 VST.floyd.call_lemmas <> B:1165 var
R72042:72049 VST.veric.SeparationLogic <> func_ptr def
R72054:72054 VST.floyd.call_lemmas <> v:1164 var
R72051:72052 VST.floyd.call_lemmas <> fs:1163 var
R72079:72087 VST.floyd.client_lemmas <> func_ptr' def
R72129:72144 VST.veric.SeparationLogic <> corable_func_ptr thm
R72099:72118 VST.msl.seplog <> corable_andp_sepcon1 meth
R72099:72118 VST.msl.seplog <> corable_andp_sepcon1 meth
R72129:72144 VST.veric.SeparationLogic <> corable_func_ptr thm
R72099:72118 VST.msl.seplog <> corable_andp_sepcon1 meth
R72153:72162 VST.msl.seplog <> andp_left1 meth
R72153:72162 VST.msl.seplog <> andp_left1 meth
prf 72183:72206 <> nomatch_funcptr'_funcptr
binder 72218:72219 <> fs:1166
binder 72221:72221 <> v:1167
binder 72223:72223 <> A:1168
binder 72225:72225 <> B:1169
R72250:72255 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R72261:72265 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R72257:72259 VST.msl.seplog <> ::logic:x_'*'_x not
R72256:72256 VST.floyd.call_lemmas <> A:1168 var
R72260:72260 VST.floyd.call_lemmas <> B:1169 var
R72266:72273 VST.veric.SeparationLogic <> func_ptr def
R72278:72278 VST.floyd.call_lemmas <> v:1167 var
R72275:72276 VST.floyd.call_lemmas <> fs:1166 var
R72232:72236 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R72231:72231 VST.floyd.call_lemmas <> B:1169 var
R72237:72244 VST.veric.SeparationLogic <> func_ptr def
R72249:72249 VST.floyd.call_lemmas <> v:1167 var
R72246:72247 VST.floyd.call_lemmas <> fs:1166 var
R72308:72324 VST.msl.log_normalize <> corable_sepcon_TT thm
R72329:72344 VST.veric.SeparationLogic <> corable_func_ptr thm
R72308:72324 VST.msl.log_normalize <> corable_sepcon_TT thm
R72329:72344 VST.veric.SeparationLogic <> corable_func_ptr thm
R72308:72324 VST.msl.log_normalize <> corable_sepcon_TT thm
R72329:72344 VST.veric.SeparationLogic <> corable_func_ptr thm
R72362:72372 VST.msl.seplog <> sepcon_comm meth
R72362:72372 VST.msl.seplog <> sepcon_comm meth
R72362:72372 VST.msl.seplog <> sepcon_comm meth
R72381:72394 VST.msl.seplog <> sepcon_derives meth
R72381:72394 VST.msl.seplog <> sepcon_derives meth
R72461:72482 VST.floyd.call_lemmas <> match_funcptr'_funcptr thm
R72508:72531 VST.floyd.call_lemmas <> nomatch_funcptr'_funcptr thm
R72627:72631 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R72607:72623 VST.floyd.base <> fold_right_sepcon def
R72632:72639 VST.veric.SeparationLogic <> func_ptr def
R72627:72631 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R72607:72623 VST.floyd.base <> fold_right_sepcon def
R72632:72639 VST.veric.SeparationLogic <> func_ptr def
R72679:72687 VST.floyd.client_lemmas <> func_ptr' def
R72679:72687 VST.floyd.client_lemmas <> func_ptr' def
R72749:72765 VST.floyd.base <> fold_right_sepcon def
def 72808:72817 <> eq_no_post
R72825:72827 compcert.common.Values <> val ind
binder 72820:72820 <> x:1170
binder 72822:72822 <> v:1171
R72841:72841 Coq.Init.Logic <> ::type_scope:x_'='_x not
R72840:72840 VST.floyd.call_lemmas <> x:1170 var
R72842:72842 VST.floyd.call_lemmas <> v:1171 var
prf 73002:73015 <> no_post_exists
binder 73026:73026 <> v:1172
binder 73028:73028 <> P:1173
binder 73030:73030 <> Q:1174
binder 73032:73032 <> R:1175
R73086:73091 Coq.Init.Logic <> ::type_scope:x_'='_x not
R73038:73042 VST.floyd.canon <> PROPx def
R73047:73052 VST.floyd.canon <> LOCALx def
R73078:73081 VST.floyd.canon <> SEPx def
R73083:73083 VST.floyd.call_lemmas <> R:1175 var
R73070:73073 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R73055:73058 VST.floyd.canon <> temp constr
R73069:73069 VST.floyd.call_lemmas <> v:1172 var
R73060:73067 VST.veric.SeparationLogic <> ret_temp def
R73074:73074 VST.floyd.call_lemmas <> Q:1174 var
R73044:73044 VST.floyd.call_lemmas <> P:1173 var
R73092:73094 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R73100:73101 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R73097:73099 compcert.common.Values <> val ind
binder 73095:73095 <> x:1176
R73102:73106 VST.floyd.canon <> PROPx def
R73131:73136 VST.floyd.canon <> LOCALx def
R73162:73165 VST.floyd.canon <> SEPx def
R73167:73167 VST.floyd.call_lemmas <> R:1175 var
R73154:73157 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R73139:73142 VST.floyd.canon <> temp constr
R73153:73153 VST.floyd.call_lemmas <> x:1176 var
R73144:73151 VST.veric.SeparationLogic <> ret_temp def
R73158:73158 VST.floyd.call_lemmas <> Q:1174 var
R73123:73126 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R73109:73118 VST.floyd.call_lemmas <> eq_no_post def
R73122:73122 VST.floyd.call_lemmas <> v:1172 var
R73120:73120 VST.floyd.call_lemmas <> x:1176 var
R73127:73127 VST.floyd.call_lemmas <> P:1173 var
R73194:73203 VST.floyd.call_lemmas <> eq_no_post def
R73212:73219 VST.msl.seplog <> pred_ext meth
R73212:73219 VST.msl.seplog <> pred_ext meth
R73228:73236 VST.msl.seplog <> exp_right meth
R73228:73236 VST.msl.seplog <> exp_right meth
R73252:73263 VST.msl.log_normalize <> andp_derives thm
R73252:73263 VST.msl.log_normalize <> andp_derives thm
R73278:73289 VST.msl.log_normalize <> prop_derives thm
R73278:73289 VST.msl.log_normalize <> prop_derives thm
R73316:73323 VST.msl.seplog <> exp_left meth
R73316:73323 VST.msl.seplog <> exp_left meth
R73340:73344 VST.floyd.canon <> PROPx def
prf 73388:73402 <> no_post_exists0
binder 73413:73413 <> P:1177
binder 73415:73415 <> Q:1178
binder 73417:73417 <> R:1179
R73450:73455 Coq.Init.Logic <> ::type_scope:x_'='_x not
R73423:73427 VST.floyd.canon <> PROPx def
R73432:73437 VST.floyd.canon <> LOCALx def
R73442:73445 VST.floyd.canon <> SEPx def
R73447:73447 VST.floyd.call_lemmas <> R:1179 var
R73439:73439 VST.floyd.call_lemmas <> Q:1178 var
R73429:73429 VST.floyd.call_lemmas <> P:1177 var
R73456:73458 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R73465:73466 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R73461:73464 Coq.Init.Datatypes <> unit ind
binder 73459:73459 <> x:1180
R73467:73471 VST.floyd.canon <> PROPx def
R73491:73496 VST.floyd.canon <> LOCALx def
R73501:73504 VST.floyd.canon <> SEPx def
R73517:73517 VST.floyd.call_lemmas <> R:1179 var
R73520:73520 VST.floyd.call_lemmas <> x:1180 var
R73498:73498 VST.floyd.call_lemmas <> Q:1178 var
R73484:73484 VST.floyd.call_lemmas <> P:1177 var
R73487:73487 VST.floyd.call_lemmas <> x:1180 var
R73547:73554 VST.msl.seplog <> pred_ext meth
R73547:73554 VST.msl.seplog <> pred_ext meth
R73578:73579 Coq.Init.Datatypes <> tt constr
R73563:73571 VST.msl.seplog <> exp_right meth
R73578:73579 Coq.Init.Datatypes <> tt constr
R73563:73571 VST.msl.seplog <> exp_right meth
R73588:73599 VST.msl.log_normalize <> andp_derives thm
R73588:73599 VST.msl.log_normalize <> andp_derives thm
R73614:73621 VST.msl.seplog <> exp_left meth
R73614:73621 VST.msl.seplog <> exp_left meth
